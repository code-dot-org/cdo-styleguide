/*! For license information please see 917.d485b466.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[917],{"./node_modules/clsx/dist/clsx.m.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{clsx:()=>clsx,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=clsx},"./node_modules/intro.js/intro.module.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(t,e,n,o){return new(n||(n=Promise))((function(i,r){function s(t){try{l(o.next(t))}catch(t){r(t)}}function a(t){try{l(o.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}l((o=o.apply(t,e||[])).next())}))}function n(t,e){var n,o,i,r,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,o&&(i=2&a[0]?o.return:a[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,a[1])).done)return i;switch(o=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,o=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],o=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}}function o(t,e,n){var o,r=((o={})[t]=e,o.path="/",o.expires=void 0,o);if(n){var s=new Date;s.setTime(s.getTime()+24*n*60*60*1e3),r.expires=s.toUTCString()}var a=[];for(var l in r)a.push("".concat(l,"=").concat(r[l]));return document.cookie=a.join("; "),i(t)}function i(t){return(e={},document.cookie.split(";").forEach((function(t){var n=t.split("="),o=n[0],i=n[1];e[o.trim()]=i})),e)[t];var e}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>rt}),"function"==typeof SuppressedError&&SuppressedError;var s,a=(s={},function(t,e){return void 0===e&&(e="introjs-stamp"),s[e]=s[e]||0,void 0===t[e]&&(t[e]=s[e]++),t[e]}),l=new(function(){function t(){this.events_key="introjs_event"}return t.prototype._id=function(t,e,n){return t+a(e)+(n?"_".concat(a(n)):"")},t.prototype.on=function(t,e,n,o,i){var r=this._id(e,n,o),s=function(e){return n(o||t,e||window.event)};"addEventListener"in t?t.addEventListener(e,s,i):"attachEvent"in t&&t.attachEvent("on".concat(e),s),t[this.events_key]=t[this.events_key]||{},t[this.events_key][r]=s},t.prototype.off=function(t,e,n,o,i){var r=this._id(e,n,o),s=t[this.events_key]&&t[this.events_key][r];s&&("removeEventListener"in t?t.removeEventListener(e,s,i):"detachEvent"in t&&t.detachEvent("on".concat(e),s),t[this.events_key][r]=null)},t}()),c=function(t){return"function"==typeof t};function u(t,e){if(t instanceof SVGElement){var n=t.getAttribute("class")||"";n.match(e)||t.setAttribute("class","".concat(n," ").concat(e))}else if(void 0!==t.classList)for(var o=0,i=e.split(" ");o<i.length;o++){var r=i[o];t.classList.add(r)}else t.className.match(e)||(t.className+=" ".concat(e))}function p(t,e){var n="";return"currentStyle"in t?n=t.currentStyle[e]:document.defaultView&&document.defaultView.getComputedStyle&&(n=document.defaultView.getComputedStyle(t,null).getPropertyValue(e)),n&&n.toLowerCase?n.toLowerCase():n}function h(t,e){if(t){var n=function(t){var e=window.getComputedStyle(t),n="absolute"===e.position,o=/(auto|scroll)/;if("fixed"===e.position)return document.body;for(var i=t;i=i.parentElement;)if(e=window.getComputedStyle(i),(!n||"static"!==e.position)&&o.test(e.overflow+e.overflowY+e.overflowX))return i;return document.body}(e);n!==document.body&&(n.scrollTop=e.offsetTop-n.offsetTop)}}function d(){if(void 0!==window.innerWidth)return{width:window.innerWidth,height:window.innerHeight};var t=document.documentElement;return{width:t.clientWidth,height:t.clientHeight}}function f(t,e,n,o,i){var r;if("off"!==e&&t&&(r="tooltip"===e?i.getBoundingClientRect():o.getBoundingClientRect(),!function(t){var e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom+80<=window.innerHeight&&e.right<=window.innerWidth}(o))){var s=d().height;r.bottom-(r.bottom-r.top)<0||o.clientHeight>s?window.scrollBy(0,r.top-(s/2-r.height/2)-n):window.scrollBy(0,r.top-(s/2-r.height/2)+n)}}function b(t){t.setAttribute("role","button"),t.tabIndex=0}function m(t){var e=t.parentElement;return!(!e||"HTML"===e.nodeName)&&("fixed"===p(t,"position")||m(e))}function g(t,e){var n=document.body,o=document.documentElement,i=window.pageYOffset||o.scrollTop||n.scrollTop,r=window.pageXOffset||o.scrollLeft||n.scrollLeft;e=e||n;var s=t.getBoundingClientRect(),a=e.getBoundingClientRect(),l=p(e,"position"),c={width:s.width,height:s.height};return"body"!==e.tagName.toLowerCase()&&"relative"===l||"sticky"===l?Object.assign(c,{top:s.top-a.top,left:s.left-a.left}):m(t)?Object.assign(c,{top:s.top,left:s.left}):Object.assign(c,{top:s.top+i,left:s.left+r})}function v(t,e){if(t instanceof SVGElement){var n=t.getAttribute("class")||"";t.setAttribute("class",n.replace(e,"").replace(/^\s+|\s+$/g,""))}else t.className=t.className.replace(e,"").replace(/^\s+|\s+$/g,"")}function y(t,e){var n="";if(t.style.cssText&&(n+=t.style.cssText),"string"==typeof e)n+=e;else for(var o in e)n+="".concat(o,":").concat(e[o],";");t.style.cssText=n}function w(t,e,n){if(n&&e){var o=g(e.element,t._targetElement),i=t._options.helperElementPadding;e.element instanceof Element&&m(e.element)?u(n,"introjs-fixedTooltip"):v(n,"introjs-fixedTooltip"),"floating"===e.position&&(i=0),y(n,{width:"".concat(o.width+i,"px"),height:"".concat(o.height+i,"px"),top:"".concat(o.top-i/2,"px"),left:"".concat(o.left-i/2,"px")})}}function _(t,e,n,o,i){return t.left+e+n.width>o.width?(i.style.left="".concat(o.width-n.width-t.left,"px"),!1):(i.style.left="".concat(e,"px"),!0)}function C(t,e,n,o){return t.left+t.width-e-n.width<0?(o.style.left="".concat(-t.left,"px"),!1):(o.style.right="".concat(e,"px"),!0)}function S(t,e){t.includes(e)&&t.splice(t.indexOf(e),1)}function j(t,e,n,o,i){if(void 0===i&&(i=!1),e){var r,s,a,l,c="";n.style.top="",n.style.right="",n.style.bottom="",n.style.left="",n.style.marginLeft="",n.style.marginTop="",o.style.display="inherit",c="string"==typeof e.tooltipClass?e.tooltipClass:t._options.tooltipClass,n.className=["introjs-tooltip",c].filter(Boolean).join(" "),n.setAttribute("role","dialog"),"floating"!==(l=e.position)&&t._options.autoPosition&&(l=function k(t,e,n,o){var i=t.slice(),r=d(),s=g(n).height+10,a=g(n).width+20,l=e.getBoundingClientRect(),c="floating";if(l.bottom+s>r.height&&S(i,"bottom"),l.top-s<0&&S(i,"top"),l.right+a>r.width&&S(i,"right"),l.left-a<0&&S(i,"left"),o&&(o=o.split("-")[0]),i.length&&(c=i[0],i.includes(o)&&(c=o)),"top"===c||"bottom"===c){var u=void 0,p=[];"top"===c?(u="top-middle-aligned",p=["top-left-aligned","top-middle-aligned","top-right-aligned"]):(u="bottom-middle-aligned",p=["bottom-left-aligned","bottom-middle-aligned","bottom-right-aligned"]),c=function(t,e,n,o){var i=e/2,r=Math.min(n,window.screen.width);return r-t<e&&(S(o,"top-left-aligned"),S(o,"bottom-left-aligned")),(t<i||r-t<i)&&(S(o,"top-middle-aligned"),S(o,"bottom-middle-aligned")),t<e&&(S(o,"top-right-aligned"),S(o,"bottom-right-aligned")),o.length?o[0]:null}(l.left,a,r.width,p)||u}return c}(t._options.positionPrecedence,e.element,n,l)),s=g(e.element),r=g(n),a=d(),u(n,"introjs-".concat(l));var p=s.width/2-r.width/2;switch(l){case"top-right-aligned":o.className="introjs-arrow bottom-right";var h=0;C(s,h,r,n),n.style.bottom="".concat(s.height+20,"px");break;case"top-middle-aligned":o.className="introjs-arrow bottom-middle",i&&(p+=5),C(s,p,r,n)&&(n.style.right="",_(s,p,r,a,n)),n.style.bottom="".concat(s.height+20,"px");break;case"top-left-aligned":case"top":o.className="introjs-arrow bottom",_(s,i?0:15,r,a,n),n.style.bottom="".concat(s.height+20,"px");break;case"right":n.style.left="".concat(s.width+20,"px"),s.top+r.height>a.height?(o.className="introjs-arrow left-bottom",n.style.top="-".concat(r.height-s.height-20,"px")):o.className="introjs-arrow left";break;case"left":i||!0!==t._options.showStepNumbers||(n.style.top="15px"),s.top+r.height>a.height?(n.style.top="-".concat(r.height-s.height-20,"px"),o.className="introjs-arrow right-bottom"):o.className="introjs-arrow right",n.style.right="".concat(s.width+20,"px");break;case"floating":o.style.display="none",n.style.left="50%",n.style.top="50%",n.style.marginLeft="-".concat(r.width/2,"px"),n.style.marginTop="-".concat(r.height/2,"px");break;case"bottom-right-aligned":o.className="introjs-arrow top-right",C(s,h=0,r,n),n.style.top="".concat(s.height+20,"px");break;case"bottom-middle-aligned":o.className="introjs-arrow top-middle",i&&(p+=5),C(s,p,r,n)&&(n.style.right="",_(s,p,r,a,n)),n.style.top="".concat(s.height+20,"px");break;default:o.className="introjs-arrow top",_(s,0,r,a,n),n.style.top="".concat(s.height+20,"px")}}}function A(){for(var t=0,e=Array.from(document.querySelectorAll(".introjs-showElement"));t<e.length;t++)v(e[t],/introjs-[a-zA-Z]+/g)}function x(t,e){var n=document.createElement(t);e=e||{};var o=/^(?:role|data-|aria-)/;for(var i in e){var r=e[i];"style"===i&&"function"!=typeof r?y(n,r):"string"==typeof r&&i.match(o)?n.setAttribute(i,r):n[i]=r}return n}function N(t,e,n){if(void 0===n&&(n=!1),n){var o=e.style.opacity||"1";y(e,{opacity:"0"}),window.setTimeout((function(){y(e,{opacity:o})}),10)}t.appendChild(e)}function E(t,e){return(t+1)/e*100}function T(t,e){var n=x("div",{className:"introjs-bullets"});!1===t._options.showBullets&&(n.style.display="none");var o=x("ul");o.setAttribute("role","tablist");for(var i=function(){var e=this.getAttribute("data-step-number");null!=e&&t.goToStep(parseInt(e,10))},r=0;r<t._introItems.length;r++){var s=t._introItems[r].step,a=x("li"),l=x("a");a.setAttribute("role","presentation"),l.setAttribute("role","tab"),l.onclick=i,r===e.step-1&&(l.className="active"),b(l),l.innerHTML="&nbsp;",l.setAttribute("data-step-number",s.toString()),a.appendChild(l),o.appendChild(a)}return n.appendChild(o),n}function I(t,e,n){var o=t.querySelector(".introjs-progress .introjs-progressbar");if(o){var i=E(e,n);o.style.cssText="width:".concat(i,"%;"),o.setAttribute("aria-valuenow",i.toString())}}function L(t,o){return e(this,void 0,void 0,(function(){var i,r,s,a,l,d,m,g,v,_,C,S,k,L,P,q,R,O,M,D,F,V,z,G,W=this;return n(this,(function(Q){switch(Q.label){case 0:return c(t._introChangeCallback)?[4,t._introChangeCallback.call(t,o.element)]:[3,2];case 1:Q.sent(),Q.label=2;case 2:return i=document.querySelector(".introjs-helperLayer"),r=document.querySelector(".introjs-tooltipReferenceLayer"),s="introjs-helperLayer","string"==typeof o.highlightClass&&(s+=" ".concat(o.highlightClass)),"string"==typeof t._options.highlightClass&&(s+=" ".concat(t._options.highlightClass)),null!==i&&null!==r?(m=r.querySelector(".introjs-helperNumberLayer"),g=r.querySelector(".introjs-tooltiptext"),v=r.querySelector(".introjs-tooltip-title"),_=r.querySelector(".introjs-arrow"),C=r.querySelector(".introjs-tooltip"),d=r.querySelector(".introjs-skipbutton"),l=r.querySelector(".introjs-prevbutton"),a=r.querySelector(".introjs-nextbutton"),i.className=s,C.style.opacity="0",C.style.display="none",h(t._options.scrollToElement,o.element),w(t,o,i),w(t,o,r),A(),t._lastShowElementTimer&&window.clearTimeout(t._lastShowElementTimer),t._lastShowElementTimer=window.setTimeout((function(){null!==m&&(m.innerHTML="".concat(o.step," ").concat(t._options.stepNumbersOfLabel," ").concat(t._introItems.length)),g.innerHTML=o.intro||"",v.innerHTML=o.title||"",C.style.display="block",j(t,o,C,_),function(t,e,n){if(t){var o=e.querySelector(".introjs-bullets li > a.active"),i=e.querySelector('.introjs-bullets li > a[data-step-number="'.concat(n.step,'"]'));o&&i&&(o.className="",i.className="active")}}(t._options.showBullets,r,o),I(r,t._currentStep,t._introItems.length),C.style.opacity="1",(null!=a&&/introjs-donebutton/gi.test(a.className)||null!=a)&&a.focus(),f(t._options.scrollToElement,o.scrollTo,t._options.scrollPadding,o.element,g)}),350)):(S=x("div",{className:s}),k=x("div",{className:"introjs-tooltipReferenceLayer"}),L=x("div",{className:"introjs-arrow"}),P=x("div",{className:"introjs-tooltip"}),q=x("div",{className:"introjs-tooltiptext"}),R=x("div",{className:"introjs-tooltip-header"}),O=x("h1",{className:"introjs-tooltip-title"}),M=x("div"),y(S,{"box-shadow":"0 0 1px 2px rgba(33, 33, 33, 0.8), rgba(33, 33, 33, ".concat(t._options.overlayOpacity.toString(),") 0 0 0 5000px")}),h(t._options.scrollToElement,o.element),w(t,o,S),w(t,o,k),N(t._targetElement,S,!0),N(t._targetElement,k),q.innerHTML=o.intro,O.innerHTML=o.title,M.className="introjs-tooltipbuttons",!1===t._options.showButtons&&(M.style.display="none"),R.appendChild(O),P.appendChild(R),P.appendChild(q),t._options.dontShowAgain&&(D=x("div",{className:"introjs-dontShowAgain"}),(F=x("input",{type:"checkbox",id:"introjs-dontShowAgain",name:"introjs-dontShowAgain"})).onchange=function(e){t.setDontShowAgain(e.target.checked)},(V=x("label",{htmlFor:"introjs-dontShowAgain"})).innerText=t._options.dontShowAgainLabel,D.appendChild(F),D.appendChild(V),P.appendChild(D)),P.appendChild(T(t,o)),P.appendChild(function(t){var e=x("div");e.className="introjs-progress",!1===t._options.showProgress&&(e.style.display="none");var n=x("div",{className:"introjs-progressbar"});t._options.progressBarAdditionalClass&&(n.className+=" "+t._options.progressBarAdditionalClass);var o=E(t._currentStep,t._introItems.length);return n.setAttribute("role","progress"),n.setAttribute("aria-valuemin","0"),n.setAttribute("aria-valuemax","100"),n.setAttribute("aria-valuenow",o.toString()),n.style.cssText="width:".concat(o,"%;"),e.appendChild(n),e}(t)),z=x("div"),!0===t._options.showStepNumbers&&(z.className="introjs-helperNumberLayer",z.innerHTML="".concat(o.step," ").concat(t._options.stepNumbersOfLabel," ").concat(t._introItems.length),P.appendChild(z)),P.appendChild(L),k.appendChild(P),(a=x("a")).onclick=function(){return e(W,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return t._introItems.length-1===t._currentStep?[3,2]:[4,B(t)];case 1:return e.sent(),[3,6];case 2:return/introjs-donebutton/gi.test(a.className)?c(t._introCompleteCallback)?[4,t._introCompleteCallback.call(t,t._currentStep,"done")]:[3,4]:[3,6];case 3:e.sent(),e.label=4;case 4:return[4,et(t,t._targetElement)];case 5:e.sent(),e.label=6;case 6:return[2]}}))}))},b(a),a.innerHTML=t._options.nextLabel,(l=x("a")).onclick=function(){return e(W,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return t._currentStep>0?[4,H(t)]:[3,2];case 1:e.sent(),e.label=2;case 2:return[2]}}))}))},b(l),l.innerHTML=t._options.prevLabel,b(d=x("a",{className:"introjs-skipbutton"})),d.innerHTML=t._options.skipLabel,d.onclick=function(){return e(W,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return t._introItems.length-1===t._currentStep&&c(t._introCompleteCallback)?[4,t._introCompleteCallback.call(t,t._currentStep,"skip")]:[3,2];case 1:e.sent(),e.label=2;case 2:return c(t._introSkipCallback)?[4,t._introSkipCallback.call(t,t._currentStep)]:[3,4];case 3:e.sent(),e.label=4;case 4:return[4,et(t,t._targetElement)];case 5:return e.sent(),[2]}}))}))},R.appendChild(d),t._introItems.length>1&&M.appendChild(l),M.appendChild(a),P.appendChild(M),j(t,o,P,L),f(t._options.scrollToElement,o.scrollTo,t._options.scrollPadding,o.element,P)),(G=t._targetElement.querySelector(".introjs-disableInteraction"))&&G.parentNode&&G.parentNode.removeChild(G),o.disableInteraction&&function(t,e){var n=document.querySelector(".introjs-disableInteraction");null===n&&(n=x("div",{className:"introjs-disableInteraction"}),t._targetElement.appendChild(n)),w(t,e,n)}(t,o),0===t._currentStep&&t._introItems.length>1?(null!=a&&(a.className="".concat(t._options.buttonClass," introjs-nextbutton"),a.innerHTML=t._options.nextLabel),!0===t._options.hidePrev?(null!=l&&(l.className="".concat(t._options.buttonClass," introjs-prevbutton introjs-hidden")),null!=a&&u(a,"introjs-fullbutton")):null!=l&&(l.className="".concat(t._options.buttonClass," introjs-prevbutton introjs-disabled"))):t._introItems.length-1===t._currentStep||1===t._introItems.length?(null!=l&&(l.className="".concat(t._options.buttonClass," introjs-prevbutton")),!0===t._options.hideNext?(null!=a&&(a.className="".concat(t._options.buttonClass," introjs-nextbutton introjs-hidden")),null!=l&&u(l,"introjs-fullbutton")):null!=a&&(!0===t._options.nextToDone?(a.innerHTML=t._options.doneLabel,u(a,"".concat(t._options.buttonClass," introjs-nextbutton introjs-donebutton"))):a.className="".concat(t._options.buttonClass," introjs-nextbutton introjs-disabled"))):(null!=l&&(l.className="".concat(t._options.buttonClass," introjs-prevbutton")),null!=a&&(a.className="".concat(t._options.buttonClass," introjs-nextbutton"),a.innerHTML=t._options.nextLabel)),null!=l&&l.setAttribute("role","button"),null!=a&&a.setAttribute("role","button"),null!=d&&d.setAttribute("role","button"),null!=a&&a.focus(),function(t){u(t,"introjs-showElement");var e=p(t,"position");"absolute"!==e&&"relative"!==e&&"sticky"!==e&&"fixed"!==e&&u(t,"introjs-relativePosition")}(o.element),c(t._introAfterChangeCallback)?[4,t._introAfterChangeCallback.call(t,o.element)]:[3,4];case 3:Q.sent(),Q.label=4;case 4:return[2]}}))}))}function P(t,o){return e(this,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return t._currentStep=o-2,void 0===t._introItems?[3,2]:[4,B(t)];case 1:e.sent(),e.label=2;case 2:return[2]}}))}))}function q(t,o){return e(this,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return t._currentStepNumber=o,void 0===t._introItems?[3,2]:[4,B(t)];case 1:e.sent(),e.label=2;case 2:return[2]}}))}))}function B(t){return e(this,void 0,void 0,(function(){var e,o,i;return n(this,(function(n){switch(n.label){case 0:if(t._direction="forward",void 0!==t._currentStepNumber)for(e=0;e<t._introItems.length;e++)t._introItems[e].step===t._currentStepNumber&&(t._currentStep=e-1,t._currentStepNumber=void 0);return-1===t._currentStep?t._currentStep=0:++t._currentStep,o=t._introItems[t._currentStep],i=!0,c(t._introBeforeChangeCallback)?[4,t._introBeforeChangeCallback.call(t,o&&o.element,t._currentStep,t._direction)]:[3,2];case 1:i=n.sent(),n.label=2;case 2:return!1===i?(--t._currentStep,[2,!1]):t._introItems.length<=t._currentStep?c(t._introCompleteCallback)?[4,t._introCompleteCallback.call(t,t._currentStep,"end")]:[3,4]:[3,6];case 3:n.sent(),n.label=4;case 4:return[4,et(t,t._targetElement)];case 5:return n.sent(),[2,!1];case 6:return[4,L(t,o)];case 7:return n.sent(),[2,!0]}}))}))}function H(t){return e(this,void 0,void 0,(function(){var e,o;return n(this,(function(n){switch(n.label){case 0:return t._direction="backward",t._currentStep<=0?[2,!1]:(--t._currentStep,e=t._introItems[t._currentStep],o=!0,c(t._introBeforeChangeCallback)?[4,t._introBeforeChangeCallback.call(t,e&&e.element,t._currentStep,t._direction)]:[3,2]);case 1:o=n.sent(),n.label=2;case 2:return!1===o?(++t._currentStep,[2,!1]):[4,L(t,e)];case 3:return n.sent(),[2,!0]}}))}))}function R(t,o){return e(this,void 0,void 0,(function(){var e,i;return n(this,(function(n){switch(n.label){case 0:return null===(e=void 0===o.code?o.which:o.code)&&(e=null===o.charCode?o.keyCode:o.charCode),"Escape"!==e&&27!==e||!0!==t._options.exitOnEsc?[3,2]:[4,et(t,t._targetElement)];case 1:return n.sent(),[3,16];case 2:return"ArrowLeft"!==e&&37!==e?[3,4]:[4,H(t)];case 3:return n.sent(),[3,16];case 4:return"ArrowRight"!==e&&39!==e?[3,6]:[4,B(t)];case 5:return n.sent(),[3,16];case 6:return"Enter"!==e&&"NumpadEnter"!==e&&13!==e?[3,16]:(i=o.target||o.srcElement)&&i.className.match("introjs-prevbutton")?[4,H(t)]:[3,8];case 7:return n.sent(),[3,15];case 8:return i&&i.className.match("introjs-skipbutton")?t._introItems.length-1===t._currentStep&&c(t._introCompleteCallback)?[4,t._introCompleteCallback.call(t,t._currentStep,"skip")]:[3,10]:[3,12];case 9:n.sent(),n.label=10;case 10:return[4,et(t,t._targetElement)];case 11:return n.sent(),[3,15];case 12:return i&&i.getAttribute("data-step-number")?(i.click(),[3,15]):[3,13];case 13:return[4,B(t)];case 14:n.sent(),n.label=15;case 15:o.preventDefault?o.preventDefault():o.returnValue=!1,n.label=16;case 16:return[2]}}))}))}function O(e){if(null===e||"object"!==t(e)||"nodeType"in e)return e;var n={};for(var o in e)"jQuery"in window&&e[o]instanceof window.jQuery?n[o]=e[o]:n[o]=O(e[o]);return n}function M(t){var e=document.querySelector(".introjs-hints");return e?Array.from(e.querySelectorAll(t)):[]}function D(t,o){return e(this,void 0,void 0,(function(){var e;return n(this,(function(n){switch(n.label){case 0:return e=M('.introjs-hint[data-step="'.concat(o,'"]'))[0],Y(),e&&u(e,"introjs-hidehint"),c(t._hintCloseCallback)?[4,t._hintCloseCallback.call(t,o)]:[3,2];case 1:n.sent(),n.label=2;case 2:return[2]}}))}))}function F(t){return e(this,void 0,void 0,(function(){var e,o,i,r,s;return n(this,(function(n){switch(n.label){case 0:e=M(".introjs-hint"),o=0,i=e,n.label=1;case 1:return o<i.length?(r=i[o],(s=r.getAttribute("data-step"))?[4,D(t,parseInt(s,10))]:[3,3]):[3,4];case 2:n.sent(),n.label=3;case 3:return o++,[3,1];case 4:return[2]}}))}))}function V(t){return e(this,void 0,void 0,(function(){var e,o,i,r,s;return n(this,(function(n){switch(n.label){case 0:if(!(e=M(".introjs-hint"))||!e.length)return[3,1];for(o=0,i=e;o<i.length;o++)r=i[o],(s=r.getAttribute("data-step"))&&z(parseInt(s,10));return[3,3];case 1:return[4,$(t,t._targetElement)];case 2:n.sent(),n.label=3;case 3:return[2]}}))}))}function z(t){var e=M('.introjs-hint[data-step="'.concat(t,'"]'))[0];e&&v(e,/introjs-hidehint/g)}function G(t){var e=M('.introjs-hint[data-step="'.concat(t,'"]'))[0];e&&e.parentNode&&e.parentNode.removeChild(e)}function W(t){return e(this,void 0,void 0,(function(){var e,o,i,r,s,a,p;return n(this,(function(n){switch(n.label){case 0:for(null===(e=document.querySelector(".introjs-hints"))&&(e=x("div",{className:"introjs-hints"})),o=function(e){return function(n){var o=n||window.event;o&&o.stopPropagation&&o.stopPropagation(),o&&null!==o.cancelBubble&&(o.cancelBubble=!0),X(t,e)}},i=0;i<t._hintItems.length;i++){if(r=t._hintItems[i],document.querySelector('.introjs-hint[data-step="'.concat(i,'"]')))return[2];b(s=x("a",{className:"introjs-hint"})),s.onclick=o(i),r.hintAnimation||u(s,"introjs-hint-no-anim"),m(r.element)&&u(s,"introjs-fixedhint"),a=x("div",{className:"introjs-hint-dot"}),p=x("div",{className:"introjs-hint-pulse"}),s.appendChild(a),s.appendChild(p),s.setAttribute("data-step",i.toString()),r.hintTargetElement=r.element,r.element=s,Q(r.hintPosition,s,r.hintTargetElement),e.appendChild(s)}return document.body.appendChild(e),c(t._hintsAddedCallback)?[4,t._hintsAddedCallback.call(t)]:[3,2];case 1:n.sent(),n.label=2;case 2:return t._options.hintAutoRefreshInterval>=0&&(t._hintsAutoRefreshFunction=(h=function(){return U(t)},d=t._options.hintAutoRefreshInterval,function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];window.clearTimeout(f),f=window.setTimeout((function(){h()}),d)}),l.on(window,"scroll",t._hintsAutoRefreshFunction,t,!0)),[2]}var h,d,f}))}))}function Q(t,e,n){if(void 0!==n){var o=g(n),i=20,r=20;switch(t){default:case"top-left":e.style.left="".concat(o.left,"px"),e.style.top="".concat(o.top,"px");break;case"top-right":e.style.left="".concat(o.left+o.width-i,"px"),e.style.top="".concat(o.top,"px");break;case"bottom-left":e.style.left="".concat(o.left,"px"),e.style.top="".concat(o.top+o.height-r,"px");break;case"bottom-right":e.style.left="".concat(o.left+o.width-i,"px"),e.style.top="".concat(o.top+o.height-r,"px");break;case"middle-left":e.style.left="".concat(o.left,"px"),e.style.top="".concat(o.top+(o.height-r)/2,"px");break;case"middle-right":e.style.left="".concat(o.left+o.width-i,"px"),e.style.top="".concat(o.top+(o.height-r)/2,"px");break;case"middle-middle":e.style.left="".concat(o.left+(o.width-i)/2,"px"),e.style.top="".concat(o.top+(o.height-r)/2,"px");break;case"bottom-middle":e.style.left="".concat(o.left+(o.width-i)/2,"px"),e.style.top="".concat(o.top+o.height-r,"px");break;case"top-middle":e.style.left="".concat(o.left+(o.width-i)/2,"px"),e.style.top="".concat(o.top,"px")}}}function X(t,o){return e(this,void 0,void 0,(function(){var e,i,r,s,a,l,u,p,h,d,f;return n(this,(function(n){switch(n.label){case 0:return e=document.querySelector('.introjs-hint[data-step="'.concat(o,'"]')),i=t._hintItems[o],c(t._hintClickCallback)?[4,t._hintClickCallback.call(t,e,i,o)]:[3,2];case 1:n.sent(),n.label=2;case 2:return void 0!==(r=Y())&&parseInt(r,10)===o||(s=x("div",{className:"introjs-tooltip"}),a=x("div"),l=x("div"),u=x("div"),s.onclick=function(t){t.stopPropagation?t.stopPropagation():t.cancelBubble=!0},a.className="introjs-tooltiptext",(p=x("p")).innerHTML=i.hint||"",a.appendChild(p),t._options.hintShowButton&&((h=x("a")).className=t._options.buttonClass,h.setAttribute("role","button"),h.innerHTML=t._options.hintButtonLabel,h.onclick=function(){return D(t,o)},a.appendChild(h)),l.className="introjs-arrow",s.appendChild(l),s.appendChild(a),d=e.getAttribute("data-step")||"",t._currentStep=parseInt(d,10),f=t._hintItems[t._currentStep],u.className="introjs-tooltipReferenceLayer introjs-hintReference",u.setAttribute("data-step",d),w(t,f,u),u.appendChild(s),document.body.appendChild(u),j(t,f,s,l,!0)),[2]}}))}))}function Y(){var t=document.querySelector(".introjs-hintReference");if(t&&t.parentNode){var e=t.getAttribute("data-step");if(!e)return;return t.parentNode.removeChild(t),e}}function $(t,o){return e(this,void 0,void 0,(function(){var e,i,r,s,a,c,u,p,h,d;return n(this,(function(n){switch(n.label){case 0:if(t._hintItems=[],t._options.hints&&t._options.hints.length>0)for(e=0,i=t._options.hints;e<i.length;e++)r=i[e],"string"==typeof(s=O(r)).element&&(s.element=document.querySelector(s.element)),s.hintPosition=s.hintPosition||t._options.hintPosition,s.hintAnimation=s.hintAnimation||t._options.hintAnimation,null!==s.element&&t._hintItems.push(s);else{if(!(a=Array.from(o.querySelectorAll("*[data-hint]")))||!a.length)return[2,!1];for(c=0,u=a;c<u.length;c++)p=u[c],h=p.getAttribute("data-hint-animation"),d=t._options.hintAnimation,h&&(d="true"===h),t._hintItems.push({element:p,hint:p.getAttribute("data-hint")||"",hintPosition:p.getAttribute("data-hint-position")||t._options.hintPosition,hintAnimation:d,tooltipClass:p.getAttribute("data-tooltip-class")||void 0,position:p.getAttribute("data-position")||t._options.tooltipPosition})}return[4,W(t)];case 1:return n.sent(),l.on(document,"click",Y,t,!1),l.on(window,"resize",U,t,!0),[2,!0]}}))}))}function U(t){for(var e=0,n=t._hintItems;e<n.length;e++){var o=n[e],i=o.hintTargetElement;Q(o.hintPosition,o.element,i)}}function Z(t,e){var n=Array.from(e.querySelectorAll("*[data-intro]")),o=[];if(t._options.steps&&t._options.steps.length)for(var i=0,r=t._options.steps;i<r.length;i++){var s=O(h=r[i]);if(s.step=o.length+1,s.title=s.title||"","string"==typeof s.element&&(s.element=document.querySelector(s.element)||void 0),void 0===s.element||null===s.element){var a=document.querySelector(".introjsFloatingElement");null===a&&(a=x("div",{className:"introjsFloatingElement"}),document.body.appendChild(a)),s.element=a,s.position="floating"}s.position=s.position||t._options.tooltipPosition,s.scrollTo=s.scrollTo||t._options.scrollTo,void 0===s.disableInteraction&&(s.disableInteraction=t._options.disableInteraction),null!==s.element&&o.push(s)}else{var l=void 0;if(n.length<1)return[];for(var c=0,u=n;c<u.length;c++){var p=u[c];if((!t._options.group||p.getAttribute("data-intro-group")===t._options.group)&&"none"!==p.style.display){var h=parseInt(p.getAttribute("data-step")||"",10);l=t._options.disableInteraction,p.hasAttribute("data-disable-interaction")&&(l=!!p.getAttribute("data-disable-interaction")),h>0&&(o[h-1]={step:h,element:p,title:p.getAttribute("data-title")||"",intro:p.getAttribute("data-intro")||"",tooltipClass:p.getAttribute("data-tooltip-class")||void 0,highlightClass:p.getAttribute("data-highlight-class")||void 0,position:p.getAttribute("data-position")||t._options.tooltipPosition,scrollTo:p.getAttribute("data-scroll-to")||t._options.scrollTo,disableInteraction:l})}}for(var d=0,f=0,b=n;f<b.length;f++)if(p=b[f],(!t._options.group||p.getAttribute("data-intro-group")===t._options.group)&&null===p.getAttribute("data-step")){for(;void 0!==o[d];)d++;l=p.hasAttribute("data-disable-interaction")?!!p.getAttribute("data-disable-interaction"):t._options.disableInteraction,o[d]={element:p,title:p.getAttribute("data-title")||"",intro:p.getAttribute("data-intro")||"",step:d+1,tooltipClass:p.getAttribute("data-tooltip-class")||void 0,highlightClass:p.getAttribute("data-highlight-class")||void 0,position:p.getAttribute("data-position")||t._options.tooltipPosition,scrollTo:p.getAttribute("data-scroll-to")||t._options.scrollTo,disableInteraction:l}}}for(var m=[],g=0;g<o.length;g++)o[g]&&m.push(o[g]);return(o=m).sort((function(t,e){return t.step-e.step})),o}function J(t,e){var n=t._currentStep;if(null!=n&&-1!=n){var o=t._introItems[n],i=document.querySelector(".introjs-tooltipReferenceLayer"),r=document.querySelector(".introjs-helperLayer"),s=document.querySelector(".introjs-disableInteraction");w(t,o,r),w(t,o,i),w(t,o,s),e&&(t._introItems=Z(t,t._targetElement),function(t,e){if(t._options.showBullets){var n=document.querySelector(".introjs-bullets");n&&n.parentNode&&n.parentNode.replaceChild(T(t,e),n)}}(t,o),I(i,n,t._introItems.length));var a=document.querySelector(".introjs-arrow"),l=document.querySelector(".introjs-tooltip");return l&&a&&j(t,t._introItems[n],l,a),U(t),t}}function K(t){J(t)}function tt(t,e){if(void 0===e&&(e=!1),t&&t.parentElement){var n=t.parentElement;e?(y(t,{opacity:"0"}),window.setTimeout((function(){try{n.removeChild(t)}catch(t){}}),500)):n.removeChild(t)}}function et(t,o,i){return void 0===i&&(i=!1),e(this,void 0,void 0,(function(){var e,r,s,a;return n(this,(function(n){switch(n.label){case 0:return e=!0,void 0===t._introBeforeExitCallback?[3,2]:[4,t._introBeforeExitCallback.call(t,o)];case 1:e=n.sent(),n.label=2;case 2:if(!i&&!1===e)return[2];if((r=Array.from(o.querySelectorAll(".introjs-overlay")))&&r.length)for(s=0,a=r;s<a.length;s++)tt(a[s]);return tt(o.querySelector(".introjs-helperLayer"),!0),tt(o.querySelector(".introjs-tooltipReferenceLayer")),tt(o.querySelector(".introjs-disableInteraction")),tt(document.querySelector(".introjsFloatingElement")),A(),l.off(window,"keydown",R,t,!0),l.off(window,"resize",K,t,!0),c(t._introExitCallback)?[4,t._introExitCallback.call(t)]:[3,4];case 3:n.sent(),n.label=4;case 4:return t._currentStep=-1,[2]}}))}))}function nt(t,o){return e(this,void 0,void 0,(function(){var i;return n(this,(function(r){switch(r.label){case 0:return t.isActive()?c(t._introStartCallback)?[4,t._introStartCallback.call(t,o)]:[3,2]:[2,!1];case 1:r.sent(),r.label=2;case 2:return 0===(i=Z(t,o)).length?[2,!1]:(t._introItems=i,function(t,o){var i=this,r=x("div",{className:"introjs-overlay"});y(r,{top:0,bottom:0,left:0,right:0,position:"fixed"}),o.appendChild(r),!0===t._options.exitOnOverlayClick&&(y(r,{cursor:"pointer"}),r.onclick=function(){return e(i,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return[4,et(t,o)];case 1:return e.sent(),[2]}}))}))})}(t,o),[4,B(t)]);case 3:r.sent(),o.addEventListener,t._options.keyboardNavigation&&l.on(window,"keydown",R,t,!0),l.on(window,"resize",K,t,!0),r.label=4;case 4:return[2,!1]}}))}))}function ot(t,e,n){return t[e]=n,t}var it=function(){function t(t){this._currentStep=-1,this._introItems=[],this._hintItems=[],this._targetElement=t,this._options={steps:[],hints:[],isActive:!0,nextLabel:"Next",prevLabel:"Back",skipLabel:"×",doneLabel:"Done",hidePrev:!1,hideNext:!1,nextToDone:!0,tooltipPosition:"bottom",tooltipClass:"",group:"",highlightClass:"",exitOnEsc:!0,exitOnOverlayClick:!0,showStepNumbers:!1,stepNumbersOfLabel:"of",keyboardNavigation:!0,showButtons:!0,showBullets:!0,showProgress:!1,scrollToElement:!0,scrollTo:"element",scrollPadding:30,overlayOpacity:.5,autoPosition:!0,positionPrecedence:["bottom","top","right","left"],disableInteraction:!1,dontShowAgain:!1,dontShowAgainLabel:"Don't show this again",dontShowAgainCookie:"introjs-dontShowAgain",dontShowAgainCookieDays:365,helperElementPadding:10,hintPosition:"top-middle",hintButtonLabel:"Got it",hintShowButton:!0,hintAutoRefreshInterval:10,hintAnimation:!0,buttonClass:"introjs-button",progressBarAdditionalClass:!1}}return t.prototype.isActive=function(){return(!this._options.dontShowAgain||""===(t=i(this._options.dontShowAgainCookie))||"true"!==t)&&this._options.isActive;var t},t.prototype.clone=function(){return new t(this._targetElement)},t.prototype.setOption=function(t,e){return this._options=ot(this._options,t,e),this},t.prototype.setOptions=function(t){return this._options=function(t,e){for(var n=0,o=Object.entries(e);n<o.length;n++){var i=o[n];t=ot(t,i[0],i[1])}return t}(this._options,t),this},t.prototype.start=function(){return e(this,void 0,void 0,(function(){return n(this,(function(t){switch(t.label){case 0:return[4,nt(this,this._targetElement)];case 1:return t.sent(),[2,this]}}))}))},t.prototype.goToStep=function(t){return e(this,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return[4,P(this,t)];case 1:return e.sent(),[2,this]}}))}))},t.prototype.addStep=function(t){return this._options.steps||(this._options.steps=[]),this._options.steps.push(t),this},t.prototype.addSteps=function(t){if(!t.length)return this;for(var e=0;e<t.length;e++)this.addStep(t[e]);return this},t.prototype.goToStepNumber=function(t){return e(this,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return[4,q(this,t)];case 1:return e.sent(),[2,this]}}))}))},t.prototype.nextStep=function(){return e(this,void 0,void 0,(function(){return n(this,(function(t){switch(t.label){case 0:return[4,B(this)];case 1:return t.sent(),[2,this]}}))}))},t.prototype.previousStep=function(){return e(this,void 0,void 0,(function(){return n(this,(function(t){switch(t.label){case 0:return[4,H(this)];case 1:return t.sent(),[2,this]}}))}))},t.prototype.currentStep=function(){return this._currentStep},t.prototype.exit=function(t){return e(this,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return[4,et(this,this._targetElement,t)];case 1:return e.sent(),[2,this]}}))}))},t.prototype.refresh=function(t){return J(this,t),this},t.prototype.setDontShowAgain=function(t){return function r(t,e){e?o(t._options.dontShowAgainCookie,"true",t._options.dontShowAgainCookieDays):o(t._options.dontShowAgainCookie,"",-1)}(this,t),this},t.prototype.onbeforechange=function(t){if(!c(t))throw new Error("Provided callback for onbeforechange was not a function");return this._introBeforeChangeCallback=t,this},t.prototype.onchange=function(t){if(!c(t))throw new Error("Provided callback for onchange was not a function.");return this._introChangeCallback=t,this},t.prototype.onafterchange=function(t){if(!c(t))throw new Error("Provided callback for onafterchange was not a function");return this._introAfterChangeCallback=t,this},t.prototype.oncomplete=function(t){if(!c(t))throw new Error("Provided callback for oncomplete was not a function.");return this._introCompleteCallback=t,this},t.prototype.onhintsadded=function(t){if(!c(t))throw new Error("Provided callback for onhintsadded was not a function.");return this._hintsAddedCallback=t,this},t.prototype.onhintclick=function(t){if(!c(t))throw new Error("Provided callback for onhintclick was not a function.");return this._hintClickCallback=t,this},t.prototype.onhintclose=function(t){if(!c(t))throw new Error("Provided callback for onhintclose was not a function.");return this._hintCloseCallback=t,this},t.prototype.onstart=function(t){if(!c(t))throw new Error("Provided callback for onstart was not a function.");return this._introStartCallback=t,this},t.prototype.onexit=function(t){if(!c(t))throw new Error("Provided callback for onexit was not a function.");return this._introExitCallback=t,this},t.prototype.onskip=function(t){if(!c(t))throw new Error("Provided callback for onskip was not a function.");return this._introSkipCallback=t,this},t.prototype.onbeforeexit=function(t){if(!c(t))throw new Error("Provided callback for onbeforeexit was not a function.");return this._introBeforeExitCallback=t,this},t.prototype.addHints=function(){return e(this,void 0,void 0,(function(){return n(this,(function(t){switch(t.label){case 0:return[4,$(this,this._targetElement)];case 1:return t.sent(),[2,this]}}))}))},t.prototype.hideHint=function(t){return e(this,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return[4,D(this,t)];case 1:return e.sent(),[2,this]}}))}))},t.prototype.hideHints=function(){return e(this,void 0,void 0,(function(){return n(this,(function(t){switch(t.label){case 0:return[4,F(this)];case 1:return t.sent(),[2,this]}}))}))},t.prototype.showHint=function(t){return z(t),this},t.prototype.showHints=function(){return e(this,void 0,void 0,(function(){return n(this,(function(t){switch(t.label){case 0:return[4,V(this)];case 1:return t.sent(),[2,this]}}))}))},t.prototype.removeHints=function(){return function(t){for(var e=0,n=M(".introjs-hint");e<n.length;e++){var o=n[e].getAttribute("data-step");o&&G(parseInt(o,10))}l.off(document,"click",Y,t,!1),l.off(window,"resize",U,t,!0),t._hintsAutoRefreshFunction&&l.off(window,"scroll",t._hintsAutoRefreshFunction,t,!0)}(this),this},t.prototype.removeHint=function(t){return G(t),this},t.prototype.showHintDialog=function(t){return e(this,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return[4,X(this,t)];case 1:return e.sent(),[2,this]}}))}))},t}(),rt=function e(n){var o;if("object"===t(n))o=new it(n);else if("string"==typeof n){var i=document.querySelector(n);if(!i)throw new Error("There is no element with given selector.");o=new it(i)}else o=new it(document.body);return e.instances[a(o,"introjs-instance")]=o,o};rt.version="7.2.0",rt.instances={}},"./node_modules/react-csv/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react-csv/lib/index.js")},"./node_modules/react-csv/lib/components/Download.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_react2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_core=__webpack_require__("./node_modules/react-csv/lib/core.js"),_metaProps=__webpack_require__("./node_modules/react-csv/lib/metaProps.js");var CSVDownload=function(_React$Component){function CSVDownload(props){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,CSVDownload);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(CSVDownload.__proto__||Object.getPrototypeOf(CSVDownload)).call(this,props));return _this.state={},_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(CSVDownload,_React$Component),_createClass(CSVDownload,[{key:"buildURI",value:function buildURI(){return _core.buildURI.apply(void 0,arguments)}},{key:"componentDidMount",value:function componentDidMount(){var _props=this.props,data=_props.data,headers=_props.headers,separator=_props.separator,enclosingCharacter=_props.enclosingCharacter,uFEFF=_props.uFEFF,target=_props.target,specs=_props.specs,replace=_props.replace;this.state.page=window.open(this.buildURI(data,uFEFF,headers,separator,enclosingCharacter),target,specs,replace)}},{key:"getWindow",value:function getWindow(){return this.state.page}},{key:"render",value:function render(){return null}}]),CSVDownload}(_react2.default.Component);CSVDownload.defaultProps=Object.assign(_metaProps.defaultProps,{target:"_blank"}),CSVDownload.propTypes=_metaProps.propTypes,exports.default=CSVDownload},"./node_modules/react-csv/lib/components/Link.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_react2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_core=__webpack_require__("./node_modules/react-csv/lib/core.js"),_metaProps=__webpack_require__("./node_modules/react-csv/lib/metaProps.js");var CSVLink=function(_React$Component){function CSVLink(props){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,CSVLink);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(CSVLink.__proto__||Object.getPrototypeOf(CSVLink)).call(this,props));return _this.buildURI=_this.buildURI.bind(_this),_this.state={href:""},_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(CSVLink,_React$Component),_createClass(CSVLink,[{key:"componentDidMount",value:function componentDidMount(){var _props=this.props,data=_props.data,headers=_props.headers,separator=_props.separator,uFEFF=_props.uFEFF,enclosingCharacter=_props.enclosingCharacter;this.setState({href:this.buildURI(data,uFEFF,headers,separator,enclosingCharacter)})}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){if(this.props!==prevProps){var _props2=this.props,data=_props2.data,headers=_props2.headers,separator=_props2.separator,uFEFF=_props2.uFEFF;this.setState({href:this.buildURI(data,uFEFF,headers,separator)})}}},{key:"buildURI",value:function buildURI(){return _core.buildURI.apply(void 0,arguments)}},{key:"handleLegacy",value:function handleLegacy(event){if(window.navigator.msSaveOrOpenBlob){event.preventDefault();var _props3=this.props,data=_props3.data,headers=_props3.headers,separator=_props3.separator,filename=_props3.filename,enclosingCharacter=_props3.enclosingCharacter,uFEFF=_props3.uFEFF,blob=new Blob([uFEFF?"\ufeff":"",(0,_core.toCSV)(data,headers,separator,enclosingCharacter)]);return window.navigator.msSaveBlob(blob,filename),!1}}},{key:"handleAsyncClick",value:function handleAsyncClick(event){var _this2=this;this.props.onClick(event,(function done(proceed){!1!==proceed?_this2.handleLegacy(event):event.preventDefault()}))}},{key:"handleSyncClick",value:function handleSyncClick(event){!1===this.props.onClick(event)?event.preventDefault():this.handleLegacy(event)}},{key:"handleClick",value:function handleClick(){var _this3=this;return function(event){if("function"==typeof _this3.props.onClick)return _this3.props.asyncOnClick?_this3.handleAsyncClick(event):_this3.handleSyncClick(event);_this3.handleLegacy(event)}}},{key:"render",value:function render(){var _this4=this,_props4=this.props,filename=(_props4.data,_props4.headers,_props4.separator,_props4.filename),children=(_props4.uFEFF,_props4.children),rest=(_props4.onClick,_props4.asyncOnClick,_props4.enclosingCharacter,function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(_props4,["data","headers","separator","filename","uFEFF","children","onClick","asyncOnClick","enclosingCharacter"]));return _react2.default.createElement("a",_extends({download:filename},rest,{ref:function ref(link){return _this4.link=link},target:"_self",href:this.state.href,onClick:this.handleClick()}),children)}}]),CSVLink}(_react2.default.Component);CSVLink.defaultProps=_metaProps.defaultProps,CSVLink.propTypes=_metaProps.propTypes,exports.default=CSVLink},"./node_modules/react-csv/lib/core.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}return Array.from(arr)}var isSafari=exports.isSafari=function isSafari(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)},isJsons=exports.isJsons=function isJsons(array){return Array.isArray(array)&&array.every((function(row){return"object"===(void 0===row?"undefined":_typeof(row))&&!(row instanceof Array)}))},isArrays=exports.isArrays=function isArrays(array){return Array.isArray(array)&&array.every((function(row){return Array.isArray(row)}))},jsonsHeaders=exports.jsonsHeaders=function jsonsHeaders(array){return Array.from(array.map((function(json){return Object.keys(json)})).reduce((function(a,b){return new Set([].concat(_toConsumableArray(a),_toConsumableArray(b)))}),[]))},jsons2arrays=exports.jsons2arrays=function jsons2arrays(jsons,headers){var headerLabels=headers=headers||jsonsHeaders(jsons),headerKeys=headers;isJsons(headers)&&(headerLabels=headers.map((function(header){return header.label})),headerKeys=headers.map((function(header){return header.key})));var data=jsons.map((function(object){return headerKeys.map((function(header){return getHeaderValue(header,object)}))}));return[headerLabels].concat(_toConsumableArray(data))},getHeaderValue=exports.getHeaderValue=function getHeaderValue(property,obj){var foundValue=property.replace(/\[([^\]]+)]/g,".$1").split(".").reduce((function(o,p,i,arr){if(void 0!==o[p])return o[p];arr.splice(1)}),obj);return void 0===foundValue?property in obj?obj[property]:"":foundValue},elementOrEmpty=exports.elementOrEmpty=function elementOrEmpty(element){return element||0===element?element:""},joiner=exports.joiner=function joiner(data){var separator=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",",enclosingCharacter=arguments.length>2&&void 0!==arguments[2]?arguments[2]:'"';return data.filter((function(e){return e})).map((function(row){return row.map((function(element){return elementOrEmpty(element)})).map((function(column){return""+enclosingCharacter+column+enclosingCharacter})).join(separator)})).join("\n")},arrays2csv=exports.arrays2csv=function arrays2csv(data,headers,separator,enclosingCharacter){return joiner(headers?[headers].concat(_toConsumableArray(data)):data,separator,enclosingCharacter)},jsons2csv=exports.jsons2csv=function jsons2csv(data,headers,separator,enclosingCharacter){return joiner(jsons2arrays(data,headers),separator,enclosingCharacter)},string2csv=exports.string2csv=function string2csv(data,headers,separator,enclosingCharacter){return headers?headers.join(separator)+"\n"+data:data},toCSV=exports.toCSV=function toCSV(data,headers,separator,enclosingCharacter){if(isJsons(data))return jsons2csv(data,headers,separator,enclosingCharacter);if(isArrays(data))return arrays2csv(data,headers,separator,enclosingCharacter);if("string"==typeof data)return string2csv(data,headers,separator);throw new TypeError('Data should be a "String", "Array of arrays" OR "Array of objects" ')};exports.buildURI=function buildURI(data,uFEFF,headers,separator,enclosingCharacter){var csv=toCSV(data,headers,separator,enclosingCharacter),type=isSafari()?"application/csv":"text/csv",blob=new Blob([uFEFF?"\ufeff":"",csv],{type}),dataURI="data:"+type+";charset=utf-8,"+(uFEFF?"\ufeff":"")+csv,URL=window.URL||window.webkitURL;return void 0===URL.createObjectURL?dataURI:URL.createObjectURL(blob)}},"./node_modules/react-csv/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.CSVLink=exports.CSVDownload=void 0;var _Download2=_interopRequireDefault(__webpack_require__("./node_modules/react-csv/lib/components/Download.js")),_Link2=_interopRequireDefault(__webpack_require__("./node_modules/react-csv/lib/components/Link.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.CSVDownload=_Download2.default,exports.CSVLink=_Link2.default},"./node_modules/react-csv/lib/metaProps.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.PropsNotForwarded=exports.defaultProps=exports.propTypes=void 0;(function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}})(__webpack_require__("./node_modules/react/index.js"));var _propTypes=__webpack_require__("./node_modules/prop-types/index.js");exports.propTypes={data:(0,_propTypes.oneOfType)([_propTypes.string,_propTypes.array]).isRequired,headers:_propTypes.array,target:_propTypes.string,separator:_propTypes.string,filename:_propTypes.string,uFEFF:_propTypes.bool,onClick:_propTypes.func,asyncOnClick:_propTypes.bool},exports.defaultProps={separator:",",filename:"generatedBy_react-csv.csv",uFEFF:!0,asyncOnClick:!1},exports.PropsNotForwarded=["data","headers"]},"./node_modules/react-draggable/build/cjs/Draggable.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"DraggableCore",{enumerable:!0,get:function(){return _DraggableCore.default}}),exports.default=void 0;var React=function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/react-draggable/node_modules/prop-types/index.js")),_reactDom=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_clsx=_interopRequireDefault(__webpack_require__("./node_modules/clsx/dist/clsx.m.js")),_domFns=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/domFns.js"),_positionFns=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/positionFns.js"),_shims=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/shims.js"),_DraggableCore=_interopRequireDefault(__webpack_require__("./node_modules/react-draggable/build/cjs/DraggableCore.js")),_log=_interopRequireDefault(__webpack_require__("./node_modules/react-draggable/build/cjs/utils/log.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}class Draggable extends React.Component{static getDerivedStateFromProps(_ref,_ref2){let{position}=_ref,{prevPropsPosition}=_ref2;return!position||prevPropsPosition&&position.x===prevPropsPosition.x&&position.y===prevPropsPosition.y?null:((0,_log.default)("Draggable: getDerivedStateFromProps %j",{position,prevPropsPosition}),{x:position.x,y:position.y,prevPropsPosition:{...position}})}constructor(props){super(props),_defineProperty(this,"onDragStart",((e,coreData)=>{(0,_log.default)("Draggable: onDragStart: %j",coreData);if(!1===this.props.onStart(e,(0,_positionFns.createDraggableData)(this,coreData)))return!1;this.setState({dragging:!0,dragged:!0})})),_defineProperty(this,"onDrag",((e,coreData)=>{if(!this.state.dragging)return!1;(0,_log.default)("Draggable: onDrag: %j",coreData);const uiData=(0,_positionFns.createDraggableData)(this,coreData),newState={x:uiData.x,y:uiData.y,slackX:0,slackY:0};if(this.props.bounds){const{x,y}=newState;newState.x+=this.state.slackX,newState.y+=this.state.slackY;const[newStateX,newStateY]=(0,_positionFns.getBoundPosition)(this,newState.x,newState.y);newState.x=newStateX,newState.y=newStateY,newState.slackX=this.state.slackX+(x-newState.x),newState.slackY=this.state.slackY+(y-newState.y),uiData.x=newState.x,uiData.y=newState.y,uiData.deltaX=newState.x-this.state.x,uiData.deltaY=newState.y-this.state.y}if(!1===this.props.onDrag(e,uiData))return!1;this.setState(newState)})),_defineProperty(this,"onDragStop",((e,coreData)=>{if(!this.state.dragging)return!1;if(!1===this.props.onStop(e,(0,_positionFns.createDraggableData)(this,coreData)))return!1;(0,_log.default)("Draggable: onDragStop: %j",coreData);const newState={dragging:!1,slackX:0,slackY:0};if(Boolean(this.props.position)){const{x,y}=this.props.position;newState.x=x,newState.y=y}this.setState(newState)})),this.state={dragging:!1,dragged:!1,x:props.position?props.position.x:props.defaultPosition.x,y:props.position?props.position.y:props.defaultPosition.y,prevPropsPosition:{...props.position},slackX:0,slackY:0,isElementSVG:!1},!props.position||props.onDrag||props.onStop||console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element.")}componentDidMount(){void 0!==window.SVGElement&&this.findDOMNode()instanceof window.SVGElement&&this.setState({isElementSVG:!0})}componentWillUnmount(){this.setState({dragging:!1})}findDOMNode(){var _this$props$nodeRef$c,_this$props;return null!==(_this$props$nodeRef$c=null===(_this$props=this.props)||void 0===_this$props||null===(_this$props=_this$props.nodeRef)||void 0===_this$props?void 0:_this$props.current)&&void 0!==_this$props$nodeRef$c?_this$props$nodeRef$c:_reactDom.default.findDOMNode(this)}render(){const{axis,bounds,children,defaultPosition,defaultClassName,defaultClassNameDragging,defaultClassNameDragged,position,positionOffset,scale,...draggableCoreProps}=this.props;let style={},svgTransform=null;const draggable=!Boolean(position)||this.state.dragging,validPosition=position||defaultPosition,transformOpts={x:(0,_positionFns.canDragX)(this)&&draggable?this.state.x:validPosition.x,y:(0,_positionFns.canDragY)(this)&&draggable?this.state.y:validPosition.y};this.state.isElementSVG?svgTransform=(0,_domFns.createSVGTransform)(transformOpts,positionOffset):style=(0,_domFns.createCSSTransform)(transformOpts,positionOffset);const className=(0,_clsx.default)(children.props.className||"",defaultClassName,{[defaultClassNameDragging]:this.state.dragging,[defaultClassNameDragged]:this.state.dragged});return React.createElement(_DraggableCore.default,_extends({},draggableCoreProps,{onStart:this.onDragStart,onDrag:this.onDrag,onStop:this.onDragStop}),React.cloneElement(React.Children.only(children),{className,style:{...children.props.style,...style},transform:svgTransform}))}}exports.default=Draggable,_defineProperty(Draggable,"displayName","Draggable"),_defineProperty(Draggable,"propTypes",{..._DraggableCore.default.propTypes,axis:_propTypes.default.oneOf(["both","x","y","none"]),bounds:_propTypes.default.oneOfType([_propTypes.default.shape({left:_propTypes.default.number,right:_propTypes.default.number,top:_propTypes.default.number,bottom:_propTypes.default.number}),_propTypes.default.string,_propTypes.default.oneOf([!1])]),defaultClassName:_propTypes.default.string,defaultClassNameDragging:_propTypes.default.string,defaultClassNameDragged:_propTypes.default.string,defaultPosition:_propTypes.default.shape({x:_propTypes.default.number,y:_propTypes.default.number}),positionOffset:_propTypes.default.shape({x:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string]),y:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string])}),position:_propTypes.default.shape({x:_propTypes.default.number,y:_propTypes.default.number}),className:_shims.dontSetMe,style:_shims.dontSetMe,transform:_shims.dontSetMe}),_defineProperty(Draggable,"defaultProps",{..._DraggableCore.default.defaultProps,axis:"both",bounds:!1,defaultClassName:"react-draggable",defaultClassNameDragging:"react-draggable-dragging",defaultClassNameDragged:"react-draggable-dragged",defaultPosition:{x:0,y:0},scale:1})},"./node_modules/react-draggable/build/cjs/DraggableCore.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var React=function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/react-draggable/node_modules/prop-types/index.js")),_reactDom=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_domFns=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/domFns.js"),_positionFns=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/positionFns.js"),_shims=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/shims.js"),_log=_interopRequireDefault(__webpack_require__("./node_modules/react-draggable/build/cjs/utils/log.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}const eventsFor_touch={start:"touchstart",move:"touchmove",stop:"touchend"},eventsFor_mouse={start:"mousedown",move:"mousemove",stop:"mouseup"};let dragEventFor=eventsFor_mouse;class DraggableCore extends React.Component{constructor(){super(...arguments),_defineProperty(this,"dragging",!1),_defineProperty(this,"lastX",NaN),_defineProperty(this,"lastY",NaN),_defineProperty(this,"touchIdentifier",null),_defineProperty(this,"mounted",!1),_defineProperty(this,"handleDragStart",(e=>{if(this.props.onMouseDown(e),!this.props.allowAnyClick&&"number"==typeof e.button&&0!==e.button)return!1;const thisNode=this.findDOMNode();if(!thisNode||!thisNode.ownerDocument||!thisNode.ownerDocument.body)throw new Error("<DraggableCore> not mounted on DragStart!");const{ownerDocument}=thisNode;if(this.props.disabled||!(e.target instanceof ownerDocument.defaultView.Node)||this.props.handle&&!(0,_domFns.matchesSelectorAndParentsTo)(e.target,this.props.handle,thisNode)||this.props.cancel&&(0,_domFns.matchesSelectorAndParentsTo)(e.target,this.props.cancel,thisNode))return;"touchstart"===e.type&&e.preventDefault();const touchIdentifier=(0,_domFns.getTouchIdentifier)(e);this.touchIdentifier=touchIdentifier;const position=(0,_positionFns.getControlPosition)(e,touchIdentifier,this);if(null==position)return;const{x,y}=position,coreEvent=(0,_positionFns.createCoreData)(this,x,y);(0,_log.default)("DraggableCore: handleDragStart: %j",coreEvent),(0,_log.default)("calling",this.props.onStart);!1!==this.props.onStart(e,coreEvent)&&!1!==this.mounted&&(this.props.enableUserSelectHack&&(0,_domFns.addUserSelectStyles)(ownerDocument),this.dragging=!0,this.lastX=x,this.lastY=y,(0,_domFns.addEvent)(ownerDocument,dragEventFor.move,this.handleDrag),(0,_domFns.addEvent)(ownerDocument,dragEventFor.stop,this.handleDragStop))})),_defineProperty(this,"handleDrag",(e=>{const position=(0,_positionFns.getControlPosition)(e,this.touchIdentifier,this);if(null==position)return;let{x,y}=position;if(Array.isArray(this.props.grid)){let deltaX=x-this.lastX,deltaY=y-this.lastY;if([deltaX,deltaY]=(0,_positionFns.snapToGrid)(this.props.grid,deltaX,deltaY),!deltaX&&!deltaY)return;x=this.lastX+deltaX,y=this.lastY+deltaY}const coreEvent=(0,_positionFns.createCoreData)(this,x,y);(0,_log.default)("DraggableCore: handleDrag: %j",coreEvent);if(!1!==this.props.onDrag(e,coreEvent)&&!1!==this.mounted)this.lastX=x,this.lastY=y;else try{this.handleDragStop(new MouseEvent("mouseup"))}catch(err){const event=document.createEvent("MouseEvents");event.initMouseEvent("mouseup",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),this.handleDragStop(event)}})),_defineProperty(this,"handleDragStop",(e=>{if(!this.dragging)return;const position=(0,_positionFns.getControlPosition)(e,this.touchIdentifier,this);if(null==position)return;let{x,y}=position;if(Array.isArray(this.props.grid)){let deltaX=x-this.lastX||0,deltaY=y-this.lastY||0;[deltaX,deltaY]=(0,_positionFns.snapToGrid)(this.props.grid,deltaX,deltaY),x=this.lastX+deltaX,y=this.lastY+deltaY}const coreEvent=(0,_positionFns.createCoreData)(this,x,y);if(!1===this.props.onStop(e,coreEvent)||!1===this.mounted)return!1;const thisNode=this.findDOMNode();thisNode&&this.props.enableUserSelectHack&&(0,_domFns.removeUserSelectStyles)(thisNode.ownerDocument),(0,_log.default)("DraggableCore: handleDragStop: %j",coreEvent),this.dragging=!1,this.lastX=NaN,this.lastY=NaN,thisNode&&((0,_log.default)("DraggableCore: Removing handlers"),(0,_domFns.removeEvent)(thisNode.ownerDocument,dragEventFor.move,this.handleDrag),(0,_domFns.removeEvent)(thisNode.ownerDocument,dragEventFor.stop,this.handleDragStop))})),_defineProperty(this,"onMouseDown",(e=>(dragEventFor=eventsFor_mouse,this.handleDragStart(e)))),_defineProperty(this,"onMouseUp",(e=>(dragEventFor=eventsFor_mouse,this.handleDragStop(e)))),_defineProperty(this,"onTouchStart",(e=>(dragEventFor=eventsFor_touch,this.handleDragStart(e)))),_defineProperty(this,"onTouchEnd",(e=>(dragEventFor=eventsFor_touch,this.handleDragStop(e))))}componentDidMount(){this.mounted=!0;const thisNode=this.findDOMNode();thisNode&&(0,_domFns.addEvent)(thisNode,eventsFor_touch.start,this.onTouchStart,{passive:!1})}componentWillUnmount(){this.mounted=!1;const thisNode=this.findDOMNode();if(thisNode){const{ownerDocument}=thisNode;(0,_domFns.removeEvent)(ownerDocument,eventsFor_mouse.move,this.handleDrag),(0,_domFns.removeEvent)(ownerDocument,eventsFor_touch.move,this.handleDrag),(0,_domFns.removeEvent)(ownerDocument,eventsFor_mouse.stop,this.handleDragStop),(0,_domFns.removeEvent)(ownerDocument,eventsFor_touch.stop,this.handleDragStop),(0,_domFns.removeEvent)(thisNode,eventsFor_touch.start,this.onTouchStart,{passive:!1}),this.props.enableUserSelectHack&&(0,_domFns.removeUserSelectStyles)(ownerDocument)}}findDOMNode(){var _this$props,_this$props2;return null!==(_this$props=this.props)&&void 0!==_this$props&&_this$props.nodeRef?null===(_this$props2=this.props)||void 0===_this$props2||null===(_this$props2=_this$props2.nodeRef)||void 0===_this$props2?void 0:_this$props2.current:_reactDom.default.findDOMNode(this)}render(){return React.cloneElement(React.Children.only(this.props.children),{onMouseDown:this.onMouseDown,onMouseUp:this.onMouseUp,onTouchEnd:this.onTouchEnd})}}exports.default=DraggableCore,_defineProperty(DraggableCore,"displayName","DraggableCore"),_defineProperty(DraggableCore,"propTypes",{allowAnyClick:_propTypes.default.bool,children:_propTypes.default.node.isRequired,disabled:_propTypes.default.bool,enableUserSelectHack:_propTypes.default.bool,offsetParent:function(props,propName){if(props[propName]&&1!==props[propName].nodeType)throw new Error("Draggable's offsetParent must be a DOM Node.")},grid:_propTypes.default.arrayOf(_propTypes.default.number),handle:_propTypes.default.string,cancel:_propTypes.default.string,nodeRef:_propTypes.default.object,onStart:_propTypes.default.func,onDrag:_propTypes.default.func,onStop:_propTypes.default.func,onMouseDown:_propTypes.default.func,scale:_propTypes.default.number,className:_shims.dontSetMe,style:_shims.dontSetMe,transform:_shims.dontSetMe}),_defineProperty(DraggableCore,"defaultProps",{allowAnyClick:!1,disabled:!1,enableUserSelectHack:!0,onStart:function(){},onDrag:function(){},onStop:function(){},onMouseDown:function(){},scale:1})},"./node_modules/react-draggable/build/cjs/cjs.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";const{default:Draggable,DraggableCore}=__webpack_require__("./node_modules/react-draggable/build/cjs/Draggable.js");module.exports=Draggable,module.exports.default=Draggable,module.exports.DraggableCore=DraggableCore},"./node_modules/react-draggable/build/cjs/utils/domFns.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.addClassName=addClassName,exports.addEvent=function addEvent(el,event,handler,inputOptions){if(!el)return;const options={capture:!0,...inputOptions};el.addEventListener?el.addEventListener(event,handler,options):el.attachEvent?el.attachEvent("on"+event,handler):el["on"+event]=handler},exports.addUserSelectStyles=function addUserSelectStyles(doc){if(!doc)return;let styleEl=doc.getElementById("react-draggable-style-el");styleEl||(styleEl=doc.createElement("style"),styleEl.type="text/css",styleEl.id="react-draggable-style-el",styleEl.innerHTML=".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n",styleEl.innerHTML+=".react-draggable-transparent-selection *::selection {all: inherit;}\n",doc.getElementsByTagName("head")[0].appendChild(styleEl));doc.body&&addClassName(doc.body,"react-draggable-transparent-selection")},exports.createCSSTransform=function createCSSTransform(controlPos,positionOffset){const translation=getTranslation(controlPos,positionOffset,"px");return{[(0,_getPrefix.browserPrefixToKey)("transform",_getPrefix.default)]:translation}},exports.createSVGTransform=function createSVGTransform(controlPos,positionOffset){return getTranslation(controlPos,positionOffset,"")},exports.getTouch=function getTouch(e,identifier){return e.targetTouches&&(0,_shims.findInArray)(e.targetTouches,(t=>identifier===t.identifier))||e.changedTouches&&(0,_shims.findInArray)(e.changedTouches,(t=>identifier===t.identifier))},exports.getTouchIdentifier=function getTouchIdentifier(e){if(e.targetTouches&&e.targetTouches[0])return e.targetTouches[0].identifier;if(e.changedTouches&&e.changedTouches[0])return e.changedTouches[0].identifier},exports.getTranslation=getTranslation,exports.innerHeight=function innerHeight(node){let height=node.clientHeight;const computedStyle=node.ownerDocument.defaultView.getComputedStyle(node);return height-=(0,_shims.int)(computedStyle.paddingTop),height-=(0,_shims.int)(computedStyle.paddingBottom),height},exports.innerWidth=function innerWidth(node){let width=node.clientWidth;const computedStyle=node.ownerDocument.defaultView.getComputedStyle(node);return width-=(0,_shims.int)(computedStyle.paddingLeft),width-=(0,_shims.int)(computedStyle.paddingRight),width},exports.matchesSelector=matchesSelector,exports.matchesSelectorAndParentsTo=function matchesSelectorAndParentsTo(el,selector,baseNode){let node=el;do{if(matchesSelector(node,selector))return!0;if(node===baseNode)return!1;node=node.parentNode}while(node);return!1},exports.offsetXYFromParent=function offsetXYFromParent(evt,offsetParent,scale){const offsetParentRect=offsetParent===offsetParent.ownerDocument.body?{left:0,top:0}:offsetParent.getBoundingClientRect(),x=(evt.clientX+offsetParent.scrollLeft-offsetParentRect.left)/scale,y=(evt.clientY+offsetParent.scrollTop-offsetParentRect.top)/scale;return{x,y}},exports.outerHeight=function outerHeight(node){let height=node.clientHeight;const computedStyle=node.ownerDocument.defaultView.getComputedStyle(node);return height+=(0,_shims.int)(computedStyle.borderTopWidth),height+=(0,_shims.int)(computedStyle.borderBottomWidth),height},exports.outerWidth=function outerWidth(node){let width=node.clientWidth;const computedStyle=node.ownerDocument.defaultView.getComputedStyle(node);return width+=(0,_shims.int)(computedStyle.borderLeftWidth),width+=(0,_shims.int)(computedStyle.borderRightWidth),width},exports.removeClassName=removeClassName,exports.removeEvent=function removeEvent(el,event,handler,inputOptions){if(!el)return;const options={capture:!0,...inputOptions};el.removeEventListener?el.removeEventListener(event,handler,options):el.detachEvent?el.detachEvent("on"+event,handler):el["on"+event]=null},exports.removeUserSelectStyles=function removeUserSelectStyles(doc){if(!doc)return;try{if(doc.body&&removeClassName(doc.body,"react-draggable-transparent-selection"),doc.selection)doc.selection.empty();else{const selection=(doc.defaultView||window).getSelection();selection&&"Caret"!==selection.type&&selection.removeAllRanges()}}catch(e){}};var _shims=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/shims.js"),_getPrefix=function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(__webpack_require__("./node_modules/react-draggable/build/cjs/utils/getPrefix.js"));function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}let matchesSelectorFunc="";function matchesSelector(el,selector){return matchesSelectorFunc||(matchesSelectorFunc=(0,_shims.findInArray)(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],(function(method){return(0,_shims.isFunction)(el[method])}))),!!(0,_shims.isFunction)(el[matchesSelectorFunc])&&el[matchesSelectorFunc](selector)}function getTranslation(_ref,positionOffset,unitSuffix){let{x,y}=_ref,translation="translate(".concat(x).concat(unitSuffix,",").concat(y).concat(unitSuffix,")");if(positionOffset){const defaultX="".concat("string"==typeof positionOffset.x?positionOffset.x:positionOffset.x+unitSuffix),defaultY="".concat("string"==typeof positionOffset.y?positionOffset.y:positionOffset.y+unitSuffix);translation="translate(".concat(defaultX,", ").concat(defaultY,")")+translation}return translation}function addClassName(el,className){el.classList?el.classList.add(className):el.className.match(new RegExp("(?:^|\\s)".concat(className,"(?!\\S)")))||(el.className+=" ".concat(className))}function removeClassName(el,className){el.classList?el.classList.remove(className):el.className=el.className.replace(new RegExp("(?:^|\\s)".concat(className,"(?!\\S)"),"g"),"")}},"./node_modules/react-draggable/build/cjs/utils/getPrefix.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.browserPrefixToKey=browserPrefixToKey,exports.browserPrefixToStyle=function browserPrefixToStyle(prop,prefix){return prefix?"-".concat(prefix.toLowerCase(),"-").concat(prop):prop},exports.default=void 0,exports.getPrefix=getPrefix;const prefixes=["Moz","Webkit","O","ms"];function getPrefix(){var _window$document;let prop=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";if("undefined"==typeof window)return"";const style=null===(_window$document=window.document)||void 0===_window$document||null===(_window$document=_window$document.documentElement)||void 0===_window$document?void 0:_window$document.style;if(!style)return"";if(prop in style)return"";for(let i=0;i<prefixes.length;i++)if(browserPrefixToKey(prop,prefixes[i])in style)return prefixes[i];return""}function browserPrefixToKey(prop,prefix){return prefix?"".concat(prefix).concat(function kebabToTitleCase(str){let out="",shouldCapitalize=!0;for(let i=0;i<str.length;i++)shouldCapitalize?(out+=str[i].toUpperCase(),shouldCapitalize=!1):"-"===str[i]?shouldCapitalize=!0:out+=str[i];return out}(prop)):prop}exports.default=getPrefix()},"./node_modules/react-draggable/build/cjs/utils/log.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function log(){0}},"./node_modules/react-draggable/build/cjs/utils/positionFns.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.canDragX=function canDragX(draggable){return"both"===draggable.props.axis||"x"===draggable.props.axis},exports.canDragY=function canDragY(draggable){return"both"===draggable.props.axis||"y"===draggable.props.axis},exports.createCoreData=function createCoreData(draggable,x,y){const isStart=!(0,_shims.isNum)(draggable.lastX),node=findDOMNode(draggable);return isStart?{node,deltaX:0,deltaY:0,lastX:x,lastY:y,x,y}:{node,deltaX:x-draggable.lastX,deltaY:y-draggable.lastY,lastX:draggable.lastX,lastY:draggable.lastY,x,y}},exports.createDraggableData=function createDraggableData(draggable,coreData){const scale=draggable.props.scale;return{node:coreData.node,x:draggable.state.x+coreData.deltaX/scale,y:draggable.state.y+coreData.deltaY/scale,deltaX:coreData.deltaX/scale,deltaY:coreData.deltaY/scale,lastX:draggable.state.x,lastY:draggable.state.y}},exports.getBoundPosition=function getBoundPosition(draggable,x,y){if(!draggable.props.bounds)return[x,y];let{bounds}=draggable.props;bounds="string"==typeof bounds?bounds:function cloneBounds(bounds){return{left:bounds.left,top:bounds.top,right:bounds.right,bottom:bounds.bottom}}(bounds);const node=findDOMNode(draggable);if("string"==typeof bounds){const{ownerDocument}=node,ownerWindow=ownerDocument.defaultView;let boundNode;if(boundNode="parent"===bounds?node.parentNode:ownerDocument.querySelector(bounds),!(boundNode instanceof ownerWindow.HTMLElement))throw new Error('Bounds selector "'+bounds+'" could not find an element.');const boundNodeEl=boundNode,nodeStyle=ownerWindow.getComputedStyle(node),boundNodeStyle=ownerWindow.getComputedStyle(boundNodeEl);bounds={left:-node.offsetLeft+(0,_shims.int)(boundNodeStyle.paddingLeft)+(0,_shims.int)(nodeStyle.marginLeft),top:-node.offsetTop+(0,_shims.int)(boundNodeStyle.paddingTop)+(0,_shims.int)(nodeStyle.marginTop),right:(0,_domFns.innerWidth)(boundNodeEl)-(0,_domFns.outerWidth)(node)-node.offsetLeft+(0,_shims.int)(boundNodeStyle.paddingRight)-(0,_shims.int)(nodeStyle.marginRight),bottom:(0,_domFns.innerHeight)(boundNodeEl)-(0,_domFns.outerHeight)(node)-node.offsetTop+(0,_shims.int)(boundNodeStyle.paddingBottom)-(0,_shims.int)(nodeStyle.marginBottom)}}(0,_shims.isNum)(bounds.right)&&(x=Math.min(x,bounds.right));(0,_shims.isNum)(bounds.bottom)&&(y=Math.min(y,bounds.bottom));(0,_shims.isNum)(bounds.left)&&(x=Math.max(x,bounds.left));(0,_shims.isNum)(bounds.top)&&(y=Math.max(y,bounds.top));return[x,y]},exports.getControlPosition=function getControlPosition(e,touchIdentifier,draggableCore){const touchObj="number"==typeof touchIdentifier?(0,_domFns.getTouch)(e,touchIdentifier):null;if("number"==typeof touchIdentifier&&!touchObj)return null;const node=findDOMNode(draggableCore),offsetParent=draggableCore.props.offsetParent||node.offsetParent||node.ownerDocument.body;return(0,_domFns.offsetXYFromParent)(touchObj||e,offsetParent,draggableCore.props.scale)},exports.snapToGrid=function snapToGrid(grid,pendingX,pendingY){const x=Math.round(pendingX/grid[0])*grid[0],y=Math.round(pendingY/grid[1])*grid[1];return[x,y]};var _shims=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/shims.js"),_domFns=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/domFns.js");function findDOMNode(draggable){const node=draggable.findDOMNode();if(!node)throw new Error("<DraggableCore>: Unmounted during event!");return node}},"./node_modules/react-draggable/build/cjs/utils/shims.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.dontSetMe=function dontSetMe(props,propName,componentName){if(props[propName])return new Error("Invalid prop ".concat(propName," passed to ").concat(componentName," - do not set this, set it on the child."))},exports.findInArray=function findInArray(array,callback){for(let i=0,length=array.length;i<length;i++)if(callback.apply(callback,[array[i],i,array]))return array[i]},exports.int=function int(a){return parseInt(a,10)},exports.isFunction=function isFunction(func){return"function"==typeof func||"[object Function]"===Object.prototype.toString.call(func)},exports.isNum=function isNum(num){return"number"==typeof num&&!isNaN(num)}},"./node_modules/react-draggable/node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/react-draggable/node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}function emptyFunctionWithReset(){}emptyFunctionWithReset.resetWarningCache=emptyFunction,module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bigint:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,elementType:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim,checkPropTypes:emptyFunctionWithReset,resetWarningCache:emptyFunction};return ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/react-draggable/node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react-draggable/node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/react-draggable/node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/intro.js-react/dist/cjs/components/Hints/index.cjs":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _intro=_interopRequireDefault(__webpack_require__("./node_modules/intro.js/intro.module.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=__webpack_require__("./node_modules/react/index.js"),introJsPropTypes=_interopRequireWildcard(__webpack_require__("./node_modules/intro.js-react/dist/cjs/helpers/proptypes.cjs")),introJsDefaultProps=_interopRequireWildcard(__webpack_require__("./node_modules/intro.js-react/dist/cjs/helpers/defaultProps.cjs")),_server=__webpack_require__("./node_modules/intro.js-react/dist/cjs/helpers/server.cjs");function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class Hints extends _react.Component{static propTypes={enabled:_propTypes.default.bool,hints:_propTypes.default.arrayOf(_propTypes.default.shape({element:_propTypes.default.string.isRequired,hint:_propTypes.default.string.isRequired,hintPosition:introJsPropTypes.hintPosition})).isRequired,onClick:_propTypes.default.func,onClose:_propTypes.default.func,options:introJsPropTypes.options};static defaultProps={enabled:!1,onClick:null,onClose:null,options:introJsDefaultProps.options};constructor(props){super(props),this.introJs=null,this.isConfigured=!1,this.installIntroJs()}componentDidMount(){this.props.enabled&&(this.configureIntroJs(),this.renderHints())}componentDidUpdate(prevProps){const{enabled,hints,options}=this.props;this.isConfigured&&prevProps.hints===hints&&prevProps.options===options||(this.configureIntroJs(),this.renderHints()),prevProps.enabled!==enabled&&this.renderHints()}componentWillUnmount(){this.introJs.hideHints()}installIntroJs(){if((0,_server.isServer)())return;this.introJs=(0,_intro.default)();const{onClick,onClose}=this.props;onClick&&this.introJs.onhintclick(onClick),onClose&&this.introJs.onhintclose(onClose)}configureIntroJs(){const{options,hints}=this.props;this.introJs.removeHints(),this.introJs.setOptions({...options,hints}),this.isConfigured=!0}renderHints(){const{enabled,hints}=this.props;enabled&&hints.length>0?this.introJs.showHints():enabled||this.introJs.hideHints()}render(){return null}}exports.default=Hints},"./node_modules/intro.js-react/dist/cjs/components/Steps/index.cjs":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _intro=_interopRequireDefault(__webpack_require__("./node_modules/intro.js/intro.module.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=__webpack_require__("./node_modules/react/index.js"),_server=__webpack_require__("./node_modules/react-dom/server.browser.js"),introJsPropTypes=_interopRequireWildcard(__webpack_require__("./node_modules/intro.js-react/dist/cjs/helpers/proptypes.cjs")),introJsDefaultProps=_interopRequireWildcard(__webpack_require__("./node_modules/intro.js-react/dist/cjs/helpers/defaultProps.cjs")),_server2=__webpack_require__("./node_modules/intro.js-react/dist/cjs/helpers/server.cjs");function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class Steps extends _react.Component{static propTypes={enabled:_propTypes.default.bool,initialStep:_propTypes.default.number.isRequired,steps:_propTypes.default.arrayOf(_propTypes.default.shape({element:_propTypes.default.oneOfType([_propTypes.default.string,"undefined"==typeof Element?_propTypes.default.any:_propTypes.default.instanceOf(Element)]),intro:_propTypes.default.node.isRequired,position:introJsPropTypes.tooltipPosition,tooltipClass:_propTypes.default.string,highlightClass:_propTypes.default.string})).isRequired,onStart:_propTypes.default.func,onExit:_propTypes.default.func.isRequired,onBeforeExit:_propTypes.default.func,onBeforeChange:_propTypes.default.func,onAfterChange:_propTypes.default.func,onChange:_propTypes.default.func,onPreventChange:_propTypes.default.func,onComplete:_propTypes.default.func,options:introJsPropTypes.options};static defaultProps={enabled:!1,onStart:null,onBeforeExit:null,onBeforeChange:null,onAfterChange:null,onChange:null,onPreventChange:null,onComplete:null,options:introJsDefaultProps.options};constructor(props){super(props),this.introJs=null,this.isConfigured=!1,this.isVisible=!1,this.installIntroJs()}componentDidMount(){this.props.enabled&&(this.configureIntroJs(),this.renderSteps())}componentDidUpdate(prevProps){const{enabled,steps,options}=this.props;this.isConfigured&&prevProps.steps===steps&&prevProps.options===options||(this.configureIntroJs(),this.renderSteps()),prevProps.enabled!==enabled&&this.renderSteps()}componentWillUnmount(){this.introJs.exit()}onExit=()=>{const{onExit}=this.props;this.isVisible=!1,onExit(this.introJs._currentStep)};onBeforeExit=()=>{const{onBeforeExit}=this.props;return!onBeforeExit||onBeforeExit(this.introJs._currentStep)};onBeforeChange=nextElement=>{if(!this.isVisible)return!0;const{onBeforeChange,onPreventChange}=this.props;if(onBeforeChange){const continueStep=onBeforeChange(this.introJs._currentStep,nextElement);return!1===continueStep&&onPreventChange&&setTimeout((()=>{onPreventChange(this.introJs._currentStep)}),0),continueStep}return!0};onAfterChange=element=>{if(!this.isVisible)return;const{onAfterChange}=this.props;onAfterChange&&onAfterChange(this.introJs._currentStep,element)};onChange=element=>{if(!this.isVisible)return;const{onChange}=this.props;onChange&&onChange(this.introJs._currentStep,element)};onComplete=()=>{const{onComplete}=this.props;onComplete&&onComplete()};updateStepElement=stepIndex=>{const element=document.querySelector(this.introJs._options.steps[stepIndex].element);element&&(this.introJs._introItems[stepIndex].element=element,this.introJs._introItems[stepIndex].position=this.introJs._options.steps[stepIndex].position||"auto")};installIntroJs(){(0,_server2.isServer)()||(this.introJs=(0,_intro.default)(),this.introJs.onexit(this.onExit),this.introJs.onbeforeexit(this.onBeforeExit),this.introJs.onbeforechange(this.onBeforeChange),this.introJs.onafterchange(this.onAfterChange),this.introJs.onchange(this.onChange),this.introJs.oncomplete(this.onComplete))}configureIntroJs(){const{options,steps}=this.props,sanitizedSteps=steps.map((step=>(0,_react.isValidElement)(step.intro)?{...step,intro:(0,_server.renderToStaticMarkup)(step.intro)}:step));this.introJs.setOptions({...options,steps:sanitizedSteps}),this.isConfigured=!0}renderSteps(){const{enabled,initialStep,steps,onStart}=this.props;enabled&&steps.length>0&&!this.isVisible?(this.introJs.start(),this.isVisible=!0,this.introJs.goToStepNumber(initialStep+1),onStart&&onStart(this.introJs._currentStep)):!enabled&&this.isVisible&&(this.isVisible=!1,this.introJs.exit())}render(){return null}}exports.default=Steps},"./node_modules/intro.js-react/dist/cjs/helpers/defaultProps.cjs":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.options=void 0;exports.options={hidePrev:!0,hideNext:!0}},"./node_modules/intro.js-react/dist/cjs/helpers/proptypes.cjs":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.tooltipPosition=exports.options=exports.hintPosition=void 0;var _propTypes=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/prop-types/index.js"));const tooltipPosition=_propTypes.default.oneOf(["top","right","bottom","left","bottom-left-aligned","bottom-middle-aligned","bottom-right-aligned","top-left-aligned","top-middle-aligned","top-right-aligned","auto"]);exports.tooltipPosition=tooltipPosition;const hintPosition=_propTypes.default.oneOf(["top-middle","top-left","top-right","bottom-left","bottom-right","bottom-middle","middle-left","middle-right","middle-middle"]);exports.hintPosition=hintPosition;const options=_propTypes.default.shape({nextLabel:_propTypes.default.string,prevLabel:_propTypes.default.string,skipLabel:_propTypes.default.string,doneLabel:_propTypes.default.string,hidePrev:_propTypes.default.bool,hideNext:_propTypes.default.bool,tooltipPosition,tooltipClass:_propTypes.default.string,highlightClass:_propTypes.default.string,exitOnEsc:_propTypes.default.bool,exitOnOverlayClick:_propTypes.default.bool,showStepNumbers:_propTypes.default.bool,keyboardNavigation:_propTypes.default.bool,showButtons:_propTypes.default.bool,showBullets:_propTypes.default.bool,showProgress:_propTypes.default.bool,scrollToElement:_propTypes.default.bool,overlayOpacity:_propTypes.default.number,scrollPadding:_propTypes.default.number,positionPrecedence:_propTypes.default.arrayOf(_propTypes.default.string),disableInteraction:_propTypes.default.bool,hintPosition,hintButtonLabel:_propTypes.default.string,hintAnimation:_propTypes.default.bool});exports.options=options},"./node_modules/intro.js-react/dist/cjs/helpers/server.cjs":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.isServer=function isServer(){return"undefined"==typeof window}},"./node_modules/intro.js-react/dist/cjs/index.cjs":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"Hints",{enumerable:!0,get:function(){return _index2.default}}),Object.defineProperty(exports,"Steps",{enumerable:!0,get:function(){return _index.default}});var _index=_interopRequireDefault(__webpack_require__("./node_modules/intro.js-react/dist/cjs/components/Steps/index.cjs")),_index2=_interopRequireDefault(__webpack_require__("./node_modules/intro.js-react/dist/cjs/components/Hints/index.cjs"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,