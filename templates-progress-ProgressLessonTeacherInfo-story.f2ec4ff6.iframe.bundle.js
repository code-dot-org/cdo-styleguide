/*! For license information please see templates-progress-ProgressLessonTeacherInfo-story.f2ec4ff6.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[1326],{"./src/code-studio/browserNavigation.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.canChangeLevelInPage=function canChangeLevelInPage(currentLevel,newLevel){return(null==currentLevel?void 0:currentLevel.usesLab2)&&(null==newLevel?void 0:newLevel.usesLab2)},exports.setWindowTitle=setWindowTitle,exports.setupNavigationHandler=function setupNavigationHandler(lessonData){window.addEventListener("popstate",(function(event){var path=new URL(document.location).pathname;if(path){var values=path.split("/",9);if(!(values.length<7)){var sublevelNumber,levelNumber=Number(values[6]);if(Number.isInteger(levelNumber)&&!(levelNumber<=0))values.length>8&&(sublevelNumber=Number(values[8]),(!Number.isInteger(sublevelNumber)||sublevelNumber<=0)&&(sublevelNumber=void 0)),(0,_redux.getStore)().dispatch((0,_progressRedux.onLevelIndexChange)(levelNumber-1,sublevelNumber&&sublevelNumber-1))}}}))},exports.updateBrowserForLevelNavigation=function updateBrowserForLevelNavigation(progressStoreState,levelPath,levelId){window.history.pushState({},"",levelPath+window.location.search),setWindowTitle(progressStoreState,levelId)};var _progressRedux=__webpack_require__("./src/code-studio/progressRedux.ts"),_redux=__webpack_require__("./src/redux.js");function setWindowTitle(progressStoreState,newLevelId){var lesson=progressStoreState.lessons.find((function(lesson){return lesson.id===progressStoreState.currentLessonId})),numLessons=lesson.num_script_lessons,lessonName=lesson.name,lessonIndex=lesson.levels.findIndex((function(level){return level.activeId===newLevelId}))+1,scriptDisplayName=progressStoreState.scriptDisplayName;document.title=numLessons>1?"".concat(lessonName," #").concat(lessonIndex," | ").concat(scriptDisplayName," - Code.org"):"".concat(lessonName," #").concat(lessonIndex," - Code.org")}},"./src/code-studio/verifiedInstructorRedux.js":(__unused_webpack_module,exports)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function verifiedInstructor(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_VERIFIED)return _objectSpread(_objectSpread({},state),{},{isVerified:!0});if(action.type===SET_VERIFIED_RESOURCES)return _objectSpread(_objectSpread({},state),{},{hasVerifiedResources:!0});return _objectSpread({},state)},exports.setVerifiedResources=exports.setVerified=void 0;var SET_VERIFIED="verifiedInstructor/SET_VERIFIED",SET_VERIFIED_RESOURCES="verifiedInstructor/SET_VERIFIED_RESOURCES",initialState=(exports.setVerified=function setVerified(){return{type:SET_VERIFIED}},exports.setVerifiedResources=function setVerifiedResources(hasVerifiedResources){return{type:SET_VERIFIED_RESOURCES}},{isVerified:!1,hasVerifiedResources:!1})},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./src/code-studio/progressRedux.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var _a,_b,__assign=this&&this.__assign||function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=this&&this.__generator||function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;g&&(g=0,op[0]&&(_=0)),_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.__testonly__=exports.setViewAsUserId=exports.setLessonExtrasEnabled=exports.setScriptCompleted=exports.setCurrentLessonId=exports.setStudentDefaultsSummaryView=exports.setIsMiniView=exports.setIsSummaryView=exports.setIsAge13Required=exports.disablePostMilestone=exports.updateFocusArea=exports.mergePeerReviewProgress=exports.overwriteResults=exports.mergeResults=exports.useDbProgress=exports.clearResults=exports.setScriptProgress=exports.setCurrentLevelId=exports.initProgress=exports.processedLessons=exports.sendPredictLevelReport=exports.sendSuccessReport=exports.navigateToNextLevel=exports.onLevelIndexChange=exports.navigateToLevelId=exports.queryUserProgress=void 0;var toolkit_1=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js"),jquery_1=__importDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),lodash_1=__importDefault(__webpack_require__("./node_modules/lodash/lodash.js")),verifiedInstructorRedux_1=__webpack_require__("./src/code-studio/verifiedInstructorRedux.js"),constants_1=__webpack_require__("./src/constants.js"),progressHelpers_1=__webpack_require__("./src/templates/progress/progressHelpers.js"),progressTypes_1=__webpack_require__("./src/types/progressTypes.ts"),BubbleFactory_1=__webpack_require__("./src/templates/progress/BubbleFactory.jsx"),utils_1=__webpack_require__("./src/utils.js"),activityUtils_1=__webpack_require__("./src/code-studio/activityUtils.js"),browserNavigation_1=__webpack_require__("./src/code-studio/browserNavigation.js"),lessonLockRedux_1=__webpack_require__("./src/code-studio/lessonLockRedux.js"),progressReduxSelectors_1=__webpack_require__("./src/code-studio/progressReduxSelectors.js"),viewAsRedux_1=__webpack_require__("./src/code-studio/viewAsRedux.js"),initialState={currentLevelId:null,currentLessonId:void 0,deeperLearningCourse:null,saveAnswersBeforeNavigation:null,lessons:null,lessonGroups:null,scriptId:null,viewAsUserId:null,scriptName:null,scriptDisplayName:void 0,unitTitle:null,courseId:null,isLessonExtras:!1,unitProgress:{},unitProgressHasLoaded:!1,levelResults:{},focusAreaLessonIds:[],peerReviewLessonInfo:null,peerReviewsPerformed:[],postMilestoneDisabled:!1,isAge13Required:!1,studentDefaultsSummaryView:!0,isSummaryView:!0,isMiniView:!1,hasFullProgress:!1,lessonExtrasEnabled:!1,usingDbProgress:!1,currentPageNumber:progressTypes_1.PUZZLE_PAGE_NONE,courseVersionId:void 0,unitDescription:void 0,unitStudentDescription:void 0,changeFocusAreaPath:void 0,unitCompleted:void 0},progressSlice=(0,toolkit_1.createSlice)({name:"progress",initialState,reducers:{initProgress:function(state,action){var lessons=action.payload.lessons,currentLessonId=state.currentLessonId||(1===lessons.length?lessons[0].id:void 0);state.currentLevelId||(state.currentLevelId=action.payload.currentLevelId),state.deeperLearningCourse=action.payload.deeperLearningCourse,state.saveAnswersBeforeNavigation=action.payload.saveAnswersBeforeNavigation,state.lessons=processedLessons(lessons,action.payload.deeperLearningCourse),state.lessonGroups=action.payload.lessonGroups,state.peerReviewLessonInfo=action.payload.peerReviewLessonInfo,state.scriptId=action.payload.scriptId,state.scriptName=action.payload.scriptName,state.scriptDisplayName=action.payload.scriptDisplayName,state.unitTitle=action.payload.unitTitle,state.unitDescription=action.payload.unitDescription,state.unitStudentDescription=action.payload.unitStudentDescription,state.courseId=action.payload.courseId,state.courseVersionId=action.payload.courseVersionId,state.currentLessonId=currentLessonId,state.hasFullProgress=action.payload.isFullProgress,state.isLessonExtras=action.payload.isLessonExtras,state.currentPageNumber=action.payload.currentPageNumber},setCurrentLevelId:function(state,action){state.currentLevelId=action.payload},setScriptProgress:function(state,action){state.unitProgress=(0,progressHelpers_1.processServerStudentProgress)(action.payload),state.unitProgressHasLoaded=!0},clearResults:function(state){state.levelResults=initialState.levelResults},useDbProgress:function(state){state.usingDbProgress=!0},mergeResults:function(state,action){var newLevelResults={};Object.keys(__assign(__assign({},state.levelResults),action.payload)).forEach((function(key){var levelId=parseInt(key);newLevelResults[levelId]=(0,activityUtils_1.mergeActivityResult)(state.levelResults[levelId],action.payload[levelId])})),state.levelResults=newLevelResults},overwriteResults:function(state,action){state.levelResults=action.payload},mergePeerReviewProgress:function(state,action){state.peerReviewLessonInfo&&(state.peerReviewLessonInfo=__assign(__assign({},state.peerReviewLessonInfo),{levels:state.peerReviewLessonInfo.levels.map((function(level,index){return __assign(__assign({},level),action.payload[index])}))}))},updateFocusArea:{reducer:function(state,action){state.changeFocusAreaPath=action.payload.changeFocusAreaPath,state.focusAreaLessonIds=action.payload.focusAreaLessonIds},prepare:function(changeFocusAreaPath,focusAreaLessonIds){return{payload:{changeFocusAreaPath,focusAreaLessonIds}}}},disablePostMilestone:function(state){state.postMilestoneDisabled=!0},setIsAge13Required:function(state,action){state.isAge13Required=action.payload},setIsSummaryView:function(state,action){state.isSummaryView=action.payload},setIsMiniView:function(state,action){state.isMiniView=action.payload},setStudentDefaultsSummaryView:function(state,action){state.studentDefaultsSummaryView=action.payload},setCurrentLessonId:function(state,action){state.currentLessonId||(state.currentLessonId=action.payload)},setScriptCompleted:function(state){state.unitCompleted=!0},setLessonExtrasEnabled:function(state,action){state.lessonExtrasEnabled=action.payload},setViewAsUserId:function(state,action){state.viewAsUserId=action.payload}},extraReducers:(_a={},_a[viewAsRedux_1.SET_VIEW_TYPE]=function(state,action){state.isSummaryView=action.viewType===progressTypes_1.ViewType.Participant&&state.studentDefaultsSummaryView},_a)});function navigateToLevelId(levelId){return function(dispatch,getState){var state=getState().progress;if(state.currentLessonId&&state.currentLevelId){var newLevel=(0,progressReduxSelectors_1.levelById)(state,state.currentLessonId,levelId);if(newLevel){var currentLevel=(0,progressReduxSelectors_1.getCurrentLevel)(getState());if((0,browserNavigation_1.canChangeLevelInPage)(currentLevel,newLevel))(0,browserNavigation_1.updateBrowserForLevelNavigation)(state,newLevel.path,levelId),dispatch((0,exports.setCurrentLevelId)(levelId));else{var url=(0,BubbleFactory_1.getBubbleUrl)(newLevel.path,void 0,void 0,!0);(0,utils_1.navigateToHref)(url)}}}}}function sendReportHelper(appType,result,dispatch,getState,program){var state=getState().progress,levelId=state.currentLevelId;if(state.currentLessonId&&levelId){var scriptLevelId=(0,progressReduxSelectors_1.getCurrentScriptLevelId)(getState());if(scriptLevelId){var data={app:appType,result:!0,testResult:result};program&&(data.program=program),fetch("/milestone/".concat(0,"/").concat(scriptLevelId,"/").concat(levelId),{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(data)}).then((function(response){var _a;response.ok&&null!==levelId&&dispatch((0,exports.mergeResults)(((_a={})[levelId]=result,_a)))}))}}}exports.queryUserProgress=function(userId,mergeProgress){return void 0===mergeProgress&&(mergeProgress=!0),function(dispatch,getState){var state=getState().progress;return userProgressFromServer(state,dispatch,userId,mergeProgress)}},exports.navigateToLevelId=navigateToLevelId,exports.onLevelIndexChange=function onLevelIndexChange(levelIndex,sublevelIndex){return function(dispatch,getState){var levels=(0,progressReduxSelectors_1.getCurrentLevels)(getState());if(levels&&0!==levels.length){var level=levels[levelIndex];if(void 0!==sublevelIndex&&level.sublevels&&sublevelIndex<level.sublevels.length){var newLevelId=level.sublevels[sublevelIndex].id;dispatch((0,exports.setCurrentLevelId)(newLevelId))}else{newLevelId=level.id;dispatch((0,exports.setCurrentLevelId)(newLevelId))}}}},exports.navigateToNextLevel=function navigateToNextLevel(){return function(dispatch,getState){var levelId=(0,progressReduxSelectors_1.nextLevelId)(getState());void 0!==levelId&&dispatch(navigateToLevelId(levelId))}},exports.sendSuccessReport=function sendSuccessReport(appType){return function(dispatch,getState){sendReportHelper(appType,constants_1.TestResults.ALL_PASS,dispatch,getState)}},exports.sendPredictLevelReport=(0,toolkit_1.createAsyncThunk)("progress/sendPredictLevelReport",(function(payload,thunkAPI){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return sendReportHelper(payload.appType,constants_1.TestResults.CONTAINED_LEVEL_RESULT,thunkAPI.dispatch,thunkAPI.getState,payload.predictResponse),[2]}))}))}));var userProgressFromServer=function(state,dispatch,userId,mergeProgress){if(void 0===userId&&(userId=null),!state.scriptName){var message="Could not request progress for user ID ".concat(userId," from server: scriptName must be present in progress redux.");throw new Error(message)}return userId&&dispatch((0,exports.clearResults)()),jquery_1.default.ajax({url:"/api/user_progress/".concat(state.scriptName),method:"GET",data:{user_id:userId}}).done((function(data){if(data&&!lodash_1.default.isEmpty(data)){data.isVerifiedInstructor&&dispatch((0,verifiedInstructorRedux_1.setVerified)());var onOverviewPage=!state.currentLevelId;if((data.isInstructor||data.teacherViewingStudent)&&!data.deeperLearningCourse&&onOverviewPage&&dispatch((0,exports.setIsSummaryView)(data.teacherViewingStudent)),data.focusAreaLessonIds&&dispatch((0,exports.updateFocusArea)(data.changeFocusAreaPath,data.focusAreaLessonIds)),dispatch((0,lessonLockRedux_1.authorizeLockable)(data.lockableAuthorized)),data.completed&&dispatch((0,exports.setScriptCompleted)()),data.progress){if(dispatch((0,exports.setScriptProgress)(data.progress)),mergeProgress){var levelResults=lodash_1.default.mapValues(data.progress,progressHelpers_1.getLevelResult);dispatch((0,exports.mergeResults)(levelResults))}data.peerReviewsPerformed&&dispatch((0,exports.mergePeerReviewProgress)(data.peerReviewsPerformed)),data.current_lesson&&dispatch((0,exports.setCurrentLessonId)(data.current_lesson))}}}))};function processedLessons(lessons,isPlc){var numLessonsWithLessonPlan=0;return lessons.map((function(lesson){var lessonNumber;return!isPlc&&lesson.numberedLesson&&(lessonNumber=++numLessonsWithLessonPlan),__assign(__assign({},lodash_1.default.omit(lesson,"hidden")),{lessonNumber})}))}exports.processedLessons=processedLessons,exports.initProgress=(_b=progressSlice.actions).initProgress,exports.setCurrentLevelId=_b.setCurrentLevelId,exports.setScriptProgress=_b.setScriptProgress,exports.clearResults=_b.clearResults,exports.useDbProgress=_b.useDbProgress,exports.mergeResults=_b.mergeResults,exports.overwriteResults=_b.overwriteResults,exports.mergePeerReviewProgress=_b.mergePeerReviewProgress,exports.updateFocusArea=_b.updateFocusArea,exports.disablePostMilestone=_b.disablePostMilestone,exports.setIsAge13Required=_b.setIsAge13Required,exports.setIsSummaryView=_b.setIsSummaryView,exports.setIsMiniView=_b.setIsMiniView,exports.setStudentDefaultsSummaryView=_b.setStudentDefaultsSummaryView,exports.setCurrentLessonId=_b.setCurrentLessonId,exports.setScriptCompleted=_b.setScriptCompleted,exports.setLessonExtrasEnabled=_b.setLessonExtrasEnabled,exports.setViewAsUserId=_b.setViewAsUserId,exports.default=progressSlice.reducer,exports.__testonly__={}},"./src/types/progressTypes.ts":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ViewType=exports.ReviewStates=exports.PUZZLE_PAGE_NONE=void 0,exports.PUZZLE_PAGE_NONE=-1,exports.ReviewStates={completed:"completed",keepWorking:"keepWorking",awaitingReview:"awaitingReview"},exports.ViewType={Participant:"Participant",Instructor:"Instructor"}},"./src/templates/progress/ProgressLessonTeacherInfo.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.NonVerifiedLockableLesson=exports.NonHideableNonLockableYesPlanYesUrl=exports.NonHideableNonLockableNoPlanYesUrl=exports.NonHideableNonLockableNoPlanNoUrl=exports.NonHideableLockableYesPlanYesUrl=exports.NonHideableLockableNoPlanYesUrl=exports.NonHideableLockableNoPlanNoUrl=exports.Loading=exports.HideableNonLockableYesPlanYesUrl=exports.HideableNonLockableYesPlanNoUrl=exports.HideableNonLockableNoPlanYesUrl=exports.HideableNonLockableNoPlanNoUrl=exports.HideableLockableYesPlanYesUrl=exports.HideableLockableYesPlanNoUrl=exports.HideableLockableNoPlanYesUrl=exports.HideableLockableNoPlanNoUrl=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_reactRedux=__webpack_require__("./node_modules/react-redux/es/index.js"),_hiddenLessonRedux=__webpack_require__("./src/code-studio/hiddenLessonRedux.js"),_lessonLockRedux=__webpack_require__("./src/code-studio/lessonLockRedux.js"),_progressRedux=__webpack_require__("./src/code-studio/progressRedux.ts"),_progressReduxSelectors=__webpack_require__("./src/code-studio/progressReduxSelectors.js"),_viewAsRedux=__webpack_require__("./src/code-studio/viewAsRedux.js"),_redux=__webpack_require__("./src/redux.js"),_teacherSectionsRedux=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/templates/teacherDashboard/teacherSectionsRedux.js")),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_ProgressLessonTeacherInfo=_interopRequireDefault(__webpack_require__("./src/templates/progress/ProgressLessonTeacherInfo.jsx"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var lockableNoPlanYesUrl={id:123,levels:[1,2,3,4].map((function(id){return{ids:[id],icon:"fa-check-square-o",kind:_sharedConstants.LevelKind.assessment,url:"/foo/bar"}})),lockable:!0,name:"CS Principles Pre-survey",position:1,lessonStartUrl:"https://studio.code.org/s/csd3-2020/lessons/5/levels/1?login_required=true"},nonLockableYesPlanYesUrl=_objectSpread(_objectSpread({},lockableNoPlanYesUrl),{},{id:124,lockable:!1,lesson_plan_html_url:"lesson_plan.html"}),lockableYesPlanYesUrl=_objectSpread(_objectSpread({},lockableNoPlanYesUrl),{},{id:125,lesson_plan_html_url:"lesson_plan.html"}),nonLockableNoPlanYesUrl=_objectSpread(_objectSpread({},lockableNoPlanYesUrl),{},{id:126,lockable:!1}),lockableNoPlanNoUrl=_objectSpread(_objectSpread({},lockableNoPlanYesUrl),{},{id:124,lessonStartUrl:null}),lockableYesPlanNoUrl=_objectSpread(_objectSpread({},lockableNoPlanYesUrl),{},{id:125,lessonStartUrl:null,lesson_plan_html_url:"lesson_plan.html"}),nonLockableNoPlanNoUrl=_objectSpread(_objectSpread({},lockableNoPlanYesUrl),{},{id:126,lockable:!1,lessonStartUrl:null}),nonLockableYesPlanNoUrl=_objectSpread(_objectSpread({},lockableNoPlanYesUrl),{},{id:125,lessonStartUrl:null,lockable:!1,lesson_plan_html_url:"lesson_plan.html"}),createStore=function createStore(){var _ref=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},_ref$preload=_ref.preload,preload=void 0!==_ref$preload&&_ref$preload,_ref$allowHidden=_ref.allowHidden,allowHidden=void 0===_ref$allowHidden||_ref$allowHidden,_ref$teacherVerified=_ref.teacherVerified,teacherVerified=void 0===_ref$teacherVerified||_ref$teacherVerified;(0,_redux.registerReducers)({teacherSections:_teacherSectionsRedux.default});var store=(0,_redux.createStoreWithReducers)(),lessons=[lockableNoPlanYesUrl,nonLockableYesPlanYesUrl,lockableYesPlanYesUrl,nonLockableNoPlanYesUrl,lockableNoPlanNoUrl,lockableYesPlanNoUrl,nonLockableNoPlanNoUrl,nonLockableYesPlanNoUrl];if(store.dispatch((0,_progressRedux.initProgress)({scriptId:17,scriptName:"csp1",lessons})),store.dispatch((0,_hiddenLessonRedux.setHiddenLessons)({11:[lockableYesPlanYesUrl.id]},allowHidden)),!preload){var sections={11:{id:11,name:"test section",lesson_extras:!0,pairing_allowed:!0,studentCount:4,code:"TQGSJR",providerManaged:!1,lessons:{},tts_autoplay_enabled:!1}};lessons.forEach((function(lesson){sections[11].lessons[lesson.id]=[0,1,2].map((function(id){return{locked:!0,name:"student".concat(id),readonly_answers:!1}}))})),store.dispatch((0,_teacherSectionsRedux.setSections)([sections[11]])),store.dispatch((0,_lessonLockRedux.setSectionLockStatus)(sections)),store.dispatch((0,_teacherSectionsRedux.selectSection)("11")),teacherVerified&&store.dispatch((0,_lessonLockRedux.authorizeLockable)(!0)),store.dispatch((0,_viewAsRedux.setViewType)(_viewAsRedux.ViewType.Instructor))}return store},style={width:200,height:200},store=(exports.default={component:_ProgressLessonTeacherInfo.default},createStore()),loadingStore=createStore({preload:!0}),nonVerifiedTeacherStore=createStore({teacherVerified:!1}),hiddenStore=createStore({allowHidden:!1}),state=store.getState(),loadingState=loadingStore.getState(),nonVerifiedStoreState=nonVerifiedTeacherStore.getState(),hiddenStoreState=hiddenStore.getState(),Template=function Template(args){return _react.default.createElement(_reactRedux.Provider,{store:args.store},_react.default.createElement("div",{style},_react.default.createElement(_ProgressLessonTeacherInfo.default,{lesson:(0,_progressReduxSelectors.lessons)(args.state.progress)[args.lessonIndex]})))};(exports.Loading=Template.bind({})).args={store:loadingStore,state:loadingState,lessonIndex:0},(exports.HideableLockableNoPlanNoUrl=Template.bind({})).args={store,state,lessonIndex:4},(exports.HideableLockableNoPlanYesUrl=Template.bind({})).args={store,state,lessonIndex:0},(exports.HideableLockableYesPlanNoUrl=Template.bind({})).args={store,state,lessonIndex:5},(exports.HideableLockableYesPlanYesUrl=Template.bind({})).args={store,state,lessonIndex:2},(exports.NonVerifiedLockableLesson=Template.bind({})).args={store:nonVerifiedTeacherStore,state:nonVerifiedStoreState,lessonIndex:2},(exports.HideableNonLockableYesPlanNoUrl=Template.bind({})).args={store,state,lessonIndex:7},(exports.HideableNonLockableYesPlanYesUrl=Template.bind({})).args={store,state,lessonIndex:1},(exports.HideableNonLockableNoPlanNoUrl=Template.bind({})).args={store,state,lessonIndex:6},(exports.HideableNonLockableNoPlanYesUrl=Template.bind({})).args={store,state,lessonIndex:3},(exports.NonHideableNonLockableYesPlanYesUrl=Template.bind({})).args={store:hiddenStore,state:hiddenStoreState,lessonIndex:1},(exports.NonHideableNonLockableNoPlanNoUrl=Template.bind({})).args={store:hiddenStore,state:hiddenStoreState,lessonIndex:6},(exports.NonHideableNonLockableNoPlanYesUrl=Template.bind({})).args={store:hiddenStore,state:hiddenStoreState,lessonIndex:3},(exports.NonHideableLockableYesPlanYesUrl=Template.bind({})).args={store:hiddenStore,state:hiddenStoreState,lessonIndex:2},(exports.NonHideableLockableNoPlanNoUrl=Template.bind({})).args={store:hiddenStore,state:hiddenStoreState,lessonIndex:4},(exports.NonHideableLockableNoPlanYesUrl=Template.bind({})).args={store:hiddenStore,state:hiddenStoreState,lessonIndex:0}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,