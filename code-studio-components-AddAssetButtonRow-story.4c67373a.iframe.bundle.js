/*! For license information please see code-studio-components-AddAssetButtonRow-story.4c67373a.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[774],{"./src/code-studio/components/AddAssetButtonRow.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.assetButtonStyles=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_browserDetector=__webpack_require__("./src/util/browser-detector.js"),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_Button=_interopRequireDefault(__webpack_require__("./src/templates/Button.jsx")),_AssetUploader=_interopRequireDefault(__webpack_require__("./src/code-studio/components/AssetUploader.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}var assetButtonStyles=exports.assetButtonStyles={button:{paddingLeft:10,paddingRight:10,marginTop:5,fontSize:"large",fontWeight:"lighter",marginRight:10},buttonRow:{display:"flex",flexFlow:"row",alignItems:"center"}},RecordButton=function RecordButton(_ref){var onSelectRecord=_ref.onSelectRecord,disabled=_ref.disabled;return _react.default.createElement("span",null,_react.default.createElement(_Button.default,{onClick:onSelectRecord,id:"record-asset",className:"share",text:_locale.default.recordAudio(),icon:"microphone",style:assetButtonStyles.button,size:"large",disabled}))};RecordButton.propTypes={onSelectRecord:_propTypes.default.func,disabled:_propTypes.default.bool},function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(exports.default=function(_React$Component){function AddAssetButtonRow(){return _React$Component.apply(this,arguments)||this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(AddAssetButtonRow,_React$Component),AddAssetButtonRow.prototype.render=function render(){var shouldShowRecordButton=!this.props.hideAudioRecording;return(0,_browserDetector.isIE11)()&&(shouldShowRecordButton=!1),_react.default.createElement("div",{style:assetButtonStyles.buttonRow},_react.default.createElement(_AssetUploader.default,{uploadsEnabled:this.props.uploadsEnabled,allowedExtensions:this.props.allowedExtensions,api:this.props.api,onUploadStart:this.props.onUploadStart,onUploadDone:this.props.onUploadDone,onUploadError:this.props.onUploadError}),shouldShowRecordButton&&_react.default.createElement(RecordButton,{onSelectRecord:this.props.onSelectRecord,disabled:!this.props.uploadsEnabled||this.props.recordDisabled}),_react.default.createElement("span",{id:"manage-asset-status"},this.props.statusMessage))},AddAssetButtonRow}(_react.default.Component),"propTypes",{uploadsEnabled:_propTypes.default.bool.isRequired,allowedExtensions:_propTypes.default.string,api:_propTypes.default.object,onUploadStart:_propTypes.default.func.isRequired,onUploadDone:_propTypes.default.func.isRequired,onUploadError:_propTypes.default.func.isRequired,onSelectRecord:_propTypes.default.func.isRequired,statusMessage:_propTypes.default.string,recordDisabled:_propTypes.default.bool,hideAudioRecording:_propTypes.default.bool})},"./src/code-studio/components/AssetUploader.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_locale=_interopRequireDefault(__webpack_require__("./src/util/locale-do-not-import.js")),_Button=_interopRequireDefault(__webpack_require__("./src/templates/Button.jsx")),_AddAssetButtonRow=__webpack_require__("./src/code-studio/components/AddAssetButtonRow.jsx"),_HiddenUploader=_interopRequireDefault(__webpack_require__("./src/code-studio/components/HiddenUploader.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var AssetUploader=exports.default=function(_React$Component){function AssetUploader(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this,"fileUploadClicked",(function(){return _this.refs.uploader.openFileChooser()})),_this}return function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(AssetUploader,_React$Component),AssetUploader.prototype.render=function render(){var api=this.props.api,url=api.getUploadUrl(),uploadDone=api.wrapUploadDoneCallback(this.props.onUploadDone),uploadStart=api.wrapUploadStartCallback(this.props.onUploadStart);return _react.default.createElement("span",null,_react.default.createElement(_HiddenUploader.default,{ref:"uploader",toUrl:url,allowedExtensions:this.props.allowedExtensions,onUploadStart:uploadStart,onUploadDone:uploadDone,onUploadError:this.props.onUploadError}),_react.default.createElement(_Button.default,{onClick:this.fileUploadClicked,className:"share",id:"upload-asset",disabled:!this.props.uploadsEnabled,icon:"upload",text:_locale.default.uploadFile(),style:_AddAssetButtonRow.assetButtonStyles.button,size:"large"}))},AssetUploader}(_react.default.Component);_defineProperty(AssetUploader,"propTypes",{onUploadStart:_propTypes.default.func.isRequired,onUploadDone:_propTypes.default.func.isRequired,onUploadError:_propTypes.default.func,allowedExtensions:_propTypes.default.string,uploadsEnabled:_propTypes.default.bool.isRequired,api:_propTypes.default.object.isRequired}),module.exports=exports.default},"./src/code-studio/components/HiddenUploader.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _jquery=_interopRequireDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_firehose=_interopRequireDefault(__webpack_require__("./src/lib/util/firehose.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var HiddenUploader=exports.default=function(_React$Component){function HiddenUploader(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this,"openFileChooser",(function(){return _this.refs.uploader.click()})),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(HiddenUploader,_React$Component);var _proto=HiddenUploader.prototype;return _proto.componentDidMount=function componentDidMount(){var props=this.props;(0,_jquery.default)(this.refs.uploader).fileupload({dataType:"json",url:this.props.toUrl,replaceFileInput:!1,add:function add(e,data){props.onUploadStart(data);var audioFileName=data.files[0].name.includes("mp3")?data.files[0].name:null;audioFileName&&_firehose.default.putRecord({study:"sound-dialog-2",study_group:"library-file",event:"upload-file",data_json:audioFileName},{includeUserId:!0})},done:function done(e,data){props.onUploadDone(data.result)},error:function error(e,data){props.onUploadError&&props.onUploadError(e.status)}})},_proto.componentWillUnmount=function componentWillUnmount(){(0,_jquery.default)(this.refs.uploader).fileupload("destroy")},_proto.render=function render(){return _react.default.createElement("input",{ref:"uploader",className:"uitest-hidden-uploader",type:"file",style:{display:"none"},accept:this.props.allowedExtensions||"*"})},HiddenUploader}(_react.default.Component);_defineProperty(HiddenUploader,"propTypes",{toUrl:_propTypes.default.string.isRequired,allowedExtensions:_propTypes.default.string,onUploadStart:_propTypes.default.func.isRequired,onUploadDone:_propTypes.default.func.isRequired,onUploadError:_propTypes.default.func}),window.dashboard=window.dashboard||{},window.dashboard.HiddenUploader=HiddenUploader,module.exports=exports.default},"./src/logToCloud.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var _experiments=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./src/util/experiments.js"));function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}var PageAction=(0,__webpack_require__("./src/utils.js").makeEnum)("DropletTransitionError","FirebaseRateLimitExceeded","SanitizedLevelHtml","UserJavaScriptError","RunButtonClick","StartWebRequest","StaticResourceFetchError","PegasusSectionsRedirect","DancePartyOnInit","BrambleError","BrambleFilesystemResetSuccess","BrambleFilesystemResetFailed","JotFormFrameLoaded","JotFormLoadFailed","BlockLoadFailed","MapboxMarkerLoadError","LoadScriptProgressStarted","LoadScriptProgressFinished","SectionProgressRenderedWithData","JavabuilderWebSocketConnectionError","NoValidAmplitudeEventNameError"),REPORT_PAGE_SIZE=_experiments.default.isEnabled("logPageSize")||Math.random()<.01;module.exports={PageAction,addPageAction:function addPageAction(actionName,value,sampleRate){if(void 0===sampleRate&&(sampleRate=1),window.newrelic)if(PageAction[actionName])if("object"===_typeof(value)){if(!(Math.random()>sampleRate)){for(var prop in value)"boolean"==typeof value[prop]&&(value[prop]=value[prop].toString()),"string"==typeof value[prop]&&(value[prop]=value[prop].substring(0,4095));window.newrelic.addPageAction(actionName,value)}}else console.log("Expected value to be an object");else console.log("Unknown actionName: "+actionName)},setCustomAttribute:function setCustomAttribute(key,value){window.newrelic&&window.newrelic.setCustomAttribute(key,value)},loadFinished:function loadFinished(){window.newrelic&&window.newrelic.finished()},logError:function logError(e){window.newrelic&&window.newrelic.noticeError(e)},reportPageSize:function reportPageSize(){if(REPORT_PAGE_SIZE)try{var _step,resources=performance&&performance.getEntriesByType("resource"),totalDownloadSize=0,jsDownloadSize=0,jsFileRegex=/\.js$/,_iterator=_createForOfIteratorHelper(resources);try{for(_iterator.s();!(_step=_iterator.n()).done;){var resource=_step.value;if(void 0===resource.transferSize||void 0===resource.encodedBodySize)return;totalDownloadSize+=resource.transferSize,jsFileRegex.test(resource.name)&&(jsDownloadSize+=resource.transferSize)}}catch(err){_iterator.e(err)}finally{_iterator.f()}if(!window.newrelic)return;window.newrelic.setCustomAttribute("totalDownloadSize",totalDownloadSize),window.newrelic.setCustomAttribute("jsDownloadSize",jsDownloadSize)}catch(e){this.logError(e)}}}},"./src/util/browser-detector.js":(__unused_webpack_module,exports)=>{"use strict";function isIE(){return-1!==navigator.userAgent.indexOf("MSIE")||isIE11()}function IEVersion(){return isIE11()?"11":navigator.userAgent.substring(navigator.userAgent.lastIndexOf("MSIE")+5).split(".")[0]}function isChrome(){return-1!==navigator.userAgent.lastIndexOf("Chrome/")}function chromeVersion(){return navigator.userAgent.substring(navigator.userAgent.lastIndexOf("Chrome/")+7).split(".")[0]}function isSafari(){return-1!==navigator.userAgent.indexOf("Safari/")}function safariVersion(){return navigator.userAgent.substring(navigator.userAgent.lastIndexOf("Version/")+8).split(".")[0]}function isFirefox(){return-1!==navigator.userAgent.indexOf("Firefox")}function firefoxVersion(){return navigator.userAgent.substring(navigator.userAgent.lastIndexOf("Firefox/")+8).split(".")[0]}function isIE11(){return!!window.MSInputMethodContext&&!!document.documentMode}Object.defineProperty(exports,"__esModule",{value:!0}),exports.getBrowserName=function getBrowserName(){var includeVersion=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(isChrome())return"Chrome"+(includeVersion?" ".concat(chromeVersion()):"");if(isIE())return"Internet Explorer"+(includeVersion?" ".concat(IEVersion()):"");if(isFirefox())return"Firefox"+(includeVersion?" ".concat(firefoxVersion()):"");if(isSafari())return"Safari"+(includeVersion?" ".concat(safariVersion()):"");return navigator.userAgent},exports.isIE11=isIE11,exports.isMobileDevice=function isMobileDevice(){var check=!1;return function(a){(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))&&(check=!0)}(navigator.userAgent||navigator.vendor||window.opera),check},exports.isStorageAvailable=function isStorageAvailable(type){try{var storage=window[type],x="__storage_test__";return storage.setItem(x,x),storage.removeItem(x),!0}catch(e){return!1}},exports.isUnsupportedBrowser=function isUnsupportedBrowser(){return function isUnsupportedIE(){return isIE()&&IEVersion()<11}()||function isUnsupportedChrome(){return isChrome()&&chromeVersion()<33}()||function isUnsupportedSafari(){return isSafari()&&safariVersion()<7}()||function isUnsupportedFirefox(){return isFirefox()&&firefoxVersion()<25}()}},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{"use strict";function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./src/code-studio/components/AddAssetButtonRow.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.JustButtons=exports.ButtonsWithStatus=void 0;var _addonActions=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.js"),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_AddAssetButtonRow=_interopRequireDefault(__webpack_require__("./src/code-studio/components/AddAssetButtonRow.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var mockApi={getUploadUrl:function getUploadUrl(){return"/some-url"},wrapUploadDoneCallback:function wrapUploadDoneCallback(f){return f},wrapUploadStartCallback:function wrapUploadStartCallback(f){return f}},Template=(exports.default={component:_AddAssetButtonRow.default},function Template(args){return _react.default.createElement(_AddAssetButtonRow.default,_extends({uploadsEnabled:!0,allowedExtensions:"",api:mockApi,onUploadStart:(0,_addonActions.action)("onUploadStart"),onUploadDone:(0,_addonActions.action)("onUploadDone"),onUploadError:(0,_addonActions.action)("onUploadError"),onSelectRecord:(0,_addonActions.action)("onSelectRecord")},args))});(exports.JustButtons=Template.bind({})).args={statusMessage:""},(exports.ButtonsWithStatus=Template.bind({})).args={statusMessage:"This is a status message"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1zdHVkaW8tY29tcG9uZW50cy1BZGRBc3NldEJ1dHRvblJvdy1zdG9yeS4zNjBkMmRkZS5pZnJhbWUuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7aVRBQUEsSUFBQUEsV0FBQUMsdUJBQUFDLG9CQUFBLHVDQUNBQyxPQUFBRix1QkFBQUMsb0JBQUEsa0NBRUFFLGlCQUFBRixvQkFBQSxrQ0FDQUcsUUFBQUosdUJBQUFDLG9CQUFBLHVDQUVBSSxRQUFBTCx1QkFBQUMsb0JBQUEsK0JBRUFLLGVBQUFOLHVCQUFBQyxvQkFBQSxtREFBNEMsU0FBQUQsdUJBQUFPLEtBQUEsT0FBQUEsS0FBQUEsSUFBQUMsV0FBQUQsSUFBQSxTQUFBQSxJQUFBLFVBQUFFLFFBQUFDLEdBQUEsT0FBQUQsUUFBQSxtQkFBQUUsUUFBQSxpQkFBQUEsT0FBQUMsU0FBQSxTQUFBRixHQUFBLGNBQUFBLENBQUEsV0FBQUEsR0FBQSxPQUFBQSxHQUFBLG1CQUFBQyxRQUFBRCxFQUFBRyxjQUFBRixRQUFBRCxJQUFBQyxPQUFBRyxVQUFBLGdCQUFBSixDQUFBLEVBQUFELFFBQUFDLEVBQUEsVUFBQUssZ0JBQUFMLEVBQUFNLEdBQUEsT0FBQUQsZ0JBQUFFLE9BQUFDLGVBQUFELE9BQUFDLGVBQUFDLE9BQUEsU0FBQUosZ0JBQUFMLEVBQUFNLEdBQUEsT0FBQU4sRUFBQVUsVUFBQUosRUFBQU4sQ0FBQSxFQUFBSyxnQkFBQUwsRUFBQU0sRUFBQSxDQUVyQyxJQUFNSyxrQkFBaUJDLFFBQUFBLGtCQUFHLENBQy9CQyxPQUFRLENBQ05DLFlBQWEsR0FDYkMsYUFBYyxHQUNkQyxVQUFXLEVBQ1hDLFNBQVUsUUFDVkMsV0FBWSxVQUNaQyxZQUFhLElBRWZDLFVBQVcsQ0FDVEMsUUFBUyxPQUNUQyxTQUFVLE1BQ1ZDLFdBQVksV0FJVkMsYUFBZSxTQUFmQSxhQUFZQyxNQUFBLElBQUtDLGVBQWNELEtBQWRDLGVBQWdCQyxTQUFRRixLQUFSRSxTQUFRLE9BQzdDbkMsT0FBQSxRQUFBb0MsY0FBQSxZ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c0QsR0FDdkIsT0FBT0EsQ0FDVCxHQVFJME0sVUFQSjdWLFFBQUFBLFFBRWEsQ0FDYjhWLFVBQVc3UyxtQkFBQUEsU0FJSSxTQUFYNFMsU0FBVzVRLE1BQUksT0FDbkJyRyxPQUFBLFFBQUFvQyxjQUFDMkQsbUJBQUEsUUFBaUIrUSxTQUFBLENBQ2hCNVIsZ0JBQWdCLEVBQ2hCQyxrQkFBa0IsR0FDbEJDLElBQUs0UixRQUNMM1IsZUFBZSxFQUFBZ08sY0FBQUEsUUFBTyxpQkFDdEIvTixjQUFjLEVBQUErTixjQUFBQSxRQUFPLGdCQUNyQjlOLGVBQWUsRUFBQThOLGNBQUFBLFFBQU8saUJBQ3RCblIsZ0JBQWdCLEVBQUFtUixjQUFBQSxRQUFPLG1CQUNuQmhOLE1BQ0osSUFJb0JqRixRQUFBQSxZQUFHNlYsU0FBU2hXLEtBQUssQ0FBQyxJQUM5Qm9GLEtBQU8sQ0FDakJaLGNBQWUsS0FHYXJFLFFBQUFBLGtCQUFHNlYsU0FBU2hXLEtBQUssQ0FBQyxJQUM5Qm9GLEtBQU8sQ0FDdkJaLGNBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvY29kZS1zdHVkaW8vY29tcG9uZW50cy9BZGRBc3NldEJ1dHRvblJvdy5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2NvZGUtc3R1ZGlvL2NvbXBvbmVudHMvQXNzZXRVcGxvYWRlci5qc3giLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2NvZGUtc3R1ZGlvL2NvbXBvbmVudHMvSGlkZGVuVXBsb2FkZXIuanN4Iiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy9sb2dUb0Nsb3VkLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy91dGlsL2Jyb3dzZXItZGV0ZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvY29kZS1zdHVkaW8vY29tcG9uZW50cy9BZGRBc3NldEJ1dHRvblJvdy5zdG9yeS5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7aXNJRTExfSBmcm9tICdAY2RvL2FwcHMvdXRpbC9icm93c2VyLWRldGVjdG9yJztcbmltcG9ydCBpMThuIGZyb20gJ0BjZG8vbG9jYWxlJztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi90ZW1wbGF0ZXMvQnV0dG9uJztcblxuaW1wb3J0IEFzc2V0VXBsb2FkZXIgZnJvbSAnLi9Bc3NldFVwbG9hZGVyJztcblxuZXhwb3J0IGNvbnN0IGFzc2V0QnV0dG9uU3R5bGVzID0ge1xuICBidXR0b246IHtcbiAgICBwYWRkaW5nTGVmdDogMTAsXG4gICAgcGFkZGluZ1JpZ2h0OiAxMCxcbiAgICBtYXJnaW5Ub3A6IDUsXG4gICAgZm9udFNpemU6ICdsYXJnZScsXG4gICAgZm9udFdlaWdodDogJ2xpZ2h0ZXInLFxuICAgIG1hcmdpblJpZ2h0OiAxMCxcbiAgfSxcbiAgYnV0dG9uUm93OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhGbG93OiAncm93JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgfSxcbn07XG5cbmNvbnN0IFJlY29yZEJ1dHRvbiA9ICh7b25TZWxlY3RSZWNvcmQsIGRpc2FibGVkfSkgPT4gKFxuICA8c3Bhbj5cbiAgICA8QnV0dG9uXG4gICAgICBvbkNsaWNrPXtvblNlbGVjdFJlY29yZH1cbiAgICAgIGlkPVwicmVjb3JkLWFzc2V0XCJcbiAgICAgIGNsYXNzTmFtZT1cInNoYXJlXCJcbiAgICAgIHRleHQ9e2kxOG4ucmVjb3JkQXVkaW8oKX1cbiAgICAgIGljb249XCJtaWNyb3Bob25lXCJcbiAgICAgIHN0eWxlPXthc3NldEJ1dHRvblN0eWxlcy5idXR0b259XG4gICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgIC8+XG4gIDwvc3Bhbj5cbik7XG5cblJlY29yZEJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIG9uU2VsZWN0UmVjb3JkOiBQcm9wVHlwZXMuZnVuYyxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxufTtcblxuLyoqXG4gKiBBIGNvbXBvbmVudCBmb3IgdGhlIGJ1dHRvbnMgdGhhdCBlbmFibGUgYWRkaW5nIGFuIGFzc2V0IHRvIGEgcHJvamVjdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWRkQXNzZXRCdXR0b25Sb3cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHVwbG9hZHNFbmFibGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGFsbG93ZWRFeHRlbnNpb25zOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFwaTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvblVwbG9hZFN0YXJ0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uVXBsb2FkRG9uZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblVwbG9hZEVycm9yOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uU2VsZWN0UmVjb3JkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHN0YXR1c01lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcmVjb3JkRGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGhpZGVBdWRpb1JlY29yZGluZzogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCBzaG91bGRTaG93UmVjb3JkQnV0dG9uID0gIXRoaXMucHJvcHMuaGlkZUF1ZGlvUmVjb3JkaW5nO1xuICAgIGlmIChpc0lFMTEoKSkge1xuICAgICAgc2hvdWxkU2hvd1JlY29yZEJ1dHRvbiA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17YXNzZXRCdXR0b25TdHlsZXMuYnV0dG9uUm93fT5cbiAgICAgICAgPEFzc2V0VXBsb2FkZXJcbiAgICAgICAgICB1cGxvYWRzRW5hYmxlZD17dGhpcy5wcm9wcy51cGxvYWRzRW5hYmxlZH1cbiAgICAgICAgICBhbGxvd2VkRXh0ZW5zaW9ucz17dGhpcy5wcm9wcy5hbGxvd2VkRXh0ZW5zaW9uc31cbiAgICAgICAgICBhcGk9e3RoaXMucHJvcHMuYXBpfVxuICAgICAgICAgIG9uVXBsb2FkU3RhcnQ9e3RoaXMucHJvcHMub25VcGxvYWRTdGFydH1cbiAgICAgICAgICBvblVwbG9hZERvbmU9e3RoaXMucHJvcHMub25VcGxvYWREb25lfVxuICAgICAgICAgIG9uVXBsb2FkRXJyb3I9e3RoaXMucHJvcHMub25VcGxvYWRFcnJvcn1cbiAgICAgICAgLz5cbiAgICAgICAge3Nob3VsZFNob3dSZWNvcmRCdXR0b24gJiYgKFxuICAgICAgICAgIDxSZWNvcmRCdXR0b25cbiAgICAgICAgICAgIG9uU2VsZWN0UmVjb3JkPXt0aGlzLnByb3BzLm9uU2VsZWN0UmVjb3JkfVxuICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnByb3BzLnVwbG9hZHNFbmFibGVkIHx8IHRoaXMucHJvcHMucmVjb3JkRGlzYWJsZWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAgPHNwYW4gaWQ9XCJtYW5hZ2UtYXNzZXQtc3RhdHVzXCI+e3RoaXMucHJvcHMuc3RhdHVzTWVzc2FnZX08L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCIvKiogQGZpbGUgVXBsb2FkIGJ1dHRvbiB3cmFwcGluZyBhIGhpZGRlbiB1cGxvYWRlciBjb21wb25lbnQuICovXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGkxOG4gZnJvbSAnQGNkby9sb2NhbGUnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uL3RlbXBsYXRlcy9CdXR0b24nO1xuXG5pbXBvcnQge2Fzc2V0QnV0dG9uU3R5bGVzfSBmcm9tICcuL0FkZEFzc2V0QnV0dG9uUm93JztcbmltcG9ydCBIaWRkZW5VcGxvYWRlciBmcm9tICcuL0hpZGRlblVwbG9hZGVyLmpzeCc7XG5cbi8qKlxuICogQSBmaWxlIHVwbG9hZCBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzc2V0VXBsb2FkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG9uVXBsb2FkU3RhcnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25VcGxvYWREb25lOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uVXBsb2FkRXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuICAgIGFsbG93ZWRFeHRlbnNpb25zOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHVwbG9hZHNFbmFibGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGFwaTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIC8qKlxuICAgKiBXZSd2ZSBoaWRkZW4gdGhlIDxpbnB1dCB0eXBlPVwiZmlsZVwiLz4gYW5kIHJlcGxhY2VkIGl0IHdpdGggYSBiaWcgYnV0dG9uLlxuICAgKiBGb3J3YXJkIGNsaWNrcyBvbiB0aGUgYnV0dG9uIHRvIHRoZSBoaWRkZW4gZmlsZSBpbnB1dC5cbiAgICovXG4gIGZpbGVVcGxvYWRDbGlja2VkID0gKCkgPT4gdGhpcy5yZWZzLnVwbG9hZGVyLm9wZW5GaWxlQ2hvb3NlcigpO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7YXBpfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHVybCA9IGFwaS5nZXRVcGxvYWRVcmwoKTtcbiAgICBsZXQgdXBsb2FkRG9uZSA9IGFwaS53cmFwVXBsb2FkRG9uZUNhbGxiYWNrKHRoaXMucHJvcHMub25VcGxvYWREb25lKTtcbiAgICBsZXQgdXBsb2FkU3RhcnQgPSBhcGkud3JhcFVwbG9hZFN0YXJ0Q2FsbGJhY2sodGhpcy5wcm9wcy5vblVwbG9hZFN0YXJ0KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8c3Bhbj5cbiAgICAgICAgPEhpZGRlblVwbG9hZGVyXG4gICAgICAgICAgcmVmPVwidXBsb2FkZXJcIlxuICAgICAgICAgIHRvVXJsPXt1cmx9XG4gICAgICAgICAgYWxsb3dlZEV4dGVuc2lvbnM9e3RoaXMucHJvcHMuYWxsb3dlZEV4dGVuc2lvbnN9XG4gICAgICAgICAgb25VcGxvYWRTdGFydD17dXBsb2FkU3RhcnR9XG4gICAgICAgICAgb25VcGxvYWREb25lPXt1cGxvYWREb25lfVxuICAgICAgICAgIG9uVXBsb2FkRXJyb3I9e3RoaXMucHJvcHMub25VcGxvYWRFcnJvcn1cbiAgICAgICAgLz5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuZmlsZVVwbG9hZENsaWNrZWR9XG4gICAgICAgICAgY2xhc3NOYW1lPVwic2hhcmVcIlxuICAgICAgICAgIGlkPVwidXBsb2FkLWFzc2V0XCJcbiAgICAgICAgICBkaXNhYmxlZD17IXRoaXMucHJvcHMudXBsb2Fkc0VuYWJsZWR9XG4gICAgICAgICAgaWNvbj1cInVwbG9hZFwiXG4gICAgICAgICAgdGV4dD17aTE4bi51cGxvYWRGaWxlKCl9XG4gICAgICAgICAgc3R5bGU9e2Fzc2V0QnV0dG9uU3R5bGVzLmJ1dHRvbn1cbiAgICAgICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgICAvPlxuICAgICAgPC9zcGFuPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKiBAZmlsZSBIaWRkZW4gZmlsZSBpbnB1dCB3aXRoIGludGVyZmFjZSBmb3IgaGFuZGxpbmcgdXBsb2Fkcy4gKi9cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGZpcmVob3NlQ2xpZW50IGZyb20gJ0BjZG8vYXBwcy9saWIvdXRpbC9maXJlaG9zZSc7XG5cbi8qKlxuICogQSBoaWRkZW4gZmlsZSBpbnB1dCBwcm92aWRpbmcgdXBsb2FkIGZ1bmN0aW9uYWxpdHkgd2l0aCBldmVudCBob29rcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGlkZGVuVXBsb2FkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHRvVXJsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYWxsb3dlZEV4dGVuc2lvbnM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25VcGxvYWRTdGFydDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblVwbG9hZERvbmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25VcGxvYWRFcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzO1xuXG4gICAgJCh0aGlzLnJlZnMudXBsb2FkZXIpLmZpbGV1cGxvYWQoe1xuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIHVybDogdGhpcy5wcm9wcy50b1VybCxcbiAgICAgIC8vIHByZXZlbnQgZmlsZXVwbG9hZCBmcm9tIHJlcGxhY2luZyB0aGUgaW5wdXQgRE9NIGVsZW1lbnQsIHdoaWNoXG4gICAgICAvLyBSZWFjdCBkb2VzIG5vdCBsaWtlXG4gICAgICByZXBsYWNlRmlsZUlucHV0OiBmYWxzZSxcbiAgICAgIGFkZDogZnVuY3Rpb24gKGUsIGRhdGEpIHtcbiAgICAgICAgLy8gb25VcGxvYWRTdGFydCBtZXRob2QgbXVzdCBjYWxsIGRhdGEuc3VibWl0KClcbiAgICAgICAgcHJvcHMub25VcGxvYWRTdGFydChkYXRhKTtcbiAgICAgICAgY29uc3QgYXVkaW9GaWxlTmFtZSA9IGRhdGEuZmlsZXNbMF0ubmFtZS5pbmNsdWRlcygnbXAzJylcbiAgICAgICAgICA/IGRhdGEuZmlsZXNbMF0ubmFtZVxuICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgaWYgKGF1ZGlvRmlsZU5hbWUpIHtcbiAgICAgICAgICBmaXJlaG9zZUNsaWVudC5wdXRSZWNvcmQoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0dWR5OiAnc291bmQtZGlhbG9nLTInLFxuICAgICAgICAgICAgICBzdHVkeV9ncm91cDogJ2xpYnJhcnktZmlsZScsXG4gICAgICAgICAgICAgIGV2ZW50OiAndXBsb2FkLWZpbGUnLFxuICAgICAgICAgICAgICBkYXRhX2pzb246IGF1ZGlvRmlsZU5hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge2luY2x1ZGVVc2VySWQ6IHRydWV9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRvbmU6IGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgIHByb3BzLm9uVXBsb2FkRG9uZShkYXRhLnJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgIGlmIChwcm9wcy5vblVwbG9hZEVycm9yKSB7XG4gICAgICAgICAgcHJvcHMub25VcGxvYWRFcnJvcihlLnN0YXR1cyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAkKHRoaXMucmVmcy51cGxvYWRlcikuZmlsZXVwbG9hZCgnZGVzdHJveScpO1xuICB9XG5cbiAgb3BlbkZpbGVDaG9vc2VyID0gKCkgPT4gdGhpcy5yZWZzLnVwbG9hZGVyLmNsaWNrKCk7XG5cbiAgcmVuZGVyKCkge1xuICAgIC8vIE5PVEU6IElFOSB3aWxsIGlnbm9yZSBhY2NlcHQsIHdoaWNoIG1lYW5zIG9uIHRoaXMgYnJvd3NlciB3ZSBjYW4gZW5kXG4gICAgLy8gdXAgdXBsb2FkaW5nIGZpbGVzIHRoYXQgZG9uJ3QgbWF0Y2ggYWxsb3dlZEV4dGVuc2lvbnM7IGZvciB0aGlzIHJlYXNvbixcbiAgICAvLyB0aGUgc2VydmVyIHNob3VsZCBhbHNvIHZhbGlkYXRlIGFsbG93ZWQgZmlsZSB0eXBlcy5cbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0XG4gICAgICAgIHJlZj1cInVwbG9hZGVyXCJcbiAgICAgICAgY2xhc3NOYW1lPVwidWl0ZXN0LWhpZGRlbi11cGxvYWRlclwiXG4gICAgICAgIHR5cGU9XCJmaWxlXCJcbiAgICAgICAgc3R5bGU9e3tkaXNwbGF5OiAnbm9uZSd9fVxuICAgICAgICBhY2NlcHQ9e3RoaXMucHJvcHMuYWxsb3dlZEV4dGVuc2lvbnMgfHwgJyonfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cbndpbmRvdy5kYXNoYm9hcmQgPSB3aW5kb3cuZGFzaGJvYXJkIHx8IHt9O1xud2luZG93LmRhc2hib2FyZC5IaWRkZW5VcGxvYWRlciA9IEhpZGRlblVwbG9hZGVyO1xuIiwiaW1wb3J0IGV4cGVyaW1lbnRzIGZyb20gJy4vdXRpbC9leHBlcmltZW50cyc7XG5pbXBvcnQge21ha2VFbnVtfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgUGFnZUFjdGlvbiA9IG1ha2VFbnVtKFxuICAnRHJvcGxldFRyYW5zaXRpb25FcnJvcicsXG4gICdGaXJlYmFzZVJhdGVMaW1pdEV4Y2VlZGVkJyxcbiAgJ1Nhbml0aXplZExldmVsSHRtbCcsXG4gICdVc2VySmF2YVNjcmlwdEVycm9yJyxcbiAgJ1J1bkJ1dHRvbkNsaWNrJyxcbiAgJ1N0YXJ0V2ViUmVxdWVzdCcsXG4gICdTdGF0aWNSZXNvdXJjZUZldGNoRXJyb3InLFxuICAnUGVnYXN1c1NlY3Rpb25zUmVkaXJlY3QnLFxuICAnRGFuY2VQYXJ0eU9uSW5pdCcsXG4gICdCcmFtYmxlRXJyb3InLFxuICAnQnJhbWJsZUZpbGVzeXN0ZW1SZXNldFN1Y2Nlc3MnLFxuICAnQnJhbWJsZUZpbGVzeXN0ZW1SZXNldEZhaWxlZCcsXG4gICdKb3RGb3JtRnJhbWVMb2FkZWQnLFxuICAnSm90Rm9ybUxvYWRGYWlsZWQnLFxuICAnQmxvY2tMb2FkRmFpbGVkJyxcbiAgJ01hcGJveE1hcmtlckxvYWRFcnJvcicsXG4gICdMb2FkU2NyaXB0UHJvZ3Jlc3NTdGFydGVkJyxcbiAgJ0xvYWRTY3JpcHRQcm9ncmVzc0ZpbmlzaGVkJyxcbiAgJ1NlY3Rpb25Qcm9ncmVzc1JlbmRlcmVkV2l0aERhdGEnLFxuICAnSmF2YWJ1aWxkZXJXZWJTb2NrZXRDb25uZWN0aW9uRXJyb3InLFxuICAnTm9WYWxpZEFtcGxpdHVkZUV2ZW50TmFtZUVycm9yJ1xuKTtcblxuY29uc3QgTUFYX0ZJRUxEX0xFTkdUSCA9IDQwOTU7XG5jb25zdCBSRVBPUlRfUEFHRV9TSVpFID1cbiAgZXhwZXJpbWVudHMuaXNFbmFibGVkKCdsb2dQYWdlU2l6ZScpIHx8IE1hdGgucmFuZG9tKCkgPCAwLjAxO1xuXG4vKipcbiAqIFdyYXBzIGFuZCBhZGRzIGZ1bmN0aW9uYWxpdHkgdG8gd2luZG93Lm5ld3JlbGljLCB3aGljaCBpcyBvbmx5IGluY2x1ZGVkIGluXG4gKiBwcm9kdWN0aW9uLiBUaGlzIGNhdXNlcyB1cyB0byBuby1vcCBpbiBvdGhlciBlbnZpcm9ubWVudHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQYWdlQWN0aW9uOiBQYWdlQWN0aW9uLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uTmFtZSAtIE11c3QgYmUgb25lIG9mIHRoZSBrZXlzIGZyb20gUGFnZUFjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gdmFsdWUgLSBPYmplY3QgbGl0ZXJhbCByZXByZXNlbnRpbmcgY29sdW1ucyB3ZSB3YW50IHRvXG4gICAqICAgYWRkIGZvciB0aGlzIGFjdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gW3NhbXBsZVJhdGVdIC0gT3B0aW9uYWwgc2FtcGxlIHJhdGUuIERlZmF1bHQgaXMgMS4wXG4gICAqL1xuICBhZGRQYWdlQWN0aW9uOiBmdW5jdGlvbiAoYWN0aW9uTmFtZSwgdmFsdWUsIHNhbXBsZVJhdGUpIHtcbiAgICBpZiAoc2FtcGxlUmF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzYW1wbGVSYXRlID0gMS4wO1xuICAgIH1cblxuICAgIGlmICghd2luZG93Lm5ld3JlbGljKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFQYWdlQWN0aW9uW2FjdGlvbk5hbWVdKSB7XG4gICAgICBjb25zb2xlLmxvZygnVW5rbm93biBhY3Rpb25OYW1lOiAnICsgYWN0aW9uTmFtZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdFeHBlY3RlZCB2YWx1ZSB0byBiZSBhbiBvYmplY3QnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoTWF0aC5yYW5kb20oKSA+IHNhbXBsZVJhdGUpIHtcbiAgICAgIC8vIElnbm9yZSB0aGlzIGluc3RhbmNlXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgcHJvcCBpbiB2YWx1ZSkge1xuICAgICAgLy8gTmV3IHJlbGljIGRvZXNudCBoYW5kbGUgYm9vbGVhbnMuIE1ha2UgdGhlbSBzdHJpbmdzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtwcm9wXSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHZhbHVlW3Byb3BdID0gdmFsdWVbcHJvcF0udG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtwcm9wXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFsdWVbcHJvcF0gPSB2YWx1ZVtwcm9wXS5zdWJzdHJpbmcoMCwgTUFYX0ZJRUxEX0xFTkdUSCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2luZG93Lm5ld3JlbGljLmFkZFBhZ2VBY3Rpb24oYWN0aW9uTmFtZSwgdmFsdWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGFuIGF0dHJpYnV0ZSB0aGF0IHdpbGwgYmUgaW5jbHVkZWQgb24gYW55IHN1YnNlcXVlbnQgZ2VuZXJhdGVkIGV2ZW50c1xuICAgKi9cbiAgc2V0Q3VzdG9tQXR0cmlidXRlOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGlmICghd2luZG93Lm5ld3JlbGljKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2luZG93Lm5ld3JlbGljLnNldEN1c3RvbUF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfSxcblxuICBsb2FkRmluaXNoZWQoKSB7XG4gICAgaWYgKCF3aW5kb3cubmV3cmVsaWMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3aW5kb3cubmV3cmVsaWMuZmluaXNoZWQoKTtcbiAgfSxcblxuICBsb2dFcnJvcihlKSB7XG4gICAgaWYgKCF3aW5kb3cubmV3cmVsaWMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2luZG93Lm5ld3JlbGljLm5vdGljZUVycm9yKGUpO1xuICB9LFxuXG4gIHJlcG9ydFBhZ2VTaXplKCkge1xuICAgIGlmICghUkVQT1JUX1BBR0VfU0laRSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzb3VyY2VzID0gcGVyZm9ybWFuY2UgJiYgcGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZSgncmVzb3VyY2UnKTtcbiAgICAgIGxldCB0b3RhbERvd25sb2FkU2l6ZSA9IDA7XG4gICAgICBsZXQganNEb3dubG9hZFNpemUgPSAwO1xuICAgICAgY29uc3QganNGaWxlUmVnZXggPSAvXFwuanMkLztcbiAgICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgcmVzb3VyY2VzKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICByZXNvdXJjZS50cmFuc2ZlclNpemUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgIHJlc291cmNlLmVuY29kZWRCb2R5U2l6ZSA9PT0gdW5kZWZpbmVkXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0b3RhbERvd25sb2FkU2l6ZSArPSByZXNvdXJjZS50cmFuc2ZlclNpemU7XG4gICAgICAgIGlmIChqc0ZpbGVSZWdleC50ZXN0KHJlc291cmNlLm5hbWUpKSB7XG4gICAgICAgICAganNEb3dubG9hZFNpemUgKz0gcmVzb3VyY2UudHJhbnNmZXJTaXplO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXdpbmRvdy5uZXdyZWxpYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3aW5kb3cubmV3cmVsaWMuc2V0Q3VzdG9tQXR0cmlidXRlKFxuICAgICAgICAndG90YWxEb3dubG9hZFNpemUnLFxuICAgICAgICB0b3RhbERvd25sb2FkU2l6ZVxuICAgICAgKTtcbiAgICAgIHdpbmRvdy5uZXdyZWxpYy5zZXRDdXN0b21BdHRyaWJ1dGUoJ2pzRG93bmxvYWRTaXplJywganNEb3dubG9hZFNpemUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMubG9nRXJyb3IoZSk7XG4gICAgfVxuICB9LFxufTtcbiIsIi8vIFdlIHN1cHBvcnQgSUUgMTErXG5mdW5jdGlvbiBpc0lFKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdNU0lFJykgIT09IC0xIHx8IGlzSUUxMSgpO1xufVxuXG5mdW5jdGlvbiBJRVZlcnNpb24oKSB7XG4gIHJldHVybiBpc0lFMTEoKVxuICAgID8gJzExJ1xuICAgIDogbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgICAgICAuc3Vic3RyaW5nKG5hdmlnYXRvci51c2VyQWdlbnQubGFzdEluZGV4T2YoJ01TSUUnKSArIDUpXG4gICAgICAgIC5zcGxpdCgnLicpWzBdO1xufVxuXG5mdW5jdGlvbiBpc1Vuc3VwcG9ydGVkSUUoKSB7XG4gIHJldHVybiBpc0lFKCkgJiYgSUVWZXJzaW9uKCkgPCAxMTtcbn1cblxuLy8gV2Ugc3VwcG9ydCBDaHJvbWUgMzMueCArXG5mdW5jdGlvbiBpc0Nocm9tZSgpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQubGFzdEluZGV4T2YoJ0Nocm9tZS8nKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIGNocm9tZVZlcnNpb24oKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50XG4gICAgLnN1YnN0cmluZyhuYXZpZ2F0b3IudXNlckFnZW50Lmxhc3RJbmRleE9mKCdDaHJvbWUvJykgKyA3KVxuICAgIC5zcGxpdCgnLicpWzBdO1xufVxuXG5mdW5jdGlvbiBpc1Vuc3VwcG9ydGVkQ2hyb21lKCkge1xuICByZXR1cm4gaXNDaHJvbWUoKSAmJiBjaHJvbWVWZXJzaW9uKCkgPCAzMztcbn1cblxuLy8gV2Ugc3VwcG9ydCBTYWZhcmkgNy4wLnggK1xuZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1NhZmFyaS8nKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIHNhZmFyaVZlcnNpb24oKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50XG4gICAgLnN1YnN0cmluZyhuYXZpZ2F0b3IudXNlckFnZW50Lmxhc3RJbmRleE9mKCdWZXJzaW9uLycpICsgOClcbiAgICAuc3BsaXQoJy4nKVswXTtcbn1cblxuZnVuY3Rpb24gaXNVbnN1cHBvcnRlZFNhZmFyaSgpIHtcbiAgcmV0dXJuIGlzU2FmYXJpKCkgJiYgc2FmYXJpVmVyc2lvbigpIDwgNztcbn1cblxuLy8gV2Ugc3VwcG9ydCBGaXJlZm94IDI1LnggK1xuZnVuY3Rpb24gaXNGaXJlZm94KCkge1xuICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBmaXJlZm94VmVyc2lvbigpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnRcbiAgICAuc3Vic3RyaW5nKG5hdmlnYXRvci51c2VyQWdlbnQubGFzdEluZGV4T2YoJ0ZpcmVmb3gvJykgKyA4KVxuICAgIC5zcGxpdCgnLicpWzBdO1xufVxuXG5mdW5jdGlvbiBpc1Vuc3VwcG9ydGVkRmlyZWZveCgpIHtcbiAgcmV0dXJuIGlzRmlyZWZveCgpICYmIGZpcmVmb3hWZXJzaW9uKCkgPCAyNTtcbn1cblxuLy8gaHR0cHM6Ly9zdXBwb3J0LmNvZGUub3JnL2hjL2VuLXVzL2FydGljbGVzLzIwMjU5MTc0M1xuLy8gZm9yIHRoZSBmdWxsIGxpc3Qgb2Ygc3VwcG9ydGVkIGJyb3dzZXJzXG5leHBvcnQgZnVuY3Rpb24gaXNVbnN1cHBvcnRlZEJyb3dzZXIoKSB7XG4gIHJldHVybiAoXG4gICAgaXNVbnN1cHBvcnRlZElFKCkgfHxcbiAgICBpc1Vuc3VwcG9ydGVkQ2hyb21lKCkgfHxcbiAgICBpc1Vuc3VwcG9ydGVkU2FmYXJpKCkgfHxcbiAgICBpc1Vuc3VwcG9ydGVkRmlyZWZveCgpXG4gICk7XG59XG5cbi8vIERldGVjdCBhIG1vYmlsZSBkZXZpY2UuXG5leHBvcnQgZnVuY3Rpb24gaXNNb2JpbGVEZXZpY2UoKSB7XG4gIC8vIEFkYXB0ZWQgZnJvbSBodHRwOi8vZGV0ZWN0bW9iaWxlYnJvd3NlcnMuY29tLyB3aXRoIHRoZSBhZGRpdGlvbiBvZiB8YW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsgYXNcbiAgLy8gaXQgc3VnZ2VzdHMgYXQgaHR0cDovL2RldGVjdG1vYmlsZWJyb3dzZXJzLmNvbS9hYm91dFxuICAvLyBOb3RlIHRoYXQgdGhlcmUgYXJlIHR3byByZWd1bGFyIGV4cHJlc3Npb25zIGluIHRoZSBibG9iLiAgVGhlIGZpcnN0IHRlc3RzIGFnYWluc3QgdmFyaWFibGUgYSAodGhlIGVudGlyZVxuICAvLyB1c2VyIGFnZW50KSB3aGlsZSB0aGUgc2Vjb25kIHRlc3RzIGFnYWluc3QganVzdCB0aGUgZmlyc3QgZm91ciBjaGFyYWN0ZXJzIGluIGl0LlxuXG4gIHZhciBjaGVjayA9IGZhbHNlO1xuICAoZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoXG4gICAgICAvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgKGNlfHBob25lKXx4ZGF8eGlpbm98YW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaS50ZXN0KFxuICAgICAgICBhXG4gICAgICApIHx8XG4gICAgICAvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaS50ZXN0KFxuICAgICAgICBhLnN1YnN0cigwLCA0KVxuICAgICAgKVxuICAgICkge1xuICAgICAgY2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgfSkobmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYSk7XG4gIHJldHVybiBjaGVjaztcbn1cblxuLy8gRGV0ZWN0IElFMTEuICBBZGFwdGVkIGZyb21cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjE4MjUxNTcvaW50ZXJuZXQtZXhwbG9yZXItMTEtZGV0ZWN0aW9uLzIxODI1MjA3IzIxODI1MjA3XG5leHBvcnQgZnVuY3Rpb24gaXNJRTExKCkge1xuICB2YXIgaXNJRTExID0gISF3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgISFkb2N1bWVudC5kb2N1bWVudE1vZGU7XG4gIHJldHVybiBpc0lFMTE7XG59XG5cbi8vIERldGVybWluZSB3aGV0aGVyIGxvY2FsIHN0b3JhZ2UgaXMgYXZhaWxhYmxlLiAgT24gbWFjT1MgU2FmYXJpIFByaXZhdGUgTW9kZSBpdCB3b24ndCBiZS5cbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wYXVsaXJpc2gvNTU1ODU1NyNnaXN0Y29tbWVudC0xNzU1MDk5XG5leHBvcnQgZnVuY3Rpb24gaXNTdG9yYWdlQXZhaWxhYmxlKHR5cGUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgc3RvcmFnZSA9IHdpbmRvd1t0eXBlXSxcbiAgICAgIHggPSAnX19zdG9yYWdlX3Rlc3RfXyc7XG4gICAgc3RvcmFnZS5zZXRJdGVtKHgsIHgpO1xuICAgIHN0b3JhZ2UucmVtb3ZlSXRlbSh4KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudCBicm93c2VyIGFuZCwgaWYgc3BlY2lmaWVkLCB0aGUgY3VycmVudCBicm93c2VyIHZlcnNpb24uXG4gKiBSZXR1cm5zIHRoZSB1c2VyIGFnZW50IHN0cmluZyBpZiB0aGUgYnJvd3NlciBpcyB1bmtub3duLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnJvd3Nlck5hbWUoaW5jbHVkZVZlcnNpb24gPSBmYWxzZSkge1xuICBpZiAoaXNDaHJvbWUoKSkge1xuICAgIHJldHVybiAnQ2hyb21lJyArIChpbmNsdWRlVmVyc2lvbiA/IGAgJHtjaHJvbWVWZXJzaW9uKCl9YCA6ICcnKTtcbiAgfVxuXG4gIGlmIChpc0lFKCkpIHtcbiAgICByZXR1cm4gJ0ludGVybmV0IEV4cGxvcmVyJyArIChpbmNsdWRlVmVyc2lvbiA/IGAgJHtJRVZlcnNpb24oKX1gIDogJycpO1xuICB9XG5cbiAgaWYgKGlzRmlyZWZveCgpKSB7XG4gICAgcmV0dXJuICdGaXJlZm94JyArIChpbmNsdWRlVmVyc2lvbiA/IGAgJHtmaXJlZm94VmVyc2lvbigpfWAgOiAnJyk7XG4gIH1cblxuICBpZiAoaXNTYWZhcmkoKSkge1xuICAgIHJldHVybiAnU2FmYXJpJyArIChpbmNsdWRlVmVyc2lvbiA/IGAgJHtzYWZhcmlWZXJzaW9uKCl9YCA6ICcnKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50O1xufVxuIiwiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHR2YXIgbmF0aXZlQ29kZVN0cmluZyA9ICdbbmF0aXZlIGNvZGVdJztcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gdGh1bms7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsImltcG9ydCB7YWN0aW9ufSBmcm9tICdAc3Rvcnlib29rL2FkZG9uLWFjdGlvbnMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEFkZEFzc2V0QnV0dG9uUm93IGZyb20gJy4vQWRkQXNzZXRCdXR0b25Sb3cnO1xuXG5jb25zdCBtb2NrQXBpID0ge1xuICBnZXRVcGxvYWRVcmw6ICgpID0+IHtcbiAgICByZXR1cm4gJy9zb21lLXVybCc7XG4gIH0sXG4gIHdyYXBVcGxvYWREb25lQ2FsbGJhY2s6IGYgPT4ge1xuICAgIHJldHVybiBmO1xuICB9LFxuICB3cmFwVXBsb2FkU3RhcnRDYWxsYmFjazogZiA9PiB7XG4gICAgcmV0dXJuIGY7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudDogQWRkQXNzZXRCdXR0b25Sb3csXG59O1xuXG4vLyBUZW1wbGF0ZVxuY29uc3QgVGVtcGxhdGUgPSBhcmdzID0+IChcbiAgPEFkZEFzc2V0QnV0dG9uUm93XG4gICAgdXBsb2Fkc0VuYWJsZWQ9e3RydWV9XG4gICAgYWxsb3dlZEV4dGVuc2lvbnM9XCJcIlxuICAgIGFwaT17bW9ja0FwaX1cbiAgICBvblVwbG9hZFN0YXJ0PXthY3Rpb24oJ29uVXBsb2FkU3RhcnQnKX1cbiAgICBvblVwbG9hZERvbmU9e2FjdGlvbignb25VcGxvYWREb25lJyl9XG4gICAgb25VcGxvYWRFcnJvcj17YWN0aW9uKCdvblVwbG9hZEVycm9yJyl9XG4gICAgb25TZWxlY3RSZWNvcmQ9e2FjdGlvbignb25TZWxlY3RSZWNvcmQnKX1cbiAgICB7Li4uYXJnc31cbiAgLz5cbik7XG5cbi8vIFN0b3JpZXNcbmV4cG9ydCBjb25zdCBKdXN0QnV0dG9ucyA9IFRlbXBsYXRlLmJpbmQoe30pO1xuSnVzdEJ1dHRvbnMuYXJncyA9IHtcbiAgc3RhdHVzTWVzc2FnZTogJycsXG59O1xuXG5leHBvcnQgY29uc3QgQnV0dG9uc1dpdGhTdGF0dXMgPSBUZW1wbGF0ZS5iaW5kKHt9KTtcbkJ1dHRvbnNXaXRoU3RhdHVzLmFyZ3MgPSB7XG4gIHN0YXR1c01lc3NhZ2U6ICdUaGlzIGlzIGEgc3RhdHVzIG1lc3NhZ2UnLFxufTtcbiJdLCJuYW1lcyI6WyJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfYnJvd3NlckRldGVjdG9yIiwiX2xvY2FsZSIsIl9CdXR0b24iLCJfQXNzZXRVcGxvYWRlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfc2V0UHJvdG90eXBlT2YiLCJwIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJiaW5kIiwiX19wcm90b19fIiwiYXNzZXRCdXR0b25TdHlsZXMiLCJleHBvcnRzIiwiYnV0dG9uIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJtYXJnaW5Ub3AiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJtYXJnaW5SaWdodCIsImJ1dHRvblJvdyIsImRpc3BsYXkiLCJmbGV4RmxvdyIsImFsaWduSXRlbXMiLCJSZWNvcmRCdXR0b24iLCJfcmVmIiwib25TZWxlY3RSZWNvcmQiLCJkaXNhYmxlZCIsImNyZWF0ZUVsZW1lbnQiLCJvbkNsaWNrIiwiaWQiLCJjbGFzc05hbWUiLCJ0ZXh0IiwiaTE4biIsInJlY29yZEF1ZGlvIiwiaWNvbiIsInN0eWxlIiwic2l6ZSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImZ1bmMiLCJib29sIiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsInQiLCJpIiwiX3RvUHJpbWl0aXZlIiwiciIsImUiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9SZWFjdCRDb21wb25lbnQiLCJBZGRBc3NldEJ1dHRvblJvdyIsImFwcGx5IiwiYXJndW1lbnRzIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJyZW5kZXIiLCJzaG91bGRTaG93UmVjb3JkQnV0dG9uIiwidGhpcyIsInByb3BzIiwiaGlkZUF1ZGlvUmVjb3JkaW5nIiwiaXNJRTExIiwidXBsb2Fkc0VuYWJsZWQiLCJhbGxvd2VkRXh0ZW5zaW9ucyIsImFwaSIsIm9uVXBsb2FkU3RhcnQiLCJvblVwbG9hZERvbmUiLCJvblVwbG9hZEVycm9yIiwicmVjb3JkRGlzYWJsZWQiLCJzdGF0dXNNZXNzYWdlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwib2JqZWN0IiwiX0FkZEFzc2V0QnV0dG9uUm93IiwiX0hpZGRlblVwbG9hZGVyIiwiQXNzZXRVcGxvYWRlciIsIl90aGlzIiwiX2xlbiIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiLCJyZWZzIiwidXBsb2FkZXIiLCJvcGVuRmlsZUNob29zZXIiLCJ1cmwiLCJnZXRVcGxvYWRVcmwiLCJ1cGxvYWREb25lIiwid3JhcFVwbG9hZERvbmVDYWxsYmFjayIsInVwbG9hZFN0YXJ0Iiwid3JhcFVwbG9hZFN0YXJ0Q2FsbGJhY2siLCJyZWYiLCJ0b1VybCIsImZpbGVVcGxvYWRDbGlja2VkIiwidXBsb2FkRmlsZSIsIm1vZHVsZSIsIl9qcXVlcnkiLCJfZmlyZWhvc2UiLCJIaWRkZW5VcGxvYWRlciIsImNsaWNrIiwiX3Byb3RvIiwiY29tcG9uZW50RGlkTW91bnQiLCIkIiwiZmlsZXVwbG9hZCIsImRhdGFUeXBlIiwicmVwbGFjZUZpbGVJbnB1dCIsImFkZCIsImRhdGEiLCJhdWRpb0ZpbGVOYW1lIiwiZmlsZXMiLCJuYW1lIiwiaW5jbHVkZXMiLCJmaXJlaG9zZUNsaWVudCIsInB1dFJlY29yZCIsInN0dWR5Iiwic3R1ZHlfZ3JvdXAiLCJldmVudCIsImRhdGFfanNvbiIsImluY2x1ZGVVc2VySWQiLCJkb25lIiwicmVzdWx0IiwiZXJyb3IiLCJzdGF0dXMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInR5cGUiLCJhY2NlcHQiLCJ3aW5kb3ciLCJkYXNoYm9hcmQiLCJfZXhwZXJpbWVudHMiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJpc0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJuIiwidG9TdHJpbmciLCJzbGljZSIsImZyb20iLCJ0ZXN0IiwiRiIsInMiLCJfZSIsImYiLCJlcnIiLCJub3JtYWxDb21wbGV0aW9uIiwiZGlkRXJyIiwic3RlcCIsIm5leHQiLCJfZTIiLCJhcnIiLCJsZW4iLCJhcnIyIiwiUGFnZUFjdGlvbiIsIm1ha2VFbnVtIiwiUkVQT1JUX1BBR0VfU0laRSIsImV4cGVyaW1lbnRzIiwiaXNFbmFibGVkIiwiTWF0aCIsInJhbmRvbSIsImFkZFBhZ2VBY3Rpb24iLCJhY3Rpb25OYW1lIiwic2FtcGxlUmF0ZSIsInVuZGVmaW5lZCIsIm5ld3JlbGljIiwicHJvcCIsInN1YnN0cmluZyIsImNvbnNvbGUiLCJsb2ciLCJzZXRDdXN0b21BdHRyaWJ1dGUiLCJsb2FkRmluaXNoZWQiLCJmaW5pc2hlZCIsImxvZ0Vycm9yIiwibm90aWNlRXJyb3IiLCJyZXBvcnRQYWdlU2l6ZSIsIl9zdGVwIiwicmVzb3VyY2VzIiwicGVyZm9ybWFuY2UiLCJnZXRFbnRyaWVzQnlUeXBlIiwidG90YWxEb3dubG9hZFNpemUiLCJqc0Rvd25sb2FkU2l6ZSIsImpzRmlsZVJlZ2V4IiwiX2l0ZXJhdG9yIiwicmVzb3VyY2UiLCJ0cmFuc2ZlclNpemUiLCJlbmNvZGVkQm9keVNpemUiLCJpc0lFIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaW5kZXhPZiIsIklFVmVyc2lvbiIsImxhc3RJbmRleE9mIiwic3BsaXQiLCJpc0Nocm9tZSIsImNocm9tZVZlcnNpb24iLCJpc1NhZmFyaSIsInNhZmFyaVZlcnNpb24iLCJpc0ZpcmVmb3giLCJmaXJlZm94VmVyc2lvbiIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnQiLCJkb2N1bWVudE1vZGUiLCJnZXRCcm93c2VyTmFtZSIsImluY2x1ZGVWZXJzaW9uIiwiaXNNb2JpbGVEZXZpY2UiLCJjaGVjayIsImEiLCJzdWJzdHIiLCJ2ZW5kb3IiLCJvcGVyYSIsImlzU3RvcmFnZUF2YWlsYWJsZSIsInN0b3JhZ2UiLCJ4Iiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJpc1Vuc3VwcG9ydGVkQnJvd3NlciIsImlzVW5zdXBwb3J0ZWRJRSIsImlzVW5zdXBwb3J0ZWRDaHJvbWUiLCJpc1Vuc3VwcG9ydGVkU2FmYXJpIiwiaXNVbnN1cHBvcnRlZEZpcmVmb3giLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnIiwiYXJnVHlwZSIsInB1c2giLCJpbm5lciIsImpvaW4iLCJkZWZhdWx0IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiRXJyb3IiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsIm51bWJlciIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50IiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsImRpc3BhdGNoIiwiZ2V0U3RhdGUiLCJhY3Rpb24iLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnRCeVNlbGVjdG9yIiwiaW5zZXJ0IiwidGFyZ2V0IiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9hZGRvbkFjdGlvbnMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsIm1vY2tBcGkiLCJUZW1wbGF0ZSIsImNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=