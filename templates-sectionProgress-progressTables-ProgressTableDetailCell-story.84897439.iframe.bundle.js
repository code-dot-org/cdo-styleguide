/*! For license information please see templates-sectionProgress-progressTables-ProgressTableDetailCell-story.84897439.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[465],{"./src/templates/FontAwesome.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=FontAwesome;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_excluded=["icon","className","title"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function FontAwesome(_ref){var icon=_ref.icon,className=_ref.className,title=_ref.title,props=_objectWithoutProperties(_ref,_excluded),newProps=_lodash.default.assign({},props,{className:"fa fa-".concat(icon," ").concat(className||"")});return _react.default.createElement("i",_extends({},newProps,{title}))}FontAwesome.propTypes={icon:_propTypes.default.string.isRequired,className:_propTypes.default.string,title:_propTypes.default.string},module.exports=exports.default},"./src/templates/progress/BubbleBadge.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.AssessmentBadge=AssessmentBadge,exports.BadgeType=void 0,exports.KeepWorkingBadge=KeepWorkingBadge,exports.default=BubbleBadge;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_FontAwesome=_interopRequireDefault(__webpack_require__("./src/templates/FontAwesome.jsx")),_utils=__webpack_require__("./src/utils.js"),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var BadgeType=exports.BadgeType=(0,_utils.makeEnum)("assessment","keepWorking");function BubbleBadge(_ref){var badgeType=_ref.badgeType,bubbleSize=_ref.bubbleSize,bubbleShape=_ref.bubbleShape;return[_BubbleFactory.BubbleSize.full,_BubbleFactory.BubbleSize.letter].includes(bubbleSize)?badgeType===BadgeType.assessment?AssessmentBubbleBadge(bubbleShape):badgeType===BadgeType.keepWorking?KeepWorkingBubbleBadge(bubbleSize):null:null}function AssessmentBubbleBadge(bubbleShape){var bubblePositioning=bubbleShape===_BubbleFactory.BubbleShape.diamond?styles.diamondBubblePosition:styles.bubblePosition;return _react.default.createElement("div",{style:bubblePositioning},_react.default.createElement(AssessmentBadge,null))}function KeepWorkingBubbleBadge(bubbleSize){var isSmall=bubbleSize===_BubbleFactory.BubbleSize.letter,bubblePositioning=isSmall?styles.keepWorkingSmallBadgePosition:styles.keepWorkingBadgePosition;return _react.default.createElement("div",{style:bubblePositioning},_react.default.createElement(KeepWorkingBadge,{isSmall}))}function KeepWorkingBadge(_ref2){var isSmall=_ref2.isSmall,style=_ref2.style,badgeSize=isSmall?styles.keepWorkingBadgeSmallSize:styles.keepWorkingBadgeFullSize;return _react.default.createElement("div",{style:_objectSpread(_objectSpread(_objectSpread({},styles.keepWorkingBadge),badgeSize),style)})}function AssessmentBadge(){return _react.default.createElement("span",{className:"fa-stack",style:styles.container},_react.default.createElement(_FontAwesome.default,{icon:"circle",className:"fa-stack-2x",style:styles.purple}),_react.default.createElement(_FontAwesome.default,{icon:"circle-thin",className:"fa-stack-2x",style:styles.white}),_react.default.createElement(_FontAwesome.default,{icon:"check",className:"fa-stack-1x",style:styles.white}))}BubbleBadge.propTypes={badgeType:_propTypes.default.oneOf(Object.values(BadgeType)).isRequired,bubbleSize:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleSize)).isRequired,bubbleShape:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleShape)).isRequired},AssessmentBubbleBadge.propTypes={bubbleShape:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleShape)).isRequired},KeepWorkingBubbleBadge.propTypes={bubbleSize:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleSize)).isRequired},KeepWorkingBadge.propTypes={isSmall:_propTypes.default.bool,style:_propTypes.default.object},AssessmentBadge.propTypes={hasWhiteBorder:_propTypes.default.bool,style:_propTypes.default.object};var styles={container:{fontSize:10},bubblePosition:{position:"absolute",top:-7,right:-7},diamondBubblePosition:{position:"absolute",top:-13,right:-17},purple:{color:_color.default.purple},white:{color:_color.default.white},keepWorkingSmallBadgePosition:{position:"absolute",top:-2,right:-2},keepWorkingBadgePosition:{position:"absolute",top:0,right:-2},keepWorkingBadge:{borderRadius:"50%",backgroundColor:_color.default.red},keepWorkingBadgeFullSize:{width:10,height:10},keepWorkingBadgeSmallSize:{width:7,height:7}}},"./src/templates/progress/progressTestHelpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.fakeUnitData=exports.fakeStudents=exports.fakeStudentLevelProgress=exports.fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdate=exports.fakeProgressTableReduxInitialState=exports.fakeProgressForLevels=exports.fakeLevels=exports.fakeLevelWithSubLevels=exports.fakeLevel=exports.fakeLessonWithLevels=exports.fakeLesson=exports.createStoreWithLockedLesson=exports.createStoreWithHiddenLesson=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),_redux=__webpack_require__("./node_modules/redux/es/redux.js"),_immutable=_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.fakeLesson=function fakeLesson(name,id){return{name,id,lockable:arguments.length>2&&void 0!==arguments[2]&&arguments[2],lessonNumber:arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,lessonStartUrl:arguments.length>4&&void 0!==arguments[4]?arguments[4]:"code.org",isFocusArea:!1,levels:arguments.length>5&&void 0!==arguments[5]?arguments[5]:[]}};var fakeLevel=exports.fakeLevel=function fakeLevel(){var overrides=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelNumber=overrides.levelNumber||1,id=(overrides.id||levelNumber).toString();return delete overrides.id,_objectSpread({id,status:_sharedConstants.LevelStatus.not_tried,isLocked:!1,levelNumber,bubbleText:levelNumber.toString(),url:"/level".concat(levelNumber),name:"Level ".concat(levelNumber),isUnplugged:!1},overrides)},fakeLevels=(exports.fakeLevelWithSubLevels=function fakeLevelWithSubLevels(numSublevels){var startLevel=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,overrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},sublevels=_lodash.default.range(numSublevels).map((function(index){return fakeLevel({id:index+startLevel,levelNumber:index+startLevel})}));return fakeLevel(_objectSpread({sublevels,id:startLevel+numSublevels,levelNumber:startLevel+numSublevels},overrides))},exports.fakeLevels=function fakeLevels(numLevels){var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$startLevel=_ref.startLevel,startLevel=void 0===_ref$startLevel?1:_ref$startLevel,_ref$named=_ref.named,named=void 0===_ref$named||_ref$named;return _lodash.default.range(numLevels).map((function(index){var overrideData={id:index+startLevel,levelNumber:index+startLevel};return named||(overrideData.name=void 0),fakeLevel(overrideData)}))}),fakeProgressForLevels=exports.fakeProgressForLevels=function fakeProgressForLevels(levels){var status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_sharedConstants.LevelStatus.not_tried,serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progress={};return levels.forEach((function(level){progress[level.id]=(0,_progressHelpers.levelProgressFromServer)(_objectSpread({status},serverProgressOverrides))})),progress},randomNumberUpTo100=(exports.createStoreWithHiddenLesson=function createStoreWithHiddenLesson(viewAs,lessonId){return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lockableAuthorized:!1,lockableAuthorizedLoaded:!0,lessonsBySectionIdLoaded:!0},viewAs,teacherSections:{sectionIds:[11],sectionsAreLoaded:!0,sections:_defineProperty({},11,{id:11,name:"test section",lesson_extras:!0,pairing_allowed:!0,studentCount:4,code:"TQGSJR",providerManaged:!1,lessons:{},ttsAutoplayEnabled:!1,lessonExtras:!1,pairingAllowed:!0}),selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{scriptName:"script-name",scriptId:17,unitProgressHasLoaded:!0},currentUser:{userId:1}})},exports.createStoreWithLockedLesson=function createStoreWithLockedLesson(viewAs){var lockableAuthorized=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return(0,_redux.createStore)((function(state){return state}),{lessonLock:{lessonsBySectionId:_defineProperty({},11,{}),lessonsBySectionIdLoaded:!0,lockableAuthorized,lockableAuthorizedLoaded:!0},viewAs,teacherSections:{selectedSectionId:11},hiddenLesson:_immutable.default.fromJS({lessonsBySection:_defineProperty({},11,_defineProperty({},lessonId,!0))}),progress:{unitProgressHasLoaded:!0},currentUser:{userId:1}})},function randomNumberUpTo100(){return Math.floor(100*Math.random())}),lessonId=1,fakeLessonWithLevels=exports.fakeLessonWithLevels=function fakeLessonWithLevels(){var overrideFields=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},levelCount=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,position=overrideFields.position||randomNumberUpTo100();return _objectSpread({id:lessonId++,name:"Lesson - ".concat(position),title:"Lesson ".concat(position,": Lesson - ").concat(position),lockable:!1,relative_position:position,position,levels:fakeLevels(levelCount)},overrideFields)},fakeStudents=exports.fakeStudents=function fakeStudents(studentCount){return Array(studentCount).fill().map((function(_,i){return{id:i,name:"student-".concat(i),familyName:"student-".concat(studentCount-i)}}))},fakeUnitData=exports.fakeUnitData=function fakeUnitData(){return _objectSpread({id:1,name:"csd1-2020",title:"CSD Unit 1 - Problem Solving and Computing (20-21)",csf:!1,isCsd:!0,isCsp:!1,lessons:[]},arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})},fakeStudentLevelProgress=exports.fakeStudentLevelProgress=function fakeStudentLevelProgress(levels,students){var serverProgressOverrides=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},progressOnLessons=fakeProgressForLevels(levels,serverProgressOverrides.status,serverProgressOverrides),studentProgress={};return students.forEach((function(student){studentProgress[student.id]=progressOnLessons})),studentProgress},fakeStudentLastUpdate=exports.fakeStudentLastUpdate=function fakeStudentLastUpdate(students){var studentLastUpdate={};return students.forEach((function(student){studentLastUpdate[student.id]=Date.now()})),studentLastUpdate},fakeStudentLastUpdateByScript=exports.fakeStudentLastUpdateByScript=function fakeStudentLastUpdateByScript(scriptData,students){return _defineProperty({},scriptData.id,fakeStudentLastUpdate(students))};exports.fakeProgressTableReduxInitialState=function fakeProgressTableReduxInitialState(lessons,scriptData){var students=arguments.length>2&&void 0!==arguments[2]?arguments[2]:fakeStudents(2);lessons||(lessons=[fakeLessonWithLevels({position:1,levels:fakeLevels(1)}),fakeLessonWithLevels({position:2,levels:fakeLevels(2)})]);scriptData||(scriptData=fakeUnitData({lessons}));var levelProgressData=fakeStudentLevelProgress(scriptData.lessons[0].levels,students),sectionId=randomNumberUpTo100();return{currentUser:{isSortedByFamilyName:!1},progress:{lessonGroups:[],lessons,focusAreaLessonIds:[],deeperLearningCourse:!1},teacherSections:{sections:[{id:sectionId}],selectedSectionId:sectionId,selectedStudents:students},sectionProgress:{unitDataByUnit:_defineProperty({},scriptData.id,scriptData),studentLevelProgressByUnit:_defineProperty({},scriptData.id,levelProgressData),studentLessonProgressByUnit:_defineProperty({},scriptData.id,(0,_progressHelpers.lessonProgressForSection)(levelProgressData,scriptData.lessons)),studentLastUpdateByUnit:fakeStudentLastUpdateByScript(scriptData,students),lessonOfInterest:1},unitSelection:{scriptId:scriptData.id},locales:{localeCode:"en-US"}}}},"./src/templates/sectionProgress/progressTables/ProgressTableDetailCell.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_firehose=_interopRequireDefault(__webpack_require__("./src/lib/util/firehose.js")),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx"),_progressHelpers=__webpack_require__("./src/templates/progress/progressHelpers.js"),progressStyles=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/templates/progress/progressStyles.js")),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js"),_color=_interopRequireDefault(__webpack_require__("./src/util/color.js")),_ProgressTableLevelBubble=_interopRequireDefault(__webpack_require__("./src/templates/sectionProgress/progressTables/ProgressTableLevelBubble.jsx"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}_defineProperty(exports.default=function(_React$Component){function ProgressTableDetailCell(props){var _this;return(_this=_React$Component.call(this,props)||this).recordBubbleClick=_this.recordBubbleClick.bind(_this),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressTableDetailCell,_React$Component);var _proto=ProgressTableDetailCell.prototype;return _proto.shouldComponentUpdate=function shouldComponentUpdate(nextProps){return!_lodash.default.isEqual(this.props,nextProps)},_proto.recordBubbleClick=function recordBubbleClick(levelId){_firehose.default.putRecord({study:"teacher_dashboard_actions",study_group:"progress",event:"go_to_level",data_json:JSON.stringify({student_id:this.props.studentId,section_id:this.props.sectionId,level_id:levelId})},{includeUserId:!0})},_proto.buildBubbleUrl=function buildBubbleUrl(level){return(0,_BubbleFactory.getBubbleUrl)(level.url,this.props.studentId,this.props.sectionId)},_proto.renderSublevels=function renderSublevels(level){var _this2=this;return _react.default.createElement("div",null,level.sublevels.map((function(sublevel){var sublevelProgress=_this2.props.studentProgress[sublevel.id];return _react.default.createElement("div",{key:sublevel.id,style:styles.sublevelContainer,onClick:function onClick(_){return _this2.recordBubbleClick(sublevel.id)}},_react.default.createElement(_ProgressTableLevelBubble.default,{levelStatus:null==sublevelProgress?void 0:sublevelProgress.status,bubbleSize:_BubbleFactory.BubbleSize.letter,isBonus:sublevel.bonus,isConcept:sublevel.isConceptLevel,title:sublevel.bubbleText,url:_this2.buildBubbleUrl(sublevel),reviewState:null==sublevelProgress?void 0:sublevelProgress.teacherFeedbackReviewState}))})))},_proto.renderBubble=function renderBubble(level){var _this3=this,levelProgress=this.props.studentProgress[level.id],url=this.buildBubbleUrl(level);return _react.default.createElement("div",{key:"".concat(level.id,"_").concat(level.levelNumber),style:styles.container},_react.default.createElement("div",{onClick:function onClick(_){return _this3.recordBubbleClick(level.id)}},_react.default.createElement(_ProgressTableLevelBubble.default,{levelStatus:null==levelProgress?void 0:levelProgress.status,isLocked:null==levelProgress?void 0:levelProgress.locked,levelKind:level.kind,isUnplugged:level.isUnplugged,isBonus:level.bonus,isPaired:null==levelProgress?void 0:levelProgress.paired,isConcept:level.isConceptLevel,title:level.bubbleText,url,reviewState:null==levelProgress?void 0:levelProgress.teacherFeedbackReviewState})),level.sublevels&&this.renderSublevels(level))},_proto.render=function render(){var _this4=this;return(0,_progressHelpers.lessonHasLevels)({levels:this.props.levels})?_react.default.createElement("div",{style:styles.container,className:"uitest-detail-cell cell-content"},_react.default.createElement("div",{style:styles.background}),this.props.levels.map((function(level){return _this4.renderBubble(level)}))):null},ProgressTableDetailCell}(_react.default.Component),"propTypes",{studentId:_propTypes.default.number.isRequired,sectionId:_propTypes.default.number.isRequired,levels:_propTypes.default.arrayOf(_progressTypes.levelType).isRequired,studentProgress:_propTypes.default.objectOf(_progressTypes.studentLevelProgressType).isRequired});var styles={container:_objectSpread(_objectSpread({},progressStyles.flexBetween),{},{position:"relative",whiteSpace:"nowrap"}),background:{height:10,backgroundColor:_color.default.lighter_gray,position:"absolute",left:10,right:10},sublevelContainer:{position:"relative",display:"inline-block"}};module.exports=exports.default},"./src/templates/sectionProgress/progressTables/ProgressTableLevelBubble.jsx":(module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js")),_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_types=__webpack_require__("./src/templates/feedback/types.js"),_BubbleBadge=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/templates/progress/BubbleBadge.jsx")),_BubbleFactory=__webpack_require__("./src/templates/progress/BubbleFactory.jsx"),_CachedElement=_interopRequireDefault(__webpack_require__("./src/util/CachedElement.jsx")),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_progressStyles=__webpack_require__("./src/templates/progress/progressStyles.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ProgressTableLevelBubble=exports.default=function(_React$PureComponent){function ProgressTableLevelBubble(props){var _this;return(_this=_React$PureComponent.call(this,props)||this).createBubbleElement=_this.createBubbleElement.bind(_this),_this}!function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}(ProgressTableLevelBubble,_React$PureComponent);var _proto=ProgressTableLevelBubble.prototype;return _proto.render=function render(){return _react.default.createElement(_BubbleFactory.BubbleLink,{url:this.props.url},_react.default.createElement(_CachedElement.default,{elementType:"BasicBubble",cacheKey:this.getCacheKey(),createElement:this.createBubbleElement}))},_proto.shouldShowKeepWorkingBadge=function shouldShowKeepWorkingBadge(){return[_types.ReviewStates.keepWorking,_types.ReviewStates.awaitingReview].includes(this.props.reviewState)},_proto.createBubbleElement=function createBubbleElement(){var _this$props=this.props,levelStatus=_this$props.levelStatus,levelKind=_this$props.levelKind,isLocked=_this$props.isLocked,isUnplugged=_this$props.isUnplugged,isConcept=_this$props.isConcept,isBonus=_this$props.isBonus,isPaired=_this$props.isPaired,title=_this$props.title,bubbleSize=_this$props.bubbleSize,content=(0,_BubbleFactory.getBubbleContent)(isLocked,isUnplugged,isBonus,isPaired,title,bubbleSize);return this.renderBasicBubble((0,_BubbleFactory.getBubbleShape)(isUnplugged,isConcept),bubbleSize,(0,_progressStyles.levelProgressStyle)(levelStatus,levelKind),content,this.shouldShowKeepWorkingBadge())},_proto.renderBasicBubble=function renderBasicBubble(shape,size,progressStyle,content,showKeepWorkingBadge){return _react.default.createElement(_BubbleFactory.BasicBubble,{shape,size,progressStyle,classNames:(0,_BubbleFactory.getBubbleClassNames)(!0)},content,showKeepWorkingBadge&&_react.default.createElement(_BubbleBadge.default,{badgeType:_BubbleBadge.BadgeType.keepWorking,bubbleSize:size,bubbleShape:shape}))},_proto.getCacheKey=function getCacheKey(){var _this$props2=this.props,isLocked=_this$props2.isLocked,levelStatus=_this$props2.levelStatus,levelKind=_this$props2.levelKind,isUnplugged=_this$props2.isUnplugged,isConcept=_this$props2.isConcept,isBonus=_this$props2.isBonus,isPaired=_this$props2.isPaired,title=_this$props2.title,bubbleSize=_this$props2.bubbleSize,statusString="sts=".concat(levelStatus);if(levelKind===_sharedConstants.LevelKind.assessment&&(statusString="asmt:".concat(statusString)),bubbleSize===_BubbleFactory.BubbleSize.letter){var badge=this.shouldShowKeepWorkingBadge()?"&bdg":"";return"ltr:ttl=".concat(title,"&").concat(statusString).concat(badge)}if(isUnplugged)return"unp:".concat(statusString);var shapeString="shp=".concat((0,_BubbleFactory.getBubbleShape)(isUnplugged,isConcept)),strings=[isLocked?"lkd:":isPaired?"prd:":isBonus?"bns:":title?"ttl=".concat(title):null,shapeString,statusString];return this.shouldShowKeepWorkingBadge()&&strings.push("bdg"),strings.join("&")},ProgressTableLevelBubble}(_react.default.PureComponent);_defineProperty(ProgressTableLevelBubble,"propTypes",{levelStatus:_propTypes.default.string,levelKind:_propTypes.default.string,isLocked:_propTypes.default.bool,isUnplugged:_propTypes.default.bool,isConcept:_propTypes.default.bool,isBonus:_propTypes.default.bool,isPaired:_propTypes.default.bool,bubbleSize:_propTypes.default.oneOf(Object.values(_BubbleFactory.BubbleSize)).isRequired,title:_propTypes.default.string,url:_propTypes.default.string,reviewState:_propTypes.default.oneOf(Object.keys(_types.ReviewStates))}),_defineProperty(ProgressTableLevelBubble,"defaultProps",{bubbleSize:_BubbleFactory.BubbleSize.full}),module.exports=exports.default},"./src/util/CachedElement.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=CachedElement,exports.unitTestExports=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_server=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/server.browser.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/prop-types/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function CachedElement(_ref){var elementType=_ref.elementType,cacheKey=_ref.cacheKey,createElement=_ref.createElement,htmlCache=elementsHtmlCache[elementType]||{},elementHtml=htmlCache[cacheKey];return elementHtml||(elementHtml=function createHtml(element){return _server.default.renderToStaticMarkup(element)}(createElement()),htmlCache[cacheKey]=elementHtml,elementsHtmlCache[elementType]=htmlCache),_react.default.createElement("div",{dangerouslySetInnerHTML:{__html:elementHtml}})}CachedElement.propTypes={elementType:_propTypes.default.string.isRequired,cacheKey:_propTypes.default.string.isRequired,createElement:_propTypes.default.func.isRequired};var elementsHtmlCache={};exports.unitTestExports={clearElementsCache:function clearElementsCache(){Object.keys(elementsHtmlCache).forEach((function(key){delete elementsHtmlCache[key]}))},elementsHtmlCache}},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":module=>{"use strict";module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */"),sourceURLs=cssMapping.sources.map((function(source){return"/*# sourceURL=".concat(cssMapping.sourceRoot||"").concat(source," */")}));return[content].concat(sourceURLs).concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/redux-thunk/lib/index.js":(__unused_webpack_module,exports)=>{"use strict";function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){return"function"==typeof action?action(dispatch,getState,extraArgument):next(action)}}}}exports.__esModule=!0;var thunk=createThunkMiddleware();thunk.withExtraArgument=createThunkMiddleware,exports.default=thunk},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":module=>{"use strict";var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier,updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":module=>{"use strict";var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":module=>{"use strict";module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":module=>{"use strict";module.exports=function domAPI(options){var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":module=>{"use strict";module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./src/templates/sectionProgress/progressTables/ProgressTableDetailCell.story.jsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.OnlyLevelUnplugged=exports.LevelWithSublevels=exports.IncludesPairedLevel=exports.FirstLevelUnplugged=exports.DiamondBubbles=exports.BasicBubbles=void 0;var _react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_sharedConstants=__webpack_require__("./generated-scripts/sharedConstants.js"),_progressTestHelpers=__webpack_require__("./src/templates/progress/progressTestHelpers.js"),_ProgressTableDetailCell=_interopRequireDefault(__webpack_require__("./src/templates/sectionProgress/progressTables/ProgressTableDetailCell.jsx"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var statusForLevel=[_sharedConstants.LevelStatus.perfect,_sharedConstants.LevelStatus.not_tried,_sharedConstants.LevelStatus.attempted,_sharedConstants.LevelStatus.passed,_sharedConstants.LevelStatus.submitted],levels=(0,_progressTestHelpers.fakeLevels)(5);levels[0].isConceptLevel=!0;var diamondLevels=(0,_progressTestHelpers.fakeLevels)(2);diamondLevels[0].isConceptLevel=!0,diamondLevels[1].isConceptLevel=!0;var unpluggedLevel=(0,_progressTestHelpers.fakeLevel)({id:2,isUnplugged:!0}),studentProgress=(0,_progressTestHelpers.fakeProgressForLevels)(levels);levels.forEach((function(level,index){return studentProgress[level.id].status=statusForLevel[index]}));var pairedProgress=(0,_progressTestHelpers.fakeProgressForLevels)(levels);pairedProgress[levels[0].id].paired=!0;var sublevels=(0,_progressTestHelpers.fakeLevels)(5);sublevels.forEach((function(sub,index){sub.bubbleText=String.fromCharCode("a".charCodeAt(0)+index)}));var levelWithSublevels=(0,_progressTestHelpers.fakeLevels)(1)[0];levelWithSublevels.sublevels=sublevels;exports.default={component:_ProgressTableDetailCell.default};var DEFAULT_PROPS={studentId:1,sectionId:1},Template=function Template(args){return _react.default.createElement("div",{className:"progress-table"},_react.default.createElement("div",{className:"content-view"},_react.default.createElement("table",{className:"detail-view"},_react.default.createElement("tbody",null,_react.default.createElement("tr",null,_react.default.createElement("td",null,_react.default.createElement(_ProgressTableDetailCell.default,_extends({},DEFAULT_PROPS,args))))))))};(exports.LevelWithSublevels=Template.bind({})).args={levels:[levelWithSublevels],studentProgress},(exports.BasicBubbles=Template.bind({})).args={levels,studentProgress},(exports.DiamondBubbles=Template.bind({})).args={levels:diamondLevels,studentProgress},(exports.IncludesPairedLevel=Template.bind({})).args={levels,studentProgress:pairedProgress},(exports.FirstLevelUnplugged=Template.bind({})).args={levels:[unpluggedLevel].concat(function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(levels)),studentProgress},(exports.OnlyLevelUnplugged=Template.bind({})).args={levels:[unpluggedLevel],studentProgress}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,