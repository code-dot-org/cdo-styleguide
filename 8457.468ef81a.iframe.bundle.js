(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[8457],{"./node_modules/@amplitude/analytics-browser/lib/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Identify:()=>Identify,Revenue:()=>Revenue,Types:()=>esm_namespaceObject,add:()=>add,createInstance:()=>createInstance,flush:()=>flush,getDeviceId:()=>getDeviceId,getSessionId:()=>getSessionId,getUserId:()=>getUserId,groupIdentify:()=>groupIdentify,identify:()=>identify,init:()=>init,logEvent:()=>logEvent,remove:()=>remove,reset:()=>esm_reset,revenue:()=>revenue,runQueuedFunctions:()=>runQueuedFunctions,setDeviceId:()=>setDeviceId,setGroup:()=>setGroup,setOptOut:()=>setOptOut,setSessionId:()=>setSessionId,setTransport:()=>setTransport,setUserId:()=>setUserId,track:()=>track});var esm_namespaceObject={};__webpack_require__.r(esm_namespaceObject),__webpack_require__.d(esm_namespaceObject,{IdentifyOperation:()=>IdentifyOperation,LogLevel:()=>LogLevel,PluginType:()=>PluginType,RevenueProperty:()=>RevenueProperty,ServerZone:()=>ServerZone,SpecialEventType:()=>SpecialEventType,Status:()=>Status,TransportType:()=>TransportType});var PluginType,Status,tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");!function(PluginType){PluginType.BEFORE="before",PluginType.ENRICHMENT="enrichment",PluginType.DESTINATION="destination"}(PluginType||(PluginType={})),function(Status){Status.Unknown="unknown",Status.Skipped="skipped",Status.Success="success",Status.RateLimit="rate_limit",Status.PayloadTooLarge="payload_too_large",Status.Invalid="invalid",Status.Failed="failed",Status.Timeout="Timeout",Status.SystemError="SystemError"}(Status||(Status={}));var LogLevel,ServerZone,AMPLITUDE_PREFIX="AMP",STORAGE_PREFIX="".concat(AMPLITUDE_PREFIX,"_unsent"),buildResult=function(event,code,message){return void 0===code&&(code=0),void 0===message&&(message=Status.Unknown),{event,code,message}};!function(LogLevel){LogLevel[LogLevel.None=0]="None",LogLevel[LogLevel.Error=1]="Error",LogLevel[LogLevel.Warn=2]="Warn",LogLevel[LogLevel.Verbose=3]="Verbose"}(LogLevel||(LogLevel={})),function(ServerZone){ServerZone.US="US",ServerZone.EU="EU"}(ServerZone||(ServerZone={}));var IdentifyOperation,RevenueProperty,SpecialEventType,PREFIX="Amplitude Logger ",Logger=function(){function Logger(){this.logLevel=LogLevel.None}return Logger.prototype.disable=function(){this.logLevel=LogLevel.None},Logger.prototype.enable=function(logLevel){void 0===logLevel&&(logLevel=LogLevel.Warn),this.logLevel=logLevel},Logger.prototype.log=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this.logLevel<LogLevel.Verbose||console.log("".concat(PREFIX,"[Log]: ").concat(args.join(" ")))},Logger.prototype.warn=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this.logLevel<LogLevel.Warn||console.warn("".concat(PREFIX,"[Warn]: ").concat(args.join(" ")))},Logger.prototype.error=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this.logLevel<LogLevel.Error||console.error("".concat(PREFIX,"[Error]: ").concat(args.join(" ")))},Logger}(),getDefaultConfig=function(){return{flushMaxRetries:12,flushQueueSize:200,flushIntervalMillis:1e4,logLevel:LogLevel.Warn,loggerProvider:new Logger,optOut:!1,serverUrl:"https://api2.amplitude.com/2/httpapi",serverZone:ServerZone.US,useBatch:!1}},Config=function(){function Config(options){var _a,_b,_c;this._optOut=!1;var defaultConfig=getDefaultConfig();this.apiKey=options.apiKey,this.flushIntervalMillis=options.flushIntervalMillis||defaultConfig.flushIntervalMillis,this.flushMaxRetries=options.flushMaxRetries||defaultConfig.flushMaxRetries,this.flushQueueSize=options.flushQueueSize||defaultConfig.flushQueueSize,this.loggerProvider=options.loggerProvider||defaultConfig.loggerProvider,this.logLevel=null!==(_a=options.logLevel)&&void 0!==_a?_a:defaultConfig.logLevel,this.minIdLength=options.minIdLength,this.plan=options.plan,this.ingestionMetadata=options.ingestionMetadata,this.optOut=null!==(_b=options.optOut)&&void 0!==_b?_b:defaultConfig.optOut,this.serverUrl=options.serverUrl,this.serverZone=options.serverZone||defaultConfig.serverZone,this.storageProvider=options.storageProvider,this.transportProvider=options.transportProvider,this.useBatch=null!==(_c=options.useBatch)&&void 0!==_c?_c:defaultConfig.useBatch,this.loggerProvider.enable(this.logLevel);var serverConfig=createServerConfig(options.serverUrl,options.serverZone,options.useBatch);this.serverZone=serverConfig.serverZone,this.serverUrl=serverConfig.serverUrl}return Object.defineProperty(Config.prototype,"optOut",{get:function(){return this._optOut},set:function(optOut){this._optOut=optOut},enumerable:!1,configurable:!0}),Config}(),getServerUrl=function(serverZone,useBatch){return serverZone===ServerZone.EU?useBatch?"https://api.eu.amplitude.com/batch":"https://api.eu.amplitude.com/2/httpapi":useBatch?"https://api2.amplitude.com/batch":"https://api2.amplitude.com/2/httpapi"},createServerConfig=function(serverUrl,serverZone,useBatch){if(void 0===serverUrl&&(serverUrl=""),void 0===serverZone&&(serverZone=getDefaultConfig().serverZone),void 0===useBatch&&(useBatch=getDefaultConfig().useBatch),serverUrl)return{serverUrl,serverZone:void 0};var _serverZone=[ServerZone.US,ServerZone.EU].includes(serverZone)?serverZone:getDefaultConfig().serverZone;return{serverZone:_serverZone,serverUrl:getServerUrl(_serverZone,useBatch)}},Destination=function(){function Destination(){this.name="amplitude",this.type=PluginType.DESTINATION,this.retryTimeout=1e3,this.throttleTimeout=3e4,this.storageKey="",this.scheduled=!1,this.queue=[]}return Destination.prototype.setup=function(config){var _a;return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var unsent,_this=this;return(0,tslib_es6.YH)(this,(function(_b){switch(_b.label){case 0:return this.config=config,this.storageKey="".concat(STORAGE_PREFIX,"_").concat(this.config.apiKey.substring(0,10)),[4,null===(_a=this.config.storageProvider)||void 0===_a?void 0:_a.get(this.storageKey)];case 1:return unsent=_b.sent(),this.saveEvents(),unsent&&unsent.length>0&&Promise.all(unsent.map((function(event){return _this.execute(event)}))).catch(),[2,Promise.resolve(void 0)]}}))}))},Destination.prototype.execute=function(event){var _this=this;return new Promise((function(resolve){var context={event,attempts:0,callback:function(result){return resolve(result)},timeout:0};_this.addToQueue(context)}))},Destination.prototype.addToQueue=function(){for(var _this=this,list=[],_i=0;_i<arguments.length;_i++)list[_i]=arguments[_i];list.filter((function(context){return context.attempts<_this.config.flushMaxRetries?(context.attempts+=1,!0):(_this.fulfillRequest([context],500,"Event rejected due to exceeded retry count"),!1)})).forEach((function(context){_this.queue=_this.queue.concat(context),0!==context.timeout?setTimeout((function(){context.timeout=0,_this.schedule(0)}),context.timeout):_this.schedule(_this.config.flushIntervalMillis)})),this.saveEvents()},Destination.prototype.schedule=function(timeout){var _this=this;this.scheduled||(this.scheduled=!0,setTimeout((function(){_this.flush(!0).then((function(){_this.scheduled=!1,_this.queue.length>0&&_this.schedule(timeout)}))}),timeout))},Destination.prototype.flush=function(useRetry){return void 0===useRetry&&(useRetry=!1),(0,tslib_es6.sH)(this,void 0,void 0,(function(){var list,later,batches,_this=this;return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:return list=[],later=[],this.queue.forEach((function(context){return 0===context.timeout?list.push(context):later.push(context)})),this.queue=later,arr=list,size=this.config.flushQueueSize,chunkSize=Math.max(size,1),batches=arr.reduce((function(chunks,element,index){var chunkIndex=Math.floor(index/chunkSize);return chunks[chunkIndex]||(chunks[chunkIndex]=[]),chunks[chunkIndex].push(element),chunks}),[]),[4,Promise.all(batches.map((function(batch){return _this.send(batch,useRetry)})))];case 1:return _a.sent(),[2]}var arr,size,chunkSize}))}))},Destination.prototype.send=function(list,useRetry){return void 0===useRetry&&(useRetry=!0),(0,tslib_es6.sH)(this,void 0,void 0,(function(){var payload,serverUrl,res,e_1;return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:if(!this.config.apiKey)return[2,this.fulfillRequest(list,400,"Event rejected due to missing API key")];payload={api_key:this.config.apiKey,events:list.map((function(context){var _a=context.event;_a.extra;return(0,tslib_es6.Tt)(_a,["extra"])})),options:{min_id_length:this.config.minIdLength}},_a.label=1;case 1:return _a.trys.push([1,3,,4]),serverUrl=createServerConfig(this.config.serverUrl,this.config.serverZone,this.config.useBatch).serverUrl,[4,this.config.transportProvider.send(serverUrl,payload)];case 2:return null===(res=_a.sent())?(this.fulfillRequest(list,0,"Unexpected error occurred"),[2]):useRetry?(this.handleReponse(res,list),[3,4]):(this.fulfillRequest(list,res.statusCode,res.status),[2]);case 3:return e_1=_a.sent(),this.fulfillRequest(list,0,String(e_1)),[3,4];case 4:return[2]}}))}))},Destination.prototype.handleReponse=function(res,list){switch(res.status){case Status.Success:this.handleSuccessResponse(res,list);break;case Status.Invalid:this.handleInvalidResponse(res,list);break;case Status.PayloadTooLarge:this.handlePayloadTooLargeResponse(res,list);break;case Status.RateLimit:this.handleRateLimitResponse(res,list);break;default:this.handleOtherReponse(list)}},Destination.prototype.handleSuccessResponse=function(res,list){this.fulfillRequest(list,res.statusCode,"Event tracked successfully")},Destination.prototype.handleInvalidResponse=function(res,list){var _this=this;if(res.body.missingField||res.body.error.startsWith("Invalid API key"))this.fulfillRequest(list,res.statusCode,res.body.error);else{var dropIndex=(0,tslib_es6.fX)((0,tslib_es6.fX)((0,tslib_es6.fX)((0,tslib_es6.fX)([],(0,tslib_es6.zs)(Object.values(res.body.eventsWithInvalidFields)),!1),(0,tslib_es6.zs)(Object.values(res.body.eventsWithMissingFields)),!1),(0,tslib_es6.zs)(Object.values(res.body.eventsWithInvalidIdLengths)),!1),(0,tslib_es6.zs)(res.body.silencedEvents),!1).flat(),dropIndexSet=new Set(dropIndex),retry=list.filter((function(context,index){if(!dropIndexSet.has(index))return!0;_this.fulfillRequest([context],res.statusCode,res.body.error)}));this.addToQueue.apply(this,(0,tslib_es6.fX)([],(0,tslib_es6.zs)(retry),!1))}},Destination.prototype.handlePayloadTooLargeResponse=function(res,list){1!==list.length?(this.config.flushQueueSize/=2,this.addToQueue.apply(this,(0,tslib_es6.fX)([],(0,tslib_es6.zs)(list),!1))):this.fulfillRequest(list,res.statusCode,res.body.error)},Destination.prototype.handleRateLimitResponse=function(res,list){var _this=this,dropUserIds=Object.keys(res.body.exceededDailyQuotaUsers),dropDeviceIds=Object.keys(res.body.exceededDailyQuotaDevices),throttledIndex=res.body.throttledEvents,dropUserIdsSet=new Set(dropUserIds),dropDeviceIdsSet=new Set(dropDeviceIds),throttledIndexSet=new Set(throttledIndex),retry=list.filter((function(context,index){if(!(context.event.user_id&&dropUserIdsSet.has(context.event.user_id)||context.event.device_id&&dropDeviceIdsSet.has(context.event.device_id)))return throttledIndexSet.has(index)&&(context.timeout=_this.throttleTimeout),!0;_this.fulfillRequest([context],res.statusCode,res.body.error)}));this.addToQueue.apply(this,(0,tslib_es6.fX)([],(0,tslib_es6.zs)(retry),!1))},Destination.prototype.handleOtherReponse=function(list){var _this=this;this.addToQueue.apply(this,(0,tslib_es6.fX)([],(0,tslib_es6.zs)(list.map((function(context){return context.timeout=context.attempts*_this.retryTimeout,context}))),!1))},Destination.prototype.fulfillRequest=function(list,code,message){this.saveEvents(),list.forEach((function(context){return context.callback(buildResult(context.event,code,message))}))},Destination.prototype.saveEvents=function(){if(this.config.storageProvider){var events=Array.from(this.queue.map((function(context){return context.event})));this.config.storageProvider.set(this.storageKey,events)}},Destination}(),UUID=function(a){return a?(a^16*Math.random()>>a/4).toString(16):(String(1e7)+String(-1e3)+String(-4e3)+String(-8e3)+String(-1e11)).replace(/[018]/g,UUID)};!function(IdentifyOperation){IdentifyOperation.SET="$set",IdentifyOperation.SET_ONCE="$setOnce",IdentifyOperation.ADD="$add",IdentifyOperation.APPEND="$append",IdentifyOperation.PREPEND="$prepend",IdentifyOperation.REMOVE="$remove",IdentifyOperation.PREINSERT="$preInsert",IdentifyOperation.POSTINSERT="$postInsert",IdentifyOperation.UNSET="$unset",IdentifyOperation.CLEAR_ALL="$clearAll"}(IdentifyOperation||(IdentifyOperation={})),function(RevenueProperty){RevenueProperty.REVENUE_PRODUCT_ID="$productId",RevenueProperty.REVENUE_QUANTITY="$quantity",RevenueProperty.REVENUE_PRICE="$price",RevenueProperty.REVENUE_TYPE="$revenueType",RevenueProperty.REVENUE="$revenue"}(RevenueProperty||(RevenueProperty={})),function(SpecialEventType){SpecialEventType.IDENTIFY="$identify",SpecialEventType.GROUP_IDENTIFY="$groupidentify",SpecialEventType.REVENUE="revenue_amount"}(SpecialEventType||(SpecialEventType={}));var isValidObject=function(properties){if(Object.keys(properties).length>1e3)return!1;for(var key in properties){var value=properties[key];if(!isValidProperties(key,value))return!1}return!0},isValidProperties=function(property,value){var e_1,_a;if("string"!=typeof property)return!1;if(Array.isArray(value)){var isValid=!0;try{for(var value_1=(0,tslib_es6.Ju)(value),value_1_1=value_1.next();!value_1_1.done;value_1_1=value_1.next()){var valueElement=value_1_1.value;if(Array.isArray(valueElement))return!1;if("object"==typeof valueElement)isValid=isValid&&isValidObject(valueElement);else if(!["number","string"].includes(typeof valueElement))return!1;if(!isValid)return!1}}catch(e_1_1){e_1={error:e_1_1}}finally{try{value_1_1&&!value_1_1.done&&(_a=value_1.return)&&_a.call(value_1)}finally{if(e_1)throw e_1.error}}}else{if(null==value)return!1;if("object"==typeof value)return isValidObject(value);if(!["number","string","boolean"].includes(typeof value))return!1}return!0},Identify=function(){function Identify(){this._propertySet=new Set,this._properties={}}return Identify.prototype.getUserProperties=function(){return(0,tslib_es6.Cl)({},this._properties)},Identify.prototype.set=function(property,value){return this._safeSet(IdentifyOperation.SET,property,value),this},Identify.prototype.setOnce=function(property,value){return this._safeSet(IdentifyOperation.SET_ONCE,property,value),this},Identify.prototype.append=function(property,value){return this._safeSet(IdentifyOperation.APPEND,property,value),this},Identify.prototype.prepend=function(property,value){return this._safeSet(IdentifyOperation.PREPEND,property,value),this},Identify.prototype.postInsert=function(property,value){return this._safeSet(IdentifyOperation.POSTINSERT,property,value),this},Identify.prototype.preInsert=function(property,value){return this._safeSet(IdentifyOperation.PREINSERT,property,value),this},Identify.prototype.remove=function(property,value){return this._safeSet(IdentifyOperation.REMOVE,property,value),this},Identify.prototype.add=function(property,value){return this._safeSet(IdentifyOperation.ADD,property,value),this},Identify.prototype.unset=function(property){return this._safeSet(IdentifyOperation.UNSET,property,"-"),this},Identify.prototype.clearAll=function(){return this._properties={},this._properties[IdentifyOperation.CLEAR_ALL]="-",this},Identify.prototype._safeSet=function(operation,property,value){if(this._validate(operation,property,value)){var userPropertyMap=this._properties[operation];return void 0===userPropertyMap&&(userPropertyMap={},this._properties[operation]=userPropertyMap),userPropertyMap[property]=value,this._propertySet.add(property),!0}return!1},Identify.prototype._validate=function(operation,property,value){return void 0===this._properties[IdentifyOperation.CLEAR_ALL]&&(!this._propertySet.has(property)&&(operation===IdentifyOperation.ADD?"number"==typeof value:operation===IdentifyOperation.UNSET||operation===IdentifyOperation.REMOVE||isValidProperties(property,value)))},Identify}(),Revenue=function(){function Revenue(){this.productId="",this.quantity=1,this.price=0}return Revenue.prototype.setProductId=function(productId){return this.productId=productId,this},Revenue.prototype.setQuantity=function(quantity){return quantity>0&&(this.quantity=quantity),this},Revenue.prototype.setPrice=function(price){return this.price=price,this},Revenue.prototype.setRevenueType=function(revenueType){return this.revenueType=revenueType,this},Revenue.prototype.setRevenue=function(revenue){return this.revenue=revenue,this},Revenue.prototype.setEventProperties=function(properties){return isValidObject(properties)&&(this.properties=properties),this},Revenue.prototype.getEventProperties=function(){var eventProperties=this.properties?(0,tslib_es6.Cl)({},this.properties):{};return eventProperties[RevenueProperty.REVENUE_PRODUCT_ID]=this.productId,eventProperties[RevenueProperty.REVENUE_QUANTITY]=this.quantity,eventProperties[RevenueProperty.REVENUE_PRICE]=this.price,eventProperties[RevenueProperty.REVENUE_TYPE]=this.revenueType,eventProperties[RevenueProperty.REVENUE]=this.revenue,eventProperties},Revenue}(),createIdentifyEvent=function(identify,eventOptions){return(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},eventOptions),{event_type:SpecialEventType.IDENTIFY,user_properties:identify.getUserProperties()})},Timeline=function(){function Timeline(){this.queue=[],this.applying=!1,this.isReady=!1,this.plugins=[]}return Timeline.prototype.register=function(plugin,config){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:return[4,plugin.setup(config)];case 1:return _a.sent(),this.plugins.push(plugin),[2]}}))}))},Timeline.prototype.deregister=function(pluginName){return this.plugins.splice(this.plugins.findIndex((function(plugin){return plugin.name===pluginName})),1),Promise.resolve()},Timeline.prototype.reset=function(){this.applying=!1,this.isReady=!1,this.plugins=[]},Timeline.prototype.push=function(event){var _this=this;return new Promise((function(resolve){_this.queue.push([event,resolve]),_this.scheduleApply(0)}))},Timeline.prototype.scheduleApply=function(timeout){var _this=this;this.isReady&&!this.applying&&(this.applying=!0,setTimeout((function(){_this.apply(_this.queue.shift()).then((function(){_this.applying=!1,_this.queue.length>0&&_this.scheduleApply(0)}))}),timeout))},Timeline.prototype.apply=function(item){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var _a,event,_b,resolve,before,before_1,before_1_1,e_1_1,enrichment,enrichment_1,enrichment_1_1,e_2_1,destination,executeDestinations,e_1,_c,e_2,_d;return(0,tslib_es6.YH)(this,(function(_e){switch(_e.label){case 0:if(!item)return[2];_a=(0,tslib_es6.zs)(item,1),event=_a[0],_b=(0,tslib_es6.zs)(item,2),resolve=_b[1],before=this.plugins.filter((function(plugin){return plugin.type===PluginType.BEFORE})),_e.label=1;case 1:_e.trys.push([1,6,7,8]),before_1=(0,tslib_es6.Ju)(before),before_1_1=before_1.next(),_e.label=2;case 2:return before_1_1.done?[3,5]:[4,before_1_1.value.execute((0,tslib_es6.Cl)({},event))];case 3:event=_e.sent(),_e.label=4;case 4:return before_1_1=before_1.next(),[3,2];case 5:return[3,8];case 6:return e_1_1=_e.sent(),e_1={error:e_1_1},[3,8];case 7:try{before_1_1&&!before_1_1.done&&(_c=before_1.return)&&_c.call(before_1)}finally{if(e_1)throw e_1.error}return[7];case 8:enrichment=this.plugins.filter((function(plugin){return plugin.type===PluginType.ENRICHMENT})),_e.label=9;case 9:_e.trys.push([9,14,15,16]),enrichment_1=(0,tslib_es6.Ju)(enrichment),enrichment_1_1=enrichment_1.next(),_e.label=10;case 10:return enrichment_1_1.done?[3,13]:[4,enrichment_1_1.value.execute((0,tslib_es6.Cl)({},event))];case 11:event=_e.sent(),_e.label=12;case 12:return enrichment_1_1=enrichment_1.next(),[3,10];case 13:return[3,16];case 14:return e_2_1=_e.sent(),e_2={error:e_2_1},[3,16];case 15:try{enrichment_1_1&&!enrichment_1_1.done&&(_d=enrichment_1.return)&&_d.call(enrichment_1)}finally{if(e_2)throw e_2.error}return[7];case 16:return destination=this.plugins.filter((function(plugin){return plugin.type===PluginType.DESTINATION})),executeDestinations=destination.map((function(plugin){var eventClone=(0,tslib_es6.Cl)({},event);return plugin.execute(eventClone).catch((function(e){return buildResult(eventClone,0,String(e))}))})),Promise.all(executeDestinations).then((function(_a){var result=(0,tslib_es6.zs)(_a,1)[0];resolve(result)})),[2]}}))}))},Timeline.prototype.flush=function(){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var queue,destination,executeDestinations,_this=this;return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:return queue=this.queue,this.queue=[],[4,Promise.all(queue.map((function(item){return _this.apply(item)})))];case 1:return _a.sent(),destination=this.plugins.filter((function(plugin){return plugin.type===PluginType.DESTINATION})),executeDestinations=destination.map((function(plugin){return plugin.flush&&plugin.flush()})),[4,Promise.all(executeDestinations)];case 2:return _a.sent(),[2]}}))}))},Timeline}(),AmplitudeCore=function(){function AmplitudeCore(name){void 0===name&&(name="$default"),this.initializing=!1,this.q=[],this.logEvent=this.track.bind(this),this.timeline=new Timeline,this.name=name}return AmplitudeCore.prototype._init=function(config){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var queuedFunctions,queuedFunctions_1,queuedFunctions_1_1,e_1_1,e_1,_a;return(0,tslib_es6.YH)(this,(function(_b){switch(_b.label){case 0:this.config=config,this.timeline.reset(),queuedFunctions=this.q,this.q=[],_b.label=1;case 1:_b.trys.push([1,6,7,8]),queuedFunctions_1=(0,tslib_es6.Ju)(queuedFunctions),queuedFunctions_1_1=queuedFunctions_1.next(),_b.label=2;case 2:return queuedFunctions_1_1.done?[3,5]:[4,(0,queuedFunctions_1_1.value)()];case 3:_b.sent(),_b.label=4;case 4:return queuedFunctions_1_1=queuedFunctions_1.next(),[3,2];case 5:return[3,8];case 6:return e_1_1=_b.sent(),e_1={error:e_1_1},[3,8];case 7:try{queuedFunctions_1_1&&!queuedFunctions_1_1.done&&(_a=queuedFunctions_1.return)&&_a.call(queuedFunctions_1)}finally{if(e_1)throw e_1.error}return[7];case 8:return[2]}}))}))},AmplitudeCore.prototype.track=function(eventInput,eventProperties,eventOptions){var event=function(eventInput,eventProperties,eventOptions){var baseEvent="string"==typeof eventInput?{event_type:eventInput}:eventInput;return(0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)({},baseEvent),eventOptions),eventProperties&&{event_properties:eventProperties})}(eventInput,eventProperties,eventOptions);return this.dispatch(event)},AmplitudeCore.prototype.identify=function(identify,eventOptions){var event=createIdentifyEvent(identify,eventOptions);return this.dispatch(event)},AmplitudeCore.prototype.groupIdentify=function(groupType,groupName,identify,eventOptions){var event=function(groupType,groupName,identify,eventOptions){var _a;return(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},eventOptions),{event_type:SpecialEventType.GROUP_IDENTIFY,group_properties:identify.getUserProperties(),groups:(_a={},_a[groupType]=groupName,_a)})}(groupType,groupName,identify,eventOptions);return this.dispatch(event)},AmplitudeCore.prototype.setGroup=function(groupType,groupName,eventOptions){var event=function(groupType,groupName,eventOptions){var _a,identify=new Identify;return identify.set(groupType,groupName),(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},eventOptions),{event_type:SpecialEventType.IDENTIFY,user_properties:identify.getUserProperties(),groups:(_a={},_a[groupType]=groupName,_a)})}(groupType,groupName,eventOptions);return this.dispatch(event)},AmplitudeCore.prototype.revenue=function(revenue,eventOptions){var event=function(revenue,eventOptions){return(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},eventOptions),{event_type:SpecialEventType.REVENUE,event_properties:revenue.getEventProperties()})}(revenue,eventOptions);return this.dispatch(event)},AmplitudeCore.prototype.add=function(plugin){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){return this.config?[2,this.timeline.register(plugin,this.config)]:(this.q.push(this.add.bind(this,plugin)),[2])}))}))},AmplitudeCore.prototype.remove=function(pluginName){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){return this.config?[2,this.timeline.deregister(pluginName)]:(this.q.push(this.remove.bind(this,pluginName)),[2])}))}))},AmplitudeCore.prototype.dispatch=function(event){var _a;return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var result,e_2,message;return(0,tslib_es6.YH)(this,(function(_b){switch(_b.label){case 0:return _b.trys.push([0,2,,3]),(null===(_a=this.config)||void 0===_a?void 0:_a.optOut)?[2,buildResult(event,0,"Event skipped due to optOut config")]:[4,this.timeline.push(event)];case 1:return 200===(result=_b.sent()).code?this.config.loggerProvider.log(result.message):this.config.loggerProvider.error(result.message),[2,result];case 2:return e_2=_b.sent(),message=String(e_2),this.config.loggerProvider.error(message),[2,buildResult(event,0,message)];case 3:return[2]}}))}))},AmplitudeCore.prototype.setOptOut=function(optOut){this.config?this.config.optOut=Boolean(optOut):this.q.push(this.setOptOut.bind(this,Boolean(optOut)))},AmplitudeCore.prototype.flush=function(){return this.timeline.flush()},AmplitudeCore}(),returnWrapper=function(fn){return function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];return{promise:fn.apply(void 0,(0,tslib_es6.fX)([],(0,tslib_es6.zs)(args),!1))}}},ua_parser=__webpack_require__("./node_modules/@amplitude/ua-parser-js/src/ua-parser.js"),ua_parser_default=__webpack_require__.n(ua_parser),ApplicationContextProviderImpl=function(){function ApplicationContextProviderImpl(){this.ua=new ua_parser.UAParser("undefined"!=typeof navigator?navigator.userAgent:null).getResult()}return ApplicationContextProviderImpl.prototype.getApplicationContext=function(){return{versionName:this.versionName,language:getLanguage(),platform:"Web",os:getOs(this.ua),deviceModel:getDeviceModel(this.ua)}},ApplicationContextProviderImpl}(),getOs=function(ua){var _a,_b;return[null===(_a=ua.browser)||void 0===_a?void 0:_a.name,null===(_b=ua.browser)||void 0===_b?void 0:_b.major].filter((function(e){return null!=e})).join(" ")},getDeviceModel=function(ua){var _a;return null===(_a=ua.os)||void 0===_a?void 0:_a.name},getLanguage=function(){return"undefined"!=typeof navigator&&(navigator.languages&&navigator.languages[0]||navigator.language)||""},EventBridgeImpl=function(){function EventBridgeImpl(){this.queue=[]}return EventBridgeImpl.prototype.logEvent=function(event){this.receiver?this.receiver(event):this.queue.length<512&&this.queue.push(event)},EventBridgeImpl.prototype.setEventReceiver=function(receiver){this.receiver=receiver,this.queue.length>0&&(this.queue.forEach((function(event){receiver(event)})),this.queue=[])},EventBridgeImpl}(),__assign=function(){return __assign=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)};Object.entries||(Object.entries=function(obj){for(var ownProps=Object.keys(obj),i=ownProps.length,resArray=new Array(i);i--;)resArray[i]=[ownProps[i],obj[ownProps[i]]];return resArray});var TransportType,IdentityStoreImpl=function(){function IdentityStoreImpl(){this.identity={userProperties:{}},this.listeners=new Set}return IdentityStoreImpl.prototype.editIdentity=function(){var self=this,actingUserProperties=__assign({},this.identity.userProperties),actingIdentity=__assign(__assign({},this.identity),{userProperties:actingUserProperties});return{setUserId:function(userId){return actingIdentity.userId=userId,this},setDeviceId:function(deviceId){return actingIdentity.deviceId=deviceId,this},setUserProperties:function(userProperties){return actingIdentity.userProperties=userProperties,this},updateUserProperties:function(actions){for(var actingProperties=actingIdentity.userProperties||{},_i=0,_a=Object.entries(actions);_i<_a.length;_i++){var _b=_a[_i],action=_b[0],properties=_b[1];switch(action){case"$set":for(var _c=0,_d=Object.entries(properties);_c<_d.length;_c++){var _e=_d[_c],key=_e[0],value=_e[1];actingProperties[key]=value}break;case"$unset":for(var _f=0,_g=Object.keys(properties);_f<_g.length;_f++){delete actingProperties[key=_g[_f]]}break;case"$clearAll":actingProperties={}}}return actingIdentity.userProperties=actingProperties,this},commit:function(){return self.setIdentity(actingIdentity),this}}},IdentityStoreImpl.prototype.getIdentity=function(){return __assign({},this.identity)},IdentityStoreImpl.prototype.setIdentity=function(identity){var originalIdentity=__assign({},this.identity);this.identity=__assign({},identity),isEqual(originalIdentity,this.identity)||this.listeners.forEach((function(listener){listener(identity)}))},IdentityStoreImpl.prototype.addIdentityListener=function(listener){this.listeners.add(listener)},IdentityStoreImpl.prototype.removeIdentityListener=function(listener){this.listeners.delete(listener)},IdentityStoreImpl}(),isEqual=function(obj1,obj2){var typeA=typeof obj1;if(typeA!==typeof obj2)return!1;for(var _i=0,primitive_1=["string","number","boolean","undefined"];_i<primitive_1.length;_i++){if(primitive_1[_i]===typeA)return obj1===obj2}if(obj1.length!==obj2.length)return!1;var isArrayA=Array.isArray(obj1),isArrayB=Array.isArray(obj2);if(isArrayA!==isArrayB)return!1;if(!isArrayA||!isArrayB){var sorted1=Object.keys(obj1).sort(),sorted2=Object.keys(obj2).sort();if(!isEqual(sorted1,sorted2))return!1;var result_1=!0;return Object.keys(obj1).forEach((function(key){isEqual(obj1[key],obj2[key])||(result_1=!1)})),result_1}for(var i=0;i<obj1.length;i++)if(!isEqual(obj1[i],obj2[i]))return!1;return!0},safeGlobal="undefined"!=typeof globalThis?globalThis:__webpack_require__.g||self,AnalyticsConnector=function(){function AnalyticsConnector(){this.identityStore=new IdentityStoreImpl,this.eventBridge=new EventBridgeImpl,this.applicationContextProvider=new ApplicationContextProviderImpl}return AnalyticsConnector.getInstance=function(instanceName){return safeGlobal.analyticsConnectorInstances||(safeGlobal.analyticsConnectorInstances={}),safeGlobal.analyticsConnectorInstances[instanceName]||(safeGlobal.analyticsConnectorInstances[instanceName]=new AnalyticsConnector),safeGlobal.analyticsConnectorInstances[instanceName]},AnalyticsConnector}(),getAnalyticsConnector=function(){return AnalyticsConnector.getInstance("$default_instance")},IdentityEventSender=function(){function IdentityEventSender(){this.name="identity",this.type=PluginType.BEFORE,this.identityStore=getAnalyticsConnector().identityStore}return IdentityEventSender.prototype.execute=function(context){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var userProperties;return(0,tslib_es6.YH)(this,(function(_a){return(userProperties=context.user_properties)&&this.identityStore.editIdentity().updateUserProperties(userProperties).commit(),[2,context]}))}))},IdentityEventSender.prototype.setup=function(_){return Promise.resolve(void 0)},IdentityEventSender}(),getCookieName=function(apiKey,postKey,limit){return void 0===postKey&&(postKey=""),void 0===limit&&(limit=10),[AMPLITUDE_PREFIX,postKey,apiKey.substring(0,limit)].filter(Boolean).join("_")},getQueryParams=function(){return"undefined"!=typeof window&&window.location&&window.location.search?window.location.search.substring(1).split("&").filter(Boolean).reduce((function(acc,curr){var query=curr.split("=",2),key=tryDecodeURIComponent(query[0]),value=tryDecodeURIComponent(query[1]);return value?(acc[key]=value,acc):acc}),{}):{}},tryDecodeURIComponent=function(value){void 0===value&&(value="");try{return decodeURIComponent(value)}catch(_a){return""}},BASE_CAMPAIGN={utm_source:void 0,utm_medium:void 0,utm_campaign:void 0,utm_term:void 0,utm_content:void 0,referrer:void 0,referring_domain:void 0,dclid:void 0,gbraid:void 0,gclid:void 0,fbclid:void 0,ko_click_id:void 0,msclkid:void 0,ttclid:void 0,twclid:void 0,wbraid:void 0},CampaignParser=function(){function CampaignParser(){}return CampaignParser.prototype.parse=function(){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){return[2,(0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)({},BASE_CAMPAIGN),this.getUtmParam()),this.getReferrer()),this.getClickIds())]}))}))},CampaignParser.prototype.getUtmParam=function(){var params=getQueryParams();return{utm_source:params.utm_source,utm_medium:params.utm_medium,utm_campaign:params.utm_campaign,utm_term:params.utm_term,utm_content:params.utm_content}},CampaignParser.prototype.getReferrer=function(){var _a,_b,data={referrer:void 0,referring_domain:void 0};try{data.referrer=document.referrer||void 0,data.referring_domain=null!==(_b=null===(_a=data.referrer)||void 0===_a?void 0:_a.split("/")[2])&&void 0!==_b?_b:void 0}catch(_c){}return data},CampaignParser.prototype.getClickIds=function(){var _a,params=getQueryParams();return(_a={}).dclid=params.dclid,_a.fbclid=params.fbclid,_a.gbraid=params.gbraid,_a.gclid=params.gclid,_a.ko_click_id=params.ko_click_id,_a.msclkid=params.msclkid,_a.ttclid=params.ttclid,_a.twclid=params.twclid,_a.wbraid=params.wbraid,_a},CampaignParser}(),CampaignTracker=function(){function CampaignTracker(apiKey,options){var _a,_b;this.storage=options.storage,this.storageKey=getCookieName(apiKey,"MKTG"),this.parser=new CampaignParser,this.track=options.track,this.onNewCampaign=options.onNewCampaign,this.disabled=Boolean(options.disabled),this.trackNewCampaigns=Boolean(options.trackNewCampaigns),this.trackPageViews=Boolean(options.trackPageViews),this.excludeReferrers=null!==(_a=options.excludeReferrers)&&void 0!==_a?_a:[],"undefined"!=typeof location&&this.excludeReferrers.unshift(location.hostname),this.initialEmptyValue=null!==(_b=options.initialEmptyValue)&&void 0!==_b?_b:"EMPTY"}return CampaignTracker.prototype.isNewCampaign=function(current,previous){current.referrer;var currentCampaign=(0,tslib_es6.Tt)(current,["referrer"]),_a=previous||{},previousCampaign=(_a.referrer,(0,tslib_es6.Tt)(_a,["referrer"])),isReferrerExcluded=Boolean(currentCampaign.referring_domain&&this.excludeReferrers.includes(currentCampaign.referring_domain)),hasNewCampaign=JSON.stringify(currentCampaign)!==JSON.stringify(previousCampaign);return!isReferrerExcluded&&(!previous||hasNewCampaign)},CampaignTracker.prototype.saveCampaignToStorage=function(campaign){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:return[4,this.storage.set(this.storageKey,campaign)];case 1:return _a.sent(),[2]}}))}))},CampaignTracker.prototype.getCampaignFromStorage=function(){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:return[4,this.storage.get(this.storageKey)];case 1:return[2,_a.sent()]}}))}))},CampaignTracker.prototype.createCampaignEvent=function(campaign){var _this=this,campaignParameters=(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},BASE_CAMPAIGN),campaign),identifyEvent=Object.entries(campaignParameters).reduce((function(identify,_a){var _b=(0,tslib_es6.zs)(_a,2),key=_b[0],value=_b[1];return identify.setOnce("initial_".concat(key),value||_this.initialEmptyValue),value?identify.set(key,value):identify.unset(key)}),new Identify),pageViewEvent={event_type:"Page View",event_properties:{page_title:"undefined"!=typeof document&&document.title||"",page_location:"undefined"!=typeof location&&location.href||"",page_path:"undefined"!=typeof location&&location.pathname||""}};return(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},createIdentifyEvent(identifyEvent)),this.trackPageViews&&pageViewEvent)},CampaignTracker.prototype.send=function(isNewSession){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var currentCampaign,previousCampaign;return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:return this.disabled?[2]:[4,this.parser.parse()];case 1:return currentCampaign=_a.sent(),[4,this.getCampaignFromStorage()];case 2:if(previousCampaign=_a.sent(),!isNewSession){if(!this.trackNewCampaigns||!this.isNewCampaign(currentCampaign,previousCampaign))return[2];this.onNewCampaign(currentCampaign)}return[4,this.track(this.createCampaignEvent(currentCampaign))];case 3:return _a.sent(),[4,this.saveCampaignToStorage(currentCampaign)];case 4:return _a.sent(),[2]}}))}))},CampaignTracker}(),runQueuedFunctions=function(instance,queue){convertProxyObjectToRealObject(instance,queue)},convertProxyObjectToRealObject=function(instance,queue){for(var i=0;i<queue.length;i++){var _a=queue[i],name_1=_a.name,args=_a.args,resolve=_a.resolve,fn=instance&&instance[name_1];if("function"==typeof fn){var result=fn.apply(instance,args);"function"==typeof resolve&&resolve(null==result?void 0:result.promise)}}return instance},isInstanceProxy=function(instance){return instance&&void 0!==instance._q},language_getLanguage=function(){var _a,_b,_c,_d;if("undefined"==typeof navigator)return"";var userLanguage=navigator.userLanguage;return null!==(_d=null!==(_c=null!==(_b=null===(_a=navigator.languages)||void 0===_a?void 0:_a[0])&&void 0!==_b?_b:navigator.language)&&void 0!==_c?_c:userLanguage)&&void 0!==_d?_d:""},Context=function(){function Context(){var agent;this.name="context",this.type=PluginType.BEFORE,this.eventId=0,this.library="amplitude-ts/".concat("1.5.4"),"undefined"!=typeof navigator&&(agent=navigator.userAgent),this.uaResult=new(ua_parser_default())(agent).getResult()}return Context.prototype.setup=function(config){return this.config=config,Promise.resolve(void 0)},Context.prototype.execute=function(context){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var time,osName,osVersion,deviceModel,deviceVendor;return(0,tslib_es6.YH)(this,(function(_a){return this.isSessionValid()||(this.config.sessionId=Date.now()),this.config.lastEventTime=Date.now(),time=(new Date).getTime(),osName=this.uaResult.browser.name,osVersion=this.uaResult.browser.version,deviceModel=this.uaResult.device.model||this.uaResult.os.name,deviceVendor=this.uaResult.device.vendor,[2,(0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)((0,tslib_es6.Cl)({user_id:this.config.userId,device_id:this.config.deviceId,session_id:this.config.sessionId,time},this.config.appVersion&&{app_version:this.config.appVersion}),this.config.trackingOptions.platform&&{platform:"Web"}),this.config.trackingOptions.osName&&{os_name:osName}),this.config.trackingOptions.osVersion&&{os_version:osVersion}),this.config.trackingOptions.deviceManufacturer&&{device_manufacturer:deviceVendor}),this.config.trackingOptions.deviceModel&&{device_model:deviceModel}),this.config.trackingOptions.language&&{language:language_getLanguage()}),this.config.trackingOptions.ipAddress&&{ip:"$remote"}),{insert_id:UUID(),partner_id:this.config.partnerId,plan:this.config.plan}),this.config.ingestionMetadata&&{ingestion_metadata:{source_name:this.config.ingestionMetadata.sourceName,source_version:this.config.ingestionMetadata.sourceVersion}}),context),{event_id:this.eventId++,library:this.library})]}))}))},Context.prototype.isSessionValid=function(){var lastEventTime=this.config.lastEventTime||Date.now();return Date.now()-lastEventTime<this.config.sessionTimeout},Context}();!function(TransportType){TransportType.XHR="xhr",TransportType.SendBeacon="beacon",TransportType.Fetch="fetch"}(TransportType||(TransportType={}));var MemoryStorage=function(){function MemoryStorage(){this.memoryStorage=new Map}return MemoryStorage.prototype.isEnabled=function(){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){return[2,!0]}))}))},MemoryStorage.prototype.get=function(key){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){return[2,this.memoryStorage.get(key)]}))}))},MemoryStorage.prototype.getRaw=function(key){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var value;return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:return[4,this.get(key)];case 1:return[2,(value=_a.sent())?JSON.stringify(value):void 0]}}))}))},MemoryStorage.prototype.set=function(key,value){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){return this.memoryStorage.set(key,value),[2]}))}))},MemoryStorage.prototype.remove=function(key){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){return this.memoryStorage.delete(key),[2]}))}))},MemoryStorage.prototype.reset=function(){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){return this.memoryStorage.clear(),[2]}))}))},MemoryStorage}(),SessionManager=function(){function SessionManager(storage,apiKey){this.storage=storage,this.isSessionCacheValid=!0,this.storageKey=getCookieName(apiKey),this.cache={optOut:!1}}return SessionManager.prototype.load=function(){var _a;return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var _b;return(0,tslib_es6.YH)(this,(function(_c){switch(_c.label){case 0:return _b=this,[4,this.storage.get(this.storageKey)];case 1:return _b.cache=null!==(_a=_c.sent())&&void 0!==_a?_a:{optOut:!1},[2,this]}}))}))},SessionManager.prototype.setSession=function(session){this.cache=(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},this.cache),session),this.storage.set(this.storageKey,this.cache)},SessionManager.prototype.getSessionId=function(){var _this=this;return this.isSessionCacheValid=!0,this.storage.get(this.storageKey).then((function(userSession){_this.isSessionCacheValid&&(_this.cache.sessionId=null==userSession?void 0:userSession.sessionId)})),this.cache.sessionId},SessionManager.prototype.setSessionId=function(sessionId){this.isSessionCacheValid=!1,this.setSession({sessionId})},SessionManager.prototype.getDeviceId=function(){return this.cache.deviceId},SessionManager.prototype.setDeviceId=function(deviceId){this.setSession({deviceId})},SessionManager.prototype.getUserId=function(){return this.cache.userId},SessionManager.prototype.setUserId=function(userId){this.setSession({userId})},SessionManager.prototype.getLastEventTime=function(){return this.cache.lastEventTime},SessionManager.prototype.setLastEventTime=function(lastEventTime){this.setSession({lastEventTime})},SessionManager.prototype.getOptOut=function(){return this.cache.optOut},SessionManager.prototype.setOptOut=function(optOut){this.setSession({optOut})},SessionManager}(),BaseTransport=function(){function BaseTransport(){}return BaseTransport.prototype.send=function(_serverUrl,_payload){return Promise.resolve(null)},BaseTransport.prototype.buildResponse=function(responseJSON){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x;if("object"!=typeof responseJSON)return null;var statusCode=responseJSON.code||0,status=this.buildStatus(statusCode);switch(status){case Status.Success:return{status,statusCode,body:{eventsIngested:null!==(_a=responseJSON.events_ingested)&&void 0!==_a?_a:0,payloadSizeBytes:null!==(_b=responseJSON.payload_size_bytes)&&void 0!==_b?_b:0,serverUploadTime:null!==(_c=responseJSON.server_upload_time)&&void 0!==_c?_c:0}};case Status.Invalid:return{status,statusCode,body:{error:null!==(_d=responseJSON.error)&&void 0!==_d?_d:"",missingField:null!==(_e=responseJSON.missing_field)&&void 0!==_e?_e:"",eventsWithInvalidFields:null!==(_f=responseJSON.events_with_invalid_fields)&&void 0!==_f?_f:{},eventsWithMissingFields:null!==(_g=responseJSON.events_with_missing_fields)&&void 0!==_g?_g:{},eventsWithInvalidIdLengths:null!==(_h=responseJSON.events_with_invalid_id_lengths)&&void 0!==_h?_h:{},epsThreshold:null!==(_j=responseJSON.eps_threshold)&&void 0!==_j?_j:0,exceededDailyQuotaDevices:null!==(_k=responseJSON.exceeded_daily_quota_devices)&&void 0!==_k?_k:{},silencedDevices:null!==(_l=responseJSON.silenced_devices)&&void 0!==_l?_l:[],silencedEvents:null!==(_m=responseJSON.silenced_events)&&void 0!==_m?_m:[],throttledDevices:null!==(_o=responseJSON.throttled_devices)&&void 0!==_o?_o:{},throttledEvents:null!==(_p=responseJSON.throttled_events)&&void 0!==_p?_p:[]}};case Status.PayloadTooLarge:return{status,statusCode,body:{error:null!==(_q=responseJSON.error)&&void 0!==_q?_q:""}};case Status.RateLimit:return{status,statusCode,body:{error:null!==(_r=responseJSON.error)&&void 0!==_r?_r:"",epsThreshold:null!==(_s=responseJSON.eps_threshold)&&void 0!==_s?_s:0,throttledDevices:null!==(_t=responseJSON.throttled_devices)&&void 0!==_t?_t:{},throttledUsers:null!==(_u=responseJSON.throttled_users)&&void 0!==_u?_u:{},exceededDailyQuotaDevices:null!==(_v=responseJSON.exceeded_daily_quota_devices)&&void 0!==_v?_v:{},exceededDailyQuotaUsers:null!==(_w=responseJSON.exceeded_daily_quota_users)&&void 0!==_w?_w:{},throttledEvents:null!==(_x=responseJSON.throttled_events)&&void 0!==_x?_x:[]}};case Status.Timeout:default:return{status,statusCode}}},BaseTransport.prototype.buildStatus=function(code){return code>=200&&code<300?Status.Success:429===code?Status.RateLimit:413===code?Status.PayloadTooLarge:408===code?Status.Timeout:code>=400&&code<500?Status.Invalid:code>=500?Status.Failed:Status.Unknown},BaseTransport}(),FetchTransport=function(_super){function FetchTransport(){return null!==_super&&_super.apply(this,arguments)||this}return(0,tslib_es6.C6)(FetchTransport,_super),FetchTransport.prototype.send=function(serverUrl,payload){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var options,responsePayload;return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:if("undefined"==typeof fetch)throw new Error("FetchTransport is not supported");return options={headers:{"Content-Type":"application/json",Accept:"*/*"},body:JSON.stringify(payload),method:"POST"},[4,fetch(serverUrl,options)];case 1:return[4,_a.sent().json()];case 2:return responsePayload=_a.sent(),[2,this.buildResponse(responsePayload)]}}))}))},FetchTransport}(BaseTransport),CookieStorage=function(){function CookieStorage(options){this.options=(0,tslib_es6.Cl)({},options)}return CookieStorage.prototype.isEnabled=function(){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var random,testStrorage,testKey;return(0,tslib_es6.YH)(this,(function(_b){switch(_b.label){case 0:if("undefined"==typeof window)return[2,!1];random=String(Date.now()),testStrorage=new CookieStorage(this.options),testKey="AMP_TEST",_b.label=1;case 1:return _b.trys.push([1,4,5,7]),[4,testStrorage.set(testKey,random)];case 2:return _b.sent(),[4,testStrorage.get(testKey)];case 3:return[2,_b.sent()===random];case 4:return _b.sent(),[2,!1];case 5:return[4,testStrorage.remove(testKey)];case 6:return _b.sent(),[7];case 7:return[2]}}))}))},CookieStorage.prototype.get=function(key){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var value;return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:return[4,this.getRaw(key)];case 1:if(!(value=_a.sent()))return[2,void 0];try{try{value=decodeURIComponent(atob(value))}catch(_b){}return[2,JSON.parse(value)]}catch(_c){return[2,void 0]}return[2]}}))}))},CookieStorage.prototype.getRaw=function(key){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var cookie,match;return(0,tslib_es6.YH)(this,(function(_a){return cookie=window.document.cookie.split("; "),(match=cookie.find((function(c){return 0===c.indexOf(key+"=")})))?[2,match.substring(key.length+1)]:[2,void 0]}))}))},CookieStorage.prototype.set=function(key,value){var _a;return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var expirationDays,expires,expireDate,date,str;return(0,tslib_es6.YH)(this,(function(_b){try{expirationDays=null!==(_a=this.options.expirationDays)&&void 0!==_a?_a:0,expireDate=void 0,(expires=null!==value?expirationDays:-1)&&((date=new Date).setTime(date.getTime()+24*expires*60*60*1e3),expireDate=date),str="".concat(key,"=").concat(btoa(encodeURIComponent(JSON.stringify(value)))),expireDate&&(str+="; expires=".concat(expireDate.toUTCString())),str+="; path=/",this.options.domain&&(str+="; domain=".concat(this.options.domain)),this.options.secure&&(str+="; Secure"),this.options.sameSite&&(str+="; SameSite=".concat(this.options.sameSite)),window.document.cookie=str}catch(_c){}return[2]}))}))},CookieStorage.prototype.remove=function(key){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:return[4,this.set(key,null)];case 1:return _a.sent(),[2]}}))}))},CookieStorage.prototype.reset=function(){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){return[2]}))}))},CookieStorage}(),LocalStorage=function(){function LocalStorage(){}return LocalStorage.prototype.isEnabled=function(){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var random,testStorage,testKey;return(0,tslib_es6.YH)(this,(function(_b){switch(_b.label){case 0:if("undefined"==typeof window)return[2,!1];random=String(Date.now()),testStorage=new LocalStorage,testKey="AMP_TEST",_b.label=1;case 1:return _b.trys.push([1,4,5,7]),[4,testStorage.set(testKey,random)];case 2:return _b.sent(),[4,testStorage.get(testKey)];case 3:return[2,_b.sent()===random];case 4:return _b.sent(),[2,!1];case 5:return[4,testStorage.remove(testKey)];case 6:return _b.sent(),[7];case 7:return[2]}}))}))},LocalStorage.prototype.get=function(key){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var value;return(0,tslib_es6.YH)(this,(function(_b){switch(_b.label){case 0:return _b.trys.push([0,2,,3]),[4,this.getRaw(key)];case 1:return(value=_b.sent())?[2,JSON.parse(value)]:[2,void 0];case 2:return _b.sent(),[2,void 0];case 3:return[2]}}))}))},LocalStorage.prototype.getRaw=function(key){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){return[2,window.localStorage.getItem(key)||void 0]}))}))},LocalStorage.prototype.set=function(key,value){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){try{window.localStorage.setItem(key,JSON.stringify(value))}catch(_b){}return[2]}))}))},LocalStorage.prototype.remove=function(key){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){try{window.localStorage.removeItem(key)}catch(_b){}return[2]}))}))},LocalStorage.prototype.reset=function(){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){return(0,tslib_es6.YH)(this,(function(_a){try{window.localStorage.clear()}catch(_b){}return[2]}))}))},LocalStorage}(),XHRTransport=function(_super){function XHRTransport(){var _this=null!==_super&&_super.apply(this,arguments)||this;return _this.state={done:4},_this}return(0,tslib_es6.C6)(XHRTransport,_super),XHRTransport.prototype.send=function(serverUrl,payload){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var _this=this;return(0,tslib_es6.YH)(this,(function(_a){return[2,new Promise((function(resolve,reject){"undefined"==typeof XMLHttpRequest&&reject(new Error("XHRTransport is not supported."));var xhr=new XMLHttpRequest;xhr.open("POST",serverUrl,!0),xhr.onreadystatechange=function(){if(xhr.readyState===_this.state.done)try{var responsePayload=xhr.responseText,parsedResponsePayload=JSON.parse(responsePayload),result=_this.buildResponse(parsedResponsePayload);resolve(result)}catch(e){reject(e)}},xhr.setRequestHeader("Content-Type","application/json"),xhr.setRequestHeader("Accept","*/*"),xhr.send(JSON.stringify(payload))}))]}))}))},XHRTransport}(BaseTransport),SendBeaconTransport=function(_super){function SendBeaconTransport(){return null!==_super&&_super.apply(this,arguments)||this}return(0,tslib_es6.C6)(SendBeaconTransport,_super),SendBeaconTransport.prototype.send=function(serverUrl,payload){return(0,tslib_es6.sH)(this,void 0,void 0,(function(){var _this=this;return(0,tslib_es6.YH)(this,(function(_a){return[2,new Promise((function(resolve,reject){if("undefined"==typeof window||void 0===window.navigator||void 0===window.navigator.sendBeacon)throw new Error("SendBeaconTransport is not supported");try{var data=JSON.stringify(payload);return resolve(window.navigator.sendBeacon(serverUrl,JSON.stringify(payload))?_this.buildResponse({code:200,events_ingested:payload.events.length,payload_size_bytes:data.length,server_upload_time:Date.now()}):_this.buildResponse({code:500}))}catch(e){reject(e)}}))]}))}))},SendBeaconTransport}(BaseTransport),config_getDefaultConfig=function(){var cookieStorage=new MemoryStorage;return{cookieExpiration:365,cookieSameSite:"Lax",cookieSecure:!1,cookieStorage,disableCookies:!1,domain:"",sessionManager:new SessionManager(cookieStorage,""),sessionTimeout:18e5,storageProvider:new MemoryStorage,trackingOptions:{deviceManufacturer:!0,deviceModel:!0,ipAddress:!0,language:!0,osName:!0,osVersion:!0,platform:!0},transportProvider:new FetchTransport}},BrowserConfig=function(_super){function BrowserConfig(apiKey,userId,options){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_this=this,defaultConfig=config_getDefaultConfig();return(_this=_super.call(this,(0,tslib_es6.Cl)((0,tslib_es6.Cl)({flushIntervalMillis:1e3,flushMaxRetries:5,flushQueueSize:30},options),{apiKey,storageProvider:null!==(_a=null==options?void 0:options.storageProvider)&&void 0!==_a?_a:defaultConfig.storageProvider,transportProvider:null!==(_b=null==options?void 0:options.transportProvider)&&void 0!==_b?_b:defaultConfig.transportProvider}))||this).cookieStorage=null!==(_c=null==options?void 0:options.cookieStorage)&&void 0!==_c?_c:defaultConfig.cookieStorage,_this.sessionManager=null!==(_d=null==options?void 0:options.sessionManager)&&void 0!==_d?_d:defaultConfig.sessionManager,_this.sessionTimeout=null!==(_e=null==options?void 0:options.sessionTimeout)&&void 0!==_e?_e:defaultConfig.sessionTimeout,_this.appVersion=null==options?void 0:options.appVersion,_this.attribution=null==options?void 0:options.attribution,_this.cookieExpiration=null!==(_f=null==options?void 0:options.cookieExpiration)&&void 0!==_f?_f:defaultConfig.cookieExpiration,_this.cookieSameSite=null!==(_g=null==options?void 0:options.cookieSameSite)&&void 0!==_g?_g:defaultConfig.cookieSameSite,_this.cookieSecure=null!==(_h=null==options?void 0:options.cookieSecure)&&void 0!==_h?_h:defaultConfig.cookieSecure,_this.deviceId=null==options?void 0:options.deviceId,_this.disableCookies=null!==(_j=null==options?void 0:options.disableCookies)&&void 0!==_j?_j:defaultConfig.disableCookies,_this.domain=null!==(_k=null==options?void 0:options.domain)&&void 0!==_k?_k:defaultConfig.domain,_this.lastEventTime=null!==(_l=_this.lastEventTime)&&void 0!==_l?_l:null==options?void 0:options.lastEventTime,_this.optOut=Boolean(null==options?void 0:options.optOut),_this.partnerId=null==options?void 0:options.partnerId,_this.sessionId=null==options?void 0:options.sessionId,_this.trackingOptions=null!==(_m=null==options?void 0:options.trackingOptions)&&void 0!==_m?_m:defaultConfig.trackingOptions,_this.userId=userId,_this}return(0,tslib_es6.C6)(BrowserConfig,_super),Object.defineProperty(BrowserConfig.prototype,"deviceId",{get:function(){return this.sessionManager.getDeviceId()},set:function(deviceId){this.sessionManager.setDeviceId(deviceId)},enumerable:!1,configurable:!0}),Object.defineProperty(BrowserConfig.prototype,"userId",{get:function(){return this.sessionManager.getUserId()},set:function(userId){this.sessionManager.setUserId(userId)},enumerable:!1,configurable:!0}),Object.defineProperty(BrowserConfig.prototype,"sessionId",{get:function(){return this.sessionManager.getSessionId()},set:function(sessionId){this.sessionManager.setSessionId(sessionId)},enumerable:!1,configurable:!0}),Object.defineProperty(BrowserConfig.prototype,"optOut",{get:function(){return this.sessionManager.getOptOut()},set:function(optOut){var _a;null===(_a=this.sessionManager)||void 0===_a||_a.setOptOut(Boolean(optOut))},enumerable:!1,configurable:!0}),Object.defineProperty(BrowserConfig.prototype,"lastEventTime",{get:function(){return this.sessionManager.getLastEventTime()},set:function(lastEventTime){this.sessionManager.setLastEventTime(lastEventTime)},enumerable:!1,configurable:!0}),BrowserConfig}(Config),useBrowserConfig=function(apiKey,userId,options){return(0,tslib_es6.sH)(void 0,void 0,void 0,(function(){var defaultConfig,domain,_a,cookieStorage,cookieName,cookies,queryParams,sessionManager,_b,_c,_d,_e,_f,_g,_h,_j,_k;return(0,tslib_es6.YH)(this,(function(_l){switch(_l.label){case 0:return defaultConfig=config_getDefaultConfig(),null===(_f=null==options?void 0:options.domain)||void 0===_f?[3,1]:(_a=_f,[3,3]);case 1:return[4,getTopLevelDomain()];case 2:_a=_l.sent(),_l.label=3;case 3:return domain=_a,[4,createCookieStorage((0,tslib_es6.Cl)((0,tslib_es6.Cl)({},options),{domain}))];case 4:return cookieStorage=_l.sent(),cookieName=getCookieName(apiKey),[4,cookieStorage.get(cookieName)];case 5:return cookies=_l.sent(),queryParams=getQueryParams(),[4,new SessionManager(cookieStorage,apiKey).load()];case 6:return sessionManager=_l.sent(),_b=BrowserConfig.bind,_c=[void 0,apiKey,null!=userId?userId:null==cookies?void 0:cookies.userId],_d=[(0,tslib_es6.Cl)({},options)],_e={cookieStorage,sessionManager,deviceId:createDeviceId(null==cookies?void 0:cookies.deviceId,null==options?void 0:options.deviceId,queryParams.deviceId),domain,optOut:null!==(_g=null==options?void 0:options.optOut)&&void 0!==_g?_g:Boolean(null==cookies?void 0:cookies.optOut)},[4,cookieStorage.get(cookieName)];case 7:return _e.sessionId=null!==(_j=null===(_h=_l.sent())||void 0===_h?void 0:_h.sessionId)&&void 0!==_j?_j:null==options?void 0:options.sessionId,[4,createEventsStorage(options)];case 8:return[2,new(_b.apply(BrowserConfig,_c.concat([tslib_es6.Cl.apply(void 0,_d.concat([(_e.storageProvider=_l.sent(),_e.trackingOptions=(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},defaultConfig.trackingOptions),null==options?void 0:options.trackingOptions),_e.transportProvider=null!==(_k=null==options?void 0:options.transportProvider)&&void 0!==_k?_k:createTransport(null==options?void 0:options.transport),_e)]))])))]}}))}))},createCookieStorage=function(overrides,baseConfig){return void 0===baseConfig&&(baseConfig=config_getDefaultConfig()),(0,tslib_es6.sH)(void 0,void 0,void 0,(function(){var options,cookieStorage,_a;return(0,tslib_es6.YH)(this,(function(_b){switch(_b.label){case 0:return options=(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},baseConfig),overrides),cookieStorage=null==overrides?void 0:overrides.cookieStorage,(_a=!cookieStorage)?[3,2]:[4,cookieStorage.isEnabled()];case 1:_a=!_b.sent(),_b.label=2;case 2:return _a?[2,createFlexibleStorage(options)]:[2,cookieStorage]}}))}))},createFlexibleStorage=function(options){return(0,tslib_es6.sH)(void 0,void 0,void 0,(function(){var storage,_a;return(0,tslib_es6.YH)(this,(function(_b){switch(_b.label){case 0:return storage=new CookieStorage({domain:options.domain,expirationDays:options.cookieExpiration,sameSite:options.cookieSameSite,secure:options.cookieSecure}),(_a=options.disableCookies)?[3,2]:[4,storage.isEnabled()];case 1:_a=!_b.sent(),_b.label=2;case 2:return _a?[4,(storage=new LocalStorage).isEnabled()]:[3,4];case 3:_b.sent()||(storage=new MemoryStorage),_b.label=4;case 4:return[2,storage]}}))}))},createEventsStorage=function(overrides){return(0,tslib_es6.sH)(void 0,void 0,void 0,(function(){var _a,_b,storage,_c,e_1_1,e_1,_d;return(0,tslib_es6.YH)(this,(function(_e){switch(_e.label){case 0:if(overrides&&Object.prototype.hasOwnProperty.call(overrides,"storageProvider")&&!overrides.storageProvider)return[3,9];_e.label=1;case 1:_e.trys.push([1,7,8,9]),_a=(0,tslib_es6.Ju)([null==overrides?void 0:overrides.storageProvider,new LocalStorage]),_b=_a.next(),_e.label=2;case 2:return _b.done?[3,6]:(storage=_b.value,(_c=storage)?[4,storage.isEnabled()]:[3,4]);case 3:_c=_e.sent(),_e.label=4;case 4:if(_c)return[2,storage];_e.label=5;case 5:return _b=_a.next(),[3,2];case 6:return[3,9];case 7:return e_1_1=_e.sent(),e_1={error:e_1_1},[3,9];case 8:try{_b&&!_b.done&&(_d=_a.return)&&_d.call(_a)}finally{if(e_1)throw e_1.error}return[7];case 9:return[2,void 0]}}))}))},createDeviceId=function(idFromCookies,idFromOptions,idFromQueryParams){return idFromOptions||idFromQueryParams||idFromCookies||UUID()},createTransport=function(transport){return transport===TransportType.XHR?new XHRTransport:transport===TransportType.SendBeacon?new SendBeaconTransport:config_getDefaultConfig().transportProvider},getTopLevelDomain=function(url){return(0,tslib_es6.sH)(void 0,void 0,void 0,(function(){var host,parts,levels,storageKey,i,domain,storage;return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:return[4,(new CookieStorage).isEnabled()];case 1:if(!_a.sent()||!url&&"undefined"==typeof location)return[2,""];for(host=null!=url?url:location.hostname,parts=host.split("."),levels=[],storageKey="AMP_TLDTEST",i=parts.length-2;i>=0;--i)levels.push(parts.slice(i).join("."));i=0,_a.label=2;case 2:return i<levels.length?(domain=levels[i],[4,(storage=new CookieStorage({domain:"."+domain})).set(storageKey,1)]):[3,7];case 3:return _a.sent(),[4,storage.get(storageKey)];case 4:return _a.sent()?[4,storage.remove(storageKey)]:[3,6];case 5:return _a.sent(),[2,"."+domain];case 6:return i++,[3,2];case 7:return[2,""]}}))}))},parseOldCookies=function(apiKey,options){return(0,tslib_es6.sH)(void 0,void 0,void 0,(function(){var storage,oldCookieName,cookies,_a,deviceId,userId,optOut,sessionId,lastEventTime;return(0,tslib_es6.YH)(this,(function(_b){switch(_b.label){case 0:return[4,(storage=new CookieStorage).isEnabled()];case 1:return _b.sent()&&!(null==options?void 0:options.disableCookies)||(storage=new LocalStorage),[4,storage.isEnabled()];case 2:return _b.sent()?(oldCookieName=function(apiKey){return"".concat(AMPLITUDE_PREFIX.toLowerCase(),"_").concat(apiKey.substring(0,6))}(apiKey),[4,storage.getRaw(oldCookieName)]):[2,{optOut:!1}];case 3:return(cookies=_b.sent())?[4,storage.remove(oldCookieName)]:[2,{optOut:!1}];case 4:return _b.sent(),_a=(0,tslib_es6.zs)(cookies.split("."),5),deviceId=_a[0],userId=_a[1],optOut=_a[2],sessionId=_a[3],lastEventTime=_a[4],[2,{deviceId,userId:decode(userId),sessionId:parseTime(sessionId),lastEventTime:parseTime(lastEventTime),optOut:Boolean(optOut)}]}}))}))},parseTime=function(num){var integer=parseInt(num,32);if(!isNaN(integer))return integer},decode=function(value){if(atob&&escape&&value)try{return decodeURIComponent(escape(atob(value)))}catch(_a){return}},AmplitudeBrowser=function(_super){function AmplitudeBrowser(){return null!==_super&&_super.apply(this,arguments)||this}return(0,tslib_es6.C6)(AmplitudeBrowser,_super),AmplitudeBrowser.prototype.init=function(apiKey,userId,options){var _a,_b,_c;return void 0===apiKey&&(apiKey=""),(0,tslib_es6.sH)(this,void 0,void 0,(function(){var oldCookies,browserOptions,isNewSession,connector,_this=this;return(0,tslib_es6.YH)(this,(function(_d){switch(_d.label){case 0:return this.initializing?[2]:(this.initializing=!0,[4,parseOldCookies(apiKey,options)]);case 1:return oldCookies=_d.sent(),[4,useBrowserConfig(apiKey,userId||oldCookies.userId,(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},options),{deviceId:null!==(_a=oldCookies.deviceId)&&void 0!==_a?_a:null==options?void 0:options.deviceId,sessionId:null!==(_b=oldCookies.sessionId)&&void 0!==_b?_b:null==options?void 0:options.sessionId,optOut:null!==(_c=null==options?void 0:options.optOut)&&void 0!==_c?_c:oldCookies.optOut,lastEventTime:oldCookies.lastEventTime}))];case 2:return browserOptions=_d.sent(),[4,_super.prototype._init.call(this,browserOptions)];case 3:return _d.sent(),isNewSession=!this.config.lastEventTime,(!this.config.sessionId||this.config.lastEventTime&&Date.now()-this.config.lastEventTime>this.config.sessionTimeout)&&(this.setSessionId(Date.now()),isNewSession=!0),(connector=getAnalyticsConnector()).eventBridge.setEventReceiver((function(event){_this.track(event.eventType,event.eventProperties)})),connector.identityStore.setIdentity({userId:this.config.userId,deviceId:this.config.deviceId}),[4,this.add(new Context)];case 4:return _d.sent(),[4,this.add(new IdentityEventSender)];case 5:return _d.sent(),[4,this.add(new Destination)];case 6:return _d.sent(),this.initializing=!1,this.timeline.isReady=!0,this.config.optOut||this.timeline.scheduleApply(0),[4,this.runAttributionStrategy(browserOptions.attribution,isNewSession)];case 7:return _d.sent(),[2]}}))}))},AmplitudeBrowser.prototype.runAttributionStrategy=function(attributionConfig,isNewSession){return void 0===isNewSession&&(isNewSession=!1),(0,tslib_es6.sH)(this,void 0,void 0,(function(){var track,onNewCampaign,storage;return(0,tslib_es6.YH)(this,(function(_a){switch(_a.label){case 0:return track=this.track.bind(this),onNewCampaign=this.setSessionId.bind(this,Date.now()),[4,createFlexibleStorage(this.config)];case 1:return storage=_a.sent(),[4,new CampaignTracker(this.config.apiKey,(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},attributionConfig),{storage,track,onNewCampaign})).send(isNewSession)];case 2:return _a.sent(),[2]}}))}))},AmplitudeBrowser.prototype.getUserId=function(){var _a;return null===(_a=this.config)||void 0===_a?void 0:_a.userId},AmplitudeBrowser.prototype.setUserId=function(userId){this.config?this.config.userId=userId:this.q.push(this.setUserId.bind(this,userId))},AmplitudeBrowser.prototype.getDeviceId=function(){var _a;return null===(_a=this.config)||void 0===_a?void 0:_a.deviceId},AmplitudeBrowser.prototype.setDeviceId=function(deviceId){this.config?this.config.deviceId=deviceId:this.q.push(this.setDeviceId.bind(this,deviceId))},AmplitudeBrowser.prototype.reset=function(){this.setUserId(void 0),this.setDeviceId(UUID())},AmplitudeBrowser.prototype.getSessionId=function(){var _a;return null===(_a=this.config)||void 0===_a?void 0:_a.sessionId},AmplitudeBrowser.prototype.setSessionId=function(sessionId){this.config?(this.config.sessionId=sessionId,this.config.lastEventTime=void 0):this.q.push(this.setSessionId.bind(this,sessionId))},AmplitudeBrowser.prototype.setTransport=function(transport){this.config?this.config.transportProvider=createTransport(transport):this.q.push(this.setTransport.bind(this,transport))},AmplitudeBrowser.prototype.identify=function(identify,eventOptions){if(isInstanceProxy(identify)){var queue=identify._q;identify._q=[],identify=convertProxyObjectToRealObject(new Identify,queue)}return _super.prototype.identify.call(this,identify,eventOptions)},AmplitudeBrowser.prototype.groupIdentify=function(groupType,groupName,identify,eventOptions){if(isInstanceProxy(identify)){var queue=identify._q;identify._q=[],identify=convertProxyObjectToRealObject(new Identify,queue)}return _super.prototype.groupIdentify.call(this,groupType,groupName,identify,eventOptions)},AmplitudeBrowser.prototype.revenue=function(revenue,eventOptions){if(isInstanceProxy(revenue)){var queue=revenue._q;revenue._q=[],revenue=convertProxyObjectToRealObject(new Revenue,queue)}return _super.prototype.revenue.call(this,revenue,eventOptions)},AmplitudeBrowser}(AmplitudeCore),createInstance=function(){var client=new AmplitudeBrowser;return{init:returnWrapper(client.init.bind(client)),add:returnWrapper(client.add.bind(client)),remove:returnWrapper(client.remove.bind(client)),track:returnWrapper(client.track.bind(client)),logEvent:returnWrapper(client.logEvent.bind(client)),identify:returnWrapper(client.identify.bind(client)),groupIdentify:returnWrapper(client.groupIdentify.bind(client)),setGroup:returnWrapper(client.setGroup.bind(client)),revenue:returnWrapper(client.revenue.bind(client)),flush:returnWrapper(client.flush.bind(client)),getUserId:client.getUserId.bind(client),setUserId:client.setUserId.bind(client),getDeviceId:client.getDeviceId.bind(client),setDeviceId:client.setDeviceId.bind(client),reset:client.reset.bind(client),getSessionId:client.getSessionId.bind(client),setSessionId:client.setSessionId.bind(client),setOptOut:client.setOptOut.bind(client),setTransport:client.setTransport.bind(client)}};const browser_client=createInstance();var add=browser_client.add,flush=browser_client.flush,getDeviceId=browser_client.getDeviceId,getSessionId=browser_client.getSessionId,getUserId=browser_client.getUserId,groupIdentify=browser_client.groupIdentify,identify=browser_client.identify,init=browser_client.init,logEvent=browser_client.logEvent,remove=browser_client.remove,esm_reset=browser_client.reset,revenue=browser_client.revenue,setDeviceId=browser_client.setDeviceId,setGroup=browser_client.setGroup,setOptOut=browser_client.setOptOut,setSessionId=browser_client.setSessionId,setTransport=browser_client.setTransport,setUserId=browser_client.setUserId,track=browser_client.track},"./node_modules/@amplitude/ua-parser-js/src/ua-parser.js":function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;!function(window,undefined){"use strict";var MODEL="model",NAME="name",TYPE="type",VENDOR="vendor",VERSION="version",MOBILE="mobile",TABLET="tablet",SMARTTV="smarttv",enumerize=function(arr){for(var enums={},i=0;i<arr.length;i++)enums[arr[i].toUpperCase()]=arr[i];return enums},has=function(str1,str2){return"string"==typeof str1&&-1!==lowerize(str2).indexOf(lowerize(str1))},lowerize=function(str){return str.toLowerCase()},trim=function(str,len){if("string"==typeof str)return str=str.replace(/^\s\s*/,"").replace(/\s\s*$/,""),void 0===len?str:str.substring(0,275)},rgxMapper=function(ua,arrays){for(var j,k,p,q,matches,match,i=0;i<arrays.length&&!matches;){var regex=arrays[i],props=arrays[i+1];for(j=k=0;j<regex.length&&!matches;)if(matches=regex[j++].exec(ua))for(p=0;p<props.length;p++)match=matches[++k],"object"==typeof(q=props[p])&&q.length>0?2===q.length?"function"==typeof q[1]?this[q[0]]=q[1].call(this,match):this[q[0]]=q[1]:3===q.length?"function"!=typeof q[1]||q[1].exec&&q[1].test?this[q[0]]=match?match.replace(q[1],q[2]):undefined:this[q[0]]=match?q[1].call(this,match,q[2]):undefined:4===q.length&&(this[q[0]]=match?q[3].call(this,match.replace(q[1],q[2])):undefined):this[q]=match||undefined;i+=2}},strMapper=function(str,map){for(var i in map)if("object"==typeof map[i]&&map[i].length>0){for(var j=0;j<map[i].length;j++)if(has(map[i][j],str))return"?"===i?undefined:i}else if(has(map[i],str))return"?"===i?undefined:i;return str},windowsVersionMap={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},regexes={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[VERSION,[NAME,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[VERSION,[NAME,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[NAME,VERSION],[/opios[\/ ]+([\w\.]+)/i],[VERSION,[NAME,"Opera Mini"]],[/\bopr\/([\w\.]+)/i],[VERSION,[NAME,"Opera"]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,/(ba?idubrowser)[\/ ]?([\w\.]+)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq)\/([-\w\.]+)/i,/(weibo)__([\d\.]+)/i],[NAME,VERSION],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[VERSION,[NAME,"UCBrowser"]],[/\bqbcore\/([\w\.]+)/i],[VERSION,[NAME,"WeChat(Win) Desktop"]],[/micromessenger\/([\w\.]+)/i],[VERSION,[NAME,"WeChat"]],[/konqueror\/([\w\.]+)/i],[VERSION,[NAME,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[VERSION,[NAME,"IE"]],[/yabrowser\/([\w\.]+)/i],[VERSION,[NAME,"Yandex"]],[/(avast|avg)\/([\w\.]+)/i],[[NAME,/(.+)/,"$1 Secure Browser"],VERSION],[/\bfocus\/([\w\.]+)/i],[VERSION,[NAME,"Firefox Focus"]],[/\bopt\/([\w\.]+)/i],[VERSION,[NAME,"Opera Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[VERSION,[NAME,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[VERSION,[NAME,"Dolphin"]],[/coast\/([\w\.]+)/i],[VERSION,[NAME,"Opera Coast"]],[/miuibrowser\/([\w\.]+)/i],[VERSION,[NAME,"MIUI Browser"]],[/fxios\/([-\w\.]+)/i],[VERSION,[NAME,"Firefox"]],[/\bqihu|(qi?ho?o?|360)browser/i],[[NAME,"360 Browser"]],[/(oculus|samsung|sailfish)browser\/([\w\.]+)/i],[[NAME,/(.+)/,"$1 Browser"],VERSION],[/(comodo_dragon)\/([\w\.]+)/i],[[NAME,/_/g," "],VERSION],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i],[NAME,VERSION],[/(metasr)[\/ ]?([\w\.]+)/i,/(lbbrowser)/i],[NAME],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[NAME,"Facebook"],VERSION],[/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(chromium|instagram)[\/ ]([-\w\.]+)/i],[NAME,VERSION],[/\bgsa\/([\w\.]+) .*safari\//i],[VERSION,[NAME,"GSA"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[VERSION,[NAME,"Chrome Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[NAME,"Chrome WebView"],VERSION],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[VERSION,[NAME,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[NAME,VERSION],[/version\/([\w\.]+) .*mobile\/\w+ (safari)/i],[VERSION,[NAME,"Mobile Safari"]],[/version\/([\w\.]+) .*(mobile ?safari|safari)/i],[VERSION,NAME],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[NAME,[VERSION,strMapper,{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(webkit|khtml)\/([\w\.]+)/i],[NAME,VERSION],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[NAME,"Netscape"],VERSION],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[VERSION,[NAME,"Firefox Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i],[NAME,VERSION]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[["architecture","amd64"]],[/(ia32(?=;))/i],[["architecture",lowerize]],[/((?:i[346]|x)86)[;\)]/i],[["architecture","ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[["architecture","arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[["architecture","armhf"]],[/windows (ce|mobile); ppc;/i],[["architecture","arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[["architecture",/ower/,"",lowerize]],[/(sun4\w)[;\)]/i],[["architecture","sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[["architecture",lowerize]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[pt]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[MODEL,[VENDOR,"Samsung"],[TYPE,TABLET]],[/\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[MODEL,[VENDOR,"Samsung"],[TYPE,MOBILE]],[/((ipod|iphone)\d+,\d+)/i],[MODEL,[VENDOR,"Apple"],[TYPE,MOBILE]],[/(ipad\d+,\d+)/i],[MODEL,[VENDOR,"Apple"],[TYPE,TABLET]],[/\((ip(?:hone|od)[\w ]*);/i],[MODEL,[VENDOR,"Apple"],[TYPE,MOBILE]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[MODEL,[VENDOR,"Apple"],[TYPE,TABLET]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[MODEL,[VENDOR,"Huawei"],[TYPE,TABLET]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i],[MODEL,[VENDOR,"Huawei"],[TYPE,MOBILE]],[/\b(poco[\w ]+)(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[MODEL,/_/g," "],[VENDOR,"Xiaomi"],[TYPE,MOBILE]],[/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[MODEL,/_/g," "],[VENDOR,"Xiaomi"],[TYPE,TABLET]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[MODEL,[VENDOR,"OPPO"],[TYPE,MOBILE]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[MODEL,[VENDOR,"Vivo"],[TYPE,MOBILE]],[/\b(rmx[12]\d{3})(?: bui|;|\))/i],[MODEL,[VENDOR,"Realme"],[TYPE,MOBILE]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[MODEL,[VENDOR,"Motorola"],[TYPE,MOBILE]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[MODEL,[VENDOR,"Motorola"],[TYPE,TABLET]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[MODEL,[VENDOR,"LG"],[TYPE,TABLET]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[MODEL,[VENDOR,"LG"],[TYPE,MOBILE]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[MODEL,[VENDOR,"Lenovo"],[TYPE,TABLET]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[MODEL,/_/g," "],[VENDOR,"Nokia"],[TYPE,MOBILE]],[/(pixel c)\b/i],[MODEL,[VENDOR,"Google"],[TYPE,TABLET]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[MODEL,[VENDOR,"Google"],[TYPE,MOBILE]],[/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[MODEL,[VENDOR,"Sony"],[TYPE,MOBILE]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[MODEL,"Xperia Tablet"],[VENDOR,"Sony"],[TYPE,TABLET]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[MODEL,[VENDOR,"OnePlus"],[TYPE,MOBILE]],[/(alexa)webm/i,/(kf[a-z]{2}wi)( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[MODEL,[VENDOR,"Amazon"],[TYPE,TABLET]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[MODEL,/(.+)/g,"Fire Phone $1"],[VENDOR,"Amazon"],[TYPE,MOBILE]],[/(playbook);[-\w\),; ]+(rim)/i],[MODEL,VENDOR,[TYPE,TABLET]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[MODEL,[VENDOR,"BlackBerry"],[TYPE,MOBILE]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[MODEL,[VENDOR,"ASUS"],[TYPE,TABLET]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[MODEL,[VENDOR,"ASUS"],[TYPE,MOBILE]],[/(nexus 9)/i],[MODEL,[VENDOR,"HTC"],[TYPE,TABLET]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic|sony(?!-bra))[-_ ]?([-\w]*)/i],[VENDOR,[MODEL,/_/g," "],[TYPE,MOBILE]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[MODEL,[VENDOR,"Acer"],[TYPE,TABLET]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[MODEL,[VENDOR,"Meizu"],[TYPE,MOBILE]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[MODEL,[VENDOR,"Sharp"],[TYPE,MOBILE]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[VENDOR,MODEL,[TYPE,MOBILE]],[/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[VENDOR,MODEL,[TYPE,TABLET]],[/(surface duo)/i],[MODEL,[VENDOR,"Microsoft"],[TYPE,TABLET]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[MODEL,[VENDOR,"Fairphone"],[TYPE,MOBILE]],[/(u304aa)/i],[MODEL,[VENDOR,"AT&T"],[TYPE,MOBILE]],[/\bsie-(\w*)/i],[MODEL,[VENDOR,"Siemens"],[TYPE,MOBILE]],[/\b(rct\w+) b/i],[MODEL,[VENDOR,"RCA"],[TYPE,TABLET]],[/\b(venue[\d ]{2,7}) b/i],[MODEL,[VENDOR,"Dell"],[TYPE,TABLET]],[/\b(q(?:mv|ta)\w+) b/i],[MODEL,[VENDOR,"Verizon"],[TYPE,TABLET]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[MODEL,[VENDOR,"Barnes & Noble"],[TYPE,TABLET]],[/\b(tm\d{3}\w+) b/i],[MODEL,[VENDOR,"NuVision"],[TYPE,TABLET]],[/\b(k88) b/i],[MODEL,[VENDOR,"ZTE"],[TYPE,TABLET]],[/\b(nx\d{3}j) b/i],[MODEL,[VENDOR,"ZTE"],[TYPE,MOBILE]],[/\b(gen\d{3}) b.+49h/i],[MODEL,[VENDOR,"Swiss"],[TYPE,MOBILE]],[/\b(zur\d{3}) b/i],[MODEL,[VENDOR,"Swiss"],[TYPE,TABLET]],[/\b((zeki)?tb.*\b) b/i],[MODEL,[VENDOR,"Zeki"],[TYPE,TABLET]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[VENDOR,"Dragon Touch"],MODEL,[TYPE,TABLET]],[/\b(ns-?\w{0,9}) b/i],[MODEL,[VENDOR,"Insignia"],[TYPE,TABLET]],[/\b((nxa|next)-?\w{0,9}) b/i],[MODEL,[VENDOR,"NextBook"],[TYPE,TABLET]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[VENDOR,"Voice"],MODEL,[TYPE,MOBILE]],[/\b(lvtel\-)?(v1[12]) b/i],[[VENDOR,"LvTel"],MODEL,[TYPE,MOBILE]],[/\b(ph-1) /i],[MODEL,[VENDOR,"Essential"],[TYPE,MOBILE]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[MODEL,[VENDOR,"Envizen"],[TYPE,TABLET]],[/\b(trio[-\w\. ]+) b/i],[MODEL,[VENDOR,"MachSpeed"],[TYPE,TABLET]],[/\btu_(1491) b/i],[MODEL,[VENDOR,"Rotor"],[TYPE,TABLET]],[/(shield[\w ]+) b/i],[MODEL,[VENDOR,"Nvidia"],[TYPE,TABLET]],[/(sprint) (\w+)/i],[VENDOR,MODEL,[TYPE,MOBILE]],[/(kin\.[onetw]{3})/i],[[MODEL,/\./g," "],[VENDOR,"Microsoft"],[TYPE,MOBILE]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[MODEL,[VENDOR,"Zebra"],[TYPE,TABLET]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[MODEL,[VENDOR,"Zebra"],[TYPE,MOBILE]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[VENDOR,MODEL,[TYPE,"console"]],[/droid.+; (shield) bui/i],[MODEL,[VENDOR,"Nvidia"],[TYPE,"console"]],[/(playstation [345portablevi]+)/i],[MODEL,[VENDOR,"Sony"],[TYPE,"console"]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[MODEL,[VENDOR,"Microsoft"],[TYPE,"console"]],[/smart-tv.+(samsung)/i],[VENDOR,[TYPE,SMARTTV]],[/hbbtv.+maple;(\d+)/i],[[MODEL,/^/,"SmartTV"],[VENDOR,"Samsung"],[TYPE,SMARTTV]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[VENDOR,"LG"],[TYPE,SMARTTV]],[/(apple) ?tv/i],[VENDOR,[MODEL,"Apple TV"],[TYPE,SMARTTV]],[/crkey/i],[[MODEL,"Chromecast"],[VENDOR,"Google"],[TYPE,SMARTTV]],[/droid.+aft(\w)( bui|\))/i],[MODEL,[VENDOR,"Amazon"],[TYPE,SMARTTV]],[/\(dtv[\);].+(aquos)/i],[MODEL,[VENDOR,"Sharp"],[TYPE,SMARTTV]],[/(bravia[\w- ]+) bui/i],[MODEL,[VENDOR,"Sony"],[TYPE,SMARTTV]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w ]*; *(\w[^;]*);([^;]*)/i],[[VENDOR,trim],[MODEL,trim],[TYPE,SMARTTV]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[TYPE,SMARTTV]],[/((pebble))app/i],[VENDOR,MODEL,[TYPE,"wearable"]],[/droid.+; (glass) \d/i],[MODEL,[VENDOR,"Google"],[TYPE,"wearable"]],[/droid.+; (wt63?0{2,3})\)/i],[MODEL,[VENDOR,"Zebra"],[TYPE,"wearable"]],[/(quest( 2)?)/i],[MODEL,[VENDOR,"Facebook"],[TYPE,"wearable"]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[VENDOR,[TYPE,"embedded"]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i],[MODEL,[TYPE,MOBILE]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[MODEL,[TYPE,TABLET]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[TYPE,TABLET]],[/(phone|mobile(?:[;\/]| safari)|pda(?=.+windows ce))/i],[[TYPE,MOBILE]],[/(android[-\w\. ]{0,9});.+buil/i],[MODEL,[VENDOR,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[VERSION,[NAME,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[VERSION,[NAME,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i],[NAME,VERSION],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[VERSION,NAME]],os:[[/microsoft (windows) (vista|xp)/i],[NAME,VERSION],[/(windows) nt 6\.2; (arm)/i,/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,/(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i],[NAME,[VERSION,strMapper,windowsVersionMap]],[/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[NAME,"Windows"],[VERSION,strMapper,windowsVersionMap]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i],[[VERSION,/_/g,"."],[NAME,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[NAME,"Mac OS"],[VERSION,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86)/i],[VERSION,NAME],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[NAME,VERSION],[/\(bb(10);/i],[VERSION,[NAME,"BlackBerry"]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[VERSION,[NAME,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[VERSION,[NAME,"Firefox OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[VERSION,[NAME,"webOS"]],[/crkey\/([\d\.]+)/i],[VERSION,[NAME,"Chromecast"]],[/(cros) [\w]+ ([\w\.]+\w)/i],[[NAME,"Chromium OS"],VERSION],[/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[NAME,VERSION],[/(sunos) ?([\w\.\d]*)/i],[[NAME,"Solaris"],VERSION],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,/(unix) ?([\w\.]*)/i],[NAME,VERSION]]},UAParser=function(ua,extensions){if("object"==typeof ua&&(extensions=ua,ua=undefined),!(this instanceof UAParser))return new UAParser(ua,extensions).getResult();var _ua=ua||(void 0!==window&&window.navigator&&window.navigator.userAgent?window.navigator.userAgent:""),_rgxmap=extensions?function(regexes,extensions){var mergedRegexes={};for(var i in regexes)extensions[i]&&extensions[i].length%2==0?mergedRegexes[i]=extensions[i].concat(regexes[i]):mergedRegexes[i]=regexes[i];return mergedRegexes}(regexes,extensions):regexes;return this.getBrowser=function(){var version,_browser={};return _browser[NAME]=undefined,_browser[VERSION]=undefined,rgxMapper.call(_browser,_ua,_rgxmap.browser),_browser.major="string"==typeof(version=_browser.version)?version.replace(/[^\d\.]/g,"").split(".")[0]:void 0,_browser},this.getCPU=function(){var _cpu={architecture:undefined};return rgxMapper.call(_cpu,_ua,_rgxmap.cpu),_cpu},this.getDevice=function(){var _device={};return _device[VENDOR]=undefined,_device[MODEL]=undefined,_device[TYPE]=undefined,rgxMapper.call(_device,_ua,_rgxmap.device),_device},this.getEngine=function(){var _engine={};return _engine[NAME]=undefined,_engine[VERSION]=undefined,rgxMapper.call(_engine,_ua,_rgxmap.engine),_engine},this.getOS=function(){var _os={};return _os[NAME]=undefined,_os[VERSION]=undefined,rgxMapper.call(_os,_ua,_rgxmap.os),_os},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return _ua},this.setUA=function(ua){return _ua="string"==typeof ua&&ua.length>275?trim(ua,275):ua,this},this.setUA(_ua),this};UAParser.VERSION="0.7.31",UAParser.BROWSER=enumerize([NAME,VERSION,"major"]),UAParser.CPU=enumerize(["architecture"]),UAParser.DEVICE=enumerize([MODEL,VENDOR,TYPE,"console",MOBILE,SMARTTV,TABLET,"wearable","embedded"]),UAParser.ENGINE=UAParser.OS=enumerize([NAME,VERSION]),void 0!==exports?(module.exports&&(exports=module.exports=UAParser),exports.UAParser=UAParser):__webpack_require__.amdO?undefined===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return UAParser}.call(exports,__webpack_require__,exports,module))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__):void 0!==window&&(window.UAParser=UAParser);var $=void 0!==window&&(window.jQuery||window.Zepto);if($&&!$.ua){var parser=new UAParser;$.ua=parser.getResult(),$.ua.get=function(){return parser.getUA()},$.ua.set=function(ua){parser.setUA(ua);var result=parser.getResult();for(var prop in result)$.ua[prop]=result[prop]}}}("object"==typeof window?window:this)},"./node_modules/tslib/tslib.es6.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{C6:()=>__extends,Cl:()=>__assign,Ju:()=>__values,Tt:()=>__rest,YH:()=>__generator,fX:()=>__spreadArray,sH:()=>__awaiter,zs:()=>__read});var extendStatics=function(d,b){return extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)Object.prototype.hasOwnProperty.call(b,p)&&(d[p]=b[p])},extendStatics(d,b)};function __extends(d,b){if("function"!=typeof b&&null!==b)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}var __assign=function(){return __assign=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)};function __rest(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t}function __awaiter(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))}function __generator(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}}Object.create;function __values(o){var s="function"==typeof Symbol&&Symbol.iterator,m=s&&o[s],i=0;if(m)return m.call(o);if(o&&"number"==typeof o.length)return{next:function(){return o&&i>=o.length&&(o=void 0),{value:o&&o[i++],done:!o}}};throw new TypeError(s?"Object is not iterable.":"Symbol.iterator is not defined.")}function __read(o,n){var m="function"==typeof Symbol&&o[Symbol.iterator];if(!m)return o;var r,e,i=m.call(o),ar=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)ar.push(r.value)}catch(error){e={error}}finally{try{r&&!r.done&&(m=i.return)&&m.call(i)}finally{if(e)throw e.error}}return ar}function __spreadArray(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))}Object.create}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,