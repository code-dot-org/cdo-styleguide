/*! For license information please see 7879.9a91c276.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[7879,853],{"./node_modules/lodash/_baseEach.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseForOwn=__webpack_require__("./node_modules/lodash/_baseForOwn.js"),baseEach=__webpack_require__("./node_modules/lodash/_createBaseEach.js")(baseForOwn);module.exports=baseEach},"./node_modules/lodash/_baseMap.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseEach=__webpack_require__("./node_modules/lodash/_baseEach.js"),isArrayLike=__webpack_require__("./node_modules/lodash/isArrayLike.js");module.exports=function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];return baseEach(collection,(function(value,key,collection){result[++index]=iteratee(value,key,collection)})),result}},"./node_modules/lodash/_baseOrderBy.js":(module,__unused_webpack_exports,__webpack_require__)=>{var arrayMap=__webpack_require__("./node_modules/lodash/_arrayMap.js"),baseGet=__webpack_require__("./node_modules/lodash/_baseGet.js"),baseIteratee=__webpack_require__("./node_modules/lodash/_baseIteratee.js"),baseMap=__webpack_require__("./node_modules/lodash/_baseMap.js"),baseSortBy=__webpack_require__("./node_modules/lodash/_baseSortBy.js"),baseUnary=__webpack_require__("./node_modules/lodash/_baseUnary.js"),compareMultiple=__webpack_require__("./node_modules/lodash/_compareMultiple.js"),identity=__webpack_require__("./node_modules/lodash/identity.js"),isArray=__webpack_require__("./node_modules/lodash/isArray.js");module.exports=function baseOrderBy(collection,iteratees,orders){iteratees=iteratees.length?arrayMap(iteratees,(function(iteratee){return isArray(iteratee)?function(value){return baseGet(value,1===iteratee.length?iteratee[0]:iteratee)}:iteratee})):[identity];var index=-1;iteratees=arrayMap(iteratees,baseUnary(baseIteratee));var result=baseMap(collection,(function(value,key,collection){return{criteria:arrayMap(iteratees,(function(iteratee){return iteratee(value)})),index:++index,value}}));return baseSortBy(result,(function(object,other){return compareMultiple(object,other,orders)}))}},"./node_modules/lodash/_baseSortBy.js":module=>{module.exports=function baseSortBy(array,comparer){var length=array.length;for(array.sort(comparer);length--;)array[length]=array[length].value;return array}},"./node_modules/lodash/_compareAscending.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isSymbol=__webpack_require__("./node_modules/lodash/isSymbol.js");module.exports=function compareAscending(value,other){if(value!==other){var valIsDefined=void 0!==value,valIsNull=null===value,valIsReflexive=value==value,valIsSymbol=isSymbol(value),othIsDefined=void 0!==other,othIsNull=null===other,othIsReflexive=other==other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive)return 1;if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive)return-1}return 0}},"./node_modules/lodash/_compareMultiple.js":(module,__unused_webpack_exports,__webpack_require__)=>{var compareAscending=__webpack_require__("./node_modules/lodash/_compareAscending.js");module.exports=function compareMultiple(object,other,orders){for(var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;++index<length;){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result)return index>=ordersLength?result:result*("desc"==orders[index]?-1:1)}return object.index-other.index}},"./node_modules/lodash/_createBaseEach.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isArrayLike=__webpack_require__("./node_modules/lodash/isArrayLike.js");module.exports=function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(null==collection)return collection;if(!isArrayLike(collection))return eachFunc(collection,iteratee);for(var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);(fromRight?index--:++index<length)&&!1!==iteratee(iterable[index],index,iterable););return collection}}},"./node_modules/lodash/debounce.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isObject=__webpack_require__("./node_modules/lodash/isObject.js"),now=__webpack_require__("./node_modules/lodash/now.js"),toNumber=__webpack_require__("./node_modules/lodash/toNumber.js"),nativeMax=Math.max,nativeMin=Math.min;module.exports=function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=!1,maxing=!1,trailing=!0;if("function"!=typeof func)throw new TypeError("Expected a function");function invokeFunc(time){var args=lastArgs,thisArg=lastThis;return lastArgs=lastThis=void 0,lastInvokeTime=time,result=func.apply(thisArg,args)}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime;return void 0===lastCallTime||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&time-lastInvokeTime>=maxWait}function timerExpired(){var time=now();if(shouldInvoke(time))return trailingEdge(time);timerId=setTimeout(timerExpired,function remainingWait(time){var timeWaiting=wait-(time-lastCallTime);return maxing?nativeMin(timeWaiting,maxWait-(time-lastInvokeTime)):timeWaiting}(time))}function trailingEdge(time){return timerId=void 0,trailing&&lastArgs?invokeFunc(time):(lastArgs=lastThis=void 0,result)}function debounced(){var time=now(),isInvoking=shouldInvoke(time);if(lastArgs=arguments,lastThis=this,lastCallTime=time,isInvoking){if(void 0===timerId)return function leadingEdge(time){return lastInvokeTime=time,timerId=setTimeout(timerExpired,wait),leading?invokeFunc(time):result}(lastCallTime);if(maxing)return clearTimeout(timerId),timerId=setTimeout(timerExpired,wait),invokeFunc(lastCallTime)}return void 0===timerId&&(timerId=setTimeout(timerExpired,wait)),result}return wait=toNumber(wait)||0,isObject(options)&&(leading=!!options.leading,maxWait=(maxing="maxWait"in options)?nativeMax(toNumber(options.maxWait)||0,wait):maxWait,trailing="trailing"in options?!!options.trailing:trailing),debounced.cancel=function cancel(){void 0!==timerId&&clearTimeout(timerId),lastInvokeTime=0,lastArgs=lastCallTime=lastThis=timerId=void 0},debounced.flush=function flush(){return void 0===timerId?result:trailingEdge(now())},debounced}},"./node_modules/lodash/now.js":(module,__unused_webpack_exports,__webpack_require__)=>{var root=__webpack_require__("./node_modules/lodash/_root.js");module.exports=function(){return root.Date.now()}},"./node_modules/lodash/orderBy.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseOrderBy=__webpack_require__("./node_modules/lodash/_baseOrderBy.js"),isArray=__webpack_require__("./node_modules/lodash/isArray.js");module.exports=function orderBy(collection,iteratees,orders,guard){return null==collection?[]:(isArray(iteratees)||(iteratees=null==iteratees?[]:[iteratees]),isArray(orders=guard?void 0:orders)||(orders=null==orders?[]:[orders]),baseOrderBy(collection,iteratees,orders))}},"./node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DragDropContext:()=>DragDropContext,Draggable:()=>PublicDraggable,Droppable:()=>ConnectedDroppable,resetServerContext:()=>resetServerContext,useKeyboardSensor:()=>useKeyboardSensor,useMouseSensor:()=>useMouseSensor,useTouchSensor:()=>useTouchSensor});var react=__webpack_require__("./node_modules/react/index.js");function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass)}var esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js");function formatProdErrorMessage(code){return"Minified Redux error #"+code+"; visit https://redux.js.org/Errors?code="+code+" for the full message or use the non-minified dev environment for full errors. "}var $$observable="function"==typeof Symbol&&Symbol.observable||"@@observable",randomString=function randomString(){return Math.random().toString(36).substring(7).split("").join(".")},ActionTypes={INIT:"@@redux/INIT"+randomString(),REPLACE:"@@redux/REPLACE"+randomString(),PROBE_UNKNOWN_ACTION:function PROBE_UNKNOWN_ACTION(){return"@@redux/PROBE_UNKNOWN_ACTION"+randomString()}};function isPlainObject(obj){if("object"!=typeof obj||null===obj)return!1;for(var proto=obj;null!==Object.getPrototypeOf(proto);)proto=Object.getPrototypeOf(proto);return Object.getPrototypeOf(obj)===proto}function createStore(reducer,preloadedState,enhancer){var _ref2;if("function"==typeof preloadedState&&"function"==typeof enhancer||"function"==typeof enhancer&&"function"==typeof arguments[3])throw new Error(formatProdErrorMessage(0));if("function"==typeof preloadedState&&void 0===enhancer&&(enhancer=preloadedState,preloadedState=void 0),void 0!==enhancer){if("function"!=typeof enhancer)throw new Error(formatProdErrorMessage(1));return enhancer(createStore)(reducer,preloadedState)}if("function"!=typeof reducer)throw new Error(formatProdErrorMessage(2));var currentReducer=reducer,currentState=preloadedState,currentListeners=[],nextListeners=currentListeners,isDispatching=!1;function ensureCanMutateNextListeners(){nextListeners===currentListeners&&(nextListeners=currentListeners.slice())}function getState(){if(isDispatching)throw new Error(formatProdErrorMessage(3));return currentState}function subscribe(listener){if("function"!=typeof listener)throw new Error(formatProdErrorMessage(4));if(isDispatching)throw new Error(formatProdErrorMessage(5));var isSubscribed=!0;return ensureCanMutateNextListeners(),nextListeners.push(listener),function unsubscribe(){if(isSubscribed){if(isDispatching)throw new Error(formatProdErrorMessage(6));isSubscribed=!1,ensureCanMutateNextListeners();var index=nextListeners.indexOf(listener);nextListeners.splice(index,1),currentListeners=null}}}function dispatch(action){if(!isPlainObject(action))throw new Error(formatProdErrorMessage(7));if(void 0===action.type)throw new Error(formatProdErrorMessage(8));if(isDispatching)throw new Error(formatProdErrorMessage(9));try{isDispatching=!0,currentState=currentReducer(currentState,action)}finally{isDispatching=!1}for(var listeners=currentListeners=nextListeners,i=0;i<listeners.length;i++){(0,listeners[i])()}return action}return dispatch({type:ActionTypes.INIT}),(_ref2={dispatch,subscribe,getState,replaceReducer:function replaceReducer(nextReducer){if("function"!=typeof nextReducer)throw new Error(formatProdErrorMessage(10));currentReducer=nextReducer,dispatch({type:ActionTypes.REPLACE})}})[$$observable]=function observable(){var _ref,outerSubscribe=subscribe;return(_ref={subscribe:function subscribe(observer){if("object"!=typeof observer||null===observer)throw new Error(formatProdErrorMessage(11));function observeState(){observer.next&&observer.next(getState())}return observeState(),{unsubscribe:outerSubscribe(observeState)}}})[$$observable]=function(){return this},_ref},_ref2}function bindActionCreator(actionCreator,dispatch){return function(){return dispatch(actionCreator.apply(this,arguments))}}function bindActionCreators(actionCreators,dispatch){if("function"==typeof actionCreators)return bindActionCreator(actionCreators,dispatch);if("object"!=typeof actionCreators||null===actionCreators)throw new Error(formatProdErrorMessage(16));var boundActionCreators={};for(var key in actionCreators){var actionCreator=actionCreators[key];"function"==typeof actionCreator&&(boundActionCreators[key]=bindActionCreator(actionCreator,dispatch))}return boundActionCreators}function compose(){for(var _len=arguments.length,funcs=new Array(_len),_key=0;_key<_len;_key++)funcs[_key]=arguments[_key];return 0===funcs.length?function(arg){return arg}:1===funcs.length?funcs[0]:funcs.reduce((function(a,b){return function(){return a(b.apply(void 0,arguments))}}))}__webpack_require__("./node_modules/react-beautiful-dnd/node_modules/prop-types/index.js");var Context_ReactReduxContext=react.createContext(null);var batch=function defaultNoopBatch(callback){callback()},getBatch=function getBatch(){return batch};var nullListeners={notify:function notify(){},get:function get(){return[]}};function Subscription_createSubscription(store,parentSub){var unsubscribe,listeners=nullListeners;function handleChangeWrapper(){subscription.onStateChange&&subscription.onStateChange()}function trySubscribe(){unsubscribe||(unsubscribe=parentSub?parentSub.addNestedSub(handleChangeWrapper):store.subscribe(handleChangeWrapper),listeners=function createListenerCollection(){var batch=getBatch(),first=null,last=null;return{clear:function clear(){first=null,last=null},notify:function notify(){batch((function(){for(var listener=first;listener;)listener.callback(),listener=listener.next}))},get:function get(){for(var listeners=[],listener=first;listener;)listeners.push(listener),listener=listener.next;return listeners},subscribe:function subscribe(callback){var isSubscribed=!0,listener=last={callback,next:null,prev:last};return listener.prev?listener.prev.next=listener:first=listener,function unsubscribe(){isSubscribed&&null!==first&&(isSubscribed=!1,listener.next?listener.next.prev=listener.prev:last=listener.prev,listener.prev?listener.prev.next=listener.next:first=listener.next)}}}}())}var subscription={addNestedSub:function addNestedSub(listener){return trySubscribe(),listeners.subscribe(listener)},notifyNestedSubs:function notifyNestedSubs(){listeners.notify()},handleChangeWrapper,isSubscribed:function isSubscribed(){return Boolean(unsubscribe)},trySubscribe,tryUnsubscribe:function tryUnsubscribe(){unsubscribe&&(unsubscribe(),unsubscribe=void 0,listeners.clear(),listeners=nullListeners)},getListeners:function getListeners(){return listeners}};return subscription}var useIsomorphicLayoutEffect_useIsomorphicLayoutEffect="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?react.useLayoutEffect:react.useEffect;const components_Provider=function Provider(_ref){var store=_ref.store,context=_ref.context,children=_ref.children,contextValue=(0,react.useMemo)((function(){var subscription=Subscription_createSubscription(store);return subscription.onStateChange=subscription.notifyNestedSubs,{store,subscription}}),[store]),previousState=(0,react.useMemo)((function(){return store.getState()}),[store]);useIsomorphicLayoutEffect_useIsomorphicLayoutEffect((function(){var subscription=contextValue.subscription;return subscription.trySubscribe(),previousState!==store.getState()&&subscription.notifyNestedSubs(),function(){subscription.tryUnsubscribe(),subscription.onStateChange=null}}),[contextValue,previousState]);var Context=context||Context_ReactReduxContext;return react.createElement(Context.Provider,{value:contextValue},children)};var objectWithoutPropertiesLoose=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),hoist_non_react_statics_cjs=__webpack_require__("./node_modules/react-beautiful-dnd/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"),hoist_non_react_statics_cjs_default=__webpack_require__.n(hoist_non_react_statics_cjs),react_is=__webpack_require__("./node_modules/react-beautiful-dnd/node_modules/react-redux/node_modules/react-is/index.js"),_excluded=["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"],_excluded2=["reactReduxForwardedRef"],EMPTY_ARRAY=[],NO_SUBSCRIPTION_ARRAY=[null,null];function storeStateUpdatesReducer(state,action){var updateCount=state[1];return[action.payload,updateCount+1]}function useIsomorphicLayoutEffectWithArgs(effectFunc,effectArgs,dependencies){useIsomorphicLayoutEffect_useIsomorphicLayoutEffect((function(){return effectFunc.apply(void 0,effectArgs)}),dependencies)}function captureWrapperProps(lastWrapperProps,lastChildProps,renderIsScheduled,wrapperProps,actualChildProps,childPropsFromStoreUpdate,notifyNestedSubs){lastWrapperProps.current=wrapperProps,lastChildProps.current=actualChildProps,renderIsScheduled.current=!1,childPropsFromStoreUpdate.current&&(childPropsFromStoreUpdate.current=null,notifyNestedSubs())}function subscribeUpdates(shouldHandleStateChanges,store,subscription,childPropsSelector,lastWrapperProps,lastChildProps,renderIsScheduled,childPropsFromStoreUpdate,notifyNestedSubs,forceComponentUpdateDispatch){if(shouldHandleStateChanges){var didUnsubscribe=!1,lastThrownError=null,checkForUpdates=function checkForUpdates(){if(!didUnsubscribe){var newChildProps,error,latestStoreState=store.getState();try{newChildProps=childPropsSelector(latestStoreState,lastWrapperProps.current)}catch(e){error=e,lastThrownError=e}error||(lastThrownError=null),newChildProps===lastChildProps.current?renderIsScheduled.current||notifyNestedSubs():(lastChildProps.current=newChildProps,childPropsFromStoreUpdate.current=newChildProps,renderIsScheduled.current=!0,forceComponentUpdateDispatch({type:"STORE_UPDATED",payload:{error}}))}};subscription.onStateChange=checkForUpdates,subscription.trySubscribe(),checkForUpdates();return function unsubscribeWrapper(){if(didUnsubscribe=!0,subscription.tryUnsubscribe(),subscription.onStateChange=null,lastThrownError)throw lastThrownError}}}var initStateUpdates=function initStateUpdates(){return[null,0]};function connectAdvanced(selectorFactory,_ref){void 0===_ref&&(_ref={});var _ref2=_ref,_ref2$getDisplayName=_ref2.getDisplayName,getDisplayName=void 0===_ref2$getDisplayName?function(name){return"ConnectAdvanced("+name+")"}:_ref2$getDisplayName,_ref2$methodName=_ref2.methodName,methodName=void 0===_ref2$methodName?"connectAdvanced":_ref2$methodName,_ref2$renderCountProp=_ref2.renderCountProp,renderCountProp=void 0===_ref2$renderCountProp?void 0:_ref2$renderCountProp,_ref2$shouldHandleSta=_ref2.shouldHandleStateChanges,shouldHandleStateChanges=void 0===_ref2$shouldHandleSta||_ref2$shouldHandleSta,_ref2$storeKey=_ref2.storeKey,storeKey=void 0===_ref2$storeKey?"store":_ref2$storeKey,_ref2$forwardRef=(_ref2.withRef,_ref2.forwardRef),forwardRef=void 0!==_ref2$forwardRef&&_ref2$forwardRef,_ref2$context=_ref2.context,context=void 0===_ref2$context?Context_ReactReduxContext:_ref2$context,connectOptions=(0,objectWithoutPropertiesLoose.A)(_ref2,_excluded),Context=context;return function wrapWithConnect(WrappedComponent){var wrappedComponentName=WrappedComponent.displayName||WrappedComponent.name||"Component",displayName=getDisplayName(wrappedComponentName),selectorFactoryOptions=(0,esm_extends.A)({},connectOptions,{getDisplayName,methodName,renderCountProp,shouldHandleStateChanges,storeKey,displayName,wrappedComponentName,WrappedComponent}),pure=connectOptions.pure;var usePureOnlyMemo=pure?react.useMemo:function(callback){return callback()};function ConnectFunction(props){var _useMemo=(0,react.useMemo)((function(){var reactReduxForwardedRef=props.reactReduxForwardedRef,wrapperProps=(0,objectWithoutPropertiesLoose.A)(props,_excluded2);return[props.context,reactReduxForwardedRef,wrapperProps]}),[props]),propsContext=_useMemo[0],reactReduxForwardedRef=_useMemo[1],wrapperProps=_useMemo[2],ContextToUse=(0,react.useMemo)((function(){return propsContext&&propsContext.Consumer&&(0,react_is.isContextConsumer)(react.createElement(propsContext.Consumer,null))?propsContext:Context}),[propsContext,Context]),contextValue=(0,react.useContext)(ContextToUse),didStoreComeFromProps=Boolean(props.store)&&Boolean(props.store.getState)&&Boolean(props.store.dispatch);Boolean(contextValue)&&Boolean(contextValue.store);var store=didStoreComeFromProps?props.store:contextValue.store,childPropsSelector=(0,react.useMemo)((function(){return function createChildSelector(store){return selectorFactory(store.dispatch,selectorFactoryOptions)}(store)}),[store]),_useMemo2=(0,react.useMemo)((function(){if(!shouldHandleStateChanges)return NO_SUBSCRIPTION_ARRAY;var subscription=Subscription_createSubscription(store,didStoreComeFromProps?null:contextValue.subscription),notifyNestedSubs=subscription.notifyNestedSubs.bind(subscription);return[subscription,notifyNestedSubs]}),[store,didStoreComeFromProps,contextValue]),subscription=_useMemo2[0],notifyNestedSubs=_useMemo2[1],overriddenContextValue=(0,react.useMemo)((function(){return didStoreComeFromProps?contextValue:(0,esm_extends.A)({},contextValue,{subscription})}),[didStoreComeFromProps,contextValue,subscription]),_useReducer=(0,react.useReducer)(storeStateUpdatesReducer,EMPTY_ARRAY,initStateUpdates),previousStateUpdateResult=_useReducer[0][0],forceComponentUpdateDispatch=_useReducer[1];if(previousStateUpdateResult&&previousStateUpdateResult.error)throw previousStateUpdateResult.error;var lastChildProps=(0,react.useRef)(),lastWrapperProps=(0,react.useRef)(wrapperProps),childPropsFromStoreUpdate=(0,react.useRef)(),renderIsScheduled=(0,react.useRef)(!1),actualChildProps=usePureOnlyMemo((function(){return childPropsFromStoreUpdate.current&&wrapperProps===lastWrapperProps.current?childPropsFromStoreUpdate.current:childPropsSelector(store.getState(),wrapperProps)}),[store,previousStateUpdateResult,wrapperProps]);useIsomorphicLayoutEffectWithArgs(captureWrapperProps,[lastWrapperProps,lastChildProps,renderIsScheduled,wrapperProps,actualChildProps,childPropsFromStoreUpdate,notifyNestedSubs]),useIsomorphicLayoutEffectWithArgs(subscribeUpdates,[shouldHandleStateChanges,store,subscription,childPropsSelector,lastWrapperProps,lastChildProps,renderIsScheduled,childPropsFromStoreUpdate,notifyNestedSubs,forceComponentUpdateDispatch],[store,subscription,childPropsSelector]);var renderedWrappedComponent=(0,react.useMemo)((function(){return react.createElement(WrappedComponent,(0,esm_extends.A)({},actualChildProps,{ref:reactReduxForwardedRef}))}),[reactReduxForwardedRef,WrappedComponent,actualChildProps]);return(0,react.useMemo)((function(){return shouldHandleStateChanges?react.createElement(ContextToUse.Provider,{value:overriddenContextValue},renderedWrappedComponent):renderedWrappedComponent}),[ContextToUse,renderedWrappedComponent,overriddenContextValue])}var Connect=pure?react.memo(ConnectFunction):ConnectFunction;if(Connect.WrappedComponent=WrappedComponent,Connect.displayName=ConnectFunction.displayName=displayName,forwardRef){var forwarded=react.forwardRef((function forwardConnectRef(props,ref){return react.createElement(Connect,(0,esm_extends.A)({},props,{reactReduxForwardedRef:ref}))}));return forwarded.displayName=displayName,forwarded.WrappedComponent=WrappedComponent,hoist_non_react_statics_cjs_default()(forwarded,WrappedComponent)}return hoist_non_react_statics_cjs_default()(Connect,WrappedComponent)}}function is(x,y){return x===y?0!==x||0!==y||1/x==1/y:x!=x&&y!=y}function shallowEqual(objA,objB){if(is(objA,objB))return!0;if("object"!=typeof objA||null===objA||"object"!=typeof objB||null===objB)return!1;var keysA=Object.keys(objA),keysB=Object.keys(objB);if(keysA.length!==keysB.length)return!1;for(var i=0;i<keysA.length;i++)if(!Object.prototype.hasOwnProperty.call(objB,keysA[i])||!is(objA[keysA[i]],objB[keysA[i]]))return!1;return!0}function wrapMapToPropsConstant(getConstant){return function initConstantSelector(dispatch,options){var constant=getConstant(dispatch,options);function constantSelector(){return constant}return constantSelector.dependsOnOwnProps=!1,constantSelector}}function getDependsOnOwnProps(mapToProps){return null!==mapToProps.dependsOnOwnProps&&void 0!==mapToProps.dependsOnOwnProps?Boolean(mapToProps.dependsOnOwnProps):1!==mapToProps.length}function wrapMapToPropsFunc(mapToProps,methodName){return function initProxySelector(dispatch,_ref){_ref.displayName;var proxy=function mapToPropsProxy(stateOrDispatch,ownProps){return proxy.dependsOnOwnProps?proxy.mapToProps(stateOrDispatch,ownProps):proxy.mapToProps(stateOrDispatch)};return proxy.dependsOnOwnProps=!0,proxy.mapToProps=function detectFactoryAndVerify(stateOrDispatch,ownProps){proxy.mapToProps=mapToProps,proxy.dependsOnOwnProps=getDependsOnOwnProps(mapToProps);var props=proxy(stateOrDispatch,ownProps);return"function"==typeof props&&(proxy.mapToProps=props,proxy.dependsOnOwnProps=getDependsOnOwnProps(props),props=proxy(stateOrDispatch,ownProps)),props},proxy}}const mapDispatchToProps=[function whenMapDispatchToPropsIsFunction(mapDispatchToProps){return"function"==typeof mapDispatchToProps?wrapMapToPropsFunc(mapDispatchToProps):void 0},function whenMapDispatchToPropsIsMissing(mapDispatchToProps){return mapDispatchToProps?void 0:wrapMapToPropsConstant((function(dispatch){return{dispatch}}))},function whenMapDispatchToPropsIsObject(mapDispatchToProps){return mapDispatchToProps&&"object"==typeof mapDispatchToProps?wrapMapToPropsConstant((function(dispatch){return function bindActionCreators_bindActionCreators(actionCreators,dispatch){var boundActionCreators={},_loop=function _loop(key){var actionCreator=actionCreators[key];"function"==typeof actionCreator&&(boundActionCreators[key]=function(){return dispatch(actionCreator.apply(void 0,arguments))})};for(var key in actionCreators)_loop(key);return boundActionCreators}(mapDispatchToProps,dispatch)})):void 0}];const mapStateToProps=[function whenMapStateToPropsIsFunction(mapStateToProps){return"function"==typeof mapStateToProps?wrapMapToPropsFunc(mapStateToProps):void 0},function whenMapStateToPropsIsMissing(mapStateToProps){return mapStateToProps?void 0:wrapMapToPropsConstant((function(){return{}}))}];function defaultMergeProps(stateProps,dispatchProps,ownProps){return(0,esm_extends.A)({},ownProps,stateProps,dispatchProps)}const mergeProps=[function whenMergePropsIsFunction(mergeProps){return"function"==typeof mergeProps?function wrapMergePropsFunc(mergeProps){return function initMergePropsProxy(dispatch,_ref){_ref.displayName;var mergedProps,pure=_ref.pure,areMergedPropsEqual=_ref.areMergedPropsEqual,hasRunOnce=!1;return function mergePropsProxy(stateProps,dispatchProps,ownProps){var nextMergedProps=mergeProps(stateProps,dispatchProps,ownProps);return hasRunOnce?pure&&areMergedPropsEqual(nextMergedProps,mergedProps)||(mergedProps=nextMergedProps):(hasRunOnce=!0,mergedProps=nextMergedProps),mergedProps}}}(mergeProps):void 0},function whenMergePropsIsOmitted(mergeProps){return mergeProps?void 0:function(){return defaultMergeProps}}];var selectorFactory_excluded=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function impureFinalPropsSelectorFactory(mapStateToProps,mapDispatchToProps,mergeProps,dispatch){return function impureFinalPropsSelector(state,ownProps){return mergeProps(mapStateToProps(state,ownProps),mapDispatchToProps(dispatch,ownProps),ownProps)}}function pureFinalPropsSelectorFactory(mapStateToProps,mapDispatchToProps,mergeProps,dispatch,_ref){var state,ownProps,stateProps,dispatchProps,mergedProps,areStatesEqual=_ref.areStatesEqual,areOwnPropsEqual=_ref.areOwnPropsEqual,areStatePropsEqual=_ref.areStatePropsEqual,hasRunAtLeastOnce=!1;function handleSubsequentCalls(nextState,nextOwnProps){var propsChanged=!areOwnPropsEqual(nextOwnProps,ownProps),stateChanged=!areStatesEqual(nextState,state);return state=nextState,ownProps=nextOwnProps,propsChanged&&stateChanged?function handleNewPropsAndNewState(){return stateProps=mapStateToProps(state,ownProps),mapDispatchToProps.dependsOnOwnProps&&(dispatchProps=mapDispatchToProps(dispatch,ownProps)),mergedProps=mergeProps(stateProps,dispatchProps,ownProps)}():propsChanged?function handleNewProps(){return mapStateToProps.dependsOnOwnProps&&(stateProps=mapStateToProps(state,ownProps)),mapDispatchToProps.dependsOnOwnProps&&(dispatchProps=mapDispatchToProps(dispatch,ownProps)),mergedProps=mergeProps(stateProps,dispatchProps,ownProps)}():stateChanged?function handleNewState(){var nextStateProps=mapStateToProps(state,ownProps),statePropsChanged=!areStatePropsEqual(nextStateProps,stateProps);return stateProps=nextStateProps,statePropsChanged&&(mergedProps=mergeProps(stateProps,dispatchProps,ownProps)),mergedProps}():mergedProps}return function pureFinalPropsSelector(nextState,nextOwnProps){return hasRunAtLeastOnce?handleSubsequentCalls(nextState,nextOwnProps):function handleFirstCall(firstState,firstOwnProps){return stateProps=mapStateToProps(state=firstState,ownProps=firstOwnProps),dispatchProps=mapDispatchToProps(dispatch,ownProps),mergedProps=mergeProps(stateProps,dispatchProps,ownProps),hasRunAtLeastOnce=!0,mergedProps}(nextState,nextOwnProps)}}function finalPropsSelectorFactory(dispatch,_ref2){var initMapStateToProps=_ref2.initMapStateToProps,initMapDispatchToProps=_ref2.initMapDispatchToProps,initMergeProps=_ref2.initMergeProps,options=(0,objectWithoutPropertiesLoose.A)(_ref2,selectorFactory_excluded),mapStateToProps=initMapStateToProps(dispatch,options),mapDispatchToProps=initMapDispatchToProps(dispatch,options),mergeProps=initMergeProps(dispatch,options);return(options.pure?pureFinalPropsSelectorFactory:impureFinalPropsSelectorFactory)(mapStateToProps,mapDispatchToProps,mergeProps,dispatch,options)}var connect_excluded=["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"];function match(arg,factories,name){for(var i=factories.length-1;i>=0;i--){var result=factories[i](arg);if(result)return result}return function(dispatch,options){throw new Error("Invalid value of type "+typeof arg+" for "+name+" argument when connecting component "+options.wrappedComponentName+".")}}function strictEqual(a,b){return a===b}function createConnect(_temp){var _ref=void 0===_temp?{}:_temp,_ref$connectHOC=_ref.connectHOC,connectHOC=void 0===_ref$connectHOC?connectAdvanced:_ref$connectHOC,_ref$mapStateToPropsF=_ref.mapStateToPropsFactories,mapStateToPropsFactories=void 0===_ref$mapStateToPropsF?mapStateToProps:_ref$mapStateToPropsF,_ref$mapDispatchToPro=_ref.mapDispatchToPropsFactories,mapDispatchToPropsFactories=void 0===_ref$mapDispatchToPro?mapDispatchToProps:_ref$mapDispatchToPro,_ref$mergePropsFactor=_ref.mergePropsFactories,mergePropsFactories=void 0===_ref$mergePropsFactor?mergeProps:_ref$mergePropsFactor,_ref$selectorFactory=_ref.selectorFactory,selectorFactory=void 0===_ref$selectorFactory?finalPropsSelectorFactory:_ref$selectorFactory;return function connect(mapStateToProps,mapDispatchToProps,mergeProps,_ref2){void 0===_ref2&&(_ref2={});var _ref3=_ref2,_ref3$pure=_ref3.pure,pure=void 0===_ref3$pure||_ref3$pure,_ref3$areStatesEqual=_ref3.areStatesEqual,areStatesEqual=void 0===_ref3$areStatesEqual?strictEqual:_ref3$areStatesEqual,_ref3$areOwnPropsEqua=_ref3.areOwnPropsEqual,areOwnPropsEqual=void 0===_ref3$areOwnPropsEqua?shallowEqual:_ref3$areOwnPropsEqua,_ref3$areStatePropsEq=_ref3.areStatePropsEqual,areStatePropsEqual=void 0===_ref3$areStatePropsEq?shallowEqual:_ref3$areStatePropsEq,_ref3$areMergedPropsE=_ref3.areMergedPropsEqual,areMergedPropsEqual=void 0===_ref3$areMergedPropsE?shallowEqual:_ref3$areMergedPropsE,extraOptions=(0,objectWithoutPropertiesLoose.A)(_ref3,connect_excluded),initMapStateToProps=match(mapStateToProps,mapStateToPropsFactories,"mapStateToProps"),initMapDispatchToProps=match(mapDispatchToProps,mapDispatchToPropsFactories,"mapDispatchToProps"),initMergeProps=match(mergeProps,mergePropsFactories,"mergeProps");return connectHOC(selectorFactory,(0,esm_extends.A)({methodName:"connect",getDisplayName:function getDisplayName(name){return"Connect("+name+")"},shouldHandleStateChanges:Boolean(mapStateToProps),initMapStateToProps,initMapDispatchToProps,initMergeProps,pure,areStatesEqual,areOwnPropsEqual,areStatePropsEqual,areMergedPropsEqual},extraOptions))}}const connect=createConnect();var react_dom=__webpack_require__("./node_modules/react-dom/index.js");function useMemoOne(getResult,inputs){var initial=(0,react.useState)((function(){return{inputs,result:getResult()}}))[0],isFirstRun=(0,react.useRef)(!0),committed=(0,react.useRef)(initial),cache=isFirstRun.current||Boolean(inputs&&committed.current.inputs&&function areInputsEqual(newInputs,lastInputs){if(newInputs.length!==lastInputs.length)return!1;for(var i=0;i<newInputs.length;i++)if(newInputs[i]!==lastInputs[i])return!1;return!0}(inputs,committed.current.inputs))?committed.current:{inputs,result:getResult()};return(0,react.useEffect)((function(){isFirstRun.current=!1,committed.current=cache}),[cache]),cache.result}!function setBatch(newBatch){batch=newBatch}(react_dom.unstable_batchedUpdates);var use_memo_one_esm_useMemo=useMemoOne,useCallback=function useCallbackOne(callback,inputs){return useMemoOne((function(){return callback}),inputs)};const tiny_invariant_esm=function invariant(condition,message){if(!condition)throw new Error("Invariant failed")};var getRect=function getRect(_ref){var top=_ref.top,right=_ref.right,bottom=_ref.bottom,left=_ref.left;return{top,right,bottom,left,width:right-left,height:bottom-top,x:left,y:top,center:{x:(right+left)/2,y:(bottom+top)/2}}},expand=function expand(target,expandBy){return{top:target.top-expandBy.top,left:target.left-expandBy.left,bottom:target.bottom+expandBy.bottom,right:target.right+expandBy.right}},shrink=function shrink(target,shrinkBy){return{top:target.top+shrinkBy.top,left:target.left+shrinkBy.left,bottom:target.bottom-shrinkBy.bottom,right:target.right-shrinkBy.right}},noSpacing={top:0,right:0,bottom:0,left:0},createBox=function createBox(_ref2){var borderBox=_ref2.borderBox,_ref2$margin=_ref2.margin,margin=void 0===_ref2$margin?noSpacing:_ref2$margin,_ref2$border=_ref2.border,border=void 0===_ref2$border?noSpacing:_ref2$border,_ref2$padding=_ref2.padding,padding=void 0===_ref2$padding?noSpacing:_ref2$padding,marginBox=getRect(expand(borderBox,margin)),paddingBox=getRect(shrink(borderBox,border)),contentBox=getRect(shrink(paddingBox,padding));return{marginBox,borderBox:getRect(borderBox),paddingBox,contentBox,margin,border,padding}},parse=function parse(raw){var value=raw.slice(0,-2);if("px"!==raw.slice(-2))return 0;var result=Number(value);return isNaN(result)&&tiny_invariant_esm(!1),result},offset=function offset(original,change){var borderBox=original.borderBox,border=original.border,margin=original.margin,padding=original.padding,shifted=function shift(target,shiftBy){return{top:target.top+shiftBy.y,left:target.left+shiftBy.x,bottom:target.bottom+shiftBy.y,right:target.right+shiftBy.x}}(borderBox,change);return createBox({borderBox:shifted,border,margin,padding})},withScroll=function withScroll(original,scroll){return void 0===scroll&&(scroll=function getWindowScroll(){return{x:window.pageXOffset,y:window.pageYOffset}}()),offset(original,scroll)},calculateBox=function calculateBox(borderBox,styles){var margin={top:parse(styles.marginTop),right:parse(styles.marginRight),bottom:parse(styles.marginBottom),left:parse(styles.marginLeft)},padding={top:parse(styles.paddingTop),right:parse(styles.paddingRight),bottom:parse(styles.paddingBottom),left:parse(styles.paddingLeft)},border={top:parse(styles.borderTopWidth),right:parse(styles.borderRightWidth),bottom:parse(styles.borderBottomWidth),left:parse(styles.borderLeftWidth)};return createBox({borderBox,margin,padding,border})},getBox=function getBox(el){var borderBox=el.getBoundingClientRect(),styles=window.getComputedStyle(el);return calculateBox(borderBox,styles)};function memoize_one_esm_areInputsEqual(newInputs,lastInputs){if(newInputs.length!==lastInputs.length)return!1;for(var i=0;i<newInputs.length;i++)if(newInputs[i]!==lastInputs[i])return!1;return!0}const memoize_one_esm=function memoizeOne(resultFn,isEqual){var lastThis;void 0===isEqual&&(isEqual=memoize_one_esm_areInputsEqual);var lastResult,lastArgs=[],calledOnce=!1;return function memoized(){for(var newArgs=[],_i=0;_i<arguments.length;_i++)newArgs[_i]=arguments[_i];return calledOnce&&lastThis===this&&isEqual(newArgs,lastArgs)||(lastResult=resultFn.apply(this,newArgs),calledOnce=!0,lastThis=this,lastArgs=newArgs),lastResult}};const raf_schd_esm=function rafSchd(fn){var lastArgs=[],frameId=null,wrapperFn=function wrapperFn(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];lastArgs=args,frameId||(frameId=requestAnimationFrame((function(){frameId=null,fn.apply(void 0,lastArgs)})))};return wrapperFn.cancel=function(){frameId&&(cancelAnimationFrame(frameId),frameId=null)},wrapperFn};function log(type,message){}log.bind(null,"warn"),log.bind(null,"error");function noop(){}function bindEvents(el,bindings,sharedOptions){var unbindings=bindings.map((function(binding){var options=function getOptions(shared,fromBinding){return(0,esm_extends.A)({},shared,{},fromBinding)}(sharedOptions,binding.options);return el.addEventListener(binding.eventName,binding.fn,options),function unbind(){el.removeEventListener(binding.eventName,binding.fn,options)}}));return function unbindAll(){unbindings.forEach((function(unbind){unbind()}))}}var isProduction$1=!0,react_beautiful_dnd_esm_prefix="Invariant failed";function RbdInvariant(message){this.message=message}function react_beautiful_dnd_esm_invariant(condition,message){if(!condition)throw new RbdInvariant(isProduction$1?react_beautiful_dnd_esm_prefix:react_beautiful_dnd_esm_prefix+": "+(message||""))}RbdInvariant.prototype.toString=function toString(){return this.message};var ErrorBoundary=function(_React$Component){function ErrorBoundary(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return(_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this).callbacks=null,_this.unbind=noop,_this.onWindowError=function(event){var callbacks=_this.getCallbacks();callbacks.isDragging()&&callbacks.tryAbort(),event.error instanceof RbdInvariant&&event.preventDefault()},_this.getCallbacks=function(){if(!_this.callbacks)throw new Error("Unable to find AppCallbacks in <ErrorBoundary/>");return _this.callbacks},_this.setCallbacks=function(callbacks){_this.callbacks=callbacks},_this}_inheritsLoose(ErrorBoundary,_React$Component);var _proto=ErrorBoundary.prototype;return _proto.componentDidMount=function componentDidMount(){this.unbind=bindEvents(window,[{eventName:"error",fn:this.onWindowError}])},_proto.componentDidCatch=function componentDidCatch(err){if(!(err instanceof RbdInvariant))throw err;this.setState({})},_proto.componentWillUnmount=function componentWillUnmount(){this.unbind()},_proto.render=function render(){return this.props.children(this.setCallbacks)},ErrorBoundary}(react.Component),position=function position(index){return index+1},withLocation=function withLocation(source,destination){var isInHomeList=source.droppableId===destination.droppableId,startPosition=position(source.index),endPosition=position(destination.index);return isInHomeList?"\n      You have moved the item from position "+startPosition+"\n      to position "+endPosition+"\n    ":"\n    You have moved the item from position "+startPosition+"\n    in list "+source.droppableId+"\n    to list "+destination.droppableId+"\n    in position "+endPosition+"\n  "},withCombine=function withCombine(id,source,combine){return source.droppableId===combine.droppableId?"\n      The item "+id+"\n      has been combined with "+combine.draggableId:"\n      The item "+id+"\n      in list "+source.droppableId+"\n      has been combined with "+combine.draggableId+"\n      in list "+combine.droppableId+"\n    "},returnedToStart=function returnedToStart(source){return"\n  The item has returned to its starting position\n  of "+position(source.index)+"\n"},preset={dragHandleUsageInstructions:"\n  Press space bar to start a drag.\n  When dragging you can use the arrow keys to move the item around and escape to cancel.\n  Some screen readers may require you to be in focus mode or to use your pass through key\n",onDragStart:function onDragStart(start){return"\n  You have lifted an item in position "+position(start.source.index)+"\n"},onDragUpdate:function onDragUpdate(update){var location=update.destination;if(location)return withLocation(update.source,location);var combine=update.combine;return combine?withCombine(update.draggableId,update.source,combine):"You are over an area that cannot be dropped on"},onDragEnd:function onDragEnd(result){if("CANCEL"===result.reason)return"\n      Movement cancelled.\n      "+returnedToStart(result.source)+"\n    ";var location=result.destination,combine=result.combine;return location?"\n      You have dropped the item.\n      "+withLocation(result.source,location)+"\n    ":combine?"\n      You have dropped the item.\n      "+withCombine(result.draggableId,result.source,combine)+"\n    ":"\n    The item has been dropped while not over a drop area.\n    "+returnedToStart(result.source)+"\n  "}},origin={x:0,y:0},add=function add(point1,point2){return{x:point1.x+point2.x,y:point1.y+point2.y}},subtract=function subtract(point1,point2){return{x:point1.x-point2.x,y:point1.y-point2.y}},isEqual=function isEqual(point1,point2){return point1.x===point2.x&&point1.y===point2.y},negate=function negate(point){return{x:0!==point.x?-point.x:0,y:0!==point.y?-point.y:0}},patch=function patch(line,value,otherValue){var _ref;return void 0===otherValue&&(otherValue=0),(_ref={})[line]=value,_ref["x"===line?"y":"x"]=otherValue,_ref},distance=function distance(point1,point2){return Math.sqrt(Math.pow(point2.x-point1.x,2)+Math.pow(point2.y-point1.y,2))},closest=function closest(target,points){return Math.min.apply(Math,points.map((function(point){return distance(target,point)})))},apply=function apply(fn){return function(point){return{x:fn(point.x),y:fn(point.y)}}},offsetByPosition=function offsetByPosition(spacing,point){return{top:spacing.top+point.y,left:spacing.left+point.x,bottom:spacing.bottom+point.y,right:spacing.right+point.x}},getCorners=function getCorners(spacing){return[{x:spacing.left,y:spacing.top},{x:spacing.right,y:spacing.top},{x:spacing.left,y:spacing.bottom},{x:spacing.right,y:spacing.bottom}]},clip=function clip(target,frame){return frame&&frame.shouldClipSubject?function(frame,subject){var result=getRect({top:Math.max(subject.top,frame.top),right:Math.min(subject.right,frame.right),bottom:Math.min(subject.bottom,frame.bottom),left:Math.max(subject.left,frame.left)});return result.width<=0||result.height<=0?null:result}(frame.pageMarginBox,target):getRect(target)},getSubject=function(_ref){var page=_ref.page,withPlaceholder=_ref.withPlaceholder,axis=_ref.axis,frame=_ref.frame,scrolled=function scroll(target,frame){return frame?offsetByPosition(target,frame.scroll.diff.displacement):target}(page.marginBox,frame),increased=function increase(target,axis,withPlaceholder){var _extends2;return withPlaceholder&&withPlaceholder.increasedBy?(0,esm_extends.A)({},target,((_extends2={})[axis.end]=target[axis.end]+withPlaceholder.increasedBy[axis.line],_extends2)):target}(scrolled,axis,withPlaceholder);return{page,withPlaceholder,active:clip(increased,frame)}},scrollDroppable=function(droppable,newScroll){droppable.frame||react_beautiful_dnd_esm_invariant(!1);var scrollable=droppable.frame,scrollDiff=subtract(newScroll,scrollable.scroll.initial),scrollDisplacement=negate(scrollDiff),frame=(0,esm_extends.A)({},scrollable,{scroll:{initial:scrollable.scroll.initial,current:newScroll,diff:{value:scrollDiff,displacement:scrollDisplacement},max:scrollable.scroll.max}}),subject=getSubject({page:droppable.subject.page,withPlaceholder:droppable.subject.withPlaceholder,axis:droppable.axis,frame});return(0,esm_extends.A)({},droppable,{frame,subject})};function values(map){return Object.values?Object.values(map):Object.keys(map).map((function(key){return map[key]}))}function findIndex(list,predicate){if(list.findIndex)return list.findIndex(predicate);for(var i=0;i<list.length;i++)if(predicate(list[i]))return i;return-1}function find(list,predicate){if(list.find)return list.find(predicate);var index=findIndex(list,predicate);return-1!==index?list[index]:void 0}function toArray(list){return Array.prototype.slice.call(list)}var toDroppableMap=memoize_one_esm((function(droppables){return droppables.reduce((function(previous,current){return previous[current.descriptor.id]=current,previous}),{})})),toDraggableMap=memoize_one_esm((function(draggables){return draggables.reduce((function(previous,current){return previous[current.descriptor.id]=current,previous}),{})})),toDroppableList=memoize_one_esm((function(droppables){return values(droppables)})),toDraggableList=memoize_one_esm((function(draggables){return values(draggables)})),getDraggablesInsideDroppable=memoize_one_esm((function(droppableId,draggables){var result=toDraggableList(draggables).filter((function(draggable){return droppableId===draggable.descriptor.droppableId})).sort((function(a,b){return a.descriptor.index-b.descriptor.index}));return result}));function tryGetDestination(impact){return impact.at&&"REORDER"===impact.at.type?impact.at.destination:null}function tryGetCombine(impact){return impact.at&&"COMBINE"===impact.at.type?impact.at.combine:null}var removeDraggableFromList=memoize_one_esm((function(remove,list){return list.filter((function(item){return item.descriptor.id!==remove.descriptor.id}))})),isHomeOf=function(draggable,destination){return draggable.descriptor.droppableId===destination.descriptor.id},noDisplacedBy={point:origin,value:0},emptyGroups={invisible:{},visible:{},all:[]},noImpact={displaced:emptyGroups,displacedBy:noDisplacedBy,at:null},isWithin=function(lowerBound,upperBound){return function(value){return lowerBound<=value&&value<=upperBound}},isPartiallyVisibleThroughFrame=function(frame){var isWithinVertical=isWithin(frame.top,frame.bottom),isWithinHorizontal=isWithin(frame.left,frame.right);return function(subject){if(isWithinVertical(subject.top)&&isWithinVertical(subject.bottom)&&isWithinHorizontal(subject.left)&&isWithinHorizontal(subject.right))return!0;var isPartiallyVisibleVertically=isWithinVertical(subject.top)||isWithinVertical(subject.bottom),isPartiallyVisibleHorizontally=isWithinHorizontal(subject.left)||isWithinHorizontal(subject.right);if(isPartiallyVisibleVertically&&isPartiallyVisibleHorizontally)return!0;var isBiggerVertically=subject.top<frame.top&&subject.bottom>frame.bottom,isBiggerHorizontally=subject.left<frame.left&&subject.right>frame.right;return!(!isBiggerVertically||!isBiggerHorizontally)||(isBiggerVertically&&isPartiallyVisibleHorizontally||isBiggerHorizontally&&isPartiallyVisibleVertically)}},isTotallyVisibleThroughFrame=function(frame){var isWithinVertical=isWithin(frame.top,frame.bottom),isWithinHorizontal=isWithin(frame.left,frame.right);return function(subject){return isWithinVertical(subject.top)&&isWithinVertical(subject.bottom)&&isWithinHorizontal(subject.left)&&isWithinHorizontal(subject.right)}},vertical={direction:"vertical",line:"y",crossAxisLine:"x",start:"top",end:"bottom",size:"height",crossAxisStart:"left",crossAxisEnd:"right",crossAxisSize:"width"},horizontal={direction:"horizontal",line:"x",crossAxisLine:"y",start:"left",end:"right",size:"width",crossAxisStart:"top",crossAxisEnd:"bottom",crossAxisSize:"height"},isVisible=function isVisible(_ref){var toBeDisplaced=_ref.target,destination=_ref.destination,viewport=_ref.viewport,withDroppableDisplacement=_ref.withDroppableDisplacement,isVisibleThroughFrameFn=_ref.isVisibleThroughFrameFn,displacedTarget=withDroppableDisplacement?function getDroppableDisplaced(target,destination){var displacement=destination.frame?destination.frame.scroll.diff.displacement:origin;return offsetByPosition(target,displacement)}(toBeDisplaced,destination):toBeDisplaced;return function isVisibleInDroppable(target,destination,isVisibleThroughFrameFn){return!!destination.subject.active&&isVisibleThroughFrameFn(destination.subject.active)(target)}(displacedTarget,destination,isVisibleThroughFrameFn)&&function isVisibleInViewport(target,viewport,isVisibleThroughFrameFn){return isVisibleThroughFrameFn(viewport)(target)}(displacedTarget,viewport,isVisibleThroughFrameFn)},isPartiallyVisible=function isPartiallyVisible(args){return isVisible((0,esm_extends.A)({},args,{isVisibleThroughFrameFn:isPartiallyVisibleThroughFrame}))},isTotallyVisible=function isTotallyVisible(args){return isVisible((0,esm_extends.A)({},args,{isVisibleThroughFrameFn:isTotallyVisibleThroughFrame}))},getShouldAnimate=function getShouldAnimate(id,last,forceShouldAnimate){if("boolean"==typeof forceShouldAnimate)return forceShouldAnimate;if(!last)return!0;var invisible=last.invisible,visible=last.visible;if(invisible[id])return!1;var previous=visible[id];return!previous||previous.shouldAnimate};function getDisplacementGroups(_ref){var afterDragging=_ref.afterDragging,destination=_ref.destination,displacedBy=_ref.displacedBy,viewport=_ref.viewport,forceShouldAnimate=_ref.forceShouldAnimate,last=_ref.last;return afterDragging.reduce((function process(groups,draggable){var target=function getTarget(draggable,displacedBy){var marginBox=draggable.page.marginBox,expandBy={top:displacedBy.point.y,right:0,bottom:0,left:displacedBy.point.x};return getRect(expand(marginBox,expandBy))}(draggable,displacedBy),id=draggable.descriptor.id;if(groups.all.push(id),!isPartiallyVisible({target,destination,viewport,withDroppableDisplacement:!0}))return groups.invisible[draggable.descriptor.id]=!0,groups;var displacement={draggableId:id,shouldAnimate:getShouldAnimate(id,last,forceShouldAnimate)};return groups.visible[id]=displacement,groups}),{all:[],visible:{},invisible:{}})}function goAtEnd(_ref){var insideDestination=_ref.insideDestination,inHomeList=_ref.inHomeList,displacedBy=_ref.displacedBy,destination=_ref.destination,newIndex=function getIndexOfLastItem(draggables,options){if(!draggables.length)return 0;var indexOfLastItem=draggables[draggables.length-1].descriptor.index;return options.inHomeList?indexOfLastItem:indexOfLastItem+1}(insideDestination,{inHomeList});return{displaced:emptyGroups,displacedBy,at:{type:"REORDER",destination:{droppableId:destination.descriptor.id,index:newIndex}}}}function calculateReorderImpact(_ref2){var draggable=_ref2.draggable,insideDestination=_ref2.insideDestination,destination=_ref2.destination,viewport=_ref2.viewport,displacedBy=_ref2.displacedBy,last=_ref2.last,index=_ref2.index,forceShouldAnimate=_ref2.forceShouldAnimate,inHomeList=isHomeOf(draggable,destination);if(null==index)return goAtEnd({insideDestination,inHomeList,displacedBy,destination});var match=find(insideDestination,(function(item){return item.descriptor.index===index}));if(!match)return goAtEnd({insideDestination,inHomeList,displacedBy,destination});var withoutDragging=removeDraggableFromList(draggable,insideDestination),sliceFrom=insideDestination.indexOf(match);return{displaced:getDisplacementGroups({afterDragging:withoutDragging.slice(sliceFrom),destination,displacedBy,last,viewport:viewport.frame,forceShouldAnimate}),displacedBy,at:{type:"REORDER",destination:{droppableId:destination.descriptor.id,index}}}}function didStartAfterCritical(draggableId,afterCritical){return Boolean(afterCritical.effected[draggableId])}var moveToNextIndex=function(_ref){var isMovingForward=_ref.isMovingForward,isInHomeList=_ref.isInHomeList,draggable=_ref.draggable,draggables=_ref.draggables,destination=_ref.destination,insideDestination=_ref.insideDestination,previousImpact=_ref.previousImpact,viewport=_ref.viewport,afterCritical=_ref.afterCritical,wasAt=previousImpact.at;if(wasAt||react_beautiful_dnd_esm_invariant(!1),"REORDER"===wasAt.type){var _newIndex=function(_ref){var isMovingForward=_ref.isMovingForward,isInHomeList=_ref.isInHomeList,insideDestination=_ref.insideDestination,location=_ref.location;if(!insideDestination.length)return null;var currentIndex=location.index,proposedIndex=isMovingForward?currentIndex+1:currentIndex-1,firstIndex=insideDestination[0].descriptor.index,lastIndex=insideDestination[insideDestination.length-1].descriptor.index;return proposedIndex<firstIndex||proposedIndex>(isInHomeList?lastIndex:lastIndex+1)?null:proposedIndex}({isMovingForward,isInHomeList,location:wasAt.destination,insideDestination});return null==_newIndex?null:calculateReorderImpact({draggable,insideDestination,destination,viewport,last:previousImpact.displaced,displacedBy:previousImpact.displacedBy,index:_newIndex})}var newIndex=function(_ref){var isMovingForward=_ref.isMovingForward,destination=_ref.destination,draggables=_ref.draggables,combine=_ref.combine,afterCritical=_ref.afterCritical;if(!destination.isCombineEnabled)return null;var combineId=combine.draggableId,combineWithIndex=draggables[combineId].descriptor.index;return didStartAfterCritical(combineId,afterCritical)?isMovingForward?combineWithIndex:combineWithIndex-1:isMovingForward?combineWithIndex+1:combineWithIndex}({isMovingForward,destination,displaced:previousImpact.displaced,draggables,combine:wasAt.combine,afterCritical});return null==newIndex?null:calculateReorderImpact({draggable,insideDestination,destination,viewport,last:previousImpact.displaced,displacedBy:previousImpact.displacedBy,index:newIndex})},whenCombining=function(_ref){var afterCritical=_ref.afterCritical,impact=_ref.impact,draggables=_ref.draggables,combine=tryGetCombine(impact);combine||react_beautiful_dnd_esm_invariant(!1);var combineWith=combine.draggableId,center=draggables[combineWith].page.borderBox.center,displaceBy=function(_ref){var displaced=_ref.displaced,afterCritical=_ref.afterCritical,combineWith=_ref.combineWith,displacedBy=_ref.displacedBy,isDisplaced=Boolean(displaced.visible[combineWith]||displaced.invisible[combineWith]);return didStartAfterCritical(combineWith,afterCritical)?isDisplaced?origin:negate(displacedBy.point):isDisplaced?displacedBy.point:origin}({displaced:impact.displaced,afterCritical,combineWith,displacedBy:impact.displacedBy});return add(center,displaceBy)},distanceFromStartToBorderBoxCenter=function distanceFromStartToBorderBoxCenter(axis,box){return box.margin[axis.start]+box.borderBox[axis.size]/2},getCrossAxisBorderBoxCenter=function getCrossAxisBorderBoxCenter(axis,target,isMoving){return target[axis.crossAxisStart]+isMoving.margin[axis.crossAxisStart]+isMoving.borderBox[axis.crossAxisSize]/2},goAfter=function goAfter(_ref){var axis=_ref.axis,moveRelativeTo=_ref.moveRelativeTo,isMoving=_ref.isMoving;return patch(axis.line,moveRelativeTo.marginBox[axis.end]+distanceFromStartToBorderBoxCenter(axis,isMoving),getCrossAxisBorderBoxCenter(axis,moveRelativeTo.marginBox,isMoving))},goBefore=function goBefore(_ref2){var axis=_ref2.axis,moveRelativeTo=_ref2.moveRelativeTo,isMoving=_ref2.isMoving;return patch(axis.line,moveRelativeTo.marginBox[axis.start]-function distanceFromEndToBorderBoxCenter(axis,box){return box.margin[axis.end]+box.borderBox[axis.size]/2}(axis,isMoving),getCrossAxisBorderBoxCenter(axis,moveRelativeTo.marginBox,isMoving))},whenReordering=function(_ref){var impact=_ref.impact,draggable=_ref.draggable,draggables=_ref.draggables,droppable=_ref.droppable,afterCritical=_ref.afterCritical,insideDestination=getDraggablesInsideDroppable(droppable.descriptor.id,draggables),draggablePage=draggable.page,axis=droppable.axis;if(!insideDestination.length)return function goIntoStart(_ref3){var axis=_ref3.axis,moveInto=_ref3.moveInto,isMoving=_ref3.isMoving;return patch(axis.line,moveInto.contentBox[axis.start]+distanceFromStartToBorderBoxCenter(axis,isMoving),getCrossAxisBorderBoxCenter(axis,moveInto.contentBox,isMoving))}({axis,moveInto:droppable.page,isMoving:draggablePage});var displaced=impact.displaced,displacedBy=impact.displacedBy,closestAfter=displaced.all[0];if(closestAfter){var closest=draggables[closestAfter];if(didStartAfterCritical(closestAfter,afterCritical))return goBefore({axis,moveRelativeTo:closest.page,isMoving:draggablePage});var withDisplacement=offset(closest.page,displacedBy.point);return goBefore({axis,moveRelativeTo:withDisplacement,isMoving:draggablePage})}var last=insideDestination[insideDestination.length-1];if(last.descriptor.id===draggable.descriptor.id)return draggablePage.borderBox.center;if(didStartAfterCritical(last.descriptor.id,afterCritical)){var page=offset(last.page,negate(afterCritical.displacedBy.point));return goAfter({axis,moveRelativeTo:page,isMoving:draggablePage})}return goAfter({axis,moveRelativeTo:last.page,isMoving:draggablePage})},withDroppableDisplacement=function(droppable,point){var frame=droppable.frame;return frame?add(point,frame.scroll.diff.displacement):point},getPageBorderBoxCenterFromImpact=function(args){var withoutDisplacement=function getResultWithoutDroppableDisplacement(_ref){var impact=_ref.impact,draggable=_ref.draggable,droppable=_ref.droppable,draggables=_ref.draggables,afterCritical=_ref.afterCritical,original=draggable.page.borderBox.center,at=impact.at;return droppable&&at?"REORDER"===at.type?whenReordering({impact,draggable,draggables,droppable,afterCritical}):whenCombining({impact,draggables,afterCritical}):original}(args),droppable=args.droppable;return droppable?withDroppableDisplacement(droppable,withoutDisplacement):withoutDisplacement},scrollViewport=function(viewport,newScroll){var diff=subtract(newScroll,viewport.scroll.initial),displacement=negate(diff);return{frame:getRect({top:newScroll.y,bottom:newScroll.y+viewport.frame.height,left:newScroll.x,right:newScroll.x+viewport.frame.width}),scroll:{initial:viewport.scroll.initial,max:viewport.scroll.max,current:newScroll,diff:{value:diff,displacement}}}};function getDraggables(ids,draggables){return ids.map((function(id){return draggables[id]}))}var getClientFromPageBorderBoxCenter=function(_ref){var pageBorderBoxCenter=_ref.pageBorderBoxCenter,draggable=_ref.draggable,withoutPageScrollChange=function(viewport,point){return add(viewport.scroll.diff.displacement,point)}(_ref.viewport,pageBorderBoxCenter),offset=subtract(withoutPageScrollChange,draggable.page.borderBox.center);return add(draggable.client.borderBox.center,offset)},isTotallyVisibleInNewLocation=function(_ref){var draggable=_ref.draggable,destination=_ref.destination,newPageBorderBoxCenter=_ref.newPageBorderBoxCenter,viewport=_ref.viewport,withDroppableDisplacement=_ref.withDroppableDisplacement,_ref$onlyOnMainAxis=_ref.onlyOnMainAxis,onlyOnMainAxis=void 0!==_ref$onlyOnMainAxis&&_ref$onlyOnMainAxis,changeNeeded=subtract(newPageBorderBoxCenter,draggable.page.borderBox.center),args={target:offsetByPosition(draggable.page.borderBox,changeNeeded),destination,withDroppableDisplacement,viewport};return onlyOnMainAxis?function isTotallyVisibleOnAxis(args){return isVisible((0,esm_extends.A)({},args,{isVisibleThroughFrameFn:(axis=args.destination.axis,function(frame){var isWithinVertical=isWithin(frame.top,frame.bottom),isWithinHorizontal=isWithin(frame.left,frame.right);return function(subject){return axis===vertical?isWithinVertical(subject.top)&&isWithinVertical(subject.bottom):isWithinHorizontal(subject.left)&&isWithinHorizontal(subject.right)}})}));var axis}(args):isTotallyVisible(args)},moveToNextPlace=function(_ref){var isMovingForward=_ref.isMovingForward,draggable=_ref.draggable,destination=_ref.destination,draggables=_ref.draggables,previousImpact=_ref.previousImpact,viewport=_ref.viewport,previousPageBorderBoxCenter=_ref.previousPageBorderBoxCenter,previousClientSelection=_ref.previousClientSelection,afterCritical=_ref.afterCritical;if(!destination.isEnabled)return null;var insideDestination=getDraggablesInsideDroppable(destination.descriptor.id,draggables),isInHomeList=isHomeOf(draggable,destination),impact=function(_ref){var isMovingForward=_ref.isMovingForward,draggable=_ref.draggable,destination=_ref.destination,insideDestination=_ref.insideDestination,previousImpact=_ref.previousImpact;if(!destination.isCombineEnabled)return null;if(!tryGetDestination(previousImpact))return null;function getImpact(target){var at={type:"COMBINE",combine:{draggableId:target,droppableId:destination.descriptor.id}};return(0,esm_extends.A)({},previousImpact,{at})}var all=previousImpact.displaced.all,closestId=all.length?all[0]:null;if(isMovingForward)return closestId?getImpact(closestId):null;var withoutDraggable=removeDraggableFromList(draggable,insideDestination);if(!closestId)return withoutDraggable.length?getImpact(withoutDraggable[withoutDraggable.length-1].descriptor.id):null;var indexOfClosest=findIndex(withoutDraggable,(function(d){return d.descriptor.id===closestId}));-1===indexOfClosest&&react_beautiful_dnd_esm_invariant(!1);var proposedIndex=indexOfClosest-1;return proposedIndex<0?null:getImpact(withoutDraggable[proposedIndex].descriptor.id)}({isMovingForward,draggable,destination,insideDestination,previousImpact})||moveToNextIndex({isMovingForward,isInHomeList,draggable,draggables,destination,insideDestination,previousImpact,viewport,afterCritical});if(!impact)return null;var pageBorderBoxCenter=getPageBorderBoxCenterFromImpact({impact,draggable,droppable:destination,draggables,afterCritical});if(isTotallyVisibleInNewLocation({draggable,destination,newPageBorderBoxCenter:pageBorderBoxCenter,viewport:viewport.frame,withDroppableDisplacement:!1,onlyOnMainAxis:!0}))return{clientSelection:getClientFromPageBorderBoxCenter({pageBorderBoxCenter,draggable,viewport}),impact,scrollJumpRequest:null};var distance=subtract(pageBorderBoxCenter,previousPageBorderBoxCenter),cautious=function(_ref){var impact=_ref.impact,viewport=_ref.viewport,destination=_ref.destination,draggables=_ref.draggables,maxScrollChange=_ref.maxScrollChange,scrolledViewport=scrollViewport(viewport,add(viewport.scroll.current,maxScrollChange)),scrolledDroppable=destination.frame?scrollDroppable(destination,add(destination.frame.scroll.current,maxScrollChange)):destination,last=impact.displaced,withViewportScroll=getDisplacementGroups({afterDragging:getDraggables(last.all,draggables),destination,displacedBy:impact.displacedBy,viewport:scrolledViewport.frame,last,forceShouldAnimate:!1}),withDroppableScroll=getDisplacementGroups({afterDragging:getDraggables(last.all,draggables),destination:scrolledDroppable,displacedBy:impact.displacedBy,viewport:viewport.frame,last,forceShouldAnimate:!1}),invisible={},visible={},groups=[last,withViewportScroll,withDroppableScroll];return last.all.forEach((function(id){var displacement=function tryGetVisible(id,groups){for(var i=0;i<groups.length;i++){var displacement=groups[i].visible[id];if(displacement)return displacement}return null}(id,groups);displacement?visible[id]=displacement:invisible[id]=!0})),(0,esm_extends.A)({},impact,{displaced:{all:last.all,invisible,visible}})}({impact,viewport,destination,draggables,maxScrollChange:distance});return{clientSelection:previousClientSelection,impact:cautious,scrollJumpRequest:distance}},getKnownActive=function getKnownActive(droppable){var rect=droppable.subject.active;return rect||react_beautiful_dnd_esm_invariant(!1),rect},getCurrentPageBorderBoxCenter=function getCurrentPageBorderBoxCenter(draggable,afterCritical){var original=draggable.page.borderBox.center;return didStartAfterCritical(draggable.descriptor.id,afterCritical)?subtract(original,afterCritical.displacedBy.point):original},getCurrentPageBorderBox=function getCurrentPageBorderBox(draggable,afterCritical){var original=draggable.page.borderBox;return didStartAfterCritical(draggable.descriptor.id,afterCritical)?offsetByPosition(original,negate(afterCritical.displacedBy.point)):original},getDisplacedBy=memoize_one_esm((function getDisplacedBy(axis,displaceBy){var displacement=displaceBy[axis.line];return{value:displacement,point:patch(axis.line,displacement)}})),withMaxScroll=function withMaxScroll(frame,max){return(0,esm_extends.A)({},frame,{scroll:(0,esm_extends.A)({},frame.scroll,{max})})},addPlaceholder=function addPlaceholder(droppable,draggable,draggables){var frame=droppable.frame;isHomeOf(draggable,droppable)&&react_beautiful_dnd_esm_invariant(!1),droppable.subject.withPlaceholder&&react_beautiful_dnd_esm_invariant(!1);var placeholderSize=getDisplacedBy(droppable.axis,draggable.displaceBy).point,requiredGrowth=function getRequiredGrowthForPlaceholder(droppable,placeholderSize,draggables){var axis=droppable.axis;if("virtual"===droppable.descriptor.mode)return patch(axis.line,placeholderSize[axis.line]);var availableSpace=droppable.subject.page.contentBox[axis.size],needsToGrowBy=getDraggablesInsideDroppable(droppable.descriptor.id,draggables).reduce((function(sum,dimension){return sum+dimension.client.marginBox[axis.size]}),0)+placeholderSize[axis.line]-availableSpace;return needsToGrowBy<=0?null:patch(axis.line,needsToGrowBy)}(droppable,placeholderSize,draggables),added={placeholderSize,increasedBy:requiredGrowth,oldFrameMaxScroll:droppable.frame?droppable.frame.scroll.max:null};if(!frame){var _subject=getSubject({page:droppable.subject.page,withPlaceholder:added,axis:droppable.axis,frame:droppable.frame});return(0,esm_extends.A)({},droppable,{subject:_subject})}var maxScroll=requiredGrowth?add(frame.scroll.max,requiredGrowth):frame.scroll.max,newFrame=withMaxScroll(frame,maxScroll),subject=getSubject({page:droppable.subject.page,withPlaceholder:added,axis:droppable.axis,frame:newFrame});return(0,esm_extends.A)({},droppable,{subject,frame:newFrame})},moveCrossAxis=function(_ref){var isMovingForward=_ref.isMovingForward,previousPageBorderBoxCenter=_ref.previousPageBorderBoxCenter,draggable=_ref.draggable,isOver=_ref.isOver,draggables=_ref.draggables,droppables=_ref.droppables,viewport=_ref.viewport,afterCritical=_ref.afterCritical,destination=function(_ref){var isMovingForward=_ref.isMovingForward,pageBorderBoxCenter=_ref.pageBorderBoxCenter,source=_ref.source,droppables=_ref.droppables,viewport=_ref.viewport,active=source.subject.active;if(!active)return null;var axis=source.axis,isBetweenSourceClipped=isWithin(active[axis.start],active[axis.end]),candidates=toDroppableList(droppables).filter((function(droppable){return droppable!==source})).filter((function(droppable){return droppable.isEnabled})).filter((function(droppable){return Boolean(droppable.subject.active)})).filter((function(droppable){return isPartiallyVisibleThroughFrame(viewport.frame)(getKnownActive(droppable))})).filter((function(droppable){var activeOfTarget=getKnownActive(droppable);return isMovingForward?active[axis.crossAxisEnd]<activeOfTarget[axis.crossAxisEnd]:activeOfTarget[axis.crossAxisStart]<active[axis.crossAxisStart]})).filter((function(droppable){var activeOfTarget=getKnownActive(droppable),isBetweenDestinationClipped=isWithin(activeOfTarget[axis.start],activeOfTarget[axis.end]);return isBetweenSourceClipped(activeOfTarget[axis.start])||isBetweenSourceClipped(activeOfTarget[axis.end])||isBetweenDestinationClipped(active[axis.start])||isBetweenDestinationClipped(active[axis.end])})).sort((function(a,b){var first=getKnownActive(a)[axis.crossAxisStart],second=getKnownActive(b)[axis.crossAxisStart];return isMovingForward?first-second:second-first})).filter((function(droppable,index,array){return getKnownActive(droppable)[axis.crossAxisStart]===getKnownActive(array[0])[axis.crossAxisStart]}));if(!candidates.length)return null;if(1===candidates.length)return candidates[0];var contains=candidates.filter((function(droppable){return isWithin(getKnownActive(droppable)[axis.start],getKnownActive(droppable)[axis.end])(pageBorderBoxCenter[axis.line])}));return 1===contains.length?contains[0]:contains.length>1?contains.sort((function(a,b){return getKnownActive(a)[axis.start]-getKnownActive(b)[axis.start]}))[0]:candidates.sort((function(a,b){var first=closest(pageBorderBoxCenter,getCorners(getKnownActive(a))),second=closest(pageBorderBoxCenter,getCorners(getKnownActive(b)));return first!==second?first-second:getKnownActive(a)[axis.start]-getKnownActive(b)[axis.start]}))[0]}({isMovingForward,pageBorderBoxCenter:previousPageBorderBoxCenter,source:isOver,droppables,viewport});if(!destination)return null;var insideDestination=getDraggablesInsideDroppable(destination.descriptor.id,draggables),moveRelativeTo=function(_ref){var pageBorderBoxCenter=_ref.pageBorderBoxCenter,viewport=_ref.viewport,destination=_ref.destination,insideDestination=_ref.insideDestination,afterCritical=_ref.afterCritical,sorted=insideDestination.filter((function(draggable){return isTotallyVisible({target:getCurrentPageBorderBox(draggable,afterCritical),destination,viewport:viewport.frame,withDroppableDisplacement:!0})})).sort((function(a,b){var distanceToA=distance(pageBorderBoxCenter,withDroppableDisplacement(destination,getCurrentPageBorderBoxCenter(a,afterCritical))),distanceToB=distance(pageBorderBoxCenter,withDroppableDisplacement(destination,getCurrentPageBorderBoxCenter(b,afterCritical)));return distanceToA<distanceToB?-1:distanceToB<distanceToA?1:a.descriptor.index-b.descriptor.index}));return sorted[0]||null}({pageBorderBoxCenter:previousPageBorderBoxCenter,viewport,destination,insideDestination,afterCritical}),impact=function(_ref){var previousPageBorderBoxCenter=_ref.previousPageBorderBoxCenter,moveRelativeTo=_ref.moveRelativeTo,insideDestination=_ref.insideDestination,draggable=_ref.draggable,draggables=_ref.draggables,destination=_ref.destination,viewport=_ref.viewport,afterCritical=_ref.afterCritical;if(!moveRelativeTo){if(insideDestination.length)return null;var proposed={displaced:emptyGroups,displacedBy:noDisplacedBy,at:{type:"REORDER",destination:{droppableId:destination.descriptor.id,index:0}}},proposedPageBorderBoxCenter=getPageBorderBoxCenterFromImpact({impact:proposed,draggable,droppable:destination,draggables,afterCritical}),withPlaceholder=isHomeOf(draggable,destination)?destination:addPlaceholder(destination,draggable,draggables);return isTotallyVisibleInNewLocation({draggable,destination:withPlaceholder,newPageBorderBoxCenter:proposedPageBorderBoxCenter,viewport:viewport.frame,withDroppableDisplacement:!1,onlyOnMainAxis:!0})?proposed:null}var relativeTo,isGoingBeforeTarget=Boolean(previousPageBorderBoxCenter[destination.axis.line]<=moveRelativeTo.page.borderBox.center[destination.axis.line]),proposedIndex=(relativeTo=moveRelativeTo.descriptor.index,moveRelativeTo.descriptor.id===draggable.descriptor.id||isGoingBeforeTarget?relativeTo:relativeTo+1),displacedBy=getDisplacedBy(destination.axis,draggable.displaceBy);return calculateReorderImpact({draggable,insideDestination,destination,viewport,displacedBy,last:emptyGroups,index:proposedIndex})}({previousPageBorderBoxCenter,destination,draggable,draggables,moveRelativeTo,insideDestination,viewport,afterCritical});if(!impact)return null;var pageBorderBoxCenter=getPageBorderBoxCenterFromImpact({impact,draggable,droppable:destination,draggables,afterCritical});return{clientSelection:getClientFromPageBorderBoxCenter({pageBorderBoxCenter,draggable,viewport}),impact,scrollJumpRequest:null}},whatIsDraggedOver=function(impact){var at=impact.at;return at?"REORDER"===at.type?at.destination.droppableId:at.combine.droppableId:null},moveInDirection=function(_ref){var state=_ref.state,type=_ref.type,isActuallyOver=function getDroppableOver(impact,droppables){var id=whatIsDraggedOver(impact);return id?droppables[id]:null}(state.impact,state.dimensions.droppables),isMainAxisMovementAllowed=Boolean(isActuallyOver),home=state.dimensions.droppables[state.critical.droppable.id],isOver=isActuallyOver||home,direction=isOver.axis.direction,isMovingOnMainAxis="vertical"===direction&&("MOVE_UP"===type||"MOVE_DOWN"===type)||"horizontal"===direction&&("MOVE_LEFT"===type||"MOVE_RIGHT"===type);if(isMovingOnMainAxis&&!isMainAxisMovementAllowed)return null;var isMovingForward="MOVE_DOWN"===type||"MOVE_RIGHT"===type,draggable=state.dimensions.draggables[state.critical.draggable.id],previousPageBorderBoxCenter=state.current.page.borderBoxCenter,_state$dimensions=state.dimensions,draggables=_state$dimensions.draggables,droppables=_state$dimensions.droppables;return isMovingOnMainAxis?moveToNextPlace({isMovingForward,previousPageBorderBoxCenter,draggable,destination:isOver,draggables,viewport:state.viewport,previousClientSelection:state.current.client.selection,previousImpact:state.impact,afterCritical:state.afterCritical}):moveCrossAxis({isMovingForward,previousPageBorderBoxCenter,draggable,isOver,draggables,droppables,viewport:state.viewport,afterCritical:state.afterCritical})};function isMovementAllowed(state){return"DRAGGING"===state.phase||"COLLECTING"===state.phase}function isPositionInFrame(frame){var isWithinVertical=isWithin(frame.top,frame.bottom),isWithinHorizontal=isWithin(frame.left,frame.right);return function run(point){return isWithinVertical(point.y)&&isWithinHorizontal(point.x)}}function getDroppableOver$1(_ref2){var pageBorderBox=_ref2.pageBorderBox,draggable=_ref2.draggable,droppables=_ref2.droppables,candidates=toDroppableList(droppables).filter((function(item){if(!item.isEnabled)return!1;var active=item.subject.active;if(!active)return!1;if(!function getHasOverlap(first,second){return first.left<second.right&&first.right>second.left&&first.top<second.bottom&&first.bottom>second.top}(pageBorderBox,active))return!1;if(isPositionInFrame(active)(pageBorderBox.center))return!0;var axis=item.axis,childCenter=active.center[axis.crossAxisLine],crossAxisStart=pageBorderBox[axis.crossAxisStart],crossAxisEnd=pageBorderBox[axis.crossAxisEnd],isContained=isWithin(active[axis.crossAxisStart],active[axis.crossAxisEnd]),isStartContained=isContained(crossAxisStart),isEndContained=isContained(crossAxisEnd);return!isStartContained&&!isEndContained||(isStartContained?crossAxisStart<childCenter:crossAxisEnd>childCenter)}));return candidates.length?1===candidates.length?candidates[0].descriptor.id:function getFurthestAway(_ref){var pageBorderBox=_ref.pageBorderBox,draggable=_ref.draggable,candidates=_ref.candidates,startCenter=draggable.page.borderBox.center,sorted=candidates.map((function(candidate){var axis=candidate.axis,target=patch(candidate.axis.line,pageBorderBox.center[axis.line],candidate.page.borderBox.center[axis.crossAxisLine]);return{id:candidate.descriptor.id,distance:distance(startCenter,target)}})).sort((function(a,b){return b.distance-a.distance}));return sorted[0]?sorted[0].id:null}({pageBorderBox,draggable,candidates}):null}var offsetRectByPosition=function offsetRectByPosition(rect,point){return getRect(offsetByPosition(rect,point))};function getIsDisplaced(_ref){var displaced=_ref.displaced,id=_ref.id;return Boolean(displaced.visible[id]||displaced.invisible[id])}var getDragImpact=function(_ref){var pageOffset=_ref.pageOffset,draggable=_ref.draggable,draggables=_ref.draggables,droppables=_ref.droppables,previousImpact=_ref.previousImpact,viewport=_ref.viewport,afterCritical=_ref.afterCritical,pageBorderBox=offsetRectByPosition(draggable.page.borderBox,pageOffset),destinationId=getDroppableOver$1({pageBorderBox,draggable,droppables});if(!destinationId)return noImpact;var destination=droppables[destinationId],insideDestination=getDraggablesInsideDroppable(destination.descriptor.id,draggables),pageBorderBoxWithDroppableScroll=function(droppable,area){var frame=droppable.frame;return frame?offsetRectByPosition(area,frame.scroll.diff.value):area}(destination,pageBorderBox);return function(_ref){var draggable=_ref.draggable,targetRect=_ref.pageBorderBoxWithDroppableScroll,previousImpact=_ref.previousImpact,destination=_ref.destination,insideDestination=_ref.insideDestination,afterCritical=_ref.afterCritical;if(!destination.isCombineEnabled)return null;var axis=destination.axis,displacedBy=getDisplacedBy(destination.axis,draggable.displaceBy),displacement=displacedBy.value,targetStart=targetRect[axis.start],targetEnd=targetRect[axis.end],combineWith=find(removeDraggableFromList(draggable,insideDestination),(function(child){var id=child.descriptor.id,childRect=child.page.borderBox,threshold=childRect[axis.size]/4,didStartAfterCritical$1=didStartAfterCritical(id,afterCritical),isDisplaced=getIsDisplaced({displaced:previousImpact.displaced,id});return didStartAfterCritical$1?isDisplaced?targetEnd>childRect[axis.start]+threshold&&targetEnd<childRect[axis.end]-threshold:targetStart>childRect[axis.start]-displacement+threshold&&targetStart<childRect[axis.end]-displacement-threshold:isDisplaced?targetEnd>childRect[axis.start]+displacement+threshold&&targetEnd<childRect[axis.end]+displacement-threshold:targetStart>childRect[axis.start]+threshold&&targetStart<childRect[axis.end]-threshold}));return combineWith?{displacedBy,displaced:previousImpact.displaced,at:{type:"COMBINE",combine:{draggableId:combineWith.descriptor.id,droppableId:destination.descriptor.id}}}:null}({pageBorderBoxWithDroppableScroll,draggable,previousImpact,destination,insideDestination,afterCritical})||function(_ref2){var targetRect=_ref2.pageBorderBoxWithDroppableScroll,draggable=_ref2.draggable,destination=_ref2.destination,insideDestination=_ref2.insideDestination,last=_ref2.last,viewport=_ref2.viewport,afterCritical=_ref2.afterCritical,axis=destination.axis,displacedBy=getDisplacedBy(destination.axis,draggable.displaceBy),displacement=displacedBy.value,targetStart=targetRect[axis.start],targetEnd=targetRect[axis.end],newIndex=function atIndex(_ref){var draggable=_ref.draggable,closest=_ref.closest,inHomeList=_ref.inHomeList;return closest?inHomeList&&closest.descriptor.index>draggable.descriptor.index?closest.descriptor.index-1:closest.descriptor.index:null}({draggable,closest:find(removeDraggableFromList(draggable,insideDestination),(function(child){var id=child.descriptor.id,childCenter=child.page.borderBox.center[axis.line],didStartAfterCritical$1=didStartAfterCritical(id,afterCritical),isDisplaced=getIsDisplaced({displaced:last,id});return didStartAfterCritical$1?isDisplaced?targetEnd<=childCenter:targetStart<childCenter-displacement:isDisplaced?targetEnd<=childCenter+displacement:targetStart<childCenter})),inHomeList:isHomeOf(draggable,destination)});return calculateReorderImpact({draggable,insideDestination,destination,viewport,last,displacedBy,index:newIndex})}({pageBorderBoxWithDroppableScroll,draggable,destination,insideDestination,last:previousImpact.displaced,viewport,afterCritical})},patchDroppableMap=function(droppables,updated){var _extends2;return(0,esm_extends.A)({},droppables,((_extends2={})[updated.descriptor.id]=updated,_extends2))},clearUnusedPlaceholder=function clearUnusedPlaceholder(_ref){var previousImpact=_ref.previousImpact,impact=_ref.impact,droppables=_ref.droppables,last=whatIsDraggedOver(previousImpact),now=whatIsDraggedOver(impact);if(!last)return droppables;if(last===now)return droppables;var lastDroppable=droppables[last];if(!lastDroppable.subject.withPlaceholder)return droppables;var updated=function removePlaceholder(droppable){var added=droppable.subject.withPlaceholder;added||react_beautiful_dnd_esm_invariant(!1);var frame=droppable.frame;if(!frame){var _subject2=getSubject({page:droppable.subject.page,axis:droppable.axis,frame:null,withPlaceholder:null});return(0,esm_extends.A)({},droppable,{subject:_subject2})}var oldMaxScroll=added.oldFrameMaxScroll;oldMaxScroll||react_beautiful_dnd_esm_invariant(!1);var newFrame=withMaxScroll(frame,oldMaxScroll),subject=getSubject({page:droppable.subject.page,axis:droppable.axis,frame:newFrame,withPlaceholder:null});return(0,esm_extends.A)({},droppable,{subject,frame:newFrame})}(lastDroppable);return patchDroppableMap(droppables,updated)},update=function(_ref){var state=_ref.state,forcedClientSelection=_ref.clientSelection,forcedDimensions=_ref.dimensions,forcedViewport=_ref.viewport,forcedImpact=_ref.impact,scrollJumpRequest=_ref.scrollJumpRequest,viewport=forcedViewport||state.viewport,dimensions=forcedDimensions||state.dimensions,clientSelection=forcedClientSelection||state.current.client.selection,offset=subtract(clientSelection,state.initial.client.selection),client={offset,selection:clientSelection,borderBoxCenter:add(state.initial.client.borderBoxCenter,offset)},page={selection:add(client.selection,viewport.scroll.current),borderBoxCenter:add(client.borderBoxCenter,viewport.scroll.current),offset:add(client.offset,viewport.scroll.diff.value)},current={client,page};if("COLLECTING"===state.phase)return(0,esm_extends.A)({phase:"COLLECTING"},state,{dimensions,viewport,current});var draggable=dimensions.draggables[state.critical.draggable.id],newImpact=forcedImpact||getDragImpact({pageOffset:page.offset,draggable,draggables:dimensions.draggables,droppables:dimensions.droppables,previousImpact:state.impact,viewport,afterCritical:state.afterCritical}),withUpdatedPlaceholders=function(_ref2){var draggable=_ref2.draggable,draggables=_ref2.draggables,droppables=_ref2.droppables,previousImpact=_ref2.previousImpact,impact=_ref2.impact,cleaned=clearUnusedPlaceholder({previousImpact,impact,droppables}),isOver=whatIsDraggedOver(impact);if(!isOver)return cleaned;var droppable=droppables[isOver];if(isHomeOf(draggable,droppable))return cleaned;if(droppable.subject.withPlaceholder)return cleaned;var patched=addPlaceholder(droppable,draggable,draggables);return patchDroppableMap(cleaned,patched)}({draggable,impact:newImpact,previousImpact:state.impact,draggables:dimensions.draggables,droppables:dimensions.droppables});return(0,esm_extends.A)({},state,{current,dimensions:{draggables:dimensions.draggables,droppables:withUpdatedPlaceholders},impact:newImpact,viewport,scrollJumpRequest:scrollJumpRequest||null,forceShouldAnimate:!scrollJumpRequest&&null})};var recompute=function(_ref){var impact=_ref.impact,viewport=_ref.viewport,draggables=_ref.draggables,destination=_ref.destination,forceShouldAnimate=_ref.forceShouldAnimate,last=impact.displaced,afterDragging=function getDraggables$1(ids,draggables){return ids.map((function(id){return draggables[id]}))}(last.all,draggables),displaced=getDisplacementGroups({afterDragging,destination,displacedBy:impact.displacedBy,viewport:viewport.frame,forceShouldAnimate,last});return(0,esm_extends.A)({},impact,{displaced})},getClientBorderBoxCenter=function(_ref){var impact=_ref.impact,draggable=_ref.draggable,droppable=_ref.droppable,draggables=_ref.draggables,viewport=_ref.viewport,afterCritical=_ref.afterCritical,pageBorderBoxCenter=getPageBorderBoxCenterFromImpact({impact,draggable,draggables,droppable,afterCritical});return getClientFromPageBorderBoxCenter({pageBorderBoxCenter,draggable,viewport})},refreshSnap=function(_ref){var state=_ref.state,forcedDimensions=_ref.dimensions,forcedViewport=_ref.viewport;"SNAP"!==state.movementMode&&react_beautiful_dnd_esm_invariant(!1);var needsVisibilityCheck=state.impact,viewport=forcedViewport||state.viewport,dimensions=forcedDimensions||state.dimensions,draggables=dimensions.draggables,droppables=dimensions.droppables,draggable=draggables[state.critical.draggable.id],isOver=whatIsDraggedOver(needsVisibilityCheck);isOver||react_beautiful_dnd_esm_invariant(!1);var destination=droppables[isOver],impact=recompute({impact:needsVisibilityCheck,viewport,destination,draggables}),clientSelection=getClientBorderBoxCenter({impact,draggable,droppable:destination,draggables,viewport,afterCritical:state.afterCritical});return update({impact,clientSelection,state,dimensions,viewport})},getLiftEffect=function(_ref){var draggable=_ref.draggable,home=_ref.home,draggables=_ref.draggables,viewport=_ref.viewport,displacedBy=getDisplacedBy(home.axis,draggable.displaceBy),insideHome=getDraggablesInsideDroppable(home.descriptor.id,draggables),rawIndex=insideHome.indexOf(draggable);-1===rawIndex&&react_beautiful_dnd_esm_invariant(!1);var descriptor,afterDragging=insideHome.slice(rawIndex+1),effected=afterDragging.reduce((function(previous,item){return previous[item.descriptor.id]=!0,previous}),{}),afterCritical={inVirtualList:"virtual"===home.descriptor.mode,displacedBy,effected};return{impact:{displaced:getDisplacementGroups({afterDragging,destination:home,displacedBy,last:null,viewport:viewport.frame,forceShouldAnimate:!1}),displacedBy,at:{type:"REORDER",destination:(descriptor=draggable.descriptor,{index:descriptor.index,droppableId:descriptor.droppableId})}},afterCritical}},start=function start(key){0},finish=function finish(key){0},adjustAdditionsForScrollChanges=function(_ref){var additions=_ref.additions,updatedDroppables=_ref.updatedDroppables,viewport=_ref.viewport,windowScrollChange=viewport.scroll.diff.value;return additions.map((function(draggable){var droppableId=draggable.descriptor.droppableId,frame=function(droppable){var frame=droppable.frame;return frame||react_beautiful_dnd_esm_invariant(!1),frame}(updatedDroppables[droppableId]),droppableScrollChange=frame.scroll.diff.value,moved=function(_ref){var draggable=_ref.draggable,offset$1=_ref.offset,initialWindowScroll=_ref.initialWindowScroll,client=offset(draggable.client,offset$1),page=withScroll(client,initialWindowScroll);return(0,esm_extends.A)({},draggable,{placeholder:(0,esm_extends.A)({},draggable.placeholder,{client}),client,page})}({draggable,offset:add(windowScrollChange,droppableScrollChange),initialWindowScroll:viewport.scroll.initial});return moved}))},isSnapping=function isSnapping(state){return"SNAP"===state.movementMode},postDroppableChange=function postDroppableChange(state,updated,isEnabledChanging){var dimensions=function(dimensions,updated){return{draggables:dimensions.draggables,droppables:patchDroppableMap(dimensions.droppables,updated)}}(state.dimensions,updated);return!isSnapping(state)||isEnabledChanging?update({state,dimensions}):refreshSnap({state,dimensions})};function removeScrollJumpRequest(state){return state.isDragging&&"SNAP"===state.movementMode?(0,esm_extends.A)({phase:"DRAGGING"},state,{scrollJumpRequest:null}):state}var idle={phase:"IDLE",completed:null,shouldFlush:!1},reducer=function(state,action){if(void 0===state&&(state=idle),"FLUSH"===action.type)return(0,esm_extends.A)({},idle,{shouldFlush:!0});if("INITIAL_PUBLISH"===action.type){"IDLE"!==state.phase&&react_beautiful_dnd_esm_invariant(!1);var _action$payload=action.payload,critical=_action$payload.critical,clientSelection=_action$payload.clientSelection,viewport=_action$payload.viewport,dimensions=_action$payload.dimensions,movementMode=_action$payload.movementMode,draggable=dimensions.draggables[critical.draggable.id],home=dimensions.droppables[critical.droppable.id],client={selection:clientSelection,borderBoxCenter:draggable.client.borderBox.center,offset:origin},initial={client,page:{selection:add(client.selection,viewport.scroll.initial),borderBoxCenter:add(client.selection,viewport.scroll.initial),offset:add(client.selection,viewport.scroll.diff.value)}},isWindowScrollAllowed=toDroppableList(dimensions.droppables).every((function(item){return!item.isFixedOnPage})),_getLiftEffect=getLiftEffect({draggable,home,draggables:dimensions.draggables,viewport}),impact=_getLiftEffect.impact;return{phase:"DRAGGING",isDragging:!0,critical,movementMode,dimensions,initial,current:initial,isWindowScrollAllowed,impact,afterCritical:_getLiftEffect.afterCritical,onLiftImpact:impact,viewport,scrollJumpRequest:null,forceShouldAnimate:null}}if("COLLECTION_STARTING"===action.type)return"COLLECTING"===state.phase||"DROP_PENDING"===state.phase?state:("DRAGGING"!==state.phase&&react_beautiful_dnd_esm_invariant(!1),(0,esm_extends.A)({phase:"COLLECTING"},state,{phase:"COLLECTING"}));if("PUBLISH_WHILE_DRAGGING"===action.type)return"COLLECTING"!==state.phase&&"DROP_PENDING"!==state.phase&&react_beautiful_dnd_esm_invariant(!1),function(_ref){var state=_ref.state,published=_ref.published;start();var withScrollChange=published.modified.map((function(update){var existing=state.dimensions.droppables[update.droppableId];return scrollDroppable(existing,update.scroll)})),droppables=(0,esm_extends.A)({},state.dimensions.droppables,{},toDroppableMap(withScrollChange)),updatedAdditions=toDraggableMap(adjustAdditionsForScrollChanges({additions:published.additions,updatedDroppables:droppables,viewport:state.viewport})),draggables=(0,esm_extends.A)({},state.dimensions.draggables,{},updatedAdditions);published.removals.forEach((function(id){delete draggables[id]}));var dimensions={droppables,draggables},wasOverId=whatIsDraggedOver(state.impact),wasOver=wasOverId?dimensions.droppables[wasOverId]:null,draggable=dimensions.draggables[state.critical.draggable.id],home=dimensions.droppables[state.critical.droppable.id],_getLiftEffect=getLiftEffect({draggable,home,draggables,viewport:state.viewport}),onLiftImpact=_getLiftEffect.impact,afterCritical=_getLiftEffect.afterCritical,previousImpact=wasOver&&wasOver.isCombineEnabled?state.impact:onLiftImpact,impact=getDragImpact({pageOffset:state.current.page.offset,draggable:dimensions.draggables[state.critical.draggable.id],draggables:dimensions.draggables,droppables:dimensions.droppables,previousImpact,viewport:state.viewport,afterCritical});finish();var draggingState=(0,esm_extends.A)({phase:"DRAGGING"},state,{phase:"DRAGGING",impact,onLiftImpact,dimensions,afterCritical,forceShouldAnimate:!1});return"COLLECTING"===state.phase?draggingState:(0,esm_extends.A)({phase:"DROP_PENDING"},draggingState,{phase:"DROP_PENDING",reason:state.reason,isWaiting:!1})}({state,published:action.payload});if("MOVE"===action.type){if("DROP_PENDING"===state.phase)return state;isMovementAllowed(state)||react_beautiful_dnd_esm_invariant(!1);var _clientSelection=action.payload.client;return isEqual(_clientSelection,state.current.client.selection)?state:update({state,clientSelection:_clientSelection,impact:isSnapping(state)?state.impact:null})}if("UPDATE_DROPPABLE_SCROLL"===action.type){if("DROP_PENDING"===state.phase)return removeScrollJumpRequest(state);if("COLLECTING"===state.phase)return removeScrollJumpRequest(state);isMovementAllowed(state)||react_beautiful_dnd_esm_invariant(!1);var _action$payload2=action.payload,id=_action$payload2.id,newScroll=_action$payload2.newScroll,target=state.dimensions.droppables[id];if(!target)return state;var scrolled=scrollDroppable(target,newScroll);return postDroppableChange(state,scrolled,!1)}if("UPDATE_DROPPABLE_IS_ENABLED"===action.type){if("DROP_PENDING"===state.phase)return state;isMovementAllowed(state)||react_beautiful_dnd_esm_invariant(!1);var _action$payload3=action.payload,_id=_action$payload3.id,isEnabled=_action$payload3.isEnabled,_target=state.dimensions.droppables[_id];_target||react_beautiful_dnd_esm_invariant(!1),_target.isEnabled===isEnabled&&react_beautiful_dnd_esm_invariant(!1);var updated=(0,esm_extends.A)({},_target,{isEnabled});return postDroppableChange(state,updated,!0)}if("UPDATE_DROPPABLE_IS_COMBINE_ENABLED"===action.type){if("DROP_PENDING"===state.phase)return state;isMovementAllowed(state)||react_beautiful_dnd_esm_invariant(!1);var _action$payload4=action.payload,_id2=_action$payload4.id,isCombineEnabled=_action$payload4.isCombineEnabled,_target2=state.dimensions.droppables[_id2];_target2||react_beautiful_dnd_esm_invariant(!1),_target2.isCombineEnabled===isCombineEnabled&&react_beautiful_dnd_esm_invariant(!1);var _updated=(0,esm_extends.A)({},_target2,{isCombineEnabled});return postDroppableChange(state,_updated,!0)}if("MOVE_BY_WINDOW_SCROLL"===action.type){if("DROP_PENDING"===state.phase||"DROP_ANIMATING"===state.phase)return state;isMovementAllowed(state)||react_beautiful_dnd_esm_invariant(!1),state.isWindowScrollAllowed||react_beautiful_dnd_esm_invariant(!1);var _newScroll=action.payload.newScroll;if(isEqual(state.viewport.scroll.current,_newScroll))return removeScrollJumpRequest(state);var _viewport=scrollViewport(state.viewport,_newScroll);return isSnapping(state)?refreshSnap({state,viewport:_viewport}):update({state,viewport:_viewport})}if("UPDATE_VIEWPORT_MAX_SCROLL"===action.type){if(!isMovementAllowed(state))return state;var maxScroll=action.payload.maxScroll;if(isEqual(maxScroll,state.viewport.scroll.max))return state;var withMaxScroll=(0,esm_extends.A)({},state.viewport,{scroll:(0,esm_extends.A)({},state.viewport.scroll,{max:maxScroll})});return(0,esm_extends.A)({phase:"DRAGGING"},state,{viewport:withMaxScroll})}if("MOVE_UP"===action.type||"MOVE_DOWN"===action.type||"MOVE_LEFT"===action.type||"MOVE_RIGHT"===action.type){if("COLLECTING"===state.phase||"DROP_PENDING"===state.phase)return state;"DRAGGING"!==state.phase&&react_beautiful_dnd_esm_invariant(!1);var _result2=moveInDirection({state,type:action.type});return _result2?update({state,impact:_result2.impact,clientSelection:_result2.clientSelection,scrollJumpRequest:_result2.scrollJumpRequest}):state}if("DROP_PENDING"===action.type){var reason=action.payload.reason;return"COLLECTING"!==state.phase&&react_beautiful_dnd_esm_invariant(!1),(0,esm_extends.A)({phase:"DROP_PENDING"},state,{phase:"DROP_PENDING",isWaiting:!0,reason})}if("DROP_ANIMATE"===action.type){var _action$payload5=action.payload,completed=_action$payload5.completed,dropDuration=_action$payload5.dropDuration,newHomeClientOffset=_action$payload5.newHomeClientOffset;return"DRAGGING"!==state.phase&&"DROP_PENDING"!==state.phase&&react_beautiful_dnd_esm_invariant(!1),{phase:"DROP_ANIMATING",completed,dropDuration,newHomeClientOffset,dimensions:state.dimensions}}return"DROP_COMPLETE"===action.type?{phase:"IDLE",completed:action.payload.completed,shouldFlush:!1}:state},lift=function lift(args){return{type:"LIFT",payload:args}},publishWhileDragging=function publishWhileDragging(args){return{type:"PUBLISH_WHILE_DRAGGING",payload:args}},collectionStarting=function collectionStarting(){return{type:"COLLECTION_STARTING",payload:null}},updateDroppableScroll=function updateDroppableScroll(args){return{type:"UPDATE_DROPPABLE_SCROLL",payload:args}},updateDroppableIsEnabled=function updateDroppableIsEnabled(args){return{type:"UPDATE_DROPPABLE_IS_ENABLED",payload:args}},updateDroppableIsCombineEnabled=function updateDroppableIsCombineEnabled(args){return{type:"UPDATE_DROPPABLE_IS_COMBINE_ENABLED",payload:args}},move=function move(args){return{type:"MOVE",payload:args}},moveUp=function moveUp(){return{type:"MOVE_UP",payload:null}},moveDown=function moveDown(){return{type:"MOVE_DOWN",payload:null}},moveRight=function moveRight(){return{type:"MOVE_RIGHT",payload:null}},moveLeft=function moveLeft(){return{type:"MOVE_LEFT",payload:null}},flush=function flush(){return{type:"FLUSH",payload:null}},completeDrop=function completeDrop(args){return{type:"DROP_COMPLETE",payload:args}},drop=function drop(args){return{type:"DROP",payload:args}},dropAnimationFinished=function dropAnimationFinished(){return{type:"DROP_ANIMATION_FINISHED",payload:null}};var curves_drop="cubic-bezier(.2,1,.1,1)",combine_opacity={drop:0,combining:.7},combine_scale={drop:.75},outOfTheWayTiming=.2+"s "+"cubic-bezier(0.2, 0, 0, 1)",transitions={fluid:"opacity "+outOfTheWayTiming,snap:"transform "+outOfTheWayTiming+", opacity "+outOfTheWayTiming,drop:function drop(duration){var timing=duration+"s "+curves_drop;return"transform "+timing+", opacity "+timing},outOfTheWay:"transform "+outOfTheWayTiming,placeholder:"height "+outOfTheWayTiming+", width "+outOfTheWayTiming+", margin "+outOfTheWayTiming},moveTo=function moveTo(offset){return isEqual(offset,origin)?null:"translate("+offset.x+"px, "+offset.y+"px)"},transforms={moveTo,drop:function drop(offset,isCombining){var translate=moveTo(offset);return translate?isCombining?translate+" scale("+combine_scale.drop+")":translate:null}},minDropTime=.33,maxDropTime=.55,dropTimeRange=maxDropTime-minDropTime,drop$1=function(_ref){var getState=_ref.getState,dispatch=_ref.dispatch;return function(next){return function(action){if("DROP"===action.type){var state=getState(),reason=action.payload.reason;if("COLLECTING"!==state.phase){if("IDLE"!==state.phase){"DROP_PENDING"===state.phase&&state.isWaiting&&react_beautiful_dnd_esm_invariant(!1),"DRAGGING"!==state.phase&&"DROP_PENDING"!==state.phase&&react_beautiful_dnd_esm_invariant(!1);var critical=state.critical,dimensions=state.dimensions,draggable=dimensions.draggables[state.critical.draggable.id],_getDropImpact=function(_ref){var draggables=_ref.draggables,reason=_ref.reason,lastImpact=_ref.lastImpact,home=_ref.home,viewport=_ref.viewport,onLiftImpact=_ref.onLiftImpact;return lastImpact.at&&"DROP"===reason?"REORDER"===lastImpact.at.type?{impact:lastImpact,didDropInsideDroppable:!0}:{impact:(0,esm_extends.A)({},lastImpact,{displaced:emptyGroups}),didDropInsideDroppable:!0}:{impact:recompute({draggables,impact:onLiftImpact,destination:home,viewport,forceShouldAnimate:!0}),didDropInsideDroppable:!1}}({reason,lastImpact:state.impact,afterCritical:state.afterCritical,onLiftImpact:state.onLiftImpact,home:state.dimensions.droppables[state.critical.droppable.id],viewport:state.viewport,draggables:state.dimensions.draggables}),impact=_getDropImpact.impact,didDropInsideDroppable=_getDropImpact.didDropInsideDroppable,destination=didDropInsideDroppable?tryGetDestination(impact):null,combine=didDropInsideDroppable?tryGetCombine(impact):null,source={index:critical.draggable.index,droppableId:critical.droppable.id},result={draggableId:draggable.descriptor.id,type:draggable.descriptor.type,source,reason,mode:state.movementMode,destination,combine},newHomeClientOffset=function(_ref){var impact=_ref.impact,draggable=_ref.draggable,dimensions=_ref.dimensions,viewport=_ref.viewport,afterCritical=_ref.afterCritical,draggables=dimensions.draggables,droppables=dimensions.droppables,droppableId=whatIsDraggedOver(impact),destination=droppableId?droppables[droppableId]:null,home=droppables[draggable.descriptor.droppableId],newClientCenter=getClientBorderBoxCenter({impact,draggable,draggables,afterCritical,droppable:destination||home,viewport});return subtract(newClientCenter,draggable.client.borderBox.center)}({impact,draggable,dimensions,viewport:state.viewport,afterCritical:state.afterCritical}),completed={critical:state.critical,afterCritical:state.afterCritical,result,impact};if(!isEqual(state.current.client.offset,newHomeClientOffset)||Boolean(result.combine)){var dropDuration=function(_ref){var current=_ref.current,destination=_ref.destination,reason=_ref.reason,distance$1=distance(current,destination);if(distance$1<=0)return minDropTime;if(distance$1>=1500)return maxDropTime;var duration=minDropTime+dropTimeRange*(distance$1/1500);return Number(("CANCEL"===reason?.6*duration:duration).toFixed(2))}({current:state.current.client.offset,destination:newHomeClientOffset,reason});dispatch(function animateDrop(args){return{type:"DROP_ANIMATE",payload:args}}({newHomeClientOffset,dropDuration,completed}))}else dispatch(completeDrop({completed}))}}else dispatch(function dropPending(args){return{type:"DROP_PENDING",payload:args}}({reason}))}else next(action)}}},react_beautiful_dnd_esm_getWindowScroll=function(){return{x:window.pageXOffset,y:window.pageYOffset}};function getScrollListener(_ref){var onWindowScroll=_ref.onWindowScroll;var scheduled=raf_schd_esm((function updateScroll(){onWindowScroll(react_beautiful_dnd_esm_getWindowScroll())})),binding=function getWindowScrollBinding(update){return{eventName:"scroll",options:{passive:!0,capture:!1},fn:function fn(event){event.target!==window&&event.target!==window.document||update()}}}(scheduled),unbind=noop;function isActive(){return unbind!==noop}return{start:function start(){isActive()&&react_beautiful_dnd_esm_invariant(!1),unbind=bindEvents(window,[binding])},stop:function stop(){isActive()||react_beautiful_dnd_esm_invariant(!1),scheduled.cancel(),unbind(),unbind=noop},isActive}}var scrollListener=function(store){var listener=getScrollListener({onWindowScroll:function onWindowScroll(newScroll){store.dispatch(function moveByWindowScroll(args){return{type:"MOVE_BY_WINDOW_SCROLL",payload:args}}({newScroll}))}});return function(next){return function(action){listener.isActive()||"INITIAL_PUBLISH"!==action.type||listener.start(),listener.isActive()&&function shouldEnd(action){return"DROP_COMPLETE"===action.type||"DROP_ANIMATE"===action.type||"FLUSH"===action.type}(action)&&listener.stop(),next(action)}}},getAsyncMarshal=function(){var entries=[];return{add:function add(fn){var timerId=setTimeout((function(){return function execute(timerId){var index=findIndex(entries,(function(item){return item.timerId===timerId}));-1===index&&react_beautiful_dnd_esm_invariant(!1),entries.splice(index,1)[0].callback()}(timerId)})),entry={timerId,callback:fn};entries.push(entry)},flush:function flush(){if(entries.length){var shallow=[].concat(entries);entries.length=0,shallow.forEach((function(entry){clearTimeout(entry.timerId),entry.callback()}))}}}},withTimings=function withTimings(key,fn){start(),fn(),finish()},getDragStart=function getDragStart(critical,mode){return{draggableId:critical.draggable.id,type:critical.droppable.type,source:{droppableId:critical.droppable.id,index:critical.draggable.index},mode}},execute=function execute(responder,data,announce,getDefaultMessage){if(responder){var willExpire=function(announce){var wasCalled=!1,isExpired=!1,timeoutId=setTimeout((function(){isExpired=!0})),result=function result(message){wasCalled||isExpired||(wasCalled=!0,announce(message),clearTimeout(timeoutId))};return result.wasCalled=function(){return wasCalled},result}(announce);responder(data,{announce:willExpire}),willExpire.wasCalled()||announce(getDefaultMessage(data))}else announce(getDefaultMessage(data))},responders=function(getResponders,announce){var publisher=function(getResponders,announce){var asyncMarshal=getAsyncMarshal(),dragging=null,drop=function drop(result){dragging||react_beautiful_dnd_esm_invariant(!1),dragging=null,withTimings(0,(function(){return execute(getResponders().onDragEnd,result,announce,preset.onDragEnd)}))};return{beforeCapture:function beforeCapture(draggableId,mode){dragging&&react_beautiful_dnd_esm_invariant(!1),withTimings(0,(function(){var fn=getResponders().onBeforeCapture;fn&&fn({draggableId,mode})}))},beforeStart:function beforeStart(critical,mode){dragging&&react_beautiful_dnd_esm_invariant(!1),withTimings(0,(function(){var fn=getResponders().onBeforeDragStart;fn&&fn(getDragStart(critical,mode))}))},start:function start(critical,mode){dragging&&react_beautiful_dnd_esm_invariant(!1);var data=getDragStart(critical,mode);dragging={mode,lastCritical:critical,lastLocation:data.source,lastCombine:null},asyncMarshal.add((function(){withTimings(0,(function(){return execute(getResponders().onDragStart,data,announce,preset.onDragStart)}))}))},update:function update(critical,impact){var location=tryGetDestination(impact),combine=tryGetCombine(impact);dragging||react_beautiful_dnd_esm_invariant(!1);var hasCriticalChanged=!function isCriticalEqual(first,second){if(first===second)return!0;var isDraggableEqual=first.draggable.id===second.draggable.id&&first.draggable.droppableId===second.draggable.droppableId&&first.draggable.type===second.draggable.type&&first.draggable.index===second.draggable.index,isDroppableEqual=first.droppable.id===second.droppable.id&&first.droppable.type===second.droppable.type;return isDraggableEqual&&isDroppableEqual}(critical,dragging.lastCritical);hasCriticalChanged&&(dragging.lastCritical=critical);var hasLocationChanged=!function areLocationsEqual(first,second){return null==first&&null==second||null!=first&&null!=second&&first.droppableId===second.droppableId&&first.index===second.index}(dragging.lastLocation,location);hasLocationChanged&&(dragging.lastLocation=location);var hasGroupingChanged=!function isCombineEqual(first,second){return null==first&&null==second||null!=first&&null!=second&&first.draggableId===second.draggableId&&first.droppableId===second.droppableId}(dragging.lastCombine,combine);if(hasGroupingChanged&&(dragging.lastCombine=combine),hasCriticalChanged||hasLocationChanged||hasGroupingChanged){var data=(0,esm_extends.A)({},getDragStart(critical,dragging.mode),{combine,destination:location});asyncMarshal.add((function(){withTimings(0,(function(){return execute(getResponders().onDragUpdate,data,announce,preset.onDragUpdate)}))}))}},flush:function flush(){dragging||react_beautiful_dnd_esm_invariant(!1),asyncMarshal.flush()},drop,abort:function abort(){if(dragging){var result=(0,esm_extends.A)({},getDragStart(dragging.lastCritical,dragging.mode),{combine:null,destination:null,reason:"CANCEL"});drop(result)}}}}(getResponders,announce);return function(store){return function(next){return function(action){if("BEFORE_INITIAL_CAPTURE"!==action.type){if("INITIAL_PUBLISH"===action.type){var critical=action.payload.critical;return publisher.beforeStart(critical,action.payload.movementMode),next(action),void publisher.start(critical,action.payload.movementMode)}if("DROP_COMPLETE"===action.type){var result=action.payload.completed.result;return publisher.flush(),next(action),void publisher.drop(result)}if(next(action),"FLUSH"!==action.type){var state=store.getState();"DRAGGING"===state.phase&&publisher.update(state.critical,state.impact)}else publisher.abort()}else publisher.beforeCapture(action.payload.draggableId,action.payload.movementMode)}}}},dropAnimationFinish=function(store){return function(next){return function(action){if("DROP_ANIMATION_FINISHED"===action.type){var state=store.getState();"DROP_ANIMATING"!==state.phase&&react_beautiful_dnd_esm_invariant(!1),store.dispatch(completeDrop({completed:state.completed}))}else next(action)}}},dropAnimationFlushOnScroll=function(store){var unbind=null,frameId=null;return function(next){return function(action){if("FLUSH"!==action.type&&"DROP_COMPLETE"!==action.type&&"DROP_ANIMATION_FINISHED"!==action.type||function clear(){frameId&&(cancelAnimationFrame(frameId),frameId=null),unbind&&(unbind(),unbind=null)}(),next(action),"DROP_ANIMATE"===action.type){var binding={eventName:"scroll",options:{capture:!0,passive:!1,once:!0},fn:function flushDropAnimation(){"DROP_ANIMATING"===store.getState().phase&&store.dispatch({type:"DROP_ANIMATION_FINISHED",payload:null})}};frameId=requestAnimationFrame((function(){frameId=null,unbind=bindEvents(window,[binding])}))}}}},pendingDrop=function(store){return function(next){return function(action){if(next(action),"PUBLISH_WHILE_DRAGGING"===action.type){var postActionState=store.getState();"DROP_PENDING"===postActionState.phase&&(postActionState.isWaiting||store.dispatch(drop({reason:postActionState.reason})))}}}},composeEnhancers=compose,react_beautiful_dnd_esm_createStore=function(_ref){var marshal,dimensionMarshal=_ref.dimensionMarshal,focusMarshal=_ref.focusMarshal,styleMarshal=_ref.styleMarshal,getResponders=_ref.getResponders,announce=_ref.announce,autoScroller=_ref.autoScroller;return createStore(reducer,composeEnhancers(function applyMiddleware(){for(var _len=arguments.length,middlewares=new Array(_len),_key=0;_key<_len;_key++)middlewares[_key]=arguments[_key];return function(createStore){return function(){var store=createStore.apply(void 0,arguments),_dispatch=function dispatch(){throw new Error(formatProdErrorMessage(15))},middlewareAPI={getState:store.getState,dispatch:function dispatch(){return _dispatch.apply(void 0,arguments)}},chain=middlewares.map((function(middleware){return middleware(middlewareAPI)}));return _dispatch=compose.apply(void 0,chain)(store.dispatch),(0,objectSpread2.A)((0,objectSpread2.A)({},store),{},{dispatch:_dispatch})}}}((marshal=styleMarshal,function(){return function(next){return function(action){"INITIAL_PUBLISH"===action.type&&marshal.dragging(),"DROP_ANIMATE"===action.type&&marshal.dropping(action.payload.completed.result.reason),"FLUSH"!==action.type&&"DROP_COMPLETE"!==action.type||marshal.resting(),next(action)}}}),function(marshal){return function(){return function(next){return function(action){"DROP_COMPLETE"!==action.type&&"FLUSH"!==action.type&&"DROP_ANIMATE"!==action.type||marshal.stopPublishing(),next(action)}}}}(dimensionMarshal),function(marshal){return function(_ref){var getState=_ref.getState,dispatch=_ref.dispatch;return function(next){return function(action){if("LIFT"===action.type){var _action$payload=action.payload,id=_action$payload.id,clientSelection=_action$payload.clientSelection,movementMode=_action$payload.movementMode,initial=getState();"DROP_ANIMATING"===initial.phase&&dispatch(completeDrop({completed:initial.completed})),"IDLE"!==getState().phase&&react_beautiful_dnd_esm_invariant(!1),dispatch(flush()),dispatch(function beforeInitialCapture(args){return{type:"BEFORE_INITIAL_CAPTURE",payload:args}}({draggableId:id,movementMode}));var request={draggableId:id,scrollOptions:{shouldPublishImmediately:"SNAP"===movementMode}},_marshal$startPublish=marshal.startPublishing(request),critical=_marshal$startPublish.critical,dimensions=_marshal$startPublish.dimensions,viewport=_marshal$startPublish.viewport;dispatch(function initialPublish(args){return{type:"INITIAL_PUBLISH",payload:args}}({critical,dimensions,clientSelection,movementMode,viewport}))}else next(action)}}}}(dimensionMarshal),drop$1,dropAnimationFinish,dropAnimationFlushOnScroll,pendingDrop,function(autoScroller){return function(store){return function(next){return function(action){if(function shouldStop(action){return"DROP_COMPLETE"===action.type||"DROP_ANIMATE"===action.type||"FLUSH"===action.type}(action))return autoScroller.stop(),void next(action);if("INITIAL_PUBLISH"===action.type){next(action);var state=store.getState();return"DRAGGING"!==state.phase&&react_beautiful_dnd_esm_invariant(!1),void autoScroller.start(state)}next(action),autoScroller.scroll(store.getState())}}}}(autoScroller),scrollListener,function(marshal){var isWatching=!1;return function(){return function(next){return function(action){if("INITIAL_PUBLISH"===action.type)return isWatching=!0,marshal.tryRecordFocus(action.payload.critical.draggable.id),next(action),void marshal.tryRestoreFocusRecorded();if(next(action),isWatching){if("FLUSH"===action.type)return isWatching=!1,void marshal.tryRestoreFocusRecorded();if("DROP_COMPLETE"===action.type){isWatching=!1;var result=action.payload.completed.result;result.combine&&marshal.tryShiftRecord(result.draggableId,result.combine.draggableId),marshal.tryRestoreFocusRecorded()}}}}}}(focusMarshal),responders(getResponders,announce))))};var getMaxScroll=function(_ref){var scrollHeight=_ref.scrollHeight,scrollWidth=_ref.scrollWidth,height=_ref.height,width=_ref.width,maxScroll=subtract({x:scrollWidth,y:scrollHeight},{x:width,y:height});return{x:Math.max(0,maxScroll.x),y:Math.max(0,maxScroll.y)}},getDocumentElement=function(){var doc=document.documentElement;return doc||react_beautiful_dnd_esm_invariant(!1),doc},getMaxWindowScroll=function(){var doc=getDocumentElement();return getMaxScroll({scrollHeight:doc.scrollHeight,scrollWidth:doc.scrollWidth,width:doc.clientWidth,height:doc.clientHeight})},getInitialPublish=function(_ref){var critical=_ref.critical,scrollOptions=_ref.scrollOptions,registry=_ref.registry;start();var scroll,maxScroll,top,left,doc,width,height,viewport=(scroll=react_beautiful_dnd_esm_getWindowScroll(),maxScroll=getMaxWindowScroll(),top=scroll.y,left=scroll.x,doc=getDocumentElement(),width=doc.clientWidth,height=doc.clientHeight,{frame:getRect({top,left,right:left+width,bottom:top+height}),scroll:{initial:scroll,current:scroll,max:maxScroll,diff:{value:origin,displacement:origin}}}),windowScroll=viewport.scroll.current,home=critical.droppable,droppables=registry.droppable.getAllByType(home.type).map((function(entry){return entry.callbacks.getDimensionAndWatchScroll(windowScroll,scrollOptions)})),draggables=registry.draggable.getAllByType(critical.draggable.type).map((function(entry){return entry.getDimension(windowScroll)})),dimensions={draggables:toDraggableMap(draggables),droppables:toDroppableMap(droppables)};return finish(),{dimensions,critical,viewport}};function shouldPublishUpdate(registry,dragging,entry){return entry.descriptor.id!==dragging.id&&(entry.descriptor.type===dragging.type&&"virtual"===registry.droppable.getById(entry.descriptor.droppableId).descriptor.mode)}var getRemainder,base,createDimensionMarshal=function(registry,callbacks){var collection=null,publisher=function createPublisher(_ref){var registry=_ref.registry,callbacks=_ref.callbacks,staging={additions:{},removals:{},modified:{}},frameId=null,collect=function collect(){frameId||(callbacks.collectionStarting(),frameId=requestAnimationFrame((function(){frameId=null,start();var _staging=staging,additions=_staging.additions,removals=_staging.removals,modified=_staging.modified,added=Object.keys(additions).map((function(id){return registry.draggable.getById(id).getDimension(origin)})).sort((function(a,b){return a.descriptor.index-b.descriptor.index})),updated=Object.keys(modified).map((function(id){return{droppableId:id,scroll:registry.droppable.getById(id).callbacks.getScrollWhileDragging()}})),result={additions:added,removals:Object.keys(removals),modified:updated};staging={additions:{},removals:{},modified:{}},finish(),callbacks.publish(result)})))};return{add:function add(entry){var id=entry.descriptor.id;staging.additions[id]=entry,staging.modified[entry.descriptor.droppableId]=!0,staging.removals[id]&&delete staging.removals[id],collect()},remove:function remove(entry){var descriptor=entry.descriptor;staging.removals[descriptor.id]=!0,staging.modified[descriptor.droppableId]=!0,staging.additions[descriptor.id]&&delete staging.additions[descriptor.id],collect()},stop:function stop(){frameId&&(cancelAnimationFrame(frameId),frameId=null,staging={additions:{},removals:{},modified:{}})}}}({callbacks:{publish:callbacks.publishWhileDragging,collectionStarting:callbacks.collectionStarting},registry}),subscriber=function subscriber(event){collection||react_beautiful_dnd_esm_invariant(!1);var dragging=collection.critical.draggable;"ADDITION"===event.type&&shouldPublishUpdate(registry,dragging,event.value)&&publisher.add(event.value),"REMOVAL"===event.type&&shouldPublishUpdate(registry,dragging,event.value)&&publisher.remove(event.value)},marshal={updateDroppableIsEnabled:function updateDroppableIsEnabled(id,isEnabled){registry.droppable.exists(id)||react_beautiful_dnd_esm_invariant(!1),collection&&callbacks.updateDroppableIsEnabled({id,isEnabled})},updateDroppableIsCombineEnabled:function updateDroppableIsCombineEnabled(id,isCombineEnabled){collection&&(registry.droppable.exists(id)||react_beautiful_dnd_esm_invariant(!1),callbacks.updateDroppableIsCombineEnabled({id,isCombineEnabled}))},scrollDroppable:function scrollDroppable(id,change){collection&&registry.droppable.getById(id).callbacks.scroll(change)},updateDroppableScroll:function updateDroppableScroll(id,newScroll){collection&&(registry.droppable.exists(id)||react_beautiful_dnd_esm_invariant(!1),callbacks.updateDroppableScroll({id,newScroll}))},startPublishing:function startPublishing(request){collection&&react_beautiful_dnd_esm_invariant(!1);var entry=registry.draggable.getById(request.draggableId),home=registry.droppable.getById(entry.descriptor.droppableId),critical={draggable:entry.descriptor,droppable:home.descriptor},unsubscribe=registry.subscribe(subscriber);return collection={critical,unsubscribe},getInitialPublish({critical,registry,scrollOptions:request.scrollOptions})},stopPublishing:function stopPublishing(){if(collection){publisher.stop();var home=collection.critical.droppable;registry.droppable.getAllByType(home.type).forEach((function(entry){return entry.callbacks.dragStopped()})),collection.unsubscribe(),collection=null}}};return marshal},canStartDrag=function(state,id){return"IDLE"===state.phase||"DROP_ANIMATING"===state.phase&&(state.completed.result.draggableId!==id&&"DROP"===state.completed.result.reason)},scrollWindow=function(change){window.scrollBy(change.x,change.y)},getScrollableDroppables=memoize_one_esm((function(droppables){return toDroppableList(droppables).filter((function(droppable){return!!droppable.isEnabled&&!!droppable.frame}))})),getBestScrollableDroppable=function(_ref){var center=_ref.center,destination=_ref.destination,droppables=_ref.droppables;if(destination){var _dimension=droppables[destination];return _dimension.frame?_dimension:null}var dimension=function getScrollableDroppableOver(target,droppables){var maybe=find(getScrollableDroppables(droppables),(function(droppable){return droppable.frame||react_beautiful_dnd_esm_invariant(!1),isPositionInFrame(droppable.frame.pageMarginBox)(target)}));return maybe}(center,droppables);return dimension},config_startFromPercentage=.25,config_maxScrollAtPercentage=.05,config_maxPixelScroll=28,config_ease=function ease(percentage){return Math.pow(percentage,2)},config_durationDampening={stopDampeningAt:1200,accelerateAt:360},getPercentage=function(_ref){var startOfRange=_ref.startOfRange,endOfRange=_ref.endOfRange,current=_ref.current,range=endOfRange-startOfRange;return 0===range?0:(current-startOfRange)/range},accelerateAt=config_durationDampening.accelerateAt,stopAt=config_durationDampening.stopDampeningAt,getValue=function(_ref){var distanceToEdge=_ref.distanceToEdge,thresholds=_ref.thresholds,dragStartTime=_ref.dragStartTime,shouldUseTimeDampening=_ref.shouldUseTimeDampening,scroll=function(distanceToEdge,thresholds){if(distanceToEdge>thresholds.startScrollingFrom)return 0;if(distanceToEdge<=thresholds.maxScrollValueAt)return config_maxPixelScroll;if(distanceToEdge===thresholds.startScrollingFrom)return 1;var percentageFromMaxScrollValueAt=getPercentage({startOfRange:thresholds.maxScrollValueAt,endOfRange:thresholds.startScrollingFrom,current:distanceToEdge}),scroll=config_maxPixelScroll*config_ease(1-percentageFromMaxScrollValueAt);return Math.ceil(scroll)}(distanceToEdge,thresholds);return 0===scroll?0:shouldUseTimeDampening?Math.max(function(proposedScroll,dragStartTime){var startOfRange=dragStartTime,endOfRange=stopAt,runTime=Date.now()-startOfRange;if(runTime>=stopAt)return proposedScroll;if(runTime<accelerateAt)return 1;var betweenAccelerateAtAndStopAtPercentage=getPercentage({startOfRange:accelerateAt,endOfRange,current:runTime}),scroll=proposedScroll*config_ease(betweenAccelerateAtAndStopAtPercentage);return Math.ceil(scroll)}(scroll,dragStartTime),1):scroll},getScrollOnAxis=function(_ref){var container=_ref.container,distanceToEdges=_ref.distanceToEdges,dragStartTime=_ref.dragStartTime,axis=_ref.axis,shouldUseTimeDampening=_ref.shouldUseTimeDampening,thresholds=function(container,axis){return{startScrollingFrom:container[axis.size]*config_startFromPercentage,maxScrollValueAt:container[axis.size]*config_maxScrollAtPercentage}}(container,axis);return distanceToEdges[axis.end]<distanceToEdges[axis.start]?getValue({distanceToEdge:distanceToEdges[axis.end],thresholds,dragStartTime,shouldUseTimeDampening}):-1*getValue({distanceToEdge:distanceToEdges[axis.start],thresholds,dragStartTime,shouldUseTimeDampening})},clean$2=apply((function(value){return 0===value?0:value})),getScroll=function(_ref){var dragStartTime=_ref.dragStartTime,container=_ref.container,subject=_ref.subject,center=_ref.center,shouldUseTimeDampening=_ref.shouldUseTimeDampening,distanceToEdges={top:center.y-container.top,right:container.right-center.x,bottom:container.bottom-center.y,left:center.x-container.left},y=getScrollOnAxis({container,distanceToEdges,dragStartTime,axis:vertical,shouldUseTimeDampening}),x=getScrollOnAxis({container,distanceToEdges,dragStartTime,axis:horizontal,shouldUseTimeDampening}),required=clean$2({x,y});if(isEqual(required,origin))return null;var limited=function(_ref){var container=_ref.container,subject=_ref.subject,proposedScroll=_ref.proposedScroll,isTooBigVertically=subject.height>container.height,isTooBigHorizontally=subject.width>container.width;return isTooBigHorizontally||isTooBigVertically?isTooBigHorizontally&&isTooBigVertically?null:{x:isTooBigHorizontally?0:proposedScroll.x,y:isTooBigVertically?0:proposedScroll.y}:proposedScroll}({container,subject,proposedScroll:required});return limited?isEqual(limited,origin)?null:limited:null},smallestSigned=apply((function(value){return 0===value?0:value>0?1:-1})),getOverlap=(getRemainder=function getRemainder(target,max){return target<0?target:target>max?target-max:0},function(_ref){var current=_ref.current,max=_ref.max,change=_ref.change,targetScroll=add(current,change),overlap={x:getRemainder(targetScroll.x,max.x),y:getRemainder(targetScroll.y,max.y)};return isEqual(overlap,origin)?null:overlap}),canPartiallyScroll=function canPartiallyScroll(_ref2){var rawMax=_ref2.max,current=_ref2.current,change=_ref2.change,max={x:Math.max(current.x,rawMax.x),y:Math.max(current.y,rawMax.y)},smallestChange=smallestSigned(change),overlap=getOverlap({max,current,change:smallestChange});return!overlap||(0!==smallestChange.x&&0===overlap.x||0!==smallestChange.y&&0===overlap.y)},canScrollWindow=function canScrollWindow(viewport,change){return canPartiallyScroll({current:viewport.scroll.current,max:viewport.scroll.max,change})},canScrollDroppable=function canScrollDroppable(droppable,change){var frame=droppable.frame;return!!frame&&canPartiallyScroll({current:frame.scroll.current,max:frame.scroll.max,change})},scroll$1=function(_ref){var state=_ref.state,dragStartTime=_ref.dragStartTime,shouldUseTimeDampening=_ref.shouldUseTimeDampening,scrollWindow=_ref.scrollWindow,scrollDroppable=_ref.scrollDroppable,center=state.current.page.borderBoxCenter,subject=state.dimensions.draggables[state.critical.draggable.id].page.marginBox;if(state.isWindowScrollAllowed){var _change=function(_ref){var viewport=_ref.viewport,subject=_ref.subject,center=_ref.center,dragStartTime=_ref.dragStartTime,shouldUseTimeDampening=_ref.shouldUseTimeDampening,scroll=getScroll({dragStartTime,container:viewport.frame,subject,center,shouldUseTimeDampening});return scroll&&canScrollWindow(viewport,scroll)?scroll:null}({dragStartTime,viewport:state.viewport,subject,center,shouldUseTimeDampening});if(_change)return void scrollWindow(_change)}var droppable=getBestScrollableDroppable({center,destination:whatIsDraggedOver(state.impact),droppables:state.dimensions.droppables});if(droppable){var change=function(_ref){var droppable=_ref.droppable,subject=_ref.subject,center=_ref.center,dragStartTime=_ref.dragStartTime,shouldUseTimeDampening=_ref.shouldUseTimeDampening,frame=droppable.frame;if(!frame)return null;var scroll=getScroll({dragStartTime,container:frame.pageMarginBox,subject,center,shouldUseTimeDampening});return scroll&&canScrollDroppable(droppable,scroll)?scroll:null}({dragStartTime,droppable,subject,center,shouldUseTimeDampening});change&&scrollDroppable(droppable.descriptor.id,change)}},createJumpScroller=function(_ref){var move=_ref.move,scrollDroppable=_ref.scrollDroppable,scrollWindow=_ref.scrollWindow,scrollDroppableAsMuchAsItCan=function scrollDroppableAsMuchAsItCan(droppable,change){if(!canScrollDroppable(droppable,change))return change;var overlap=function getDroppableOverlap(droppable,change){var frame=droppable.frame;return frame&&canScrollDroppable(droppable,change)?getOverlap({current:frame.scroll.current,max:frame.scroll.max,change}):null}(droppable,change);if(!overlap)return scrollDroppable(droppable.descriptor.id,change),null;var whatTheDroppableCanScroll=subtract(change,overlap);return scrollDroppable(droppable.descriptor.id,whatTheDroppableCanScroll),subtract(change,whatTheDroppableCanScroll)},scrollWindowAsMuchAsItCan=function scrollWindowAsMuchAsItCan(isWindowScrollAllowed,viewport,change){if(!isWindowScrollAllowed)return change;if(!canScrollWindow(viewport,change))return change;var overlap=function getWindowOverlap(viewport,change){if(!canScrollWindow(viewport,change))return null;var max=viewport.scroll.max,current=viewport.scroll.current;return getOverlap({current,max,change})}(viewport,change);if(!overlap)return scrollWindow(change),null;var whatTheWindowCanScroll=subtract(change,overlap);return scrollWindow(whatTheWindowCanScroll),subtract(change,whatTheWindowCanScroll)};return function jumpScroller(state){var request=state.scrollJumpRequest;if(request){var destination=whatIsDraggedOver(state.impact);destination||react_beautiful_dnd_esm_invariant(!1);var droppableRemainder=scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination],request);if(droppableRemainder){var viewport=state.viewport,windowRemainder=scrollWindowAsMuchAsItCan(state.isWindowScrollAllowed,viewport,droppableRemainder);windowRemainder&&function moveByOffset(state,offset){var client=add(state.current.client.selection,offset);move({client})}(state,windowRemainder)}}}},createAutoScroller=function(_ref){var scrollDroppable=_ref.scrollDroppable,scrollWindow=_ref.scrollWindow,move=_ref.move,fluidScroller=function(_ref){var scrollWindow=_ref.scrollWindow,scrollDroppable=_ref.scrollDroppable,scheduleWindowScroll=raf_schd_esm(scrollWindow),scheduleDroppableScroll=raf_schd_esm(scrollDroppable),dragging=null,tryScroll=function tryScroll(state){dragging||react_beautiful_dnd_esm_invariant(!1);var _dragging=dragging,shouldUseTimeDampening=_dragging.shouldUseTimeDampening,dragStartTime=_dragging.dragStartTime;scroll$1({state,scrollWindow:scheduleWindowScroll,scrollDroppable:scheduleDroppableScroll,dragStartTime,shouldUseTimeDampening})};return{start:function start$1(state){start(),dragging&&react_beautiful_dnd_esm_invariant(!1);var dragStartTime=Date.now(),wasScrollNeeded=!1,fakeScrollCallback=function fakeScrollCallback(){wasScrollNeeded=!0};scroll$1({state,dragStartTime:0,shouldUseTimeDampening:!1,scrollWindow:fakeScrollCallback,scrollDroppable:fakeScrollCallback}),dragging={dragStartTime,shouldUseTimeDampening:wasScrollNeeded},finish(),wasScrollNeeded&&tryScroll(state)},stop:function stop(){dragging&&(scheduleWindowScroll.cancel(),scheduleDroppableScroll.cancel(),dragging=null)},scroll:tryScroll}}({scrollWindow,scrollDroppable}),jumpScroll=createJumpScroller({move,scrollWindow,scrollDroppable});return{scroll:function scroll(state){"DRAGGING"===state.phase&&("FLUID"!==state.movementMode?state.scrollJumpRequest&&jumpScroll(state):fluidScroller.scroll(state))},start:fluidScroller.start,stop:fluidScroller.stop}},prefix$1="data-rbd",dragHandle={base:base=prefix$1+"-drag-handle",draggableId:base+"-draggable-id",contextId:base+"-context-id"},draggable=function(){var base=prefix$1+"-draggable";return{base,contextId:base+"-context-id",id:base+"-id"}}(),droppable=function(){var base=prefix$1+"-droppable";return{base,contextId:base+"-context-id",id:base+"-id"}}(),scrollContainer={contextId:prefix$1+"-scroll-container-context-id"},getStyles=function getStyles(rules,property){return rules.map((function(rule){var value=rule.styles[property];return value?rule.selector+" { "+value+" }":""})).join(" ")},getStyles$1=function(contextId){var grabCursor,transition,getSelector=function makeGetSelector(context){return function(attribute){return"["+attribute+'="'+context+'"]'}}(contextId),dragHandle$1=(grabCursor="\n      cursor: -webkit-grab;\n      cursor: grab;\n    ",{selector:getSelector(dragHandle.contextId),styles:{always:"\n          -webkit-touch-callout: none;\n          -webkit-tap-highlight-color: rgba(0,0,0,0);\n          touch-action: manipulation;\n        ",resting:grabCursor,dragging:"pointer-events: none;",dropAnimating:grabCursor}}),rules=[(transition="\n      transition: "+transitions.outOfTheWay+";\n    ",{selector:getSelector(draggable.contextId),styles:{dragging:transition,dropAnimating:transition,userCancel:transition}}),dragHandle$1,{selector:getSelector(droppable.contextId),styles:{always:"overflow-anchor: none;"}},{selector:"body",styles:{dragging:"\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        overflow-anchor: none;\n      "}}];return{always:getStyles(rules,"always"),resting:getStyles(rules,"resting"),dragging:getStyles(rules,"dragging"),dropAnimating:getStyles(rules,"dropAnimating"),userCancel:getStyles(rules,"userCancel")}},react_beautiful_dnd_esm_useIsomorphicLayoutEffect="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?react.useLayoutEffect:react.useEffect,getHead=function getHead(){var head=document.querySelector("head");return head||react_beautiful_dnd_esm_invariant(!1),head},createStyleEl=function createStyleEl(nonce){var el=document.createElement("style");return nonce&&el.setAttribute("nonce",nonce),el.type="text/css",el};var getWindowFromEl=function(el){return el&&el.ownerDocument?el.ownerDocument.defaultView:window};function isHtmlElement(el){return el instanceof getWindowFromEl(el).HTMLElement}function findDragHandle(contextId,draggableId){var selector="["+dragHandle.contextId+'="'+contextId+'"]',possible=toArray(document.querySelectorAll(selector));if(!possible.length)return null;var handle=find(possible,(function(el){return el.getAttribute(dragHandle.draggableId)===draggableId}));return handle&&isHtmlElement(handle)?handle:null}function createRegistry(){var entries={draggables:{},droppables:{}},subscribers=[];function notify(event){subscribers.length&&subscribers.forEach((function(cb){return cb(event)}))}function findDraggableById(id){return entries.draggables[id]||null}function findDroppableById(id){return entries.droppables[id]||null}return{draggable:{register:function register(entry){entries.draggables[entry.descriptor.id]=entry,notify({type:"ADDITION",value:entry})},update:function update(entry,last){var current=entries.draggables[last.descriptor.id];current&&current.uniqueId===entry.uniqueId&&(delete entries.draggables[last.descriptor.id],entries.draggables[entry.descriptor.id]=entry)},unregister:function unregister(entry){var draggableId=entry.descriptor.id,current=findDraggableById(draggableId);current&&entry.uniqueId===current.uniqueId&&(delete entries.draggables[draggableId],notify({type:"REMOVAL",value:entry}))},getById:function getDraggableById(id){var entry=findDraggableById(id);return entry||react_beautiful_dnd_esm_invariant(!1),entry},findById:findDraggableById,exists:function exists(id){return Boolean(findDraggableById(id))},getAllByType:function getAllByType(type){return values(entries.draggables).filter((function(entry){return entry.descriptor.type===type}))}},droppable:{register:function register(entry){entries.droppables[entry.descriptor.id]=entry},unregister:function unregister(entry){var current=findDroppableById(entry.descriptor.id);current&&entry.uniqueId===current.uniqueId&&delete entries.droppables[entry.descriptor.id]},getById:function getDroppableById(id){var entry=findDroppableById(id);return entry||react_beautiful_dnd_esm_invariant(!1),entry},findById:findDroppableById,exists:function exists(id){return Boolean(findDroppableById(id))},getAllByType:function getAllByType(type){return values(entries.droppables).filter((function(entry){return entry.descriptor.type===type}))}},subscribe:function subscribe(cb){return subscribers.push(cb),function unsubscribe(){var index=subscribers.indexOf(cb);-1!==index&&subscribers.splice(index,1)}},clean:function clean(){entries.draggables={},entries.droppables={},subscribers.length=0}}}var StoreContext=react.createContext(null),getBodyElement=function(){var body=document.body;return body||react_beautiful_dnd_esm_invariant(!1),body},visuallyHidden={position:"absolute",width:"1px",height:"1px",margin:"-1px",border:"0",padding:"0",overflow:"hidden",clip:"rect(0 0 0 0)","clip-path":"inset(100%)"},getId=function getId(contextId){return"rbd-announcement-"+contextId};var count=0,defaults={separator:"::"};function useUniqueId(prefix,options){return void 0===options&&(options=defaults),use_memo_one_esm_useMemo((function(){return""+prefix+options.separator+count++}),[options.separator,prefix])}var AppContext=react.createContext(null);function useDev(useHook){0}function useDevSetupWarning(fn,inputs){useDev()}function usePrevious(current){var ref=(0,react.useRef)(current);return(0,react.useEffect)((function(){ref.current=current})),ref}var _preventedKeys,react_beautiful_dnd_esm_escape=27,space=32,arrowLeft=37,arrowUp=38,arrowRight=39,arrowDown=40,preventedKeys=((_preventedKeys={})[13]=!0,_preventedKeys[9]=!0,_preventedKeys),preventStandardKeyEvents=function(event){preventedKeys[event.keyCode]&&event.preventDefault()},supportedEventName=function(){var base="visibilitychange";return"undefined"==typeof document?base:find([base,"ms"+base,"webkit"+base,"moz"+base,"o"+base],(function(eventName){return"on"+eventName in document}))||base}(),primaryButton=0,sloppyClickThreshold=5;var _scrollJumpKeys,idle$1={type:"IDLE"};function getCaptureBindings(_ref){var cancel=_ref.cancel,completed=_ref.completed,getPhase=_ref.getPhase,setPhase=_ref.setPhase;return[{eventName:"mousemove",fn:function fn(event){var button=event.button,clientX=event.clientX,clientY=event.clientY;if(button===primaryButton){var point={x:clientX,y:clientY},phase=getPhase();if("DRAGGING"===phase.type)return event.preventDefault(),void phase.actions.move(point);if("PENDING"!==phase.type&&react_beautiful_dnd_esm_invariant(!1),function isSloppyClickThresholdExceeded(original,current){return Math.abs(current.x-original.x)>=sloppyClickThreshold||Math.abs(current.y-original.y)>=sloppyClickThreshold}(phase.point,point)){event.preventDefault();var actions=phase.actions.fluidLift(point);setPhase({type:"DRAGGING",actions})}}}},{eventName:"mouseup",fn:function fn(event){var phase=getPhase();"DRAGGING"===phase.type?(event.preventDefault(),phase.actions.drop({shouldBlockNextClick:!0}),completed()):cancel()}},{eventName:"mousedown",fn:function fn(event){"DRAGGING"===getPhase().type&&event.preventDefault(),cancel()}},{eventName:"keydown",fn:function fn(event){if("PENDING"!==getPhase().type)return event.keyCode===react_beautiful_dnd_esm_escape?(event.preventDefault(),void cancel()):void preventStandardKeyEvents(event);cancel()}},{eventName:"resize",fn:cancel},{eventName:"scroll",options:{passive:!0,capture:!1},fn:function fn(){"PENDING"===getPhase().type&&cancel()}},{eventName:"webkitmouseforcedown",fn:function fn(event){var phase=getPhase();"IDLE"===phase.type&&react_beautiful_dnd_esm_invariant(!1),phase.actions.shouldRespectForcePress()?cancel():event.preventDefault()}},{eventName:supportedEventName,fn:cancel}]}function useMouseSensor(api){var phaseRef=(0,react.useRef)(idle$1),unbindEventsRef=(0,react.useRef)(noop),startCaptureBinding=use_memo_one_esm_useMemo((function(){return{eventName:"mousedown",fn:function onMouseDown(event){if(!event.defaultPrevented&&event.button===primaryButton&&!(event.ctrlKey||event.metaKey||event.shiftKey||event.altKey)){var draggableId=api.findClosestDraggableId(event);if(draggableId){var actions=api.tryGetLock(draggableId,stop,{sourceEvent:event});if(actions){event.preventDefault();var point={x:event.clientX,y:event.clientY};unbindEventsRef.current(),startPendingDrag(actions,point)}}}}}}),[api]),preventForcePressBinding=use_memo_one_esm_useMemo((function(){return{eventName:"webkitmouseforcewillbegin",fn:function fn(event){if(!event.defaultPrevented){var id=api.findClosestDraggableId(event);if(id){var options=api.findOptionsForDraggable(id);options&&(options.shouldRespectForcePress||api.canGetLock(id)&&event.preventDefault())}}}}}),[api]),listenForCapture=useCallback((function listenForCapture(){unbindEventsRef.current=bindEvents(window,[preventForcePressBinding,startCaptureBinding],{passive:!1,capture:!0})}),[preventForcePressBinding,startCaptureBinding]),stop=useCallback((function(){"IDLE"!==phaseRef.current.type&&(phaseRef.current=idle$1,unbindEventsRef.current(),listenForCapture())}),[listenForCapture]),cancel=useCallback((function(){var phase=phaseRef.current;stop(),"DRAGGING"===phase.type&&phase.actions.cancel({shouldBlockNextClick:!0}),"PENDING"===phase.type&&phase.actions.abort()}),[stop]),bindCapturingEvents=useCallback((function bindCapturingEvents(){var bindings=getCaptureBindings({cancel,completed:stop,getPhase:function getPhase(){return phaseRef.current},setPhase:function setPhase(phase){phaseRef.current=phase}});unbindEventsRef.current=bindEvents(window,bindings,{capture:!0,passive:!1})}),[cancel,stop]),startPendingDrag=useCallback((function startPendingDrag(actions,point){"IDLE"!==phaseRef.current.type&&react_beautiful_dnd_esm_invariant(!1),phaseRef.current={type:"PENDING",point,actions},bindCapturingEvents()}),[bindCapturingEvents]);react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function mount(){return listenForCapture(),function unmount(){unbindEventsRef.current()}}),[listenForCapture])}function noop$1(){}var scrollJumpKeys=((_scrollJumpKeys={})[34]=!0,_scrollJumpKeys[33]=!0,_scrollJumpKeys[36]=!0,_scrollJumpKeys[35]=!0,_scrollJumpKeys);function getDraggingBindings(actions,stop){function cancel(){stop(),actions.cancel()}return[{eventName:"keydown",fn:function fn(event){return event.keyCode===react_beautiful_dnd_esm_escape?(event.preventDefault(),void cancel()):event.keyCode===space?(event.preventDefault(),void function drop(){stop(),actions.drop()}()):event.keyCode===arrowDown?(event.preventDefault(),void actions.moveDown()):event.keyCode===arrowUp?(event.preventDefault(),void actions.moveUp()):event.keyCode===arrowRight?(event.preventDefault(),void actions.moveRight()):event.keyCode===arrowLeft?(event.preventDefault(),void actions.moveLeft()):void(scrollJumpKeys[event.keyCode]?event.preventDefault():preventStandardKeyEvents(event))}},{eventName:"mousedown",fn:cancel},{eventName:"mouseup",fn:cancel},{eventName:"click",fn:cancel},{eventName:"touchstart",fn:cancel},{eventName:"resize",fn:cancel},{eventName:"wheel",fn:cancel,options:{passive:!0}},{eventName:supportedEventName,fn:cancel}]}function useKeyboardSensor(api){var unbindEventsRef=(0,react.useRef)(noop$1),startCaptureBinding=use_memo_one_esm_useMemo((function(){return{eventName:"keydown",fn:function onKeyDown(event){if(!event.defaultPrevented&&event.keyCode===space){var draggableId=api.findClosestDraggableId(event);if(draggableId){var preDrag=api.tryGetLock(draggableId,stop,{sourceEvent:event});if(preDrag){event.preventDefault();var isCapturing=!0,actions=preDrag.snapLift();unbindEventsRef.current(),unbindEventsRef.current=bindEvents(window,getDraggingBindings(actions,stop),{capture:!0,passive:!1})}}}function stop(){isCapturing||react_beautiful_dnd_esm_invariant(!1),isCapturing=!1,unbindEventsRef.current(),listenForCapture()}}}}),[api]),listenForCapture=useCallback((function tryStartCapture(){unbindEventsRef.current=bindEvents(window,[startCaptureBinding],{passive:!1,capture:!0})}),[startCaptureBinding]);react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function mount(){return listenForCapture(),function unmount(){unbindEventsRef.current()}}),[listenForCapture])}var idle$2={type:"IDLE"},timeForLongPress=120,forcePressThreshold=.15;function useTouchSensor(api){var phaseRef=(0,react.useRef)(idle$2),unbindEventsRef=(0,react.useRef)(noop),getPhase=useCallback((function getPhase(){return phaseRef.current}),[]),setPhase=useCallback((function setPhase(phase){phaseRef.current=phase}),[]),startCaptureBinding=use_memo_one_esm_useMemo((function(){return{eventName:"touchstart",fn:function onTouchStart(event){if(!event.defaultPrevented){var draggableId=api.findClosestDraggableId(event);if(draggableId){var actions=api.tryGetLock(draggableId,stop,{sourceEvent:event});if(actions){var touch=event.touches[0],point={x:touch.clientX,y:touch.clientY};unbindEventsRef.current(),startPendingDrag(actions,point)}}}}}}),[api]),listenForCapture=useCallback((function listenForCapture(){unbindEventsRef.current=bindEvents(window,[startCaptureBinding],{capture:!0,passive:!1})}),[startCaptureBinding]),stop=useCallback((function(){var current=phaseRef.current;"IDLE"!==current.type&&("PENDING"===current.type&&clearTimeout(current.longPressTimerId),setPhase(idle$2),unbindEventsRef.current(),listenForCapture())}),[listenForCapture,setPhase]),cancel=useCallback((function(){var phase=phaseRef.current;stop(),"DRAGGING"===phase.type&&phase.actions.cancel({shouldBlockNextClick:!0}),"PENDING"===phase.type&&phase.actions.abort()}),[stop]),bindCapturingEvents=useCallback((function bindCapturingEvents(){var options={capture:!0,passive:!1},args={cancel,completed:stop,getPhase},unbindTarget=bindEvents(window,function getHandleBindings(_ref2){var cancel=_ref2.cancel,completed=_ref2.completed,getPhase=_ref2.getPhase;return[{eventName:"touchmove",options:{capture:!1},fn:function fn(event){var phase=getPhase();if("DRAGGING"===phase.type){phase.hasMoved=!0;var _event$touches$=event.touches[0],point={x:_event$touches$.clientX,y:_event$touches$.clientY};event.preventDefault(),phase.actions.move(point)}else cancel()}},{eventName:"touchend",fn:function fn(event){var phase=getPhase();"DRAGGING"===phase.type?(event.preventDefault(),phase.actions.drop({shouldBlockNextClick:!0}),completed()):cancel()}},{eventName:"touchcancel",fn:function fn(event){"DRAGGING"===getPhase().type?(event.preventDefault(),cancel()):cancel()}},{eventName:"touchforcechange",fn:function fn(event){var phase=getPhase();"IDLE"===phase.type&&react_beautiful_dnd_esm_invariant(!1);var touch=event.touches[0];if(touch&&touch.force>=forcePressThreshold){var shouldRespect=phase.actions.shouldRespectForcePress();if("PENDING"!==phase.type)return shouldRespect?phase.hasMoved?void event.preventDefault():void cancel():void event.preventDefault();shouldRespect&&cancel()}}},{eventName:supportedEventName,fn:cancel}]}(args),options),unbindWindow=bindEvents(window,function getWindowBindings(_ref){var cancel=_ref.cancel,getPhase=_ref.getPhase;return[{eventName:"orientationchange",fn:cancel},{eventName:"resize",fn:cancel},{eventName:"contextmenu",fn:function fn(event){event.preventDefault()}},{eventName:"keydown",fn:function fn(event){"DRAGGING"===getPhase().type?(event.keyCode===react_beautiful_dnd_esm_escape&&event.preventDefault(),cancel()):cancel()}},{eventName:supportedEventName,fn:cancel}]}(args),options);unbindEventsRef.current=function unbindAll(){unbindTarget(),unbindWindow()}}),[cancel,getPhase,stop]),startDragging=useCallback((function startDragging(){var phase=getPhase();"PENDING"!==phase.type&&react_beautiful_dnd_esm_invariant(!1);var actions=phase.actions.fluidLift(phase.point);setPhase({type:"DRAGGING",actions,hasMoved:!1})}),[getPhase,setPhase]),startPendingDrag=useCallback((function startPendingDrag(actions,point){"IDLE"!==getPhase().type&&react_beautiful_dnd_esm_invariant(!1);var longPressTimerId=setTimeout(startDragging,timeForLongPress);setPhase({type:"PENDING",point,actions,longPressTimerId}),bindCapturingEvents()}),[bindCapturingEvents,getPhase,setPhase,startDragging]);react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function mount(){return listenForCapture(),function unmount(){unbindEventsRef.current();var phase=getPhase();"PENDING"===phase.type&&(clearTimeout(phase.longPressTimerId),setPhase(idle$2))}}),[getPhase,listenForCapture,setPhase]),react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function webkitHack(){return bindEvents(window,[{eventName:"touchmove",fn:function fn(){},options:{capture:!1,passive:!1}}])}),[])}var interactiveTagNames={input:!0,button:!0,textarea:!0,select:!0,option:!0,optgroup:!0,video:!0,audio:!0};function isAnInteractiveElement(parent,current){if(null==current)return!1;if(Boolean(interactiveTagNames[current.tagName.toLowerCase()]))return!0;var attribute=current.getAttribute("contenteditable");return"true"===attribute||""===attribute||current!==parent&&isAnInteractiveElement(parent,current.parentElement)}function isEventInInteractiveElement(draggable,event){var target=event.target;return!!isHtmlElement(target)&&isAnInteractiveElement(draggable,target)}var getBorderBoxCenterPosition=function(el){return getRect(el.getBoundingClientRect()).center};var supportedMatchesName="undefined"==typeof document?"matches":find(["matches","msMatchesSelector","webkitMatchesSelector"],(function(name){return name in Element.prototype}))||"matches";function closestPonyfill(el,selector){return null==el?null:el[supportedMatchesName](selector)?el:closestPonyfill(el.parentElement,selector)}function closest$1(el,selector){return el.closest?el.closest(selector):closestPonyfill(el,selector)}function findClosestDragHandleFromEvent(contextId,event){var target=event.target;if(!function isElement(el){return el instanceof getWindowFromEl(el).Element}(target))return null;var selector=function getSelector(contextId){return"["+dragHandle.contextId+'="'+contextId+'"]'}(contextId),handle=closest$1(target,selector);return handle&&isHtmlElement(handle)?handle:null}function preventDefault(event){event.preventDefault()}function _isActive(_ref){var expected=_ref.expected,phase=_ref.phase,isLockActive=_ref.isLockActive;_ref.shouldWarn;return!!isLockActive()&&expected===phase}function canStart(_ref2){var lockAPI=_ref2.lockAPI,store=_ref2.store,registry=_ref2.registry,draggableId=_ref2.draggableId;if(lockAPI.isClaimed())return!1;var entry=registry.draggable.findById(draggableId);return!!entry&&(!!entry.options.isEnabled&&!!canStartDrag(store.getState(),draggableId))}function tryStart(_ref3){var lockAPI=_ref3.lockAPI,contextId=_ref3.contextId,store=_ref3.store,registry=_ref3.registry,draggableId=_ref3.draggableId,forceSensorStop=_ref3.forceSensorStop,sourceEvent=_ref3.sourceEvent;if(!canStart({lockAPI,store,registry,draggableId}))return null;var entry=registry.draggable.getById(draggableId),el=function findDraggable(contextId,draggableId){var selector="["+draggable.contextId+'="'+contextId+'"]',draggable$1=find(toArray(document.querySelectorAll(selector)),(function(el){return el.getAttribute(draggable.id)===draggableId}));return draggable$1&&isHtmlElement(draggable$1)?draggable$1:null}(contextId,entry.descriptor.id);if(!el)return null;if(sourceEvent&&!entry.options.canDragInteractiveElements&&isEventInInteractiveElement(el,sourceEvent))return null;var lock=lockAPI.claim(forceSensorStop||noop),phase="PRE_DRAG";function getShouldRespectForcePress(){return entry.options.shouldRespectForcePress}function isLockActive(){return lockAPI.isActive(lock)}var tryDispatchWhenDragging=function tryDispatch(expected,getAction){_isActive({expected,phase,isLockActive,shouldWarn:!0})&&store.dispatch(getAction())}.bind(null,"DRAGGING");function lift$1(args){function completed(){lockAPI.release(),phase="COMPLETED"}function finish(reason,options){if(void 0===options&&(options={shouldBlockNextClick:!1}),args.cleanup(),options.shouldBlockNextClick){var unbind=bindEvents(window,[{eventName:"click",fn:preventDefault,options:{once:!0,passive:!1,capture:!0}}]);setTimeout(unbind)}completed(),store.dispatch(drop({reason}))}return"PRE_DRAG"!==phase&&(completed(),"PRE_DRAG"!==phase&&react_beautiful_dnd_esm_invariant(!1)),store.dispatch(lift(args.liftActionArgs)),phase="DRAGGING",(0,esm_extends.A)({isActive:function isActive(){return _isActive({expected:"DRAGGING",phase,isLockActive,shouldWarn:!1})},shouldRespectForcePress:getShouldRespectForcePress,drop:function drop(options){return finish("DROP",options)},cancel:function cancel(options){return finish("CANCEL",options)}},args.actions)}return{isActive:function isActive(){return _isActive({expected:"PRE_DRAG",phase,isLockActive,shouldWarn:!1})},shouldRespectForcePress:getShouldRespectForcePress,fluidLift:function fluidLift(clientSelection){var move$1=raf_schd_esm((function(client){tryDispatchWhenDragging((function(){return move({client})}))})),api=lift$1({liftActionArgs:{id:draggableId,clientSelection,movementMode:"FLUID"},cleanup:function cleanup(){return move$1.cancel()},actions:{move:move$1}});return(0,esm_extends.A)({},api,{move:move$1})},snapLift:function snapLift(){var actions={moveUp:function moveUp$1(){return tryDispatchWhenDragging(moveUp)},moveRight:function moveRight$1(){return tryDispatchWhenDragging(moveRight)},moveDown:function moveDown$1(){return tryDispatchWhenDragging(moveDown)},moveLeft:function moveLeft$1(){return tryDispatchWhenDragging(moveLeft)}};return lift$1({liftActionArgs:{id:draggableId,clientSelection:getBorderBoxCenterPosition(el),movementMode:"SNAP"},cleanup:noop,actions})},abort:function abortPreDrag(){_isActive({expected:"PRE_DRAG",phase,isLockActive,shouldWarn:!0})&&lockAPI.release()}}}var defaultSensors=[useMouseSensor,useKeyboardSensor,useTouchSensor];function useSensorMarshal(_ref4){var contextId=_ref4.contextId,store=_ref4.store,registry=_ref4.registry,customSensors=_ref4.customSensors,enableDefaultSensors=_ref4.enableDefaultSensors,useSensors=[].concat(enableDefaultSensors?defaultSensors:[],customSensors||[]),lockAPI=(0,react.useState)((function(){return function create(){var lock=null;function release(){lock||react_beautiful_dnd_esm_invariant(!1),lock=null}return{isClaimed:function isClaimed(){return Boolean(lock)},isActive:function isActive(value){return value===lock},claim:function claim(abandon){lock&&react_beautiful_dnd_esm_invariant(!1);var newLock={abandon};return lock=newLock,newLock},release,tryAbandon:function tryAbandon(){lock&&(lock.abandon(),release())}}}()}))[0],tryAbandonLock=useCallback((function tryAbandonLock(previous,current){previous.isDragging&&!current.isDragging&&lockAPI.tryAbandon()}),[lockAPI]);react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function listenToStore(){var previous=store.getState();return store.subscribe((function(){var current=store.getState();tryAbandonLock(previous,current),previous=current}))}),[lockAPI,store,tryAbandonLock]),react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function(){return lockAPI.tryAbandon}),[lockAPI.tryAbandon]);var canGetLock=useCallback((function(draggableId){return canStart({lockAPI,registry,store,draggableId})}),[lockAPI,registry,store]),tryGetLock=useCallback((function(draggableId,forceStop,options){return tryStart({lockAPI,registry,contextId,store,draggableId,forceSensorStop:forceStop,sourceEvent:options&&options.sourceEvent?options.sourceEvent:null})}),[contextId,lockAPI,registry,store]),findClosestDraggableId=useCallback((function(event){return function tryGetClosestDraggableIdFromEvent(contextId,event){var handle=findClosestDragHandleFromEvent(contextId,event);return handle?handle.getAttribute(dragHandle.draggableId):null}(contextId,event)}),[contextId]),findOptionsForDraggable=useCallback((function(id){var entry=registry.draggable.findById(id);return entry?entry.options:null}),[registry.draggable]),tryReleaseLock=useCallback((function tryReleaseLock(){lockAPI.isClaimed()&&(lockAPI.tryAbandon(),"IDLE"!==store.getState().phase&&store.dispatch(flush()))}),[lockAPI,store]),isLockClaimed=useCallback(lockAPI.isClaimed,[lockAPI]),api=use_memo_one_esm_useMemo((function(){return{canGetLock,tryGetLock,findClosestDraggableId,findOptionsForDraggable,tryReleaseLock,isLockClaimed}}),[canGetLock,tryGetLock,findClosestDraggableId,findOptionsForDraggable,tryReleaseLock,isLockClaimed]);!function useValidateSensorHooks(sensorHooks){useDev()}();for(var i=0;i<useSensors.length;i++)useSensors[i](api)}var createResponders=function createResponders(props){return{onBeforeCapture:props.onBeforeCapture,onBeforeDragStart:props.onBeforeDragStart,onDragStart:props.onDragStart,onDragEnd:props.onDragEnd,onDragUpdate:props.onDragUpdate}};function getStore(lazyRef){return lazyRef.current||react_beautiful_dnd_esm_invariant(!1),lazyRef.current}function App(props){var contextId=props.contextId,setCallbacks=props.setCallbacks,sensors=props.sensors,nonce=props.nonce,dragHandleUsageInstructions=props.dragHandleUsageInstructions,lazyStoreRef=(0,react.useRef)(null);!function useStartupValidation(){useDevSetupWarning()}();var lastPropsRef=usePrevious(props),getResponders=useCallback((function(){return createResponders(lastPropsRef.current)}),[lastPropsRef]),announce=function useAnnouncer(contextId){var id=use_memo_one_esm_useMemo((function(){return getId(contextId)}),[contextId]),ref=(0,react.useRef)(null);return(0,react.useEffect)((function setup(){var el=document.createElement("div");return ref.current=el,el.id=id,el.setAttribute("aria-live","assertive"),el.setAttribute("aria-atomic","true"),(0,esm_extends.A)(el.style,visuallyHidden),getBodyElement().appendChild(el),function cleanup(){setTimeout((function remove(){var body=getBodyElement();body.contains(el)&&body.removeChild(el),el===ref.current&&(ref.current=null)}))}}),[id]),useCallback((function(message){var el=ref.current;el&&(el.textContent=message)}),[])}(contextId),dragHandleUsageInstructionsId=function useHiddenTextElement(_ref2){var contextId=_ref2.contextId,text=_ref2.text,uniqueId=useUniqueId("hidden-text",{separator:"-"}),id=use_memo_one_esm_useMemo((function(){return function getElementId(_ref){return"rbd-hidden-text-"+_ref.contextId+"-"+_ref.uniqueId}({contextId,uniqueId})}),[uniqueId,contextId]);return(0,react.useEffect)((function mount(){var el=document.createElement("div");return el.id=id,el.textContent=text,el.style.display="none",getBodyElement().appendChild(el),function unmount(){var body=getBodyElement();body.contains(el)&&body.removeChild(el)}}),[id,text]),id}({contextId,text:dragHandleUsageInstructions}),styleMarshal=function useStyleMarshal(contextId,nonce){var styles=use_memo_one_esm_useMemo((function(){return getStyles$1(contextId)}),[contextId]),alwaysRef=(0,react.useRef)(null),dynamicRef=(0,react.useRef)(null),setDynamicStyle=useCallback(memoize_one_esm((function(proposed){var el=dynamicRef.current;el||react_beautiful_dnd_esm_invariant(!1),el.textContent=proposed})),[]),setAlwaysStyle=useCallback((function(proposed){var el=alwaysRef.current;el||react_beautiful_dnd_esm_invariant(!1),el.textContent=proposed}),[]);react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function(){(alwaysRef.current||dynamicRef.current)&&react_beautiful_dnd_esm_invariant(!1);var always=createStyleEl(nonce),dynamic=createStyleEl(nonce);return alwaysRef.current=always,dynamicRef.current=dynamic,always.setAttribute(prefix$1+"-always",contextId),dynamic.setAttribute(prefix$1+"-dynamic",contextId),getHead().appendChild(always),getHead().appendChild(dynamic),setAlwaysStyle(styles.always),setDynamicStyle(styles.resting),function(){var remove=function remove(ref){var current=ref.current;current||react_beautiful_dnd_esm_invariant(!1),getHead().removeChild(current),ref.current=null};remove(alwaysRef),remove(dynamicRef)}}),[nonce,setAlwaysStyle,setDynamicStyle,styles.always,styles.resting,contextId]);var dragging=useCallback((function(){return setDynamicStyle(styles.dragging)}),[setDynamicStyle,styles.dragging]),dropping=useCallback((function(reason){setDynamicStyle("DROP"!==reason?styles.userCancel:styles.dropAnimating)}),[setDynamicStyle,styles.dropAnimating,styles.userCancel]),resting=useCallback((function(){dynamicRef.current&&setDynamicStyle(styles.resting)}),[setDynamicStyle,styles.resting]);return use_memo_one_esm_useMemo((function(){return{dragging,dropping,resting}}),[dragging,dropping,resting])}(contextId,nonce),lazyDispatch=useCallback((function(action){getStore(lazyStoreRef).dispatch(action)}),[]),marshalCallbacks=use_memo_one_esm_useMemo((function(){return bindActionCreators({publishWhileDragging,updateDroppableScroll,updateDroppableIsEnabled,updateDroppableIsCombineEnabled,collectionStarting},lazyDispatch)}),[lazyDispatch]),registry=function useRegistry(){var registry=use_memo_one_esm_useMemo(createRegistry,[]);return(0,react.useEffect)((function(){return function unmount(){requestAnimationFrame(registry.clean)}}),[registry]),registry}(),dimensionMarshal=use_memo_one_esm_useMemo((function(){return createDimensionMarshal(registry,marshalCallbacks)}),[registry,marshalCallbacks]),autoScroller=use_memo_one_esm_useMemo((function(){return createAutoScroller((0,esm_extends.A)({scrollWindow,scrollDroppable:dimensionMarshal.scrollDroppable},bindActionCreators({move},lazyDispatch)))}),[dimensionMarshal.scrollDroppable,lazyDispatch]),focusMarshal=function useFocusMarshal(contextId){var entriesRef=(0,react.useRef)({}),recordRef=(0,react.useRef)(null),restoreFocusFrameRef=(0,react.useRef)(null),isMountedRef=(0,react.useRef)(!1),register=useCallback((function register(id,focus){var entry={id,focus};return entriesRef.current[id]=entry,function unregister(){var entries=entriesRef.current;entries[id]!==entry&&delete entries[id]}}),[]),tryGiveFocus=useCallback((function tryGiveFocus(tryGiveFocusTo){var handle=findDragHandle(contextId,tryGiveFocusTo);handle&&handle!==document.activeElement&&handle.focus()}),[contextId]),tryShiftRecord=useCallback((function tryShiftRecord(previous,redirectTo){recordRef.current===previous&&(recordRef.current=redirectTo)}),[]),tryRestoreFocusRecorded=useCallback((function tryRestoreFocusRecorded(){restoreFocusFrameRef.current||isMountedRef.current&&(restoreFocusFrameRef.current=requestAnimationFrame((function(){restoreFocusFrameRef.current=null;var record=recordRef.current;record&&tryGiveFocus(record)})))}),[tryGiveFocus]),tryRecordFocus=useCallback((function tryRecordFocus(id){recordRef.current=null;var focused=document.activeElement;focused&&focused.getAttribute(dragHandle.draggableId)===id&&(recordRef.current=id)}),[]);return react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function(){return isMountedRef.current=!0,function clearFrameOnUnmount(){isMountedRef.current=!1;var frameId=restoreFocusFrameRef.current;frameId&&cancelAnimationFrame(frameId)}}),[]),use_memo_one_esm_useMemo((function(){return{register,tryRecordFocus,tryRestoreFocusRecorded,tryShiftRecord}}),[register,tryRecordFocus,tryRestoreFocusRecorded,tryShiftRecord])}(contextId),store=use_memo_one_esm_useMemo((function(){return react_beautiful_dnd_esm_createStore({announce,autoScroller,dimensionMarshal,focusMarshal,getResponders,styleMarshal})}),[announce,autoScroller,dimensionMarshal,focusMarshal,getResponders,styleMarshal]);lazyStoreRef.current=store;var tryResetStore=useCallback((function(){var current=getStore(lazyStoreRef);"IDLE"!==current.getState().phase&&current.dispatch(flush())}),[]),isDragging=useCallback((function(){var state=getStore(lazyStoreRef).getState();return state.isDragging||"DROP_ANIMATING"===state.phase}),[]);setCallbacks(use_memo_one_esm_useMemo((function(){return{isDragging,tryAbort:tryResetStore}}),[isDragging,tryResetStore]));var getCanLift=useCallback((function(id){return canStartDrag(getStore(lazyStoreRef).getState(),id)}),[]),getIsMovementAllowed=useCallback((function(){return isMovementAllowed(getStore(lazyStoreRef).getState())}),[]),appContext=use_memo_one_esm_useMemo((function(){return{marshal:dimensionMarshal,focus:focusMarshal,contextId,canLift:getCanLift,isMovementAllowed:getIsMovementAllowed,dragHandleUsageInstructionsId,registry}}),[contextId,dimensionMarshal,dragHandleUsageInstructionsId,focusMarshal,getCanLift,getIsMovementAllowed,registry]);return useSensorMarshal({contextId,store,registry,customSensors:sensors,enableDefaultSensors:!1!==props.enableDefaultSensors}),(0,react.useEffect)((function(){return tryResetStore}),[tryResetStore]),react.createElement(AppContext.Provider,{value:appContext},react.createElement(components_Provider,{context:StoreContext,store},props.children))}var count$1=0;function resetServerContext(){!function reset$1(){count$1=0}(),function react_beautiful_dnd_esm_reset(){count=0}()}function DragDropContext(props){var contextId=function useInstanceCount(){return use_memo_one_esm_useMemo((function(){return""+count$1++}),[])}(),dragHandleUsageInstructions=props.dragHandleUsageInstructions||preset.dragHandleUsageInstructions;return react.createElement(ErrorBoundary,null,(function(setCallbacks){return react.createElement(App,{nonce:props.nonce,contextId,setCallbacks,dragHandleUsageInstructions,enableDefaultSensors:props.enableDefaultSensors,sensors:props.sensors,onBeforeCapture:props.onBeforeCapture,onBeforeDragStart:props.onBeforeDragStart,onDragStart:props.onDragStart,onDragUpdate:props.onDragUpdate,onDragEnd:props.onDragEnd},props.children)}))}var isEqual$1=function isEqual(base){return function(value){return base===value}},isScroll=isEqual$1("scroll"),isAuto=isEqual$1("auto"),isEither=(isEqual$1("visible"),function isEither(overflow,fn){return fn(overflow.overflowX)||fn(overflow.overflowY)}),isElementScrollable=function isElementScrollable(el){var style=window.getComputedStyle(el),overflow={overflowX:style.overflowX,overflowY:style.overflowY};return isEither(overflow,isScroll)||isEither(overflow,isAuto)},getClosestScrollable=function getClosestScrollable(el){return null==el||el===document.body||el===document.documentElement?null:isElementScrollable(el)?el:getClosestScrollable(el.parentElement)},getScroll$1=function(el){return{x:el.scrollLeft,y:el.scrollTop}},getIsFixed=function getIsFixed(el){return!!el&&("fixed"===window.getComputedStyle(el).position||getIsFixed(el.parentElement))},getEnv=function(start){return{closestScrollable:getClosestScrollable(start),isFixedOnPage:getIsFixed(start)}},getDimension=function(_ref){var ref=_ref.ref,descriptor=_ref.descriptor,env=_ref.env,windowScroll=_ref.windowScroll,direction=_ref.direction,isDropDisabled=_ref.isDropDisabled,isCombineEnabled=_ref.isCombineEnabled,shouldClipSubject=_ref.shouldClipSubject,closestScrollable=env.closestScrollable,client=function getClient(targetRef,closestScrollable){var base=getBox(targetRef);if(!closestScrollable)return base;if(targetRef!==closestScrollable)return base;var top=base.paddingBox.top-closestScrollable.scrollTop,left=base.paddingBox.left-closestScrollable.scrollLeft,bottom=top+closestScrollable.scrollHeight,right=left+closestScrollable.scrollWidth,borderBox=expand({top,right,bottom,left},base.border);return createBox({borderBox,margin:base.margin,border:base.border,padding:base.padding})}(ref,closestScrollable),page=withScroll(client,windowScroll),closest=function(){if(!closestScrollable)return null;var frameClient=getBox(closestScrollable),scrollSize={scrollHeight:closestScrollable.scrollHeight,scrollWidth:closestScrollable.scrollWidth};return{client:frameClient,page:withScroll(frameClient,windowScroll),scroll:getScroll$1(closestScrollable),scrollSize,shouldClipSubject}}(),dimension=function(_ref){var descriptor=_ref.descriptor,isEnabled=_ref.isEnabled,isCombineEnabled=_ref.isCombineEnabled,isFixedOnPage=_ref.isFixedOnPage,direction=_ref.direction,client=_ref.client,page=_ref.page,closest=_ref.closest,frame=function(){if(!closest)return null;var scrollSize=closest.scrollSize,frameClient=closest.client,maxScroll=getMaxScroll({scrollHeight:scrollSize.scrollHeight,scrollWidth:scrollSize.scrollWidth,height:frameClient.paddingBox.height,width:frameClient.paddingBox.width});return{pageMarginBox:closest.page.marginBox,frameClient,scrollSize,shouldClipSubject:closest.shouldClipSubject,scroll:{initial:closest.scroll,current:closest.scroll,max:maxScroll,diff:{value:origin,displacement:origin}}}}(),axis="vertical"===direction?vertical:horizontal;return{descriptor,isCombineEnabled,isFixedOnPage,axis,isEnabled,client,page,frame,subject:getSubject({page,withPlaceholder:null,axis,frame})}}({descriptor,isEnabled:!isDropDisabled,isCombineEnabled,isFixedOnPage:env.isFixedOnPage,direction,client,page,closest});return dimension},immediate={passive:!1},delayed={passive:!0},getListenerOptions=function(options){return options.shouldPublishImmediately?immediate:delayed};function useRequiredContext(Context){var result=(0,react.useContext)(Context);return result||react_beautiful_dnd_esm_invariant(!1),result}var getClosestScrollableFromDrag=function getClosestScrollableFromDrag(dragging){return dragging&&dragging.env.closestScrollable||null};function noop$2(){}var empty={width:0,height:0,margin:{top:0,right:0,bottom:0,left:0}},getStyle=function getStyle(_ref2){var isAnimatingOpenOnMount=_ref2.isAnimatingOpenOnMount,placeholder=_ref2.placeholder,animate=_ref2.animate,size=function getSize(_ref){var isAnimatingOpenOnMount=_ref.isAnimatingOpenOnMount,placeholder=_ref.placeholder,animate=_ref.animate;return isAnimatingOpenOnMount||"close"===animate?empty:{height:placeholder.client.borderBox.height,width:placeholder.client.borderBox.width,margin:placeholder.client.margin}}({isAnimatingOpenOnMount,placeholder,animate});return{display:placeholder.display,boxSizing:"border-box",width:size.width,height:size.height,marginTop:size.margin.top,marginRight:size.margin.right,marginBottom:size.margin.bottom,marginLeft:size.margin.left,flexShrink:"0",flexGrow:"0",pointerEvents:"none",transition:"none"!==animate?transitions.placeholder:null}};var Placeholder$1=react.memo((function Placeholder(props){var animateOpenTimerRef=(0,react.useRef)(null),tryClearAnimateOpenTimer=useCallback((function(){animateOpenTimerRef.current&&(clearTimeout(animateOpenTimerRef.current),animateOpenTimerRef.current=null)}),[]),animate=props.animate,onTransitionEnd=props.onTransitionEnd,onClose=props.onClose,contextId=props.contextId,_useState=(0,react.useState)("open"===props.animate),isAnimatingOpenOnMount=_useState[0],setIsAnimatingOpenOnMount=_useState[1];(0,react.useEffect)((function(){return isAnimatingOpenOnMount?"open"!==animate?(tryClearAnimateOpenTimer(),setIsAnimatingOpenOnMount(!1),noop$2):animateOpenTimerRef.current?noop$2:(animateOpenTimerRef.current=setTimeout((function(){animateOpenTimerRef.current=null,setIsAnimatingOpenOnMount(!1)})),tryClearAnimateOpenTimer):noop$2}),[animate,isAnimatingOpenOnMount,tryClearAnimateOpenTimer]);var onSizeChangeEnd=useCallback((function(event){"height"===event.propertyName&&(onTransitionEnd(),"close"===animate&&onClose())}),[animate,onClose,onTransitionEnd]),style=getStyle({isAnimatingOpenOnMount,animate:props.animate,placeholder:props.placeholder});return react.createElement(props.placeholder.tagName,{style,"data-rbd-placeholder-context-id":contextId,onTransitionEnd:onSizeChangeEnd,ref:props.innerRef})})),DroppableContext=react.createContext(null);var AnimateInOut=function(_React$PureComponent){function AnimateInOut(){for(var _this,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return(_this=_React$PureComponent.call.apply(_React$PureComponent,[this].concat(args))||this).state={isVisible:Boolean(_this.props.on),data:_this.props.on,animate:_this.props.shouldAnimate&&_this.props.on?"open":"none"},_this.onClose=function(){"close"===_this.state.animate&&_this.setState({isVisible:!1})},_this}return _inheritsLoose(AnimateInOut,_React$PureComponent),AnimateInOut.getDerivedStateFromProps=function getDerivedStateFromProps(props,state){return props.shouldAnimate?props.on?{isVisible:!0,data:props.on,animate:"open"}:state.isVisible?{isVisible:!0,data:state.data,animate:"close"}:{isVisible:!1,animate:"close",data:null}:{isVisible:Boolean(props.on),data:props.on,animate:"none"}},AnimateInOut.prototype.render=function render(){if(!this.state.isVisible)return null;var provided={onClose:this.onClose,data:this.state.data,animate:this.state.animate};return this.props.children(provided)},AnimateInOut}(react.PureComponent),zIndexOptions={dragging:5e3,dropAnimating:4500},getDraggingTransition=function getDraggingTransition(shouldAnimateDragMovement,dropping){return dropping?transitions.drop(dropping.duration):shouldAnimateDragMovement?transitions.snap:transitions.fluid},getDraggingOpacity=function getDraggingOpacity(isCombining,isDropAnimating){return isCombining?isDropAnimating?combine_opacity.drop:combine_opacity.combining:null},getShouldDraggingAnimate=function getShouldDraggingAnimate(dragging){return null!=dragging.forceShouldAnimate?dragging.forceShouldAnimate:"SNAP"===dragging.mode};function getStyle$1(mapped){return"DRAGGING"===mapped.type?function getDraggingStyle(dragging){var box=dragging.dimension.client,offset=dragging.offset,combineWith=dragging.combineWith,dropping=dragging.dropping,isCombining=Boolean(combineWith),shouldAnimate=getShouldDraggingAnimate(dragging),isDropAnimating=Boolean(dropping),transform=isDropAnimating?transforms.drop(offset,isCombining):transforms.moveTo(offset);return{position:"fixed",top:box.marginBox.top,left:box.marginBox.left,boxSizing:"border-box",width:box.borderBox.width,height:box.borderBox.height,transition:getDraggingTransition(shouldAnimate,dropping),transform,opacity:getDraggingOpacity(isCombining,isDropAnimating),zIndex:isDropAnimating?zIndexOptions.dropAnimating:zIndexOptions.dragging,pointerEvents:"none"}}(mapped):function getSecondaryStyle(secondary){return{transform:transforms.moveTo(secondary.offset),transition:secondary.shouldAnimateDisplacement?null:"none"}}(mapped)}function useDraggablePublisher(args){var uniqueId=useUniqueId("draggable"),descriptor=args.descriptor,registry=args.registry,getDraggableRef=args.getDraggableRef,canDragInteractiveElements=args.canDragInteractiveElements,shouldRespectForcePress=args.shouldRespectForcePress,isEnabled=args.isEnabled,options=use_memo_one_esm_useMemo((function(){return{canDragInteractiveElements,shouldRespectForcePress,isEnabled}}),[canDragInteractiveElements,isEnabled,shouldRespectForcePress]),getDimension=useCallback((function(windowScroll){var el=getDraggableRef();return el||react_beautiful_dnd_esm_invariant(!1),function getDimension$1(descriptor,el,windowScroll){void 0===windowScroll&&(windowScroll=origin);var computedStyles=window.getComputedStyle(el),borderBox=el.getBoundingClientRect(),client=calculateBox(borderBox,computedStyles),page=withScroll(client,windowScroll);return{descriptor,placeholder:{client,tagName:el.tagName.toLowerCase(),display:computedStyles.display},displaceBy:{x:client.marginBox.width,y:client.marginBox.height},client,page}}(descriptor,el,windowScroll)}),[descriptor,getDraggableRef]),entry=use_memo_one_esm_useMemo((function(){return{uniqueId,descriptor,options,getDimension}}),[descriptor,getDimension,options,uniqueId]),publishedRef=(0,react.useRef)(entry),isFirstPublishRef=(0,react.useRef)(!0);react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function(){return registry.draggable.register(publishedRef.current),function(){return registry.draggable.unregister(publishedRef.current)}}),[registry.draggable]),react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function(){if(isFirstPublishRef.current)isFirstPublishRef.current=!1;else{var last=publishedRef.current;publishedRef.current=entry,registry.draggable.update(entry,last)}}),[entry,registry.draggable])}function useValidation$1(props,contextId,getRef){useDevSetupWarning()}function preventHtml5Dnd(event){event.preventDefault()}var isStrictEqual=function(a,b){return a===b},whatIsDraggedOverFromResult=function(result){var combine=result.combine,destination=result.destination;return destination?destination.droppableId:combine?combine.droppableId:null};function getSecondarySnapshot(combineTargetFor){return{isDragging:!1,isDropAnimating:!1,isClone:!1,dropAnimation:null,mode:null,draggingOver:null,combineTargetFor,combineWith:null}}var atRest={mapped:{type:"SECONDARY",offset:origin,combineTargetFor:null,shouldAnimateDisplacement:!0,snapshot:getSecondarySnapshot(null)}};var ConnectedDraggable=connect((function makeMapStateToProps(){var draggingSelector=function getDraggableSelector(){var memoizedOffset=memoize_one_esm((function(x,y){return{x,y}})),getMemoizedSnapshot=memoize_one_esm((function(mode,isClone,draggingOver,combineWith,dropping){return{isDragging:!0,isClone,isDropAnimating:Boolean(dropping),dropAnimation:dropping,mode,draggingOver,combineWith,combineTargetFor:null}})),getMemoizedProps=memoize_one_esm((function(offset,mode,dimension,isClone,draggingOver,combineWith,forceShouldAnimate){return{mapped:{type:"DRAGGING",dropping:null,draggingOver,combineWith,mode,offset,dimension,forceShouldAnimate,snapshot:getMemoizedSnapshot(mode,isClone,draggingOver,combineWith,null)}}}));return function selector(state,ownProps){if(state.isDragging){if(state.critical.draggable.id!==ownProps.draggableId)return null;var offset=state.current.client.offset,dimension=state.dimensions.draggables[ownProps.draggableId],draggingOver=whatIsDraggedOver(state.impact),combineWith=function getCombineWithFromImpact(impact){return impact.at&&"COMBINE"===impact.at.type?impact.at.combine.draggableId:null}(state.impact),forceShouldAnimate=state.forceShouldAnimate;return getMemoizedProps(memoizedOffset(offset.x,offset.y),state.movementMode,dimension,ownProps.isClone,draggingOver,combineWith,forceShouldAnimate)}if("DROP_ANIMATING"===state.phase){var completed=state.completed;if(completed.result.draggableId!==ownProps.draggableId)return null;var isClone=ownProps.isClone,_dimension=state.dimensions.draggables[ownProps.draggableId],result=completed.result,mode=result.mode,_draggingOver=whatIsDraggedOverFromResult(result),_combineWith=function getCombineWithFromResult(result){return result.combine?result.combine.draggableId:null}(result),dropping={duration:state.dropDuration,curve:curves_drop,moveTo:state.newHomeClientOffset,opacity:_combineWith?combine_opacity.drop:null,scale:_combineWith?combine_scale.drop:null};return{mapped:{type:"DRAGGING",offset:state.newHomeClientOffset,dimension:_dimension,dropping,draggingOver:_draggingOver,combineWith:_combineWith,mode,forceShouldAnimate:null,snapshot:getMemoizedSnapshot(mode,isClone,_draggingOver,_combineWith,dropping)}}}return null}}(),secondarySelector=function getSecondarySelector(){var memoizedOffset=memoize_one_esm((function(x,y){return{x,y}})),getMemoizedSnapshot=memoize_one_esm(getSecondarySnapshot),getMemoizedProps=memoize_one_esm((function(offset,combineTargetFor,shouldAnimateDisplacement){return void 0===combineTargetFor&&(combineTargetFor=null),{mapped:{type:"SECONDARY",offset,combineTargetFor,shouldAnimateDisplacement,snapshot:getMemoizedSnapshot(combineTargetFor)}}})),getFallback=function getFallback(combineTargetFor){return combineTargetFor?getMemoizedProps(origin,combineTargetFor,!0):null},getProps=function getProps(ownId,draggingId,impact,afterCritical){var visualDisplacement=impact.displaced.visible[ownId],isAfterCriticalInVirtualList=Boolean(afterCritical.inVirtualList&&afterCritical.effected[ownId]),combine=tryGetCombine(impact),combineTargetFor=combine&&combine.draggableId===ownId?draggingId:null;if(!visualDisplacement){if(!isAfterCriticalInVirtualList)return getFallback(combineTargetFor);if(impact.displaced.invisible[ownId])return null;var change=negate(afterCritical.displacedBy.point),_offset=memoizedOffset(change.x,change.y);return getMemoizedProps(_offset,combineTargetFor,!0)}if(isAfterCriticalInVirtualList)return getFallback(combineTargetFor);var displaceBy=impact.displacedBy.point,offset=memoizedOffset(displaceBy.x,displaceBy.y);return getMemoizedProps(offset,combineTargetFor,visualDisplacement.shouldAnimate)};return function selector(state,ownProps){if(state.isDragging)return state.critical.draggable.id===ownProps.draggableId?null:getProps(ownProps.draggableId,state.critical.draggable.id,state.impact,state.afterCritical);if("DROP_ANIMATING"===state.phase){var completed=state.completed;return completed.result.draggableId===ownProps.draggableId?null:getProps(ownProps.draggableId,completed.result.draggableId,completed.impact,completed.afterCritical)}return null}}();return function selector(state,ownProps){return draggingSelector(state,ownProps)||secondarySelector(state,ownProps)||atRest}}),{dropAnimationFinished},null,{context:StoreContext,pure:!0,areStatePropsEqual:isStrictEqual})((function Draggable(props){var ref=(0,react.useRef)(null),setRef=useCallback((function(el){ref.current=el}),[]),getRef=useCallback((function(){return ref.current}),[]),_useRequiredContext=useRequiredContext(AppContext),contextId=_useRequiredContext.contextId,dragHandleUsageInstructionsId=_useRequiredContext.dragHandleUsageInstructionsId,registry=_useRequiredContext.registry,_useRequiredContext2=useRequiredContext(DroppableContext),type=_useRequiredContext2.type,droppableId=_useRequiredContext2.droppableId,descriptor=use_memo_one_esm_useMemo((function(){return{id:props.draggableId,index:props.index,type,droppableId}}),[props.draggableId,props.index,type,droppableId]),children=props.children,draggableId=props.draggableId,isEnabled=props.isEnabled,shouldRespectForcePress=props.shouldRespectForcePress,canDragInteractiveElements=props.canDragInteractiveElements,isClone=props.isClone,mapped=props.mapped,dropAnimationFinishedAction=props.dropAnimationFinished;useValidation$1(),function useClonePropValidation(isClone){useDev()}(),isClone||useDraggablePublisher(use_memo_one_esm_useMemo((function(){return{descriptor,registry,getDraggableRef:getRef,canDragInteractiveElements,shouldRespectForcePress,isEnabled}}),[descriptor,registry,getRef,canDragInteractiveElements,shouldRespectForcePress,isEnabled]));var dragHandleProps=use_memo_one_esm_useMemo((function(){return isEnabled?{tabIndex:0,role:"button","aria-describedby":dragHandleUsageInstructionsId,"data-rbd-drag-handle-draggable-id":draggableId,"data-rbd-drag-handle-context-id":contextId,draggable:!1,onDragStart:preventHtml5Dnd}:null}),[contextId,dragHandleUsageInstructionsId,draggableId,isEnabled]),onMoveEnd=useCallback((function(event){"DRAGGING"===mapped.type&&mapped.dropping&&"transform"===event.propertyName&&dropAnimationFinishedAction()}),[dropAnimationFinishedAction,mapped]),provided=use_memo_one_esm_useMemo((function(){var style=getStyle$1(mapped),onTransitionEnd="DRAGGING"===mapped.type&&mapped.dropping?onMoveEnd:null;return{innerRef:setRef,draggableProps:{"data-rbd-draggable-context-id":contextId,"data-rbd-draggable-id":draggableId,style,onTransitionEnd},dragHandleProps}}),[contextId,dragHandleProps,draggableId,mapped,onMoveEnd,setRef]),rubric=use_memo_one_esm_useMemo((function(){return{draggableId:descriptor.id,type:descriptor.type,source:{index:descriptor.index,droppableId:descriptor.droppableId}}}),[descriptor.droppableId,descriptor.id,descriptor.index,descriptor.type]);return children(provided,mapped.snapshot,rubric)}));function PrivateDraggable(props){return useRequiredContext(DroppableContext).isUsingCloneFor!==props.draggableId||props.isClone?react.createElement(ConnectedDraggable,props):null}function PublicDraggable(props){var isEnabled="boolean"!=typeof props.isDragDisabled||!props.isDragDisabled,canDragInteractiveElements=Boolean(props.disableInteractiveElementBlocking),shouldRespectForcePress=Boolean(props.shouldRespectForcePress);return react.createElement(PrivateDraggable,(0,esm_extends.A)({},props,{isClone:!1,isEnabled,canDragInteractiveElements,shouldRespectForcePress}))}var isMatchingType=function isMatchingType(type,critical){return type===critical.droppable.type},getDraggable=function getDraggable(critical,dimensions){return dimensions.draggables[critical.draggable.id]};var defaultProps={mode:"standard",type:"DEFAULT",direction:"vertical",isDropDisabled:!1,isCombineEnabled:!1,ignoreContainerClipping:!1,renderClone:null,getContainerForClone:function getBody(){return document.body||react_beautiful_dnd_esm_invariant(!1),document.body}},ConnectedDroppable=connect((function makeMapStateToProps(){var idleWithAnimation={placeholder:null,shouldAnimatePlaceholder:!0,snapshot:{isDraggingOver:!1,draggingOverWith:null,draggingFromThisWith:null,isUsingPlaceholder:!1},useClone:null},idleWithoutAnimation=(0,esm_extends.A)({},idleWithAnimation,{shouldAnimatePlaceholder:!1}),getDraggableRubric=memoize_one_esm((function(descriptor){return{draggableId:descriptor.id,type:descriptor.type,source:{index:descriptor.index,droppableId:descriptor.droppableId}}})),getMapProps=memoize_one_esm((function(id,isEnabled,isDraggingOverForConsumer,isDraggingOverForImpact,dragging,renderClone){var draggableId=dragging.descriptor.id;if(dragging.descriptor.droppableId===id){var useClone=renderClone?{render:renderClone,dragging:getDraggableRubric(dragging.descriptor)}:null,_snapshot={isDraggingOver:isDraggingOverForConsumer,draggingOverWith:isDraggingOverForConsumer?draggableId:null,draggingFromThisWith:draggableId,isUsingPlaceholder:!0};return{placeholder:dragging.placeholder,shouldAnimatePlaceholder:!1,snapshot:_snapshot,useClone}}if(!isEnabled)return idleWithoutAnimation;if(!isDraggingOverForImpact)return idleWithAnimation;var snapshot={isDraggingOver:isDraggingOverForConsumer,draggingOverWith:draggableId,draggingFromThisWith:null,isUsingPlaceholder:!0};return{placeholder:dragging.placeholder,shouldAnimatePlaceholder:!0,snapshot,useClone:null}}));return function selector(state,ownProps){var id=ownProps.droppableId,type=ownProps.type,isEnabled=!ownProps.isDropDisabled,renderClone=ownProps.renderClone;if(state.isDragging){var critical=state.critical;if(!isMatchingType(type,critical))return idleWithoutAnimation;var dragging=getDraggable(critical,state.dimensions),isDraggingOver=whatIsDraggedOver(state.impact)===id;return getMapProps(id,isEnabled,isDraggingOver,isDraggingOver,dragging,renderClone)}if("DROP_ANIMATING"===state.phase){var completed=state.completed;if(!isMatchingType(type,completed.critical))return idleWithoutAnimation;var _dragging=getDraggable(completed.critical,state.dimensions);return getMapProps(id,isEnabled,whatIsDraggedOverFromResult(completed.result)===id,whatIsDraggedOver(completed.impact)===id,_dragging,renderClone)}if("IDLE"===state.phase&&state.completed&&!state.shouldFlush){var _completed=state.completed;if(!isMatchingType(type,_completed.critical))return idleWithoutAnimation;var wasOver=whatIsDraggedOver(_completed.impact)===id,wasCombining=Boolean(_completed.impact.at&&"COMBINE"===_completed.impact.at.type),isHome=_completed.critical.droppable.id===id;return wasOver?wasCombining?idleWithAnimation:idleWithoutAnimation:isHome?idleWithAnimation:idleWithoutAnimation}return idleWithoutAnimation}}),{updateViewportMaxScroll:function updateViewportMaxScroll(args){return{type:"UPDATE_VIEWPORT_MAX_SCROLL",payload:args}}},null,{context:StoreContext,pure:!0,areStatePropsEqual:isStrictEqual})((function Droppable(props){var appContext=(0,react.useContext)(AppContext);appContext||react_beautiful_dnd_esm_invariant(!1);var contextId=appContext.contextId,isMovementAllowed=appContext.isMovementAllowed,droppableRef=(0,react.useRef)(null),placeholderRef=(0,react.useRef)(null),children=props.children,droppableId=props.droppableId,type=props.type,mode=props.mode,direction=props.direction,ignoreContainerClipping=props.ignoreContainerClipping,isDropDisabled=props.isDropDisabled,isCombineEnabled=props.isCombineEnabled,snapshot=props.snapshot,useClone=props.useClone,updateViewportMaxScroll=props.updateViewportMaxScroll,getContainerForClone=props.getContainerForClone,getDroppableRef=useCallback((function(){return droppableRef.current}),[]),setDroppableRef=useCallback((function(value){droppableRef.current=value}),[]),setPlaceholderRef=(useCallback((function(){return placeholderRef.current}),[]),useCallback((function(value){placeholderRef.current=value}),[]));!function useValidation(args){useDevSetupWarning()}();var onPlaceholderTransitionEnd=useCallback((function(){isMovementAllowed()&&updateViewportMaxScroll({maxScroll:getMaxWindowScroll()})}),[isMovementAllowed,updateViewportMaxScroll]);!function useDroppablePublisher(args){var whileDraggingRef=(0,react.useRef)(null),appContext=useRequiredContext(AppContext),uniqueId=useUniqueId("droppable"),registry=appContext.registry,marshal=appContext.marshal,previousRef=usePrevious(args),descriptor=use_memo_one_esm_useMemo((function(){return{id:args.droppableId,type:args.type,mode:args.mode}}),[args.droppableId,args.mode,args.type]),publishedDescriptorRef=(0,react.useRef)(descriptor),memoizedUpdateScroll=use_memo_one_esm_useMemo((function(){return memoize_one_esm((function(x,y){whileDraggingRef.current||react_beautiful_dnd_esm_invariant(!1);var scroll={x,y};marshal.updateDroppableScroll(descriptor.id,scroll)}))}),[descriptor.id,marshal]),getClosestScroll=useCallback((function(){var dragging=whileDraggingRef.current;return dragging&&dragging.env.closestScrollable?getScroll$1(dragging.env.closestScrollable):origin}),[]),updateScroll=useCallback((function(){var scroll=getClosestScroll();memoizedUpdateScroll(scroll.x,scroll.y)}),[getClosestScroll,memoizedUpdateScroll]),scheduleScrollUpdate=use_memo_one_esm_useMemo((function(){return raf_schd_esm(updateScroll)}),[updateScroll]),onClosestScroll=useCallback((function(){var dragging=whileDraggingRef.current,closest=getClosestScrollableFromDrag(dragging);dragging&&closest||react_beautiful_dnd_esm_invariant(!1),dragging.scrollOptions.shouldPublishImmediately?updateScroll():scheduleScrollUpdate()}),[scheduleScrollUpdate,updateScroll]),getDimensionAndWatchScroll=useCallback((function(windowScroll,options){whileDraggingRef.current&&react_beautiful_dnd_esm_invariant(!1);var previous=previousRef.current,ref=previous.getDroppableRef();ref||react_beautiful_dnd_esm_invariant(!1);var env=getEnv(ref),dragging={ref,descriptor,env,scrollOptions:options};whileDraggingRef.current=dragging;var dimension=getDimension({ref,descriptor,env,windowScroll,direction:previous.direction,isDropDisabled:previous.isDropDisabled,isCombineEnabled:previous.isCombineEnabled,shouldClipSubject:!previous.ignoreContainerClipping}),scrollable=env.closestScrollable;return scrollable&&(scrollable.setAttribute(scrollContainer.contextId,appContext.contextId),scrollable.addEventListener("scroll",onClosestScroll,getListenerOptions(dragging.scrollOptions))),dimension}),[appContext.contextId,descriptor,onClosestScroll,previousRef]),getScrollWhileDragging=useCallback((function(){var dragging=whileDraggingRef.current,closest=getClosestScrollableFromDrag(dragging);return dragging&&closest||react_beautiful_dnd_esm_invariant(!1),getScroll$1(closest)}),[]),dragStopped=useCallback((function(){var dragging=whileDraggingRef.current;dragging||react_beautiful_dnd_esm_invariant(!1);var closest=getClosestScrollableFromDrag(dragging);whileDraggingRef.current=null,closest&&(scheduleScrollUpdate.cancel(),closest.removeAttribute(scrollContainer.contextId),closest.removeEventListener("scroll",onClosestScroll,getListenerOptions(dragging.scrollOptions)))}),[onClosestScroll,scheduleScrollUpdate]),scroll=useCallback((function(change){var dragging=whileDraggingRef.current;dragging||react_beautiful_dnd_esm_invariant(!1);var closest=getClosestScrollableFromDrag(dragging);closest||react_beautiful_dnd_esm_invariant(!1),closest.scrollTop+=change.y,closest.scrollLeft+=change.x}),[]),callbacks=use_memo_one_esm_useMemo((function(){return{getDimensionAndWatchScroll,getScrollWhileDragging,dragStopped,scroll}}),[dragStopped,getDimensionAndWatchScroll,getScrollWhileDragging,scroll]),entry=use_memo_one_esm_useMemo((function(){return{uniqueId,descriptor,callbacks}}),[callbacks,descriptor,uniqueId]);react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function(){return publishedDescriptorRef.current=entry.descriptor,registry.droppable.register(entry),function(){whileDraggingRef.current&&dragStopped(),registry.droppable.unregister(entry)}}),[callbacks,descriptor,dragStopped,entry,marshal,registry.droppable]),react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function(){whileDraggingRef.current&&marshal.updateDroppableIsEnabled(publishedDescriptorRef.current.id,!args.isDropDisabled)}),[args.isDropDisabled,marshal]),react_beautiful_dnd_esm_useIsomorphicLayoutEffect((function(){whileDraggingRef.current&&marshal.updateDroppableIsCombineEnabled(publishedDescriptorRef.current.id,args.isCombineEnabled)}),[args.isCombineEnabled,marshal])}({droppableId,type,mode,direction,isDropDisabled,isCombineEnabled,ignoreContainerClipping,getDroppableRef});var placeholder=react.createElement(AnimateInOut,{on:props.placeholder,shouldAnimate:props.shouldAnimatePlaceholder},(function(_ref){var onClose=_ref.onClose,data=_ref.data,animate=_ref.animate;return react.createElement(Placeholder$1,{placeholder:data,onClose,innerRef:setPlaceholderRef,animate,contextId,onTransitionEnd:onPlaceholderTransitionEnd})})),provided=use_memo_one_esm_useMemo((function(){return{innerRef:setDroppableRef,placeholder,droppableProps:{"data-rbd-droppable-id":droppableId,"data-rbd-droppable-context-id":contextId}}}),[contextId,droppableId,placeholder,setDroppableRef]),isUsingCloneFor=useClone?useClone.dragging.draggableId:null,droppableContext=use_memo_one_esm_useMemo((function(){return{droppableId,type,isUsingCloneFor}}),[droppableId,isUsingCloneFor,type]);return react.createElement(DroppableContext.Provider,{value:droppableContext},children(provided,snapshot),function getClone(){if(!useClone)return null;var dragging=useClone.dragging,render=useClone.render,node=react.createElement(PrivateDraggable,{draggableId:dragging.draggableId,index:dragging.source.index,isClone:!0,isEnabled:!0,shouldRespectForcePress:!1,canDragInteractiveElements:!0},(function(draggableProvided,draggableSnapshot){return render(draggableProvided,draggableSnapshot,dragging)}));return react_dom.createPortal(node,getContainerForClone())}())}));ConnectedDroppable.defaultProps=defaultProps},"./node_modules/react-beautiful-dnd/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var reactIs=__webpack_require__("./node_modules/react-is/index.js"),REACT_STATICS={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},KNOWN_STATICS={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},MEMO_STATICS={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},TYPE_STATICS={};function getStatics(component){return reactIs.isMemo(component)?MEMO_STATICS:TYPE_STATICS[component.$$typeof]||REACT_STATICS}TYPE_STATICS[reactIs.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},TYPE_STATICS[reactIs.Memo]=MEMO_STATICS;var defineProperty=Object.defineProperty,getOwnPropertyNames=Object.getOwnPropertyNames,getOwnPropertySymbols=Object.getOwnPropertySymbols,getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor,getPrototypeOf=Object.getPrototypeOf,objectPrototype=Object.prototype;module.exports=function hoistNonReactStatics(targetComponent,sourceComponent,blacklist){if("string"!=typeof sourceComponent){if(objectPrototype){var inheritedComponent=getPrototypeOf(sourceComponent);inheritedComponent&&inheritedComponent!==objectPrototype&&hoistNonReactStatics(targetComponent,inheritedComponent,blacklist)}var keys=getOwnPropertyNames(sourceComponent);getOwnPropertySymbols&&(keys=keys.concat(getOwnPropertySymbols(sourceComponent)));for(var targetStatics=getStatics(targetComponent),sourceStatics=getStatics(sourceComponent),i=0;i<keys.length;++i){var key=keys[i];if(!(KNOWN_STATICS[key]||blacklist&&blacklist[key]||sourceStatics&&sourceStatics[key]||targetStatics&&targetStatics[key])){var descriptor=getOwnPropertyDescriptor(sourceComponent,key);try{defineProperty(targetComponent,key,descriptor)}catch(e){}}}}return targetComponent}},"./node_modules/react-beautiful-dnd/node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/react-beautiful-dnd/node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}function emptyFunctionWithReset(){}emptyFunctionWithReset.resetWarningCache=emptyFunction,module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,elementType:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim,checkPropTypes:emptyFunctionWithReset,resetWarningCache:emptyFunction};return ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/react-beautiful-dnd/node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react-beautiful-dnd/node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/react-beautiful-dnd/node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/react-beautiful-dnd/node_modules/react-redux/node_modules/react-is/cjs/react-is.production.min.js":(__unused_webpack_module,exports)=>{"use strict";var b="function"==typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;function z(a){if("object"==typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.isContextConsumer=function(a){return z(a)===k}},"./node_modules/react-beautiful-dnd/node_modules/react-redux/node_modules/react-is/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/react-beautiful-dnd/node_modules/react-redux/node_modules/react-is/cjs/react-is.production.min.js")},"./node_modules/react-is/cjs/react-is.production.min.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var b="function"==typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.memo"):60115,r=b?Symbol.for("react.lazy"):60116;function t(a){if("object"==typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof){case k:case n:case h:return a;default:return u}}case r:case q:case d:return u}}}function v(a){return t(a)===m}exports.typeOf=t,exports.AsyncMode=l,exports.ConcurrentMode=m,exports.ContextConsumer=k,exports.ContextProvider=h,exports.Element=c,exports.ForwardRef=n,exports.Fragment=e,exports.Lazy=r,exports.Memo=q,exports.Portal=d,exports.Profiler=g,exports.StrictMode=f,exports.Suspense=p,exports.isValidElementType=function(a){return"string"==typeof a||"function"==typeof a||a===e||a===m||a===g||a===f||a===p||"object"==typeof a&&null!==a&&(a.$$typeof===r||a.$$typeof===q||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)},exports.isAsyncMode=function(a){return v(a)||t(a)===l},exports.isConcurrentMode=v,exports.isContextConsumer=function(a){return t(a)===k},exports.isContextProvider=function(a){return t(a)===h},exports.isElement=function(a){return"object"==typeof a&&null!==a&&a.$$typeof===c},exports.isForwardRef=function(a){return t(a)===n},exports.isFragment=function(a){return t(a)===e},exports.isLazy=function(a){return t(a)===r},exports.isMemo=function(a){return t(a)===q},exports.isPortal=function(a){return t(a)===d},exports.isProfiler=function(a){return t(a)===g},exports.isStrictMode=function(a){return t(a)===f},exports.isSuspense=function(a){return t(a)===p}},"./node_modules/react-is/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/react-is/cjs/react-is.production.min.js")},"./node_modules/react-portal/es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Portal:()=>PortalCompat,PortalWithState:()=>es_PortalWithState});var react_dom=__webpack_require__("./node_modules/react-dom/index.js"),react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var Portal=function(_React$Component){function Portal(){return function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Portal),function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(Portal.__proto__||Object.getPrototypeOf(Portal)).apply(this,arguments))}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Portal,_React$Component),_createClass(Portal,[{key:"componentWillUnmount",value:function componentWillUnmount(){this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null}},{key:"render",value:function render(){return canUseDOM?(this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode)),react_dom.createPortal(this.props.children,this.props.node||this.defaultNode)):null}}]),Portal}(react.Component);Portal.propTypes={children:prop_types_default().node.isRequired,node:prop_types_default().any};const es_Portal=Portal;var LegacyPortal_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var LegacyPortal_Portal=function(_React$Component){function Portal(){return function LegacyPortal_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Portal),function LegacyPortal_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(Portal.__proto__||Object.getPrototypeOf(Portal)).apply(this,arguments))}return function LegacyPortal_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(Portal,_React$Component),LegacyPortal_createClass(Portal,[{key:"componentDidMount",value:function componentDidMount(){this.renderPortal()}},{key:"componentDidUpdate",value:function componentDidUpdate(props){this.renderPortal()}},{key:"componentWillUnmount",value:function componentWillUnmount(){react_dom.unmountComponentAtNode(this.defaultNode||this.props.node),this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null,this.portal=null}},{key:"renderPortal",value:function renderPortal(props){this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode));var children=this.props.children;"function"==typeof this.props.children.type&&(children=react.cloneElement(this.props.children)),this.portal=react_dom.unstable_renderSubtreeIntoContainer(this,children,this.props.node||this.defaultNode)}},{key:"render",value:function render(){return null}}]),Portal}(react.Component);const LegacyPortal=LegacyPortal_Portal;LegacyPortal_Portal.propTypes={children:prop_types_default().node.isRequired,node:prop_types_default().any};const PortalCompat=react_dom.createPortal?es_Portal:LegacyPortal;var PortalWithState_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var KEYCODES_ESCAPE=27,PortalWithState=function(_React$Component){function PortalWithState(props){!function PortalWithState_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,PortalWithState);var _this=function PortalWithState_possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(PortalWithState.__proto__||Object.getPrototypeOf(PortalWithState)).call(this,props));return _this.portalNode=null,_this.state={active:!!props.defaultOpen},_this.openPortal=_this.openPortal.bind(_this),_this.closePortal=_this.closePortal.bind(_this),_this.wrapWithPortal=_this.wrapWithPortal.bind(_this),_this.handleOutsideMouseClick=_this.handleOutsideMouseClick.bind(_this),_this.handleKeydown=_this.handleKeydown.bind(_this),_this}return function PortalWithState_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(PortalWithState,_React$Component),PortalWithState_createClass(PortalWithState,[{key:"componentDidMount",value:function componentDidMount(){this.props.closeOnEsc&&document.addEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.addEventListener("click",this.handleOutsideMouseClick)}},{key:"componentWillUnmount",value:function componentWillUnmount(){this.props.closeOnEsc&&document.removeEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.removeEventListener("click",this.handleOutsideMouseClick)}},{key:"openPortal",value:function openPortal(e){this.state.active||(e&&e.nativeEvent&&e.nativeEvent.stopImmediatePropagation(),this.setState({active:!0},this.props.onOpen))}},{key:"closePortal",value:function closePortal(){this.state.active&&this.setState({active:!1},this.props.onClose)}},{key:"wrapWithPortal",value:function wrapWithPortal(children){var _this2=this;return this.state.active?react.createElement(PortalCompat,{node:this.props.node,key:"react-portal",ref:function ref(portalNode){return _this2.portalNode=portalNode}},children):null}},{key:"handleOutsideMouseClick",value:function handleOutsideMouseClick(e){if(this.state.active){var root=this.portalNode&&(this.portalNode.props.node||this.portalNode.defaultNode);!root||root.contains(e.target)||e.button&&0!==e.button||this.closePortal()}}},{key:"handleKeydown",value:function handleKeydown(e){e.keyCode===KEYCODES_ESCAPE&&this.state.active&&this.closePortal()}},{key:"render",value:function render(){return this.props.children({openPortal:this.openPortal,closePortal:this.closePortal,portal:this.wrapWithPortal,isOpen:this.state.active})}}]),PortalWithState}(react.Component);PortalWithState.propTypes={children:prop_types_default().func.isRequired,defaultOpen:prop_types_default().bool,node:prop_types_default().any,closeOnEsc:prop_types_default().bool,closeOnOutsideClick:prop_types_default().bool,onOpen:prop_types_default().func,onClose:prop_types_default().func},PortalWithState.defaultProps={onOpen:function onOpen(){},onClose:function onClose(){}};const es_PortalWithState=PortalWithState}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MEJBQ2IvSCxLQUFNLHlCQUNOcUksV0FBWSwwQkFDWkMsb0JBQXFCLDBCQUNyQkcsT0FBUSwwQkFDUjFRLFFBQVMsMkJBR1g4UCxnQkFBZ0J4SyxhQUFlLENBQzdCb0wsT0FBUSxTQUFTQSxTQUFVLEVBQzNCMVEsUUFBUyxTQUFTQSxVQUFXLEdBRy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hcC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlT3JkZXJCeS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU29ydEJ5LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvbXBhcmVBc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29tcGFyZU11bHRpcGxlLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VFYWNoLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub3cuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9vcmRlckJ5LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2JpbmRBY3Rpb25DcmVhdG9ycy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3VzZS1tZW1vLW9uZS9kaXN0L3VzZS1tZW1vLW9uZS5lc20uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9jc3MtYm94LW1vZGVsL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvY3NzLWJveC1tb2RlbC9kaXN0L2Nzcy1ib3gtbW9kZWwuZXNtLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9tZW1vaXplLW9uZS9kaXN0L21lbW9pemUtb25lLmVzbS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmFmLXNjaGQvZGlzdC9yYWYtc2NoZC5lc20uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvZGlzdC9yZWFjdC1iZWF1dGlmdWwtZG5kLmVzbS5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3J0YWwvZXMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcnRhbC9lcy9Qb3J0YWwuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcnRhbC9lcy9MZWdhY3lQb3J0YWwuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcnRhbC9lcy9Qb3J0YWxDb21wYXQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcnRhbC9lcy9Qb3J0YWxXaXRoU3RhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VGb3JPd24gPSByZXF1aXJlKCcuL19iYXNlRm9yT3duJyksXG4gICAgY3JlYXRlQmFzZUVhY2ggPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRWFjaCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICovXG52YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRWFjaDtcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hcDtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlTWFwID0gcmVxdWlyZSgnLi9fYmFzZU1hcCcpLFxuICAgIGJhc2VTb3J0QnkgPSByZXF1aXJlKCcuL19iYXNlU29ydEJ5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgY29tcGFyZU11bHRpcGxlID0gcmVxdWlyZSgnLi9fY29tcGFyZU11bHRpcGxlJyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICBpZiAoaXRlcmF0ZWVzLmxlbmd0aCkge1xuICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgIGlmIChpc0FycmF5KGl0ZXJhdGVlKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZUdldCh2YWx1ZSwgaXRlcmF0ZWUubGVuZ3RoID09PSAxID8gaXRlcmF0ZWVbMF0gOiBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRlZTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyYXRlZXMgPSBbaWRlbnRpdHldO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gLTE7XG4gIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGJhc2VJdGVyYXRlZSkpO1xuXG4gIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICB9KTtcblxuICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VPcmRlckJ5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gKiB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU29ydEJ5O1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKipcbiAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29tcGFyZUFzY2VuZGluZztcbiIsInZhciBjb21wYXJlQXNjZW5kaW5nID0gcmVxdWlyZSgnLi9fY29tcGFyZUFzY2VuZGluZycpO1xuXG4vKipcbiAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gKlxuICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgIH1cbiAgfVxuICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAvL1xuICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVNdWx0aXBsZTtcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRWFjaDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBub3cgPSByZXF1aXJlKCcuL25vdycpLFxuICAgIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nXG4gICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICA6IHRpbWVXYWl0aW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWJvdW5jZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vdztcbiIsInZhciBiYXNlT3JkZXJCeSA9IHJlcXVpcmUoJy4vX2Jhc2VPcmRlckJ5JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICogb3JkZXJzIG9mIHRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS4gSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXNcbiAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0FycmF5W118RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gKiBdO1xuICpcbiAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAqIF8ub3JkZXJCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddLCBbJ2FzYycsICdkZXNjJ10pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gKi9cbmZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMsIGd1YXJkKSB7XG4gIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gIH1cbiAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgb3JkZXJzID0gb3JkZXJzID09IG51bGwgPyBbXSA6IFtvcmRlcnNdO1xuICB9XG4gIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3JkZXJCeTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMic7XG5cbi8qKlxuICogQWRhcHRlZCBmcm9tIFJlYWN0OiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9tYXN0ZXIvcGFja2FnZXMvc2hhcmVkL2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UuanNcbiAqXG4gKiBEbyBub3QgcmVxdWlyZSB0aGlzIG1vZHVsZSBkaXJlY3RseSEgVXNlIG5vcm1hbCB0aHJvdyBlcnJvciBjYWxscy4gVGhlc2UgbWVzc2FnZXMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGVycm9yIGNvZGVzXG4gKiBkdXJpbmcgYnVpbGQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5mdW5jdGlvbiBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgcmV0dXJuIFwiTWluaWZpZWQgUmVkdXggZXJyb3IgI1wiICsgY29kZSArIFwiOyB2aXNpdCBodHRwczovL3JlZHV4LmpzLm9yZy9FcnJvcnM/Y29kZT1cIiArIGNvZGUgKyBcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciBcIiArICd1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzLiAnO1xufVxuXG4vLyBJbmxpbmVkIHZlcnNpb24gb2YgdGhlIGBzeW1ib2wtb2JzZXJ2YWJsZWAgcG9seWZpbGxcbnZhciAkJG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSB8fCAnQEBvYnNlcnZhYmxlJztcbn0pKCk7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vLyBJbmxpbmVkIC8gc2hvcnRlbmVkIHZlcnNpb24gb2YgYGtpbmRPZmAgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9raW5kLW9mXG5mdW5jdGlvbiBtaW5pS2luZE9mKHZhbCkge1xuICBpZiAodmFsID09PSB2b2lkIDApIHJldHVybiAndW5kZWZpbmVkJztcbiAgaWYgKHZhbCA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzeW1ib2wnOlxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICB9XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSByZXR1cm4gJ2FycmF5JztcbiAgaWYgKGlzRGF0ZSh2YWwpKSByZXR1cm4gJ2RhdGUnO1xuICBpZiAoaXNFcnJvcih2YWwpKSByZXR1cm4gJ2Vycm9yJztcbiAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGN0b3JOYW1lKHZhbCk7XG5cbiAgc3dpdGNoIChjb25zdHJ1Y3Rvck5hbWUpIHtcbiAgICBjYXNlICdTeW1ib2wnOlxuICAgIGNhc2UgJ1Byb21pc2UnOlxuICAgIGNhc2UgJ1dlYWtNYXAnOlxuICAgIGNhc2UgJ1dlYWtTZXQnOlxuICAgIGNhc2UgJ01hcCc6XG4gICAgY2FzZSAnU2V0JzpcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvck5hbWU7XG4gIH0gLy8gb3RoZXJcblxuXG4gIHJldHVybiB0eXBlLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJyk7XG59XG5cbmZ1bmN0aW9uIGN0b3JOYW1lKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbC5jb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJyA/IHZhbC5jb25zdHJ1Y3Rvci5uYW1lIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNFcnJvcih2YWwpIHtcbiAgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIEVycm9yIHx8IHR5cGVvZiB2YWwubWVzc2FnZSA9PT0gJ3N0cmluZycgJiYgdmFsLmNvbnN0cnVjdG9yICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3Iuc3RhY2tUcmFjZUxpbWl0ID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIHRydWU7XG4gIHJldHVybiB0eXBlb2YgdmFsLnRvRGF0ZVN0cmluZyA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsLmdldERhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5zZXREYXRlID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBraW5kT2YodmFsKSB7XG4gIHZhciB0eXBlT2ZWYWwgPSB0eXBlb2YgdmFsO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdHlwZU9mVmFsID0gbWluaUtpbmRPZih2YWwpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVPZlZhbDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMCkgOiAnSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjY3JlYXRpbmctYS1zdG9yZS13aXRoLWVuaGFuY2VycyBmb3IgYW4gZXhhbXBsZS4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEpIDogXCJFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihlbmhhbmNlcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyKSA6IFwiRXhwZWN0ZWQgdGhlIHJvb3QgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKHJlZHVjZXIpICsgXCInXCIpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzKSA6ICdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQpIDogXCJFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihsaXN0ZW5lcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNikgOiAnWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNykgOiBcIkFjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiBJbnN0ZWFkLCB0aGUgYWN0dWFsIHR5cGUgd2FzOiAnXCIgKyBraW5kT2YoYWN0aW9uKSArIFwiJy4gWW91IG1heSBuZWVkIHRvIGFkZCBtaWRkbGV3YXJlIHRvIHlvdXIgc3RvcmUgc2V0dXAgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIG90aGVyIHZhbHVlcywgc3VjaCBhcyAncmVkdXgtdGh1bmsnIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBmdW5jdGlvbnMuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNtaWRkbGV3YXJlIGFuZCBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNi1hc3luYy1sb2dpYyN1c2luZy10aGUtcmVkdXgtdGh1bmstbWlkZGxld2FyZSBmb3IgZXhhbXBsZXMuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg4KSA6ICdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGFuIGFjdGlvbiB0eXBlIHN0cmluZyBjb25zdGFudC4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOSkgOiAnUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEwKSA6IFwiRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YobmV4dFJlZHVjZXIpKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTEpIDogXCJFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKG9ic2VydmVyKSArIFwiJ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFJlZHV4Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWFjdFJlZHV4Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IHZhciBzZXRCYXRjaCA9IGZ1bmN0aW9uIHNldEJhdGNoKG5ld0JhdGNoKSB7XG4gIHJldHVybiBiYXRjaCA9IG5ld0JhdGNoO1xufTsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCB2YXIgZ2V0QmF0Y2ggPSBmdW5jdGlvbiBnZXRCYXRjaCgpIHtcbiAgcmV0dXJuIGJhdGNoO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIHZhciBmaXJzdCA9IG51bGw7XG4gIHZhciBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge30sXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICB2YXIgdW5zdWJzY3JpYmU7XG4gIHZhciBsaXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuXG4gIGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiBsaXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgbGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV3JhcHBlcigpIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHVuc3Vic2NyaWJlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXVuc3Vic2NyaWJlKSB7XG4gICAgICB1bnN1YnNjcmliZSA9IHBhcmVudFN1YiA/IHBhcmVudFN1Yi5hZGROZXN0ZWRTdWIoaGFuZGxlQ2hhbmdlV3JhcHBlcikgOiBzdG9yZS5zdWJzY3JpYmUoaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICBsaXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodW5zdWJzY3JpYmUpIHtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICB1bnN1YnNjcmliZSA9IHVuZGVmaW5lZDtcbiAgICAgIGxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH1cblxuICB2YXIgc3Vic2NyaXB0aW9uID0ge1xuICAgIGFkZE5lc3RlZFN1YjogYWRkTmVzdGVkU3ViLFxuICAgIG5vdGlmeU5lc3RlZFN1YnM6IG5vdGlmeU5lc3RlZFN1YnMsXG4gICAgaGFuZGxlQ2hhbmdlV3JhcHBlcjogaGFuZGxlQ2hhbmdlV3JhcHBlcixcbiAgICBpc1N1YnNjcmliZWQ6IGlzU3Vic2NyaWJlZCxcbiAgICB0cnlTdWJzY3JpYmU6IHRyeVN1YnNjcmliZSxcbiAgICB0cnlVbnN1YnNjcmliZTogdHJ5VW5zdWJzY3JpYmUsXG4gICAgZ2V0TGlzdGVuZXJzOiBmdW5jdGlvbiBnZXRMaXN0ZW5lcnMoKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn0iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcblxuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSxcbiAgICBfZXhjbHVkZWQyID0gW1wicmVhY3RSZWR1eEZvcndhcmRlZFJlZlwiXTtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnOyAvLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbnZhciBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBzdHJpbmdpZnlDb21wb25lbnQgPSBmdW5jdGlvbiBzdHJpbmdpZnlDb21wb25lbnQoQ29tcCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgdmFyIHVwZGF0ZUNvdW50ID0gc3RhdGVbMV07XG4gIHJldHVybiBbYWN0aW9uLnBheWxvYWQsIHVwZGF0ZUNvdW50ICsgMV07XG59XG5cbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVmZmVjdEZ1bmMuYXBwbHkodm9pZCAwLCBlZmZlY3RBcmdzKTtcbiAgfSwgZGVwZW5kZW5jaWVzKTtcbn1cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vicykge1xuICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2gpIHtcbiAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07IC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuXG5cbiAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTsgLy8gUHVsbCBkYXRhIGZyb20gdGhlIHN0b3JlIGFmdGVyIGZpcnN0IHJlbmRlciBpbiBjYXNlIHRoZSBzdG9yZSBoYXNcbiAgLy8gY2hhbmdlZCBzaW5jZSB3ZSBiZWdhbi5cblxuICBjaGVja0ZvclVwZGF0ZXMoKTtcblxuICB2YXIgdW5zdWJzY3JpYmVXcmFwcGVyID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVXcmFwcGVyKCkge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59XG5cbnZhciBpbml0U3RhdGVVcGRhdGVzID0gZnVuY3Rpb24gaW5pdFN0YXRlVXBkYXRlcygpIHtcbiAgcmV0dXJuIFtudWxsLCAwXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cclxuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcclxuICAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcclxuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcclxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxyXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXHJcbiAgICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcclxuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cclxuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxyXG4gICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcclxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcclxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXHJcbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgX3JlZjIkZm9yd2FyZFJlZiA9IF9yZWYyLmZvcndhcmRSZWYsXG4gICAgICBmb3J3YXJkUmVmID0gX3JlZjIkZm9yd2FyZFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRmb3J3YXJkUmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8gUmVhY3RSZWR1eENvbnRleHQgOiBfcmVmMiRjb250ZXh0LFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgX2V4Y2x1ZGVkKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChyZW5kZXJDb3VudFByb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVuZGVyQ291bnRQcm9wIGlzIHJlbW92ZWQuIHJlbmRlciBjb3VudGluZyBpcyBidWlsdCBpbnRvIHRoZSBsYXRlc3QgUmVhY3QgRGV2IFRvb2xzIHByb2ZpbGluZyBleHRlbnNpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhSZWYpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcblxuICAgIGlmIChzdG9yZUtleSAhPT0gJ3N0b3JlJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IHByb3BzLnJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdO1xuICAgICAgfSwgW3Byb3BzXSksXG4gICAgICAgICAgcHJvcHNDb250ZXh0ID0gX3VzZU1lbW9bMF0sXG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpKSA/IHByb3BzQ29udGV4dCA6IENvbnRleHQ7XG4gICAgICB9LCBbcHJvcHNDb250ZXh0LCBDb250ZXh0XSk7IC8vIFJldHJpZXZlIHRoZSBzdG9yZSBhbmQgYW5jZXN0b3Igc3Vic2NyaXB0aW9uIHZpYSBjb250ZXh0LCBpZiBhdmFpbGFibGVcblxuICAgICAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTsgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHQuXG4gICAgICAvLyBXZSdsbCBjaGVjayB0byBzZWUgaWYgaXQgX2xvb2tzXyBsaWtlIGEgUmVkdXggc3RvcmUgZmlyc3QuXG4gICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBwYXNzIHRocm91Z2ggYSBgc3RvcmVgIHByb3AgdGhhdCBpcyBqdXN0IGEgcGxhaW4gdmFsdWUuXG5cbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmdldFN0YXRlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFkaWRTdG9yZUNvbWVGcm9tUHJvcHMgJiYgIWRpZFN0b3JlQ29tZUZyb21Db250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIFxcXCJzdG9yZVxcXCIgaW4gdGhlIGNvbnRleHQgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgXCJvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgXCIgKyAoXCJSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvIFwiICsgZGlzcGxheU5hbWUgKyBcIiBpbiBjb25uZWN0IG9wdGlvbnMuXCIpKTtcbiAgICAgIH0gLy8gQmFzZWQgb24gdGhlIHByZXZpb3VzIGNoZWNrLCBvbmUgb2YgdGhlc2UgbXVzdCBiZSB0cnVlXG5cblxuICAgICAgdmFyIHN0b3JlID0gZGlkU3RvcmVDb21lRnJvbVByb3BzID8gcHJvcHMuc3RvcmUgOiBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICB2YXIgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpO1xuICAgICAgfSwgW3N0b3JlXSk7XG5cbiAgICAgIHZhciBfdXNlTWVtbzIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnNdKTsgLy8gT3VyIHJlLXN1YnNjcmliZSBsb2dpYyBvbmx5IHJ1bnMgd2hlbiB0aGUgc3RvcmUvc3Vic2NyaXB0aW9uIHNldHVwIGNoYW5nZXNcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKHN1YnNjcmliZVVwZGF0ZXMsIFtzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoXSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSwgW3JlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBDb25uZWN0RnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsImZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCBiaW5kQWN0aW9uQ3JlYXRvcnMgZnJvbSAnLi4vdXRpbHMvYmluZEFjdGlvbkNyZWF0b3JzJztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGtleSkge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgX2xvb3Aoa2V5KTtcbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufSIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xudmFyIF9leGNsdWRlZCA9IFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl07XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIF9leGNsdWRlZCk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xudmFyIF9leGNsdWRlZCA9IFtcInB1cmVcIiwgXCJhcmVTdGF0ZXNFcXVhbFwiLCBcImFyZU93blByb3BzRXF1YWxcIiwgXCJhcmVTdGF0ZVByb3BzRXF1YWxcIiwgXCJhcmVNZXJnZWRQcm9wc0VxdWFsXCJdO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXHJcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcclxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxyXG5cclxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xyXG4gIFxyXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXHJcblxyXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxyXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXHJcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cclxuXHJcbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXHJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxyXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBfZXhjbHVkZWQpO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL2NyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNvbnRleHQsIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZVN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG5mdW5jdGlvbiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpIHtcbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IHN0b3JlU3RhdGUgIT09IGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmVTdGF0ZSk7IC8vIGVuc3VyZSBsYXRlc3Qgc2VsZWN0ZWQgc3RhdGUgaXMgcmV1c2VkIHNvIHRoYXQgYSBjdXN0b20gZXF1YWxpdHkgZnVuY3Rpb24gY2FuIHJlc3VsdCBpbiBpZGVudGljYWwgcmVmZXJlbmNlc1xuXG4gICAgICBpZiAobGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID09PSB1bmRlZmluZWQgfHwgIWVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICBzZWxlY3RlZFN0YXRlID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnIubWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIgKyBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2sgKyBcIlxcblxcblwiO1xuICAgIH1cblxuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgPSBzdG9yZVN0YXRlO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1N0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpOyAvLyBBdm9pZCBjYWxsaW5nIHNlbGVjdG9yIG11bHRpcGxlIHRpbWVzIGlmIHRoZSBzdG9yZSdzIHN0YXRlIGhhcyBub3QgY2hhbmdlZFxuXG4gICAgICAgIGlmIChuZXdTdG9yZVN0YXRlID09PSBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX25ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KG5ld1N0b3JlU3RhdGUpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKF9uZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gX25ld1NlbGVjdGVkU3RhdGU7XG4gICAgICAgIGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCA9IG5ld1N0b3JlU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gICAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlcXVhbGl0eUZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBhbiBlcXVhbGl0eSBmdW5jdGlvbiB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHZhciBzZWxlY3RlZFN0YXRlID0gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID0gLyojX19QVVJFX18qL2NyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImltcG9ydCB7IHVzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gYXJlSW5wdXRzRXF1YWwobmV3SW5wdXRzLCBsYXN0SW5wdXRzKSB7XG4gIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG5ld0lucHV0c1tpXSAhPT0gbGFzdElucHV0c1tpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB1c2VNZW1vT25lKGdldFJlc3VsdCwgaW5wdXRzKSB7XG4gIHZhciBpbml0aWFsID0gdXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbnB1dHM6IGlucHV0cyxcbiAgICAgIHJlc3VsdDogZ2V0UmVzdWx0KClcbiAgICB9O1xuICB9KVswXTtcbiAgdmFyIGlzRmlyc3RSdW4gPSB1c2VSZWYodHJ1ZSk7XG4gIHZhciBjb21taXR0ZWQgPSB1c2VSZWYoaW5pdGlhbCk7XG4gIHZhciB1c2VDYWNoZSA9IGlzRmlyc3RSdW4uY3VycmVudCB8fCBCb29sZWFuKGlucHV0cyAmJiBjb21taXR0ZWQuY3VycmVudC5pbnB1dHMgJiYgYXJlSW5wdXRzRXF1YWwoaW5wdXRzLCBjb21taXR0ZWQuY3VycmVudC5pbnB1dHMpKTtcbiAgdmFyIGNhY2hlID0gdXNlQ2FjaGUgPyBjb21taXR0ZWQuY3VycmVudCA6IHtcbiAgICBpbnB1dHM6IGlucHV0cyxcbiAgICByZXN1bHQ6IGdldFJlc3VsdCgpXG4gIH07XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaXNGaXJzdFJ1bi5jdXJyZW50ID0gZmFsc2U7XG4gICAgY29tbWl0dGVkLmN1cnJlbnQgPSBjYWNoZTtcbiAgfSwgW2NhY2hlXSk7XG4gIHJldHVybiBjYWNoZS5yZXN1bHQ7XG59XG5mdW5jdGlvbiB1c2VDYWxsYmFja09uZShjYWxsYmFjaywgaW5wdXRzKSB7XG4gIHJldHVybiB1c2VNZW1vT25lKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2s7XG4gIH0sIGlucHV0cyk7XG59XG52YXIgdXNlTWVtbyA9IHVzZU1lbW9PbmU7XG52YXIgdXNlQ2FsbGJhY2sgPSB1c2VDYWxsYmFja09uZTtcblxuZXhwb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUNhbGxiYWNrT25lLCB1c2VNZW1vLCB1c2VNZW1vT25lIH07XG4iLCJleHBvcnQgKiBmcm9tICcuL2V4cG9ydHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJzsgLy8gRW5hYmxlIGJhdGNoZWQgdXBkYXRlcyBpbiBvdXIgc3Vic2NyaXB0aW9ucyBmb3IgdXNlXG4vLyB3aXRoIHN0YW5kYXJkIFJlYWN0IHJlbmRlcmVycyAoUmVhY3RET00sIFJlYWN0IE5hdGl2ZSlcblxuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgYmF0Y2ggfTsiLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxudmFyIGdldFJlY3QgPSBmdW5jdGlvbiBnZXRSZWN0KF9yZWYpIHtcbiAgdmFyIHRvcCA9IF9yZWYudG9wLFxuICAgICAgcmlnaHQgPSBfcmVmLnJpZ2h0LFxuICAgICAgYm90dG9tID0gX3JlZi5ib3R0b20sXG4gICAgICBsZWZ0ID0gX3JlZi5sZWZ0O1xuICB2YXIgd2lkdGggPSByaWdodCAtIGxlZnQ7XG4gIHZhciBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gIHZhciByZWN0ID0ge1xuICAgIHRvcDogdG9wLFxuICAgIHJpZ2h0OiByaWdodCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiBsZWZ0LFxuICAgIHk6IHRvcCxcbiAgICBjZW50ZXI6IHtcbiAgICAgIHg6IChyaWdodCArIGxlZnQpIC8gMixcbiAgICAgIHk6IChib3R0b20gKyB0b3ApIC8gMlxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHJlY3Q7XG59O1xudmFyIGV4cGFuZCA9IGZ1bmN0aW9uIGV4cGFuZCh0YXJnZXQsIGV4cGFuZEJ5KSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiB0YXJnZXQudG9wIC0gZXhwYW5kQnkudG9wLFxuICAgIGxlZnQ6IHRhcmdldC5sZWZ0IC0gZXhwYW5kQnkubGVmdCxcbiAgICBib3R0b206IHRhcmdldC5ib3R0b20gKyBleHBhbmRCeS5ib3R0b20sXG4gICAgcmlnaHQ6IHRhcmdldC5yaWdodCArIGV4cGFuZEJ5LnJpZ2h0XG4gIH07XG59O1xudmFyIHNocmluayA9IGZ1bmN0aW9uIHNocmluayh0YXJnZXQsIHNocmlua0J5KSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiB0YXJnZXQudG9wICsgc2hyaW5rQnkudG9wLFxuICAgIGxlZnQ6IHRhcmdldC5sZWZ0ICsgc2hyaW5rQnkubGVmdCxcbiAgICBib3R0b206IHRhcmdldC5ib3R0b20gLSBzaHJpbmtCeS5ib3R0b20sXG4gICAgcmlnaHQ6IHRhcmdldC5yaWdodCAtIHNocmlua0J5LnJpZ2h0XG4gIH07XG59O1xuXG52YXIgc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCh0YXJnZXQsIHNoaWZ0QnkpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IHRhcmdldC50b3AgKyBzaGlmdEJ5LnksXG4gICAgbGVmdDogdGFyZ2V0LmxlZnQgKyBzaGlmdEJ5LngsXG4gICAgYm90dG9tOiB0YXJnZXQuYm90dG9tICsgc2hpZnRCeS55LFxuICAgIHJpZ2h0OiB0YXJnZXQucmlnaHQgKyBzaGlmdEJ5LnhcbiAgfTtcbn07XG5cbnZhciBub1NwYWNpbmcgPSB7XG4gIHRvcDogMCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogMFxufTtcbnZhciBjcmVhdGVCb3ggPSBmdW5jdGlvbiBjcmVhdGVCb3goX3JlZjIpIHtcbiAgdmFyIGJvcmRlckJveCA9IF9yZWYyLmJvcmRlckJveCxcbiAgICAgIF9yZWYyJG1hcmdpbiA9IF9yZWYyLm1hcmdpbixcbiAgICAgIG1hcmdpbiA9IF9yZWYyJG1hcmdpbiA9PT0gdm9pZCAwID8gbm9TcGFjaW5nIDogX3JlZjIkbWFyZ2luLFxuICAgICAgX3JlZjIkYm9yZGVyID0gX3JlZjIuYm9yZGVyLFxuICAgICAgYm9yZGVyID0gX3JlZjIkYm9yZGVyID09PSB2b2lkIDAgPyBub1NwYWNpbmcgOiBfcmVmMiRib3JkZXIsXG4gICAgICBfcmVmMiRwYWRkaW5nID0gX3JlZjIucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfcmVmMiRwYWRkaW5nID09PSB2b2lkIDAgPyBub1NwYWNpbmcgOiBfcmVmMiRwYWRkaW5nO1xuICB2YXIgbWFyZ2luQm94ID0gZ2V0UmVjdChleHBhbmQoYm9yZGVyQm94LCBtYXJnaW4pKTtcbiAgdmFyIHBhZGRpbmdCb3ggPSBnZXRSZWN0KHNocmluayhib3JkZXJCb3gsIGJvcmRlcikpO1xuICB2YXIgY29udGVudEJveCA9IGdldFJlY3Qoc2hyaW5rKHBhZGRpbmdCb3gsIHBhZGRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBtYXJnaW5Cb3g6IG1hcmdpbkJveCxcbiAgICBib3JkZXJCb3g6IGdldFJlY3QoYm9yZGVyQm94KSxcbiAgICBwYWRkaW5nQm94OiBwYWRkaW5nQm94LFxuICAgIGNvbnRlbnRCb3g6IGNvbnRlbnRCb3gsXG4gICAgbWFyZ2luOiBtYXJnaW4sXG4gICAgYm9yZGVyOiBib3JkZXIsXG4gICAgcGFkZGluZzogcGFkZGluZ1xuICB9O1xufTtcblxudmFyIHBhcnNlID0gZnVuY3Rpb24gcGFyc2UocmF3KSB7XG4gIHZhciB2YWx1ZSA9IHJhdy5zbGljZSgwLCAtMik7XG4gIHZhciBzdWZmaXggPSByYXcuc2xpY2UoLTIpO1xuXG4gIGlmIChzdWZmaXggIT09ICdweCcpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBOdW1iZXIodmFsdWUpO1xuICAhIWlzTmFOKHJlc3VsdCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ291bGQgbm90IHBhcnNlIHZhbHVlIFtyYXc6IFwiICsgcmF3ICsgXCIsIHdpdGhvdXQgc3VmZml4OiBcIiArIHZhbHVlICsgXCJdXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBnZXRXaW5kb3dTY3JvbGwgPSBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwoKSB7XG4gIHJldHVybiB7XG4gICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldFxuICB9O1xufTtcblxudmFyIG9mZnNldCA9IGZ1bmN0aW9uIG9mZnNldChvcmlnaW5hbCwgY2hhbmdlKSB7XG4gIHZhciBib3JkZXJCb3ggPSBvcmlnaW5hbC5ib3JkZXJCb3gsXG4gICAgICBib3JkZXIgPSBvcmlnaW5hbC5ib3JkZXIsXG4gICAgICBtYXJnaW4gPSBvcmlnaW5hbC5tYXJnaW4sXG4gICAgICBwYWRkaW5nID0gb3JpZ2luYWwucGFkZGluZztcbiAgdmFyIHNoaWZ0ZWQgPSBzaGlmdChib3JkZXJCb3gsIGNoYW5nZSk7XG4gIHJldHVybiBjcmVhdGVCb3goe1xuICAgIGJvcmRlckJveDogc2hpZnRlZCxcbiAgICBib3JkZXI6IGJvcmRlcixcbiAgICBtYXJnaW46IG1hcmdpbixcbiAgICBwYWRkaW5nOiBwYWRkaW5nXG4gIH0pO1xufTtcbnZhciB3aXRoU2Nyb2xsID0gZnVuY3Rpb24gd2l0aFNjcm9sbChvcmlnaW5hbCwgc2Nyb2xsKSB7XG4gIGlmIChzY3JvbGwgPT09IHZvaWQgMCkge1xuICAgIHNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbCgpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldChvcmlnaW5hbCwgc2Nyb2xsKTtcbn07XG52YXIgY2FsY3VsYXRlQm94ID0gZnVuY3Rpb24gY2FsY3VsYXRlQm94KGJvcmRlckJveCwgc3R5bGVzKSB7XG4gIHZhciBtYXJnaW4gPSB7XG4gICAgdG9wOiBwYXJzZShzdHlsZXMubWFyZ2luVG9wKSxcbiAgICByaWdodDogcGFyc2Uoc3R5bGVzLm1hcmdpblJpZ2h0KSxcbiAgICBib3R0b206IHBhcnNlKHN0eWxlcy5tYXJnaW5Cb3R0b20pLFxuICAgIGxlZnQ6IHBhcnNlKHN0eWxlcy5tYXJnaW5MZWZ0KVxuICB9O1xuICB2YXIgcGFkZGluZyA9IHtcbiAgICB0b3A6IHBhcnNlKHN0eWxlcy5wYWRkaW5nVG9wKSxcbiAgICByaWdodDogcGFyc2Uoc3R5bGVzLnBhZGRpbmdSaWdodCksXG4gICAgYm90dG9tOiBwYXJzZShzdHlsZXMucGFkZGluZ0JvdHRvbSksXG4gICAgbGVmdDogcGFyc2Uoc3R5bGVzLnBhZGRpbmdMZWZ0KVxuICB9O1xuICB2YXIgYm9yZGVyID0ge1xuICAgIHRvcDogcGFyc2Uoc3R5bGVzLmJvcmRlclRvcFdpZHRoKSxcbiAgICByaWdodDogcGFyc2Uoc3R5bGVzLmJvcmRlclJpZ2h0V2lkdGgpLFxuICAgIGJvdHRvbTogcGFyc2Uoc3R5bGVzLmJvcmRlckJvdHRvbVdpZHRoKSxcbiAgICBsZWZ0OiBwYXJzZShzdHlsZXMuYm9yZGVyTGVmdFdpZHRoKVxuICB9O1xuICByZXR1cm4gY3JlYXRlQm94KHtcbiAgICBib3JkZXJCb3g6IGJvcmRlckJveCxcbiAgICBtYXJnaW46IG1hcmdpbixcbiAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIGJvcmRlcjogYm9yZGVyXG4gIH0pO1xufTtcbnZhciBnZXRCb3ggPSBmdW5jdGlvbiBnZXRCb3goZWwpIHtcbiAgdmFyIGJvcmRlckJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICByZXR1cm4gY2FsY3VsYXRlQm94KGJvcmRlckJveCwgc3R5bGVzKTtcbn07XG5cbmV4cG9ydCB7IGNhbGN1bGF0ZUJveCwgY3JlYXRlQm94LCBleHBhbmQsIGdldEJveCwgZ2V0UmVjdCwgb2Zmc2V0LCBzaHJpbmssIHdpdGhTY3JvbGwgfTtcbiIsImZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICAgIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChuZXdJbnB1dHNbaV0gIT09IGxhc3RJbnB1dHNbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZU9uZShyZXN1bHRGbiwgaXNFcXVhbCkge1xuICAgIGlmIChpc0VxdWFsID09PSB2b2lkIDApIHsgaXNFcXVhbCA9IGFyZUlucHV0c0VxdWFsOyB9XG4gICAgdmFyIGxhc3RUaGlzO1xuICAgIHZhciBsYXN0QXJncyA9IFtdO1xuICAgIHZhciBsYXN0UmVzdWx0O1xuICAgIHZhciBjYWxsZWRPbmNlID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgICAgIHZhciBuZXdBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuZXdBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxlZE9uY2UgJiYgbGFzdFRoaXMgPT09IHRoaXMgJiYgaXNFcXVhbChuZXdBcmdzLCBsYXN0QXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxhc3RSZXN1bHQgPSByZXN1bHRGbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcbiAgICAgICAgY2FsbGVkT25jZSA9IHRydWU7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdEFyZ3MgPSBuZXdBcmdzO1xuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplT25lO1xuIiwidmFyIHJhZlNjaGQgPSBmdW5jdGlvbiByYWZTY2hkKGZuKSB7XG4gIHZhciBsYXN0QXJncyA9IFtdO1xuICB2YXIgZnJhbWVJZCA9IG51bGw7XG5cbiAgdmFyIHdyYXBwZXJGbiA9IGZ1bmN0aW9uIHdyYXBwZXJGbigpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGFzdEFyZ3MgPSBhcmdzO1xuXG4gICAgaWYgKGZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmcmFtZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZyYW1lSWQgPSBudWxsO1xuICAgICAgZm4uYXBwbHkodm9pZCAwLCBsYXN0QXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgd3JhcHBlckZuLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZUlkKTtcbiAgICBmcmFtZUlkID0gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gd3JhcHBlckZuO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmFmU2NoZDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IGNyZWF0ZVN0b3JlIGFzIGNyZWF0ZVN0b3JlJDEsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSwgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgUHJvdmlkZXIsIGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyB1c2VNZW1vLCB1c2VDYWxsYmFjayB9IGZyb20gJ3VzZS1tZW1vLW9uZSc7XG5pbXBvcnQgeyBnZXRSZWN0LCBleHBhbmQsIG9mZnNldCwgd2l0aFNjcm9sbCwgZ2V0Qm94LCBjcmVhdGVCb3gsIGNhbGN1bGF0ZUJveCB9IGZyb20gJ2Nzcy1ib3gtbW9kZWwnO1xuaW1wb3J0IG1lbW9pemVPbmUgZnJvbSAnbWVtb2l6ZS1vbmUnO1xuaW1wb3J0IHJhZlNjaGQgZnJvbSAncmFmLXNjaGQnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbnZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHNwYWNlc0FuZFRhYnMgPSAvWyBcXHRdezIsfS9nO1xudmFyIGxpbmVTdGFydFdpdGhTcGFjZXMgPSAvXlsgXFx0XSovZ207XG5cbnZhciBjbGVhbiA9IGZ1bmN0aW9uIGNsZWFuKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKHNwYWNlc0FuZFRhYnMsICcgJykucmVwbGFjZShsaW5lU3RhcnRXaXRoU3BhY2VzLCAnJykudHJpbSgpO1xufTtcblxudmFyIGdldERldk1lc3NhZ2UgPSBmdW5jdGlvbiBnZXREZXZNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIGNsZWFuKFwiXFxuICAlY3JlYWN0LWJlYXV0aWZ1bC1kbmRcXG5cXG4gICVjXCIgKyBjbGVhbihtZXNzYWdlKSArIFwiXFxuXFxuICAlY1xcdUQ4M0RcXHVEQzc3XFx1MjAwRCBUaGlzIGlzIGEgZGV2ZWxvcG1lbnQgb25seSBtZXNzYWdlLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMuXFxuXCIpO1xufTtcblxudmFyIGdldEZvcm1hdHRlZE1lc3NhZ2UgPSBmdW5jdGlvbiBnZXRGb3JtYXR0ZWRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIFtnZXREZXZNZXNzYWdlKG1lc3NhZ2UpLCAnY29sb3I6ICMwMEM1ODQ7IGZvbnQtc2l6ZTogMS4yZW07IGZvbnQtd2VpZ2h0OiBib2xkOycsICdsaW5lLWhlaWdodDogMS41JywgJ2NvbG9yOiAjNzIzODc0OyddO1xufTtcbnZhciBpc0Rpc2FibGVkRmxhZyA9ICdfX3JlYWN0LWJlYXV0aWZ1bC1kbmQtZGlzYWJsZS1kZXYtd2FybmluZ3MnO1xuZnVuY3Rpb24gbG9nKHR5cGUsIG1lc3NhZ2UpIHtcbiAgdmFyIF9jb25zb2xlO1xuXG4gIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93W2lzRGlzYWJsZWRGbGFnXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIChfY29uc29sZSA9IGNvbnNvbGUpW3R5cGVdLmFwcGx5KF9jb25zb2xlLCBnZXRGb3JtYXR0ZWRNZXNzYWdlKG1lc3NhZ2UpKTtcbn1cbnZhciB3YXJuaW5nID0gbG9nLmJpbmQobnVsbCwgJ3dhcm4nKTtcbnZhciBlcnJvciA9IGxvZy5iaW5kKG51bGwsICdlcnJvcicpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZ2V0T3B0aW9ucyhzaGFyZWQsIGZyb21CaW5kaW5nKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgc2hhcmVkLCB7fSwgZnJvbUJpbmRpbmcpO1xufVxuXG5mdW5jdGlvbiBiaW5kRXZlbnRzKGVsLCBiaW5kaW5ncywgc2hhcmVkT3B0aW9ucykge1xuICB2YXIgdW5iaW5kaW5ncyA9IGJpbmRpbmdzLm1hcChmdW5jdGlvbiAoYmluZGluZykge1xuICAgIHZhciBvcHRpb25zID0gZ2V0T3B0aW9ucyhzaGFyZWRPcHRpb25zLCBiaW5kaW5nLm9wdGlvbnMpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoYmluZGluZy5ldmVudE5hbWUsIGJpbmRpbmcuZm4sIG9wdGlvbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGJpbmRpbmcuZXZlbnROYW1lLCBiaW5kaW5nLmZuLCBvcHRpb25zKTtcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVuYmluZEFsbCgpIHtcbiAgICB1bmJpbmRpbmdzLmZvckVhY2goZnVuY3Rpb24gKHVuYmluZCkge1xuICAgICAgdW5iaW5kKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbnZhciBpc1Byb2R1Y3Rpb24kMSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gUmJkSW52YXJpYW50KG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuUmJkSW52YXJpYW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdGhpcy5tZXNzYWdlO1xufTtcblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzUHJvZHVjdGlvbiQxKSB7XG4gICAgdGhyb3cgbmV3IFJiZEludmFyaWFudChwcmVmaXgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBSYmRJbnZhcmlhbnQocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbiAgfVxufVxuXG52YXIgRXJyb3JCb3VuZGFyeSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEVycm9yQm91bmRhcnksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEVycm9yQm91bmRhcnkoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuY2FsbGJhY2tzID0gbnVsbDtcbiAgICBfdGhpcy51bmJpbmQgPSBub29wO1xuXG4gICAgX3RoaXMub25XaW5kb3dFcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IF90aGlzLmdldENhbGxiYWNrcygpO1xuXG4gICAgICBpZiAoY2FsbGJhY2tzLmlzRHJhZ2dpbmcoKSkge1xuICAgICAgICBjYWxsYmFja3MudHJ5QWJvcnQoKTtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgICAgQW4gZXJyb3Igd2FzIGNhdWdodCBieSBvdXIgd2luZG93ICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgd2hpbGUgYSBkcmFnIHdhcyBvY2N1cnJpbmcuXFxuICAgICAgICBUaGUgYWN0aXZlIGRyYWcgaGFzIGJlZW4gYWJvcnRlZC5cXG4gICAgICBcIikgOiB2b2lkIDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBlcnIgPSBldmVudC5lcnJvcjtcblxuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFJiZEludmFyaWFudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgZXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmdldENhbGxiYWNrcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMuY2FsbGJhY2tzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgQXBwQ2FsbGJhY2tzIGluIDxFcnJvckJvdW5kYXJ5Lz4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF90aGlzLmNhbGxiYWNrcztcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0Q2FsbGJhY2tzID0gZnVuY3Rpb24gKGNhbGxiYWNrcykge1xuICAgICAgX3RoaXMuY2FsbGJhY2tzID0gY2FsbGJhY2tzO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRXJyb3JCb3VuZGFyeS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51bmJpbmQgPSBiaW5kRXZlbnRzKHdpbmRvdywgW3tcbiAgICAgIGV2ZW50TmFtZTogJ2Vycm9yJyxcbiAgICAgIGZuOiB0aGlzLm9uV2luZG93RXJyb3JcbiAgICB9XSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZENhdGNoID0gZnVuY3Rpb24gY29tcG9uZW50RGlkQ2F0Y2goZXJyKSB7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIFJiZEludmFyaWFudCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFN0YXRlKHt9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnI7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bmJpbmQoKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHRoaXMuc2V0Q2FsbGJhY2tzKTtcbiAgfTtcblxuICByZXR1cm4gRXJyb3JCb3VuZGFyeTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxudmFyIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9ucyA9IFwiXFxuICBQcmVzcyBzcGFjZSBiYXIgdG8gc3RhcnQgYSBkcmFnLlxcbiAgV2hlbiBkcmFnZ2luZyB5b3UgY2FuIHVzZSB0aGUgYXJyb3cga2V5cyB0byBtb3ZlIHRoZSBpdGVtIGFyb3VuZCBhbmQgZXNjYXBlIHRvIGNhbmNlbC5cXG4gIFNvbWUgc2NyZWVuIHJlYWRlcnMgbWF5IHJlcXVpcmUgeW91IHRvIGJlIGluIGZvY3VzIG1vZGUgb3IgdG8gdXNlIHlvdXIgcGFzcyB0aHJvdWdoIGtleVxcblwiO1xuXG52YXIgcG9zaXRpb24gPSBmdW5jdGlvbiBwb3NpdGlvbihpbmRleCkge1xuICByZXR1cm4gaW5kZXggKyAxO1xufTtcblxudmFyIG9uRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gb25EcmFnU3RhcnQoc3RhcnQpIHtcbiAgcmV0dXJuIFwiXFxuICBZb3UgaGF2ZSBsaWZ0ZWQgYW4gaXRlbSBpbiBwb3NpdGlvbiBcIiArIHBvc2l0aW9uKHN0YXJ0LnNvdXJjZS5pbmRleCkgKyBcIlxcblwiO1xufTtcblxudmFyIHdpdGhMb2NhdGlvbiA9IGZ1bmN0aW9uIHdpdGhMb2NhdGlvbihzb3VyY2UsIGRlc3RpbmF0aW9uKSB7XG4gIHZhciBpc0luSG9tZUxpc3QgPSBzb3VyY2UuZHJvcHBhYmxlSWQgPT09IGRlc3RpbmF0aW9uLmRyb3BwYWJsZUlkO1xuICB2YXIgc3RhcnRQb3NpdGlvbiA9IHBvc2l0aW9uKHNvdXJjZS5pbmRleCk7XG4gIHZhciBlbmRQb3NpdGlvbiA9IHBvc2l0aW9uKGRlc3RpbmF0aW9uLmluZGV4KTtcblxuICBpZiAoaXNJbkhvbWVMaXN0KSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgWW91IGhhdmUgbW92ZWQgdGhlIGl0ZW0gZnJvbSBwb3NpdGlvbiBcIiArIHN0YXJ0UG9zaXRpb24gKyBcIlxcbiAgICAgIHRvIHBvc2l0aW9uIFwiICsgZW5kUG9zaXRpb24gKyBcIlxcbiAgICBcIjtcbiAgfVxuXG4gIHJldHVybiBcIlxcbiAgICBZb3UgaGF2ZSBtb3ZlZCB0aGUgaXRlbSBmcm9tIHBvc2l0aW9uIFwiICsgc3RhcnRQb3NpdGlvbiArIFwiXFxuICAgIGluIGxpc3QgXCIgKyBzb3VyY2UuZHJvcHBhYmxlSWQgKyBcIlxcbiAgICB0byBsaXN0IFwiICsgZGVzdGluYXRpb24uZHJvcHBhYmxlSWQgKyBcIlxcbiAgICBpbiBwb3NpdGlvbiBcIiArIGVuZFBvc2l0aW9uICsgXCJcXG4gIFwiO1xufTtcblxudmFyIHdpdGhDb21iaW5lID0gZnVuY3Rpb24gd2l0aENvbWJpbmUoaWQsIHNvdXJjZSwgY29tYmluZSkge1xuICB2YXIgaW5Ib21lTGlzdCA9IHNvdXJjZS5kcm9wcGFibGVJZCA9PT0gY29tYmluZS5kcm9wcGFibGVJZDtcblxuICBpZiAoaW5Ib21lTGlzdCkge1xuICAgIHJldHVybiBcIlxcbiAgICAgIFRoZSBpdGVtIFwiICsgaWQgKyBcIlxcbiAgICAgIGhhcyBiZWVuIGNvbWJpbmVkIHdpdGggXCIgKyBjb21iaW5lLmRyYWdnYWJsZUlkO1xuICB9XG5cbiAgcmV0dXJuIFwiXFxuICAgICAgVGhlIGl0ZW0gXCIgKyBpZCArIFwiXFxuICAgICAgaW4gbGlzdCBcIiArIHNvdXJjZS5kcm9wcGFibGVJZCArIFwiXFxuICAgICAgaGFzIGJlZW4gY29tYmluZWQgd2l0aCBcIiArIGNvbWJpbmUuZHJhZ2dhYmxlSWQgKyBcIlxcbiAgICAgIGluIGxpc3QgXCIgKyBjb21iaW5lLmRyb3BwYWJsZUlkICsgXCJcXG4gICAgXCI7XG59O1xuXG52YXIgb25EcmFnVXBkYXRlID0gZnVuY3Rpb24gb25EcmFnVXBkYXRlKHVwZGF0ZSkge1xuICB2YXIgbG9jYXRpb24gPSB1cGRhdGUuZGVzdGluYXRpb247XG5cbiAgaWYgKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIHdpdGhMb2NhdGlvbih1cGRhdGUuc291cmNlLCBsb2NhdGlvbik7XG4gIH1cblxuICB2YXIgY29tYmluZSA9IHVwZGF0ZS5jb21iaW5lO1xuXG4gIGlmIChjb21iaW5lKSB7XG4gICAgcmV0dXJuIHdpdGhDb21iaW5lKHVwZGF0ZS5kcmFnZ2FibGVJZCwgdXBkYXRlLnNvdXJjZSwgY29tYmluZSk7XG4gIH1cblxuICByZXR1cm4gJ1lvdSBhcmUgb3ZlciBhbiBhcmVhIHRoYXQgY2Fubm90IGJlIGRyb3BwZWQgb24nO1xufTtcblxudmFyIHJldHVybmVkVG9TdGFydCA9IGZ1bmN0aW9uIHJldHVybmVkVG9TdGFydChzb3VyY2UpIHtcbiAgcmV0dXJuIFwiXFxuICBUaGUgaXRlbSBoYXMgcmV0dXJuZWQgdG8gaXRzIHN0YXJ0aW5nIHBvc2l0aW9uXFxuICBvZiBcIiArIHBvc2l0aW9uKHNvdXJjZS5pbmRleCkgKyBcIlxcblwiO1xufTtcblxudmFyIG9uRHJhZ0VuZCA9IGZ1bmN0aW9uIG9uRHJhZ0VuZChyZXN1bHQpIHtcbiAgaWYgKHJlc3VsdC5yZWFzb24gPT09ICdDQU5DRUwnKSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgTW92ZW1lbnQgY2FuY2VsbGVkLlxcbiAgICAgIFwiICsgcmV0dXJuZWRUb1N0YXJ0KHJlc3VsdC5zb3VyY2UpICsgXCJcXG4gICAgXCI7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSByZXN1bHQuZGVzdGluYXRpb247XG4gIHZhciBjb21iaW5lID0gcmVzdWx0LmNvbWJpbmU7XG5cbiAgaWYgKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgWW91IGhhdmUgZHJvcHBlZCB0aGUgaXRlbS5cXG4gICAgICBcIiArIHdpdGhMb2NhdGlvbihyZXN1bHQuc291cmNlLCBsb2NhdGlvbikgKyBcIlxcbiAgICBcIjtcbiAgfVxuXG4gIGlmIChjb21iaW5lKSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgWW91IGhhdmUgZHJvcHBlZCB0aGUgaXRlbS5cXG4gICAgICBcIiArIHdpdGhDb21iaW5lKHJlc3VsdC5kcmFnZ2FibGVJZCwgcmVzdWx0LnNvdXJjZSwgY29tYmluZSkgKyBcIlxcbiAgICBcIjtcbiAgfVxuXG4gIHJldHVybiBcIlxcbiAgICBUaGUgaXRlbSBoYXMgYmVlbiBkcm9wcGVkIHdoaWxlIG5vdCBvdmVyIGEgZHJvcCBhcmVhLlxcbiAgICBcIiArIHJldHVybmVkVG9TdGFydChyZXN1bHQuc291cmNlKSArIFwiXFxuICBcIjtcbn07XG5cbnZhciBwcmVzZXQgPSB7XG4gIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9uczogZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zLFxuICBvbkRyYWdTdGFydDogb25EcmFnU3RhcnQsXG4gIG9uRHJhZ1VwZGF0ZTogb25EcmFnVXBkYXRlLFxuICBvbkRyYWdFbmQ6IG9uRHJhZ0VuZFxufTtcblxudmFyIG9yaWdpbiA9IHtcbiAgeDogMCxcbiAgeTogMFxufTtcbnZhciBhZGQgPSBmdW5jdGlvbiBhZGQocG9pbnQxLCBwb2ludDIpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwb2ludDEueCArIHBvaW50Mi54LFxuICAgIHk6IHBvaW50MS55ICsgcG9pbnQyLnlcbiAgfTtcbn07XG52YXIgc3VidHJhY3QgPSBmdW5jdGlvbiBzdWJ0cmFjdChwb2ludDEsIHBvaW50Mikge1xuICByZXR1cm4ge1xuICAgIHg6IHBvaW50MS54IC0gcG9pbnQyLngsXG4gICAgeTogcG9pbnQxLnkgLSBwb2ludDIueVxuICB9O1xufTtcbnZhciBpc0VxdWFsID0gZnVuY3Rpb24gaXNFcXVhbChwb2ludDEsIHBvaW50Mikge1xuICByZXR1cm4gcG9pbnQxLnggPT09IHBvaW50Mi54ICYmIHBvaW50MS55ID09PSBwb2ludDIueTtcbn07XG52YXIgbmVnYXRlID0gZnVuY3Rpb24gbmVnYXRlKHBvaW50KSB7XG4gIHJldHVybiB7XG4gICAgeDogcG9pbnQueCAhPT0gMCA/IC1wb2ludC54IDogMCxcbiAgICB5OiBwb2ludC55ICE9PSAwID8gLXBvaW50LnkgOiAwXG4gIH07XG59O1xudmFyIHBhdGNoID0gZnVuY3Rpb24gcGF0Y2gobGluZSwgdmFsdWUsIG90aGVyVmFsdWUpIHtcbiAgdmFyIF9yZWY7XG5cbiAgaWYgKG90aGVyVmFsdWUgPT09IHZvaWQgMCkge1xuICAgIG90aGVyVmFsdWUgPSAwO1xuICB9XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltsaW5lXSA9IHZhbHVlLCBfcmVmW2xpbmUgPT09ICd4JyA/ICd5JyA6ICd4J10gPSBvdGhlclZhbHVlLCBfcmVmO1xufTtcbnZhciBkaXN0YW5jZSA9IGZ1bmN0aW9uIGRpc3RhbmNlKHBvaW50MSwgcG9pbnQyKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocG9pbnQyLnggLSBwb2ludDEueCwgMikgKyBNYXRoLnBvdyhwb2ludDIueSAtIHBvaW50MS55LCAyKSk7XG59O1xudmFyIGNsb3Nlc3QgPSBmdW5jdGlvbiBjbG9zZXN0KHRhcmdldCwgcG9pbnRzKSB7XG4gIHJldHVybiBNYXRoLm1pbi5hcHBseShNYXRoLCBwb2ludHMubWFwKGZ1bmN0aW9uIChwb2ludCkge1xuICAgIHJldHVybiBkaXN0YW5jZSh0YXJnZXQsIHBvaW50KTtcbiAgfSkpO1xufTtcbnZhciBhcHBseSA9IGZ1bmN0aW9uIGFwcGx5KGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogZm4ocG9pbnQueCksXG4gICAgICB5OiBmbihwb2ludC55KVxuICAgIH07XG4gIH07XG59O1xuXG52YXIgZXhlY3V0ZUNsaXAgPSAoZnVuY3Rpb24gKGZyYW1lLCBzdWJqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRSZWN0KHtcbiAgICB0b3A6IE1hdGgubWF4KHN1YmplY3QudG9wLCBmcmFtZS50b3ApLFxuICAgIHJpZ2h0OiBNYXRoLm1pbihzdWJqZWN0LnJpZ2h0LCBmcmFtZS5yaWdodCksXG4gICAgYm90dG9tOiBNYXRoLm1pbihzdWJqZWN0LmJvdHRvbSwgZnJhbWUuYm90dG9tKSxcbiAgICBsZWZ0OiBNYXRoLm1heChzdWJqZWN0LmxlZnQsIGZyYW1lLmxlZnQpXG4gIH0pO1xuXG4gIGlmIChyZXN1bHQud2lkdGggPD0gMCB8fCByZXN1bHQuaGVpZ2h0IDw9IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxudmFyIG9mZnNldEJ5UG9zaXRpb24gPSBmdW5jdGlvbiBvZmZzZXRCeVBvc2l0aW9uKHNwYWNpbmcsIHBvaW50KSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiBzcGFjaW5nLnRvcCArIHBvaW50LnksXG4gICAgbGVmdDogc3BhY2luZy5sZWZ0ICsgcG9pbnQueCxcbiAgICBib3R0b206IHNwYWNpbmcuYm90dG9tICsgcG9pbnQueSxcbiAgICByaWdodDogc3BhY2luZy5yaWdodCArIHBvaW50LnhcbiAgfTtcbn07XG52YXIgZ2V0Q29ybmVycyA9IGZ1bmN0aW9uIGdldENvcm5lcnMoc3BhY2luZykge1xuICByZXR1cm4gW3tcbiAgICB4OiBzcGFjaW5nLmxlZnQsXG4gICAgeTogc3BhY2luZy50b3BcbiAgfSwge1xuICAgIHg6IHNwYWNpbmcucmlnaHQsXG4gICAgeTogc3BhY2luZy50b3BcbiAgfSwge1xuICAgIHg6IHNwYWNpbmcubGVmdCxcbiAgICB5OiBzcGFjaW5nLmJvdHRvbVxuICB9LCB7XG4gICAgeDogc3BhY2luZy5yaWdodCxcbiAgICB5OiBzcGFjaW5nLmJvdHRvbVxuICB9XTtcbn07XG52YXIgbm9TcGFjaW5nID0ge1xuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDBcbn07XG5cbnZhciBzY3JvbGwgPSBmdW5jdGlvbiBzY3JvbGwodGFyZ2V0LCBmcmFtZSkge1xuICBpZiAoIWZyYW1lKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRCeVBvc2l0aW9uKHRhcmdldCwgZnJhbWUuc2Nyb2xsLmRpZmYuZGlzcGxhY2VtZW50KTtcbn07XG5cbnZhciBpbmNyZWFzZSA9IGZ1bmN0aW9uIGluY3JlYXNlKHRhcmdldCwgYXhpcywgd2l0aFBsYWNlaG9sZGVyKSB7XG4gIGlmICh3aXRoUGxhY2Vob2xkZXIgJiYgd2l0aFBsYWNlaG9sZGVyLmluY3JlYXNlZEJ5KSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgdGFyZ2V0LCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltheGlzLmVuZF0gPSB0YXJnZXRbYXhpcy5lbmRdICsgd2l0aFBsYWNlaG9sZGVyLmluY3JlYXNlZEJ5W2F4aXMubGluZV0sIF9leHRlbmRzMikpO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBjbGlwID0gZnVuY3Rpb24gY2xpcCh0YXJnZXQsIGZyYW1lKSB7XG4gIGlmIChmcmFtZSAmJiBmcmFtZS5zaG91bGRDbGlwU3ViamVjdCkge1xuICAgIHJldHVybiBleGVjdXRlQ2xpcChmcmFtZS5wYWdlTWFyZ2luQm94LCB0YXJnZXQpO1xuICB9XG5cbiAgcmV0dXJuIGdldFJlY3QodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRTdWJqZWN0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwYWdlID0gX3JlZi5wYWdlLFxuICAgICAgd2l0aFBsYWNlaG9sZGVyID0gX3JlZi53aXRoUGxhY2Vob2xkZXIsXG4gICAgICBheGlzID0gX3JlZi5heGlzLFxuICAgICAgZnJhbWUgPSBfcmVmLmZyYW1lO1xuICB2YXIgc2Nyb2xsZWQgPSBzY3JvbGwocGFnZS5tYXJnaW5Cb3gsIGZyYW1lKTtcbiAgdmFyIGluY3JlYXNlZCA9IGluY3JlYXNlKHNjcm9sbGVkLCBheGlzLCB3aXRoUGxhY2Vob2xkZXIpO1xuICB2YXIgY2xpcHBlZCA9IGNsaXAoaW5jcmVhc2VkLCBmcmFtZSk7XG4gIHJldHVybiB7XG4gICAgcGFnZTogcGFnZSxcbiAgICB3aXRoUGxhY2Vob2xkZXI6IHdpdGhQbGFjZWhvbGRlcixcbiAgICBhY3RpdmU6IGNsaXBwZWRcbiAgfTtcbn0pO1xuXG52YXIgc2Nyb2xsRHJvcHBhYmxlID0gKGZ1bmN0aW9uIChkcm9wcGFibGUsIG5ld1Njcm9sbCkge1xuICAhZHJvcHBhYmxlLmZyYW1lID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBzY3JvbGxhYmxlID0gZHJvcHBhYmxlLmZyYW1lO1xuICB2YXIgc2Nyb2xsRGlmZiA9IHN1YnRyYWN0KG5ld1Njcm9sbCwgc2Nyb2xsYWJsZS5zY3JvbGwuaW5pdGlhbCk7XG4gIHZhciBzY3JvbGxEaXNwbGFjZW1lbnQgPSBuZWdhdGUoc2Nyb2xsRGlmZik7XG5cbiAgdmFyIGZyYW1lID0gX2V4dGVuZHMoe30sIHNjcm9sbGFibGUsIHtcbiAgICBzY3JvbGw6IHtcbiAgICAgIGluaXRpYWw6IHNjcm9sbGFibGUuc2Nyb2xsLmluaXRpYWwsXG4gICAgICBjdXJyZW50OiBuZXdTY3JvbGwsXG4gICAgICBkaWZmOiB7XG4gICAgICAgIHZhbHVlOiBzY3JvbGxEaWZmLFxuICAgICAgICBkaXNwbGFjZW1lbnQ6IHNjcm9sbERpc3BsYWNlbWVudFxuICAgICAgfSxcbiAgICAgIG1heDogc2Nyb2xsYWJsZS5zY3JvbGwubWF4XG4gICAgfVxuICB9KTtcblxuICB2YXIgc3ViamVjdCA9IGdldFN1YmplY3Qoe1xuICAgIHBhZ2U6IGRyb3BwYWJsZS5zdWJqZWN0LnBhZ2UsXG4gICAgd2l0aFBsYWNlaG9sZGVyOiBkcm9wcGFibGUuc3ViamVjdC53aXRoUGxhY2Vob2xkZXIsXG4gICAgYXhpczogZHJvcHBhYmxlLmF4aXMsXG4gICAgZnJhbWU6IGZyYW1lXG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlLCB7XG4gICAgZnJhbWU6IGZyYW1lLFxuICAgIHN1YmplY3Q6IHN1YmplY3RcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5mdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgaWYgKE51bWJlci5pc0ludGVnZXIpIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSkgJiYgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xufVxuZnVuY3Rpb24gdmFsdWVzKG1hcCkge1xuICBpZiAoT2JqZWN0LnZhbHVlcykge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKG1hcCk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtYXBba2V5XTtcbiAgfSk7XG59XG5mdW5jdGlvbiBmaW5kSW5kZXgobGlzdCwgcHJlZGljYXRlKSB7XG4gIGlmIChsaXN0LmZpbmRJbmRleCkge1xuICAgIHJldHVybiBsaXN0LmZpbmRJbmRleChwcmVkaWNhdGUpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShsaXN0W2ldKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gZmluZChsaXN0LCBwcmVkaWNhdGUpIHtcbiAgaWYgKGxpc3QuZmluZCkge1xuICAgIHJldHVybiBsaXN0LmZpbmQocHJlZGljYXRlKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGZpbmRJbmRleChsaXN0LCBwcmVkaWNhdGUpO1xuXG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICByZXR1cm4gbGlzdFtpbmRleF07XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gdG9BcnJheShsaXN0KSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChsaXN0KTtcbn1cblxudmFyIHRvRHJvcHBhYmxlTWFwID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJvcHBhYmxlcykge1xuICByZXR1cm4gZHJvcHBhYmxlcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgcHJldmlvdXNbY3VycmVudC5kZXNjcmlwdG9yLmlkXSA9IGN1cnJlbnQ7XG4gICAgcmV0dXJuIHByZXZpb3VzO1xuICB9LCB7fSk7XG59KTtcbnZhciB0b0RyYWdnYWJsZU1hcCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRyYWdnYWJsZXMpIHtcbiAgcmV0dXJuIGRyYWdnYWJsZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91cywgY3VycmVudCkge1xuICAgIHByZXZpb3VzW2N1cnJlbnQuZGVzY3JpcHRvci5pZF0gPSBjdXJyZW50O1xuICAgIHJldHVybiBwcmV2aW91cztcbiAgfSwge30pO1xufSk7XG52YXIgdG9Ecm9wcGFibGVMaXN0ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJvcHBhYmxlcykge1xuICByZXR1cm4gdmFsdWVzKGRyb3BwYWJsZXMpO1xufSk7XG52YXIgdG9EcmFnZ2FibGVMaXN0ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJhZ2dhYmxlcykge1xuICByZXR1cm4gdmFsdWVzKGRyYWdnYWJsZXMpO1xufSk7XG5cbnZhciBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJvcHBhYmxlSWQsIGRyYWdnYWJsZXMpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRHJhZ2dhYmxlTGlzdChkcmFnZ2FibGVzKS5maWx0ZXIoZnVuY3Rpb24gKGRyYWdnYWJsZSkge1xuICAgIHJldHVybiBkcm9wcGFibGVJZCA9PT0gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWQ7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYS5kZXNjcmlwdG9yLmluZGV4IC0gYi5kZXNjcmlwdG9yLmluZGV4O1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5mdW5jdGlvbiB0cnlHZXREZXN0aW5hdGlvbihpbXBhY3QpIHtcbiAgaWYgKGltcGFjdC5hdCAmJiBpbXBhY3QuYXQudHlwZSA9PT0gJ1JFT1JERVInKSB7XG4gICAgcmV0dXJuIGltcGFjdC5hdC5kZXN0aW5hdGlvbjtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdHJ5R2V0Q29tYmluZShpbXBhY3QpIHtcbiAgaWYgKGltcGFjdC5hdCAmJiBpbXBhY3QuYXQudHlwZSA9PT0gJ0NPTUJJTkUnKSB7XG4gICAgcmV0dXJuIGltcGFjdC5hdC5jb21iaW5lO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciByZW1vdmVEcmFnZ2FibGVGcm9tTGlzdCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKHJlbW92ZSwgbGlzdCkge1xuICByZXR1cm4gbGlzdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS5kZXNjcmlwdG9yLmlkICE9PSByZW1vdmUuZGVzY3JpcHRvci5pZDtcbiAgfSk7XG59KTtcblxudmFyIG1vdmVUb05leHRDb21iaW5lID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmLmluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0O1xuXG4gIGlmICghZGVzdGluYXRpb24uaXNDb21iaW5lRW5hYmxlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gdHJ5R2V0RGVzdGluYXRpb24ocHJldmlvdXNJbXBhY3QpO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEltcGFjdCh0YXJnZXQpIHtcbiAgICB2YXIgYXQgPSB7XG4gICAgICB0eXBlOiAnQ09NQklORScsXG4gICAgICBjb21iaW5lOiB7XG4gICAgICAgIGRyYWdnYWJsZUlkOiB0YXJnZXQsXG4gICAgICAgIGRyb3BwYWJsZUlkOiBkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHByZXZpb3VzSW1wYWN0LCB7XG4gICAgICBhdDogYXRcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBhbGwgPSBwcmV2aW91c0ltcGFjdC5kaXNwbGFjZWQuYWxsO1xuICB2YXIgY2xvc2VzdElkID0gYWxsLmxlbmd0aCA/IGFsbFswXSA6IG51bGw7XG5cbiAgaWYgKGlzTW92aW5nRm9yd2FyZCkge1xuICAgIHJldHVybiBjbG9zZXN0SWQgPyBnZXRJbXBhY3QoY2xvc2VzdElkKSA6IG51bGw7XG4gIH1cblxuICB2YXIgd2l0aG91dERyYWdnYWJsZSA9IHJlbW92ZURyYWdnYWJsZUZyb21MaXN0KGRyYWdnYWJsZSwgaW5zaWRlRGVzdGluYXRpb24pO1xuXG4gIGlmICghY2xvc2VzdElkKSB7XG4gICAgaWYgKCF3aXRob3V0RHJhZ2dhYmxlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGxhc3QgPSB3aXRob3V0RHJhZ2dhYmxlW3dpdGhvdXREcmFnZ2FibGUubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIGdldEltcGFjdChsYXN0LmRlc2NyaXB0b3IuaWQpO1xuICB9XG5cbiAgdmFyIGluZGV4T2ZDbG9zZXN0ID0gZmluZEluZGV4KHdpdGhvdXREcmFnZ2FibGUsIGZ1bmN0aW9uIChkKSB7XG4gICAgcmV0dXJuIGQuZGVzY3JpcHRvci5pZCA9PT0gY2xvc2VzdElkO1xuICB9KTtcbiAgIShpbmRleE9mQ2xvc2VzdCAhPT0gLTEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ291bGQgbm90IGZpbmQgZGlzcGxhY2VkIGl0ZW0gaW4gc2V0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgcHJvcG9zZWRJbmRleCA9IGluZGV4T2ZDbG9zZXN0IC0gMTtcblxuICBpZiAocHJvcG9zZWRJbmRleCA8IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBiZWZvcmUgPSB3aXRob3V0RHJhZ2dhYmxlW3Byb3Bvc2VkSW5kZXhdO1xuICByZXR1cm4gZ2V0SW1wYWN0KGJlZm9yZS5kZXNjcmlwdG9yLmlkKTtcbn0pO1xuXG52YXIgaXNIb21lT2YgPSAoZnVuY3Rpb24gKGRyYWdnYWJsZSwgZGVzdGluYXRpb24pIHtcbiAgcmV0dXJuIGRyYWdnYWJsZS5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkID09PSBkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkO1xufSk7XG5cbnZhciBub0Rpc3BsYWNlZEJ5ID0ge1xuICBwb2ludDogb3JpZ2luLFxuICB2YWx1ZTogMFxufTtcbnZhciBlbXB0eUdyb3VwcyA9IHtcbiAgaW52aXNpYmxlOiB7fSxcbiAgdmlzaWJsZToge30sXG4gIGFsbDogW11cbn07XG52YXIgbm9JbXBhY3QgPSB7XG4gIGRpc3BsYWNlZDogZW1wdHlHcm91cHMsXG4gIGRpc3BsYWNlZEJ5OiBub0Rpc3BsYWNlZEJ5LFxuICBhdDogbnVsbFxufTtcblxudmFyIGlzV2l0aGluID0gKGZ1bmN0aW9uIChsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gbG93ZXJCb3VuZCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSB1cHBlckJvdW5kO1xuICB9O1xufSk7XG5cbnZhciBpc1BhcnRpYWxseVZpc2libGVUaHJvdWdoRnJhbWUgPSAoZnVuY3Rpb24gKGZyYW1lKSB7XG4gIHZhciBpc1dpdGhpblZlcnRpY2FsID0gaXNXaXRoaW4oZnJhbWUudG9wLCBmcmFtZS5ib3R0b20pO1xuICB2YXIgaXNXaXRoaW5Ib3Jpem9udGFsID0gaXNXaXRoaW4oZnJhbWUubGVmdCwgZnJhbWUucmlnaHQpO1xuICByZXR1cm4gZnVuY3Rpb24gKHN1YmplY3QpIHtcbiAgICB2YXIgaXNDb250YWluZWQgPSBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QudG9wKSAmJiBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QuYm90dG9tKSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5sZWZ0KSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5yaWdodCk7XG5cbiAgICBpZiAoaXNDb250YWluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpc1BhcnRpYWxseVZpc2libGVWZXJ0aWNhbGx5ID0gaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LnRvcCkgfHwgaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LmJvdHRvbSk7XG4gICAgdmFyIGlzUGFydGlhbGx5VmlzaWJsZUhvcml6b250YWxseSA9IGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LmxlZnQpIHx8IGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LnJpZ2h0KTtcbiAgICB2YXIgaXNQYXJ0aWFsbHlDb250YWluZWQgPSBpc1BhcnRpYWxseVZpc2libGVWZXJ0aWNhbGx5ICYmIGlzUGFydGlhbGx5VmlzaWJsZUhvcml6b250YWxseTtcblxuICAgIGlmIChpc1BhcnRpYWxseUNvbnRhaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGlzQmlnZ2VyVmVydGljYWxseSA9IHN1YmplY3QudG9wIDwgZnJhbWUudG9wICYmIHN1YmplY3QuYm90dG9tID4gZnJhbWUuYm90dG9tO1xuICAgIHZhciBpc0JpZ2dlckhvcml6b250YWxseSA9IHN1YmplY3QubGVmdCA8IGZyYW1lLmxlZnQgJiYgc3ViamVjdC5yaWdodCA+IGZyYW1lLnJpZ2h0O1xuICAgIHZhciBpc1RhcmdldEJpZ2dlclRoYW5GcmFtZSA9IGlzQmlnZ2VyVmVydGljYWxseSAmJiBpc0JpZ2dlckhvcml6b250YWxseTtcblxuICAgIGlmIChpc1RhcmdldEJpZ2dlclRoYW5GcmFtZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGlzVGFyZ2V0QmlnZ2VyT25PbmVBeGlzID0gaXNCaWdnZXJWZXJ0aWNhbGx5ICYmIGlzUGFydGlhbGx5VmlzaWJsZUhvcml6b250YWxseSB8fCBpc0JpZ2dlckhvcml6b250YWxseSAmJiBpc1BhcnRpYWxseVZpc2libGVWZXJ0aWNhbGx5O1xuICAgIHJldHVybiBpc1RhcmdldEJpZ2dlck9uT25lQXhpcztcbiAgfTtcbn0pO1xuXG52YXIgaXNUb3RhbGx5VmlzaWJsZVRocm91Z2hGcmFtZSA9IChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgdmFyIGlzV2l0aGluVmVydGljYWwgPSBpc1dpdGhpbihmcmFtZS50b3AsIGZyYW1lLmJvdHRvbSk7XG4gIHZhciBpc1dpdGhpbkhvcml6b250YWwgPSBpc1dpdGhpbihmcmFtZS5sZWZ0LCBmcmFtZS5yaWdodCk7XG4gIHJldHVybiBmdW5jdGlvbiAoc3ViamVjdCkge1xuICAgIHZhciBpc0NvbnRhaW5lZCA9IGlzV2l0aGluVmVydGljYWwoc3ViamVjdC50b3ApICYmIGlzV2l0aGluVmVydGljYWwoc3ViamVjdC5ib3R0b20pICYmIGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LmxlZnQpICYmIGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LnJpZ2h0KTtcbiAgICByZXR1cm4gaXNDb250YWluZWQ7XG4gIH07XG59KTtcblxudmFyIHZlcnRpY2FsID0ge1xuICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gIGxpbmU6ICd5JyxcbiAgY3Jvc3NBeGlzTGluZTogJ3gnLFxuICBzdGFydDogJ3RvcCcsXG4gIGVuZDogJ2JvdHRvbScsXG4gIHNpemU6ICdoZWlnaHQnLFxuICBjcm9zc0F4aXNTdGFydDogJ2xlZnQnLFxuICBjcm9zc0F4aXNFbmQ6ICdyaWdodCcsXG4gIGNyb3NzQXhpc1NpemU6ICd3aWR0aCdcbn07XG52YXIgaG9yaXpvbnRhbCA9IHtcbiAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gIGxpbmU6ICd4JyxcbiAgY3Jvc3NBeGlzTGluZTogJ3knLFxuICBzdGFydDogJ2xlZnQnLFxuICBlbmQ6ICdyaWdodCcsXG4gIHNpemU6ICd3aWR0aCcsXG4gIGNyb3NzQXhpc1N0YXJ0OiAndG9wJyxcbiAgY3Jvc3NBeGlzRW5kOiAnYm90dG9tJyxcbiAgY3Jvc3NBeGlzU2l6ZTogJ2hlaWdodCdcbn07XG5cbnZhciBpc1RvdGFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lT25BeGlzID0gKGZ1bmN0aW9uIChheGlzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICB2YXIgaXNXaXRoaW5WZXJ0aWNhbCA9IGlzV2l0aGluKGZyYW1lLnRvcCwgZnJhbWUuYm90dG9tKTtcbiAgICB2YXIgaXNXaXRoaW5Ib3Jpem9udGFsID0gaXNXaXRoaW4oZnJhbWUubGVmdCwgZnJhbWUucmlnaHQpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3ViamVjdCkge1xuICAgICAgaWYgKGF4aXMgPT09IHZlcnRpY2FsKSB7XG4gICAgICAgIHJldHVybiBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QudG9wKSAmJiBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QuYm90dG9tKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LmxlZnQpICYmIGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LnJpZ2h0KTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBnZXREcm9wcGFibGVEaXNwbGFjZWQgPSBmdW5jdGlvbiBnZXREcm9wcGFibGVEaXNwbGFjZWQodGFyZ2V0LCBkZXN0aW5hdGlvbikge1xuICB2YXIgZGlzcGxhY2VtZW50ID0gZGVzdGluYXRpb24uZnJhbWUgPyBkZXN0aW5hdGlvbi5mcmFtZS5zY3JvbGwuZGlmZi5kaXNwbGFjZW1lbnQgOiBvcmlnaW47XG4gIHJldHVybiBvZmZzZXRCeVBvc2l0aW9uKHRhcmdldCwgZGlzcGxhY2VtZW50KTtcbn07XG5cbnZhciBpc1Zpc2libGVJbkRyb3BwYWJsZSA9IGZ1bmN0aW9uIGlzVmlzaWJsZUluRHJvcHBhYmxlKHRhcmdldCwgZGVzdGluYXRpb24sIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKSB7XG4gIGlmICghZGVzdGluYXRpb24uc3ViamVjdC5hY3RpdmUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4oZGVzdGluYXRpb24uc3ViamVjdC5hY3RpdmUpKHRhcmdldCk7XG59O1xuXG52YXIgaXNWaXNpYmxlSW5WaWV3cG9ydCA9IGZ1bmN0aW9uIGlzVmlzaWJsZUluVmlld3BvcnQodGFyZ2V0LCB2aWV3cG9ydCwgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4pIHtcbiAgcmV0dXJuIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKHZpZXdwb3J0KSh0YXJnZXQpO1xufTtcblxudmFyIGlzVmlzaWJsZSA9IGZ1bmN0aW9uIGlzVmlzaWJsZShfcmVmKSB7XG4gIHZhciB0b0JlRGlzcGxhY2VkID0gX3JlZi50YXJnZXQsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50ID0gX3JlZi53aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50LFxuICAgICAgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4gPSBfcmVmLmlzVmlzaWJsZVRocm91Z2hGcmFtZUZuO1xuICB2YXIgZGlzcGxhY2VkVGFyZ2V0ID0gd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCA/IGdldERyb3BwYWJsZURpc3BsYWNlZCh0b0JlRGlzcGxhY2VkLCBkZXN0aW5hdGlvbikgOiB0b0JlRGlzcGxhY2VkO1xuICByZXR1cm4gaXNWaXNpYmxlSW5Ecm9wcGFibGUoZGlzcGxhY2VkVGFyZ2V0LCBkZXN0aW5hdGlvbiwgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4pICYmIGlzVmlzaWJsZUluVmlld3BvcnQoZGlzcGxhY2VkVGFyZ2V0LCB2aWV3cG9ydCwgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4pO1xufTtcblxudmFyIGlzUGFydGlhbGx5VmlzaWJsZSA9IGZ1bmN0aW9uIGlzUGFydGlhbGx5VmlzaWJsZShhcmdzKSB7XG4gIHJldHVybiBpc1Zpc2libGUoX2V4dGVuZHMoe30sIGFyZ3MsIHtcbiAgICBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbjogaXNQYXJ0aWFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lXG4gIH0pKTtcbn07XG52YXIgaXNUb3RhbGx5VmlzaWJsZSA9IGZ1bmN0aW9uIGlzVG90YWxseVZpc2libGUoYXJncykge1xuICByZXR1cm4gaXNWaXNpYmxlKF9leHRlbmRzKHt9LCBhcmdzLCB7XG4gICAgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm46IGlzVG90YWxseVZpc2libGVUaHJvdWdoRnJhbWVcbiAgfSkpO1xufTtcbnZhciBpc1RvdGFsbHlWaXNpYmxlT25BeGlzID0gZnVuY3Rpb24gaXNUb3RhbGx5VmlzaWJsZU9uQXhpcyhhcmdzKSB7XG4gIHJldHVybiBpc1Zpc2libGUoX2V4dGVuZHMoe30sIGFyZ3MsIHtcbiAgICBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbjogaXNUb3RhbGx5VmlzaWJsZVRocm91Z2hGcmFtZU9uQXhpcyhhcmdzLmRlc3RpbmF0aW9uLmF4aXMpXG4gIH0pKTtcbn07XG5cbnZhciBnZXRTaG91bGRBbmltYXRlID0gZnVuY3Rpb24gZ2V0U2hvdWxkQW5pbWF0ZShpZCwgbGFzdCwgZm9yY2VTaG91bGRBbmltYXRlKSB7XG4gIGlmICh0eXBlb2YgZm9yY2VTaG91bGRBbmltYXRlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gZm9yY2VTaG91bGRBbmltYXRlO1xuICB9XG5cbiAgaWYgKCFsYXN0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgaW52aXNpYmxlID0gbGFzdC5pbnZpc2libGUsXG4gICAgICB2aXNpYmxlID0gbGFzdC52aXNpYmxlO1xuXG4gIGlmIChpbnZpc2libGVbaWRdKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByZXZpb3VzID0gdmlzaWJsZVtpZF07XG4gIHJldHVybiBwcmV2aW91cyA/IHByZXZpb3VzLnNob3VsZEFuaW1hdGUgOiB0cnVlO1xufTtcblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KGRyYWdnYWJsZSwgZGlzcGxhY2VkQnkpIHtcbiAgdmFyIG1hcmdpbkJveCA9IGRyYWdnYWJsZS5wYWdlLm1hcmdpbkJveDtcbiAgdmFyIGV4cGFuZEJ5ID0ge1xuICAgIHRvcDogZGlzcGxhY2VkQnkucG9pbnQueSxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogZGlzcGxhY2VkQnkucG9pbnQueFxuICB9O1xuICByZXR1cm4gZ2V0UmVjdChleHBhbmQobWFyZ2luQm94LCBleHBhbmRCeSkpO1xufVxuXG5mdW5jdGlvbiBnZXREaXNwbGFjZW1lbnRHcm91cHMoX3JlZikge1xuICB2YXIgYWZ0ZXJEcmFnZ2luZyA9IF9yZWYuYWZ0ZXJEcmFnZ2luZyxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGRpc3BsYWNlZEJ5ID0gX3JlZi5kaXNwbGFjZWRCeSxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZSA9IF9yZWYuZm9yY2VTaG91bGRBbmltYXRlLFxuICAgICAgbGFzdCA9IF9yZWYubGFzdDtcbiAgcmV0dXJuIGFmdGVyRHJhZ2dpbmcucmVkdWNlKGZ1bmN0aW9uIHByb2Nlc3MoZ3JvdXBzLCBkcmFnZ2FibGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGRyYWdnYWJsZSwgZGlzcGxhY2VkQnkpO1xuICAgIHZhciBpZCA9IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkO1xuICAgIGdyb3Vwcy5hbGwucHVzaChpZCk7XG4gICAgdmFyIGlzVmlzaWJsZSA9IGlzUGFydGlhbGx5VmlzaWJsZSh7XG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQ6IHRydWVcbiAgICB9KTtcblxuICAgIGlmICghaXNWaXNpYmxlKSB7XG4gICAgICBncm91cHMuaW52aXNpYmxlW2RyYWdnYWJsZS5kZXNjcmlwdG9yLmlkXSA9IHRydWU7XG4gICAgICByZXR1cm4gZ3JvdXBzO1xuICAgIH1cblxuICAgIHZhciBzaG91bGRBbmltYXRlID0gZ2V0U2hvdWxkQW5pbWF0ZShpZCwgbGFzdCwgZm9yY2VTaG91bGRBbmltYXRlKTtcbiAgICB2YXIgZGlzcGxhY2VtZW50ID0ge1xuICAgICAgZHJhZ2dhYmxlSWQ6IGlkLFxuICAgICAgc2hvdWxkQW5pbWF0ZTogc2hvdWxkQW5pbWF0ZVxuICAgIH07XG4gICAgZ3JvdXBzLnZpc2libGVbaWRdID0gZGlzcGxhY2VtZW50O1xuICAgIHJldHVybiBncm91cHM7XG4gIH0sIHtcbiAgICBhbGw6IFtdLFxuICAgIHZpc2libGU6IHt9LFxuICAgIGludmlzaWJsZToge31cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEluZGV4T2ZMYXN0SXRlbShkcmFnZ2FibGVzLCBvcHRpb25zKSB7XG4gIGlmICghZHJhZ2dhYmxlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBpbmRleE9mTGFzdEl0ZW0gPSBkcmFnZ2FibGVzW2RyYWdnYWJsZXMubGVuZ3RoIC0gMV0uZGVzY3JpcHRvci5pbmRleDtcbiAgcmV0dXJuIG9wdGlvbnMuaW5Ib21lTGlzdCA/IGluZGV4T2ZMYXN0SXRlbSA6IGluZGV4T2ZMYXN0SXRlbSArIDE7XG59XG5cbmZ1bmN0aW9uIGdvQXRFbmQoX3JlZikge1xuICB2YXIgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmLmluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgaW5Ib21lTGlzdCA9IF9yZWYuaW5Ib21lTGlzdCxcbiAgICAgIGRpc3BsYWNlZEJ5ID0gX3JlZi5kaXNwbGFjZWRCeSxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbjtcbiAgdmFyIG5ld0luZGV4ID0gZ2V0SW5kZXhPZkxhc3RJdGVtKGluc2lkZURlc3RpbmF0aW9uLCB7XG4gICAgaW5Ib21lTGlzdDogaW5Ib21lTGlzdFxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGFjZWQ6IGVtcHR5R3JvdXBzLFxuICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICBhdDoge1xuICAgICAgdHlwZTogJ1JFT1JERVInLFxuICAgICAgZGVzdGluYXRpb246IHtcbiAgICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsXG4gICAgICAgIGluZGV4OiBuZXdJbmRleFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUmVvcmRlckltcGFjdChfcmVmMikge1xuICB2YXIgZHJhZ2dhYmxlID0gX3JlZjIuZHJhZ2dhYmxlLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmMi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZjIuZGVzdGluYXRpb24sXG4gICAgICB2aWV3cG9ydCA9IF9yZWYyLnZpZXdwb3J0LFxuICAgICAgZGlzcGxhY2VkQnkgPSBfcmVmMi5kaXNwbGFjZWRCeSxcbiAgICAgIGxhc3QgPSBfcmVmMi5sYXN0LFxuICAgICAgaW5kZXggPSBfcmVmMi5pbmRleCxcbiAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZSA9IF9yZWYyLmZvcmNlU2hvdWxkQW5pbWF0ZTtcbiAgdmFyIGluSG9tZUxpc3QgPSBpc0hvbWVPZihkcmFnZ2FibGUsIGRlc3RpbmF0aW9uKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIHJldHVybiBnb0F0RW5kKHtcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGluSG9tZUxpc3Q6IGluSG9tZUxpc3QsXG4gICAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb25cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IGZpbmQoaW5zaWRlRGVzdGluYXRpb24sIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0uZGVzY3JpcHRvci5pbmRleCA9PT0gaW5kZXg7XG4gIH0pO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gZ29BdEVuZCh7XG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBpbkhvbWVMaXN0OiBpbkhvbWVMaXN0LFxuICAgICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uXG4gICAgfSk7XG4gIH1cblxuICB2YXIgd2l0aG91dERyYWdnaW5nID0gcmVtb3ZlRHJhZ2dhYmxlRnJvbUxpc3QoZHJhZ2dhYmxlLCBpbnNpZGVEZXN0aW5hdGlvbik7XG4gIHZhciBzbGljZUZyb20gPSBpbnNpZGVEZXN0aW5hdGlvbi5pbmRleE9mKG1hdGNoKTtcbiAgdmFyIGltcGFjdGVkID0gd2l0aG91dERyYWdnaW5nLnNsaWNlKHNsaWNlRnJvbSk7XG4gIHZhciBkaXNwbGFjZWQgPSBnZXREaXNwbGFjZW1lbnRHcm91cHMoe1xuICAgIGFmdGVyRHJhZ2dpbmc6IGltcGFjdGVkLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgbGFzdDogbGFzdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgZm9yY2VTaG91bGRBbmltYXRlOiBmb3JjZVNob3VsZEFuaW1hdGVcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZGlzcGxhY2VkOiBkaXNwbGFjZWQsXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGF0OiB7XG4gICAgICB0eXBlOiAnUkVPUkRFUicsXG4gICAgICBkZXN0aW5hdGlvbjoge1xuICAgICAgICBkcm9wcGFibGVJZDogZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCxcbiAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBkaWRTdGFydEFmdGVyQ3JpdGljYWwoZHJhZ2dhYmxlSWQsIGFmdGVyQ3JpdGljYWwpIHtcbiAgcmV0dXJuIEJvb2xlYW4oYWZ0ZXJDcml0aWNhbC5lZmZlY3RlZFtkcmFnZ2FibGVJZF0pO1xufVxuXG52YXIgZnJvbUNvbWJpbmUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IF9yZWYuaXNNb3ZpbmdGb3J3YXJkLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGNvbWJpbmUgPSBfcmVmLmNvbWJpbmUsXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuXG4gIGlmICghZGVzdGluYXRpb24uaXNDb21iaW5lRW5hYmxlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGNvbWJpbmVJZCA9IGNvbWJpbmUuZHJhZ2dhYmxlSWQ7XG4gIHZhciBjb21iaW5lV2l0aCA9IGRyYWdnYWJsZXNbY29tYmluZUlkXTtcbiAgdmFyIGNvbWJpbmVXaXRoSW5kZXggPSBjb21iaW5lV2l0aC5kZXNjcmlwdG9yLmluZGV4O1xuICB2YXIgZGlkQ29tYmluZVdpdGhTdGFydEFmdGVyQ3JpdGljYWwgPSBkaWRTdGFydEFmdGVyQ3JpdGljYWwoY29tYmluZUlkLCBhZnRlckNyaXRpY2FsKTtcblxuICBpZiAoZGlkQ29tYmluZVdpdGhTdGFydEFmdGVyQ3JpdGljYWwpIHtcbiAgICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgICByZXR1cm4gY29tYmluZVdpdGhJbmRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tYmluZVdpdGhJbmRleCAtIDE7XG4gIH1cblxuICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVXaXRoSW5kZXggKyAxO1xuICB9XG5cbiAgcmV0dXJuIGNvbWJpbmVXaXRoSW5kZXg7XG59KTtcblxudmFyIGZyb21SZW9yZGVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGlzSW5Ib21lTGlzdCA9IF9yZWYuaXNJbkhvbWVMaXN0LFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmLmluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uO1xuXG4gIGlmICghaW5zaWRlRGVzdGluYXRpb24ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgY3VycmVudEluZGV4ID0gbG9jYXRpb24uaW5kZXg7XG4gIHZhciBwcm9wb3NlZEluZGV4ID0gaXNNb3ZpbmdGb3J3YXJkID8gY3VycmVudEluZGV4ICsgMSA6IGN1cnJlbnRJbmRleCAtIDE7XG4gIHZhciBmaXJzdEluZGV4ID0gaW5zaWRlRGVzdGluYXRpb25bMF0uZGVzY3JpcHRvci5pbmRleDtcbiAgdmFyIGxhc3RJbmRleCA9IGluc2lkZURlc3RpbmF0aW9uW2luc2lkZURlc3RpbmF0aW9uLmxlbmd0aCAtIDFdLmRlc2NyaXB0b3IuaW5kZXg7XG4gIHZhciB1cHBlckJvdW5kID0gaXNJbkhvbWVMaXN0ID8gbGFzdEluZGV4IDogbGFzdEluZGV4ICsgMTtcblxuICBpZiAocHJvcG9zZWRJbmRleCA8IGZpcnN0SW5kZXgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChwcm9wb3NlZEluZGV4ID4gdXBwZXJCb3VuZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHByb3Bvc2VkSW5kZXg7XG59KTtcblxudmFyIG1vdmVUb05leHRJbmRleCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBpc0luSG9tZUxpc3QgPSBfcmVmLmlzSW5Ib21lTGlzdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmLmFmdGVyQ3JpdGljYWw7XG4gIHZhciB3YXNBdCA9IHByZXZpb3VzSW1wYWN0LmF0O1xuICAhd2FzQXQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgbW92ZSBpbiBkaXJlY3Rpb24gd2l0aG91dCBwcmV2aW91cyBpbXBhY3QgbG9jYXRpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgaWYgKHdhc0F0LnR5cGUgPT09ICdSRU9SREVSJykge1xuICAgIHZhciBfbmV3SW5kZXggPSBmcm9tUmVvcmRlcih7XG4gICAgICBpc01vdmluZ0ZvcndhcmQ6IGlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGlzSW5Ib21lTGlzdDogaXNJbkhvbWVMaXN0LFxuICAgICAgbG9jYXRpb246IHdhc0F0LmRlc3RpbmF0aW9uLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uXG4gICAgfSk7XG5cbiAgICBpZiAoX25ld0luZGV4ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxjdWxhdGVSZW9yZGVySW1wYWN0KHtcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgICAgbGFzdDogcHJldmlvdXNJbXBhY3QuZGlzcGxhY2VkLFxuICAgICAgZGlzcGxhY2VkQnk6IHByZXZpb3VzSW1wYWN0LmRpc3BsYWNlZEJ5LFxuICAgICAgaW5kZXg6IF9uZXdJbmRleFxuICAgIH0pO1xuICB9XG5cbiAgdmFyIG5ld0luZGV4ID0gZnJvbUNvbWJpbmUoe1xuICAgIGlzTW92aW5nRm9yd2FyZDogaXNNb3ZpbmdGb3J3YXJkLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBkaXNwbGFjZWQ6IHByZXZpb3VzSW1wYWN0LmRpc3BsYWNlZCxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGNvbWJpbmU6IHdhc0F0LmNvbWJpbmUsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcblxuICBpZiAobmV3SW5kZXggPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGNhbGN1bGF0ZVJlb3JkZXJJbXBhY3Qoe1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGxhc3Q6IHByZXZpb3VzSW1wYWN0LmRpc3BsYWNlZCxcbiAgICBkaXNwbGFjZWRCeTogcHJldmlvdXNJbXBhY3QuZGlzcGxhY2VkQnksXG4gICAgaW5kZXg6IG5ld0luZGV4XG4gIH0pO1xufSk7XG5cbnZhciBnZXRDb21iaW5lZEl0ZW1EaXNwbGFjZW1lbnQgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRpc3BsYWNlZCA9IF9yZWYuZGlzcGxhY2VkLFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbCxcbiAgICAgIGNvbWJpbmVXaXRoID0gX3JlZi5jb21iaW5lV2l0aCxcbiAgICAgIGRpc3BsYWNlZEJ5ID0gX3JlZi5kaXNwbGFjZWRCeTtcbiAgdmFyIGlzRGlzcGxhY2VkID0gQm9vbGVhbihkaXNwbGFjZWQudmlzaWJsZVtjb21iaW5lV2l0aF0gfHwgZGlzcGxhY2VkLmludmlzaWJsZVtjb21iaW5lV2l0aF0pO1xuXG4gIGlmIChkaWRTdGFydEFmdGVyQ3JpdGljYWwoY29tYmluZVdpdGgsIGFmdGVyQ3JpdGljYWwpKSB7XG4gICAgcmV0dXJuIGlzRGlzcGxhY2VkID8gb3JpZ2luIDogbmVnYXRlKGRpc3BsYWNlZEJ5LnBvaW50KTtcbiAgfVxuXG4gIHJldHVybiBpc0Rpc3BsYWNlZCA/IGRpc3BsYWNlZEJ5LnBvaW50IDogb3JpZ2luO1xufSk7XG5cbnZhciB3aGVuQ29tYmluaW5nID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsLFxuICAgICAgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzO1xuICB2YXIgY29tYmluZSA9IHRyeUdldENvbWJpbmUoaW1wYWN0KTtcbiAgIWNvbWJpbmUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGNvbWJpbmVXaXRoID0gY29tYmluZS5kcmFnZ2FibGVJZDtcbiAgdmFyIGNlbnRlciA9IGRyYWdnYWJsZXNbY29tYmluZVdpdGhdLnBhZ2UuYm9yZGVyQm94LmNlbnRlcjtcbiAgdmFyIGRpc3BsYWNlQnkgPSBnZXRDb21iaW5lZEl0ZW1EaXNwbGFjZW1lbnQoe1xuICAgIGRpc3BsYWNlZDogaW1wYWN0LmRpc3BsYWNlZCxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsLFxuICAgIGNvbWJpbmVXaXRoOiBjb21iaW5lV2l0aCxcbiAgICBkaXNwbGFjZWRCeTogaW1wYWN0LmRpc3BsYWNlZEJ5XG4gIH0pO1xuICByZXR1cm4gYWRkKGNlbnRlciwgZGlzcGxhY2VCeSk7XG59KTtcblxudmFyIGRpc3RhbmNlRnJvbVN0YXJ0VG9Cb3JkZXJCb3hDZW50ZXIgPSBmdW5jdGlvbiBkaXN0YW5jZUZyb21TdGFydFRvQm9yZGVyQm94Q2VudGVyKGF4aXMsIGJveCkge1xuICByZXR1cm4gYm94Lm1hcmdpbltheGlzLnN0YXJ0XSArIGJveC5ib3JkZXJCb3hbYXhpcy5zaXplXSAvIDI7XG59O1xuXG52YXIgZGlzdGFuY2VGcm9tRW5kVG9Cb3JkZXJCb3hDZW50ZXIgPSBmdW5jdGlvbiBkaXN0YW5jZUZyb21FbmRUb0JvcmRlckJveENlbnRlcihheGlzLCBib3gpIHtcbiAgcmV0dXJuIGJveC5tYXJnaW5bYXhpcy5lbmRdICsgYm94LmJvcmRlckJveFtheGlzLnNpemVdIC8gMjtcbn07XG5cbnZhciBnZXRDcm9zc0F4aXNCb3JkZXJCb3hDZW50ZXIgPSBmdW5jdGlvbiBnZXRDcm9zc0F4aXNCb3JkZXJCb3hDZW50ZXIoYXhpcywgdGFyZ2V0LCBpc01vdmluZykge1xuICByZXR1cm4gdGFyZ2V0W2F4aXMuY3Jvc3NBeGlzU3RhcnRdICsgaXNNb3ZpbmcubWFyZ2luW2F4aXMuY3Jvc3NBeGlzU3RhcnRdICsgaXNNb3ZpbmcuYm9yZGVyQm94W2F4aXMuY3Jvc3NBeGlzU2l6ZV0gLyAyO1xufTtcblxudmFyIGdvQWZ0ZXIgPSBmdW5jdGlvbiBnb0FmdGVyKF9yZWYpIHtcbiAgdmFyIGF4aXMgPSBfcmVmLmF4aXMsXG4gICAgICBtb3ZlUmVsYXRpdmVUbyA9IF9yZWYubW92ZVJlbGF0aXZlVG8sXG4gICAgICBpc01vdmluZyA9IF9yZWYuaXNNb3Zpbmc7XG4gIHJldHVybiBwYXRjaChheGlzLmxpbmUsIG1vdmVSZWxhdGl2ZVRvLm1hcmdpbkJveFtheGlzLmVuZF0gKyBkaXN0YW5jZUZyb21TdGFydFRvQm9yZGVyQm94Q2VudGVyKGF4aXMsIGlzTW92aW5nKSwgZ2V0Q3Jvc3NBeGlzQm9yZGVyQm94Q2VudGVyKGF4aXMsIG1vdmVSZWxhdGl2ZVRvLm1hcmdpbkJveCwgaXNNb3ZpbmcpKTtcbn07XG52YXIgZ29CZWZvcmUgPSBmdW5jdGlvbiBnb0JlZm9yZShfcmVmMikge1xuICB2YXIgYXhpcyA9IF9yZWYyLmF4aXMsXG4gICAgICBtb3ZlUmVsYXRpdmVUbyA9IF9yZWYyLm1vdmVSZWxhdGl2ZVRvLFxuICAgICAgaXNNb3ZpbmcgPSBfcmVmMi5pc01vdmluZztcbiAgcmV0dXJuIHBhdGNoKGF4aXMubGluZSwgbW92ZVJlbGF0aXZlVG8ubWFyZ2luQm94W2F4aXMuc3RhcnRdIC0gZGlzdGFuY2VGcm9tRW5kVG9Cb3JkZXJCb3hDZW50ZXIoYXhpcywgaXNNb3ZpbmcpLCBnZXRDcm9zc0F4aXNCb3JkZXJCb3hDZW50ZXIoYXhpcywgbW92ZVJlbGF0aXZlVG8ubWFyZ2luQm94LCBpc01vdmluZykpO1xufTtcbnZhciBnb0ludG9TdGFydCA9IGZ1bmN0aW9uIGdvSW50b1N0YXJ0KF9yZWYzKSB7XG4gIHZhciBheGlzID0gX3JlZjMuYXhpcyxcbiAgICAgIG1vdmVJbnRvID0gX3JlZjMubW92ZUludG8sXG4gICAgICBpc01vdmluZyA9IF9yZWYzLmlzTW92aW5nO1xuICByZXR1cm4gcGF0Y2goYXhpcy5saW5lLCBtb3ZlSW50by5jb250ZW50Qm94W2F4aXMuc3RhcnRdICsgZGlzdGFuY2VGcm9tU3RhcnRUb0JvcmRlckJveENlbnRlcihheGlzLCBpc01vdmluZyksIGdldENyb3NzQXhpc0JvcmRlckJveENlbnRlcihheGlzLCBtb3ZlSW50by5jb250ZW50Qm94LCBpc01vdmluZykpO1xufTtcblxudmFyIHdoZW5SZW9yZGVyaW5nID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZSA9IF9yZWYuZHJvcHBhYmxlLFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcbiAgdmFyIGluc2lkZURlc3RpbmF0aW9uID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShkcm9wcGFibGUuZGVzY3JpcHRvci5pZCwgZHJhZ2dhYmxlcyk7XG4gIHZhciBkcmFnZ2FibGVQYWdlID0gZHJhZ2dhYmxlLnBhZ2U7XG4gIHZhciBheGlzID0gZHJvcHBhYmxlLmF4aXM7XG5cbiAgaWYgKCFpbnNpZGVEZXN0aW5hdGlvbi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZ29JbnRvU3RhcnQoe1xuICAgICAgYXhpczogYXhpcyxcbiAgICAgIG1vdmVJbnRvOiBkcm9wcGFibGUucGFnZSxcbiAgICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gICAgfSk7XG4gIH1cblxuICB2YXIgZGlzcGxhY2VkID0gaW1wYWN0LmRpc3BsYWNlZCxcbiAgICAgIGRpc3BsYWNlZEJ5ID0gaW1wYWN0LmRpc3BsYWNlZEJ5O1xuICB2YXIgY2xvc2VzdEFmdGVyID0gZGlzcGxhY2VkLmFsbFswXTtcblxuICBpZiAoY2xvc2VzdEFmdGVyKSB7XG4gICAgdmFyIGNsb3Nlc3QgPSBkcmFnZ2FibGVzW2Nsb3Nlc3RBZnRlcl07XG5cbiAgICBpZiAoZGlkU3RhcnRBZnRlckNyaXRpY2FsKGNsb3Nlc3RBZnRlciwgYWZ0ZXJDcml0aWNhbCkpIHtcbiAgICAgIHJldHVybiBnb0JlZm9yZSh7XG4gICAgICAgIGF4aXM6IGF4aXMsXG4gICAgICAgIG1vdmVSZWxhdGl2ZVRvOiBjbG9zZXN0LnBhZ2UsXG4gICAgICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgd2l0aERpc3BsYWNlbWVudCA9IG9mZnNldChjbG9zZXN0LnBhZ2UsIGRpc3BsYWNlZEJ5LnBvaW50KTtcbiAgICByZXR1cm4gZ29CZWZvcmUoe1xuICAgICAgYXhpczogYXhpcyxcbiAgICAgIG1vdmVSZWxhdGl2ZVRvOiB3aXRoRGlzcGxhY2VtZW50LFxuICAgICAgaXNNb3Zpbmc6IGRyYWdnYWJsZVBhZ2VcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBsYXN0ID0gaW5zaWRlRGVzdGluYXRpb25baW5zaWRlRGVzdGluYXRpb24ubGVuZ3RoIC0gMV07XG5cbiAgaWYgKGxhc3QuZGVzY3JpcHRvci5pZCA9PT0gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaWQpIHtcbiAgICByZXR1cm4gZHJhZ2dhYmxlUGFnZS5ib3JkZXJCb3guY2VudGVyO1xuICB9XG5cbiAgaWYgKGRpZFN0YXJ0QWZ0ZXJDcml0aWNhbChsYXN0LmRlc2NyaXB0b3IuaWQsIGFmdGVyQ3JpdGljYWwpKSB7XG4gICAgdmFyIHBhZ2UgPSBvZmZzZXQobGFzdC5wYWdlLCBuZWdhdGUoYWZ0ZXJDcml0aWNhbC5kaXNwbGFjZWRCeS5wb2ludCkpO1xuICAgIHJldHVybiBnb0FmdGVyKHtcbiAgICAgIGF4aXM6IGF4aXMsXG4gICAgICBtb3ZlUmVsYXRpdmVUbzogcGFnZSxcbiAgICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZ29BZnRlcih7XG4gICAgYXhpczogYXhpcyxcbiAgICBtb3ZlUmVsYXRpdmVUbzogbGFzdC5wYWdlLFxuICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gIH0pO1xufSk7XG5cbnZhciB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50ID0gKGZ1bmN0aW9uIChkcm9wcGFibGUsIHBvaW50KSB7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgcmV0dXJuIGFkZChwb2ludCwgZnJhbWUuc2Nyb2xsLmRpZmYuZGlzcGxhY2VtZW50KTtcbn0pO1xuXG52YXIgZ2V0UmVzdWx0V2l0aG91dERyb3BwYWJsZURpc3BsYWNlbWVudCA9IGZ1bmN0aW9uIGdldFJlc3VsdFdpdGhvdXREcm9wcGFibGVEaXNwbGFjZW1lbnQoX3JlZikge1xuICB2YXIgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRyb3BwYWJsZSA9IF9yZWYuZHJvcHBhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmLmFmdGVyQ3JpdGljYWw7XG4gIHZhciBvcmlnaW5hbCA9IGRyYWdnYWJsZS5wYWdlLmJvcmRlckJveC5jZW50ZXI7XG4gIHZhciBhdCA9IGltcGFjdC5hdDtcblxuICBpZiAoIWRyb3BwYWJsZSkge1xuICAgIHJldHVybiBvcmlnaW5hbDtcbiAgfVxuXG4gIGlmICghYXQpIHtcbiAgICByZXR1cm4gb3JpZ2luYWw7XG4gIH1cblxuICBpZiAoYXQudHlwZSA9PT0gJ1JFT1JERVInKSB7XG4gICAgcmV0dXJuIHdoZW5SZW9yZGVyaW5nKHtcbiAgICAgIGltcGFjdDogaW1wYWN0LFxuICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlOiBkcm9wcGFibGUsXG4gICAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gd2hlbkNvbWJpbmluZyh7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xufTtcblxudmFyIGdldFBhZ2VCb3JkZXJCb3hDZW50ZXJGcm9tSW1wYWN0ID0gKGZ1bmN0aW9uIChhcmdzKSB7XG4gIHZhciB3aXRob3V0RGlzcGxhY2VtZW50ID0gZ2V0UmVzdWx0V2l0aG91dERyb3BwYWJsZURpc3BsYWNlbWVudChhcmdzKTtcbiAgdmFyIGRyb3BwYWJsZSA9IGFyZ3MuZHJvcHBhYmxlO1xuICB2YXIgd2l0aERpc3BsYWNlbWVudCA9IGRyb3BwYWJsZSA/IHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQoZHJvcHBhYmxlLCB3aXRob3V0RGlzcGxhY2VtZW50KSA6IHdpdGhvdXREaXNwbGFjZW1lbnQ7XG4gIHJldHVybiB3aXRoRGlzcGxhY2VtZW50O1xufSk7XG5cbnZhciBzY3JvbGxWaWV3cG9ydCA9IChmdW5jdGlvbiAodmlld3BvcnQsIG5ld1Njcm9sbCkge1xuICB2YXIgZGlmZiA9IHN1YnRyYWN0KG5ld1Njcm9sbCwgdmlld3BvcnQuc2Nyb2xsLmluaXRpYWwpO1xuICB2YXIgZGlzcGxhY2VtZW50ID0gbmVnYXRlKGRpZmYpO1xuICB2YXIgZnJhbWUgPSBnZXRSZWN0KHtcbiAgICB0b3A6IG5ld1Njcm9sbC55LFxuICAgIGJvdHRvbTogbmV3U2Nyb2xsLnkgKyB2aWV3cG9ydC5mcmFtZS5oZWlnaHQsXG4gICAgbGVmdDogbmV3U2Nyb2xsLngsXG4gICAgcmlnaHQ6IG5ld1Njcm9sbC54ICsgdmlld3BvcnQuZnJhbWUud2lkdGhcbiAgfSk7XG4gIHZhciB1cGRhdGVkID0ge1xuICAgIGZyYW1lOiBmcmFtZSxcbiAgICBzY3JvbGw6IHtcbiAgICAgIGluaXRpYWw6IHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsLFxuICAgICAgbWF4OiB2aWV3cG9ydC5zY3JvbGwubWF4LFxuICAgICAgY3VycmVudDogbmV3U2Nyb2xsLFxuICAgICAgZGlmZjoge1xuICAgICAgICB2YWx1ZTogZGlmZixcbiAgICAgICAgZGlzcGxhY2VtZW50OiBkaXNwbGFjZW1lbnRcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVkO1xufSk7XG5cbmZ1bmN0aW9uIGdldERyYWdnYWJsZXMoaWRzLCBkcmFnZ2FibGVzKSB7XG4gIHJldHVybiBpZHMubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBkcmFnZ2FibGVzW2lkXTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRyeUdldFZpc2libGUoaWQsIGdyb3Vwcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkaXNwbGFjZW1lbnQgPSBncm91cHNbaV0udmlzaWJsZVtpZF07XG5cbiAgICBpZiAoZGlzcGxhY2VtZW50KSB7XG4gICAgICByZXR1cm4gZGlzcGxhY2VtZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgc3BlY3VsYXRpdmVseUluY3JlYXNlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBtYXhTY3JvbGxDaGFuZ2UgPSBfcmVmLm1heFNjcm9sbENoYW5nZTtcbiAgdmFyIHNjcm9sbGVkVmlld3BvcnQgPSBzY3JvbGxWaWV3cG9ydCh2aWV3cG9ydCwgYWRkKHZpZXdwb3J0LnNjcm9sbC5jdXJyZW50LCBtYXhTY3JvbGxDaGFuZ2UpKTtcbiAgdmFyIHNjcm9sbGVkRHJvcHBhYmxlID0gZGVzdGluYXRpb24uZnJhbWUgPyBzY3JvbGxEcm9wcGFibGUoZGVzdGluYXRpb24sIGFkZChkZXN0aW5hdGlvbi5mcmFtZS5zY3JvbGwuY3VycmVudCwgbWF4U2Nyb2xsQ2hhbmdlKSkgOiBkZXN0aW5hdGlvbjtcbiAgdmFyIGxhc3QgPSBpbXBhY3QuZGlzcGxhY2VkO1xuICB2YXIgd2l0aFZpZXdwb3J0U2Nyb2xsID0gZ2V0RGlzcGxhY2VtZW50R3JvdXBzKHtcbiAgICBhZnRlckRyYWdnaW5nOiBnZXREcmFnZ2FibGVzKGxhc3QuYWxsLCBkcmFnZ2FibGVzKSxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZGlzcGxhY2VkQnk6IGltcGFjdC5kaXNwbGFjZWRCeSxcbiAgICB2aWV3cG9ydDogc2Nyb2xsZWRWaWV3cG9ydC5mcmFtZSxcbiAgICBsYXN0OiBsYXN0LFxuICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogZmFsc2VcbiAgfSk7XG4gIHZhciB3aXRoRHJvcHBhYmxlU2Nyb2xsID0gZ2V0RGlzcGxhY2VtZW50R3JvdXBzKHtcbiAgICBhZnRlckRyYWdnaW5nOiBnZXREcmFnZ2FibGVzKGxhc3QuYWxsLCBkcmFnZ2FibGVzKSxcbiAgICBkZXN0aW5hdGlvbjogc2Nyb2xsZWREcm9wcGFibGUsXG4gICAgZGlzcGxhY2VkQnk6IGltcGFjdC5kaXNwbGFjZWRCeSxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgbGFzdDogbGFzdCxcbiAgICBmb3JjZVNob3VsZEFuaW1hdGU6IGZhbHNlXG4gIH0pO1xuICB2YXIgaW52aXNpYmxlID0ge307XG4gIHZhciB2aXNpYmxlID0ge307XG4gIHZhciBncm91cHMgPSBbbGFzdCwgd2l0aFZpZXdwb3J0U2Nyb2xsLCB3aXRoRHJvcHBhYmxlU2Nyb2xsXTtcbiAgbGFzdC5hbGwuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgZGlzcGxhY2VtZW50ID0gdHJ5R2V0VmlzaWJsZShpZCwgZ3JvdXBzKTtcblxuICAgIGlmIChkaXNwbGFjZW1lbnQpIHtcbiAgICAgIHZpc2libGVbaWRdID0gZGlzcGxhY2VtZW50O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludmlzaWJsZVtpZF0gPSB0cnVlO1xuICB9KTtcblxuICB2YXIgbmV3SW1wYWN0ID0gX2V4dGVuZHMoe30sIGltcGFjdCwge1xuICAgIGRpc3BsYWNlZDoge1xuICAgICAgYWxsOiBsYXN0LmFsbCxcbiAgICAgIGludmlzaWJsZTogaW52aXNpYmxlLFxuICAgICAgdmlzaWJsZTogdmlzaWJsZVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5ld0ltcGFjdDtcbn0pO1xuXG52YXIgd2l0aFZpZXdwb3J0RGlzcGxhY2VtZW50ID0gKGZ1bmN0aW9uICh2aWV3cG9ydCwgcG9pbnQpIHtcbiAgcmV0dXJuIGFkZCh2aWV3cG9ydC5zY3JvbGwuZGlmZi5kaXNwbGFjZW1lbnQsIHBvaW50KTtcbn0pO1xuXG52YXIgZ2V0Q2xpZW50RnJvbVBhZ2VCb3JkZXJCb3hDZW50ZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIHdpdGhvdXRQYWdlU2Nyb2xsQ2hhbmdlID0gd2l0aFZpZXdwb3J0RGlzcGxhY2VtZW50KHZpZXdwb3J0LCBwYWdlQm9yZGVyQm94Q2VudGVyKTtcbiAgdmFyIG9mZnNldCA9IHN1YnRyYWN0KHdpdGhvdXRQYWdlU2Nyb2xsQ2hhbmdlLCBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3guY2VudGVyKTtcbiAgcmV0dXJuIGFkZChkcmFnZ2FibGUuY2xpZW50LmJvcmRlckJveC5jZW50ZXIsIG9mZnNldCk7XG59KTtcblxudmFyIGlzVG90YWxseVZpc2libGVJbk5ld0xvY2F0aW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLm5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50ID0gX3JlZi53aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50LFxuICAgICAgX3JlZiRvbmx5T25NYWluQXhpcyA9IF9yZWYub25seU9uTWFpbkF4aXMsXG4gICAgICBvbmx5T25NYWluQXhpcyA9IF9yZWYkb25seU9uTWFpbkF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRvbmx5T25NYWluQXhpcztcbiAgdmFyIGNoYW5nZU5lZWRlZCA9IHN1YnRyYWN0KG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIsIGRyYWdnYWJsZS5wYWdlLmJvcmRlckJveC5jZW50ZXIpO1xuICB2YXIgc2hpZnRlZCA9IG9mZnNldEJ5UG9zaXRpb24oZHJhZ2dhYmxlLnBhZ2UuYm9yZGVyQm94LCBjaGFuZ2VOZWVkZWQpO1xuICB2YXIgYXJncyA9IHtcbiAgICB0YXJnZXQ6IHNoaWZ0ZWQsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQ6IHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH07XG4gIHJldHVybiBvbmx5T25NYWluQXhpcyA/IGlzVG90YWxseVZpc2libGVPbkF4aXMoYXJncykgOiBpc1RvdGFsbHlWaXNpYmxlKGFyZ3MpO1xufSk7XG5cbnZhciBtb3ZlVG9OZXh0UGxhY2UgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IF9yZWYuaXNNb3ZpbmdGb3J3YXJkLFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyID0gX3JlZi5wcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBwcmV2aW91c0NsaWVudFNlbGVjdGlvbiA9IF9yZWYucHJldmlvdXNDbGllbnRTZWxlY3Rpb24sXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuXG4gIGlmICghZGVzdGluYXRpb24uaXNFbmFibGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaW5zaWRlRGVzdGluYXRpb24gPSBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlKGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgaXNJbkhvbWVMaXN0ID0gaXNIb21lT2YoZHJhZ2dhYmxlLCBkZXN0aW5hdGlvbik7XG4gIHZhciBpbXBhY3QgPSBtb3ZlVG9OZXh0Q29tYmluZSh7XG4gICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3RcbiAgfSkgfHwgbW92ZVRvTmV4dEluZGV4KHtcbiAgICBpc01vdmluZ0ZvcndhcmQ6IGlzTW92aW5nRm9yd2FyZCxcbiAgICBpc0luSG9tZUxpc3Q6IGlzSW5Ib21lTGlzdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0LFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xuXG4gIGlmICghaW1wYWN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcGFnZUJvcmRlckJveENlbnRlciA9IGdldFBhZ2VCb3JkZXJCb3hDZW50ZXJGcm9tSW1wYWN0KHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcm9wcGFibGU6IGRlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcbiAgdmFyIGlzVmlzaWJsZUluTmV3TG9jYXRpb24gPSBpc1RvdGFsbHlWaXNpYmxlSW5OZXdMb2NhdGlvbih7XG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LmZyYW1lLFxuICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQ6IGZhbHNlLFxuICAgIG9ubHlPbk1haW5BeGlzOiB0cnVlXG4gIH0pO1xuXG4gIGlmIChpc1Zpc2libGVJbk5ld0xvY2F0aW9uKSB7XG4gICAgdmFyIGNsaWVudFNlbGVjdGlvbiA9IGdldENsaWVudEZyb21QYWdlQm9yZGVyQm94Q2VudGVyKHtcbiAgICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXI6IHBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICAgIGltcGFjdDogaW1wYWN0LFxuICAgICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgdmFyIGRpc3RhbmNlID0gc3VidHJhY3QocGFnZUJvcmRlckJveENlbnRlciwgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyKTtcbiAgdmFyIGNhdXRpb3VzID0gc3BlY3VsYXRpdmVseUluY3JlYXNlKHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgbWF4U2Nyb2xsQ2hhbmdlOiBkaXN0YW5jZVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjbGllbnRTZWxlY3Rpb246IHByZXZpb3VzQ2xpZW50U2VsZWN0aW9uLFxuICAgIGltcGFjdDogY2F1dGlvdXMsXG4gICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IGRpc3RhbmNlXG4gIH07XG59KTtcblxudmFyIGdldEtub3duQWN0aXZlID0gZnVuY3Rpb24gZ2V0S25vd25BY3RpdmUoZHJvcHBhYmxlKSB7XG4gIHZhciByZWN0ID0gZHJvcHBhYmxlLnN1YmplY3QuYWN0aXZlO1xuICAhcmVjdCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBnZXQgY2xpcHBlZCBhcmVhIGZyb20gZHJvcHBhYmxlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcmVjdDtcbn07XG5cbnZhciBnZXRCZXN0Q3Jvc3NBeGlzRHJvcHBhYmxlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBzb3VyY2UgPSBfcmVmLnNvdXJjZSxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmLmRyb3BwYWJsZXMsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQ7XG4gIHZhciBhY3RpdmUgPSBzb3VyY2Uuc3ViamVjdC5hY3RpdmU7XG5cbiAgaWYgKCFhY3RpdmUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBheGlzID0gc291cmNlLmF4aXM7XG4gIHZhciBpc0JldHdlZW5Tb3VyY2VDbGlwcGVkID0gaXNXaXRoaW4oYWN0aXZlW2F4aXMuc3RhcnRdLCBhY3RpdmVbYXhpcy5lbmRdKTtcbiAgdmFyIGNhbmRpZGF0ZXMgPSB0b0Ryb3BwYWJsZUxpc3QoZHJvcHBhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlICE9PSBzb3VyY2U7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgcmV0dXJuIGRyb3BwYWJsZS5pc0VuYWJsZWQ7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oZHJvcHBhYmxlLnN1YmplY3QuYWN0aXZlKTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICByZXR1cm4gaXNQYXJ0aWFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lKHZpZXdwb3J0LmZyYW1lKShnZXRLbm93bkFjdGl2ZShkcm9wcGFibGUpKTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICB2YXIgYWN0aXZlT2ZUYXJnZXQgPSBnZXRLbm93bkFjdGl2ZShkcm9wcGFibGUpO1xuXG4gICAgaWYgKGlzTW92aW5nRm9yd2FyZCkge1xuICAgICAgcmV0dXJuIGFjdGl2ZVtheGlzLmNyb3NzQXhpc0VuZF0gPCBhY3RpdmVPZlRhcmdldFtheGlzLmNyb3NzQXhpc0VuZF07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGl2ZU9mVGFyZ2V0W2F4aXMuY3Jvc3NBeGlzU3RhcnRdIDwgYWN0aXZlW2F4aXMuY3Jvc3NBeGlzU3RhcnRdO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHZhciBhY3RpdmVPZlRhcmdldCA9IGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSk7XG4gICAgdmFyIGlzQmV0d2VlbkRlc3RpbmF0aW9uQ2xpcHBlZCA9IGlzV2l0aGluKGFjdGl2ZU9mVGFyZ2V0W2F4aXMuc3RhcnRdLCBhY3RpdmVPZlRhcmdldFtheGlzLmVuZF0pO1xuICAgIHJldHVybiBpc0JldHdlZW5Tb3VyY2VDbGlwcGVkKGFjdGl2ZU9mVGFyZ2V0W2F4aXMuc3RhcnRdKSB8fCBpc0JldHdlZW5Tb3VyY2VDbGlwcGVkKGFjdGl2ZU9mVGFyZ2V0W2F4aXMuZW5kXSkgfHwgaXNCZXR3ZWVuRGVzdGluYXRpb25DbGlwcGVkKGFjdGl2ZVtheGlzLnN0YXJ0XSkgfHwgaXNCZXR3ZWVuRGVzdGluYXRpb25DbGlwcGVkKGFjdGl2ZVtheGlzLmVuZF0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGZpcnN0ID0gZ2V0S25vd25BY3RpdmUoYSlbYXhpcy5jcm9zc0F4aXNTdGFydF07XG4gICAgdmFyIHNlY29uZCA9IGdldEtub3duQWN0aXZlKGIpW2F4aXMuY3Jvc3NBeGlzU3RhcnRdO1xuXG4gICAgaWYgKGlzTW92aW5nRm9yd2FyZCkge1xuICAgICAgcmV0dXJuIGZpcnN0IC0gc2Vjb25kO1xuICAgIH1cblxuICAgIHJldHVybiBzZWNvbmQgLSBmaXJzdDtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUsIGluZGV4LCBhcnJheSkge1xuICAgIHJldHVybiBnZXRLbm93bkFjdGl2ZShkcm9wcGFibGUpW2F4aXMuY3Jvc3NBeGlzU3RhcnRdID09PSBnZXRLbm93bkFjdGl2ZShhcnJheVswXSlbYXhpcy5jcm9zc0F4aXNTdGFydF07XG4gIH0pO1xuXG4gIGlmICghY2FuZGlkYXRlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChjYW5kaWRhdGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBjYW5kaWRhdGVzWzBdO1xuICB9XG5cbiAgdmFyIGNvbnRhaW5zID0gY2FuZGlkYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHZhciBpc1dpdGhpbkRyb3BwYWJsZSA9IGlzV2l0aGluKGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSlbYXhpcy5zdGFydF0sIGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSlbYXhpcy5lbmRdKTtcbiAgICByZXR1cm4gaXNXaXRoaW5Ecm9wcGFibGUocGFnZUJvcmRlckJveENlbnRlcltheGlzLmxpbmVdKTtcbiAgfSk7XG5cbiAgaWYgKGNvbnRhaW5zLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBjb250YWluc1swXTtcbiAgfVxuXG4gIGlmIChjb250YWlucy5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBnZXRLbm93bkFjdGl2ZShhKVtheGlzLnN0YXJ0XSAtIGdldEtub3duQWN0aXZlKGIpW2F4aXMuc3RhcnRdO1xuICAgIH0pWzBdO1xuICB9XG5cbiAgcmV0dXJuIGNhbmRpZGF0ZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBmaXJzdCA9IGNsb3Nlc3QocGFnZUJvcmRlckJveENlbnRlciwgZ2V0Q29ybmVycyhnZXRLbm93bkFjdGl2ZShhKSkpO1xuICAgIHZhciBzZWNvbmQgPSBjbG9zZXN0KHBhZ2VCb3JkZXJCb3hDZW50ZXIsIGdldENvcm5lcnMoZ2V0S25vd25BY3RpdmUoYikpKTtcblxuICAgIGlmIChmaXJzdCAhPT0gc2Vjb25kKSB7XG4gICAgICByZXR1cm4gZmlyc3QgLSBzZWNvbmQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldEtub3duQWN0aXZlKGEpW2F4aXMuc3RhcnRdIC0gZ2V0S25vd25BY3RpdmUoYilbYXhpcy5zdGFydF07XG4gIH0pWzBdO1xufSk7XG5cbnZhciBnZXRDdXJyZW50UGFnZUJvcmRlckJveENlbnRlciA9IGZ1bmN0aW9uIGdldEN1cnJlbnRQYWdlQm9yZGVyQm94Q2VudGVyKGRyYWdnYWJsZSwgYWZ0ZXJDcml0aWNhbCkge1xuICB2YXIgb3JpZ2luYWwgPSBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3guY2VudGVyO1xuICByZXR1cm4gZGlkU3RhcnRBZnRlckNyaXRpY2FsKGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkLCBhZnRlckNyaXRpY2FsKSA/IHN1YnRyYWN0KG9yaWdpbmFsLCBhZnRlckNyaXRpY2FsLmRpc3BsYWNlZEJ5LnBvaW50KSA6IG9yaWdpbmFsO1xufTtcbnZhciBnZXRDdXJyZW50UGFnZUJvcmRlckJveCA9IGZ1bmN0aW9uIGdldEN1cnJlbnRQYWdlQm9yZGVyQm94KGRyYWdnYWJsZSwgYWZ0ZXJDcml0aWNhbCkge1xuICB2YXIgb3JpZ2luYWwgPSBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3g7XG4gIHJldHVybiBkaWRTdGFydEFmdGVyQ3JpdGljYWwoZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaWQsIGFmdGVyQ3JpdGljYWwpID8gb2Zmc2V0QnlQb3NpdGlvbihvcmlnaW5hbCwgbmVnYXRlKGFmdGVyQ3JpdGljYWwuZGlzcGxhY2VkQnkucG9pbnQpKSA6IG9yaWdpbmFsO1xufTtcblxudmFyIGdldENsb3Nlc3REcmFnZ2FibGUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbiA9IF9yZWYuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuICB2YXIgc29ydGVkID0gaW5zaWRlRGVzdGluYXRpb24uZmlsdGVyKGZ1bmN0aW9uIChkcmFnZ2FibGUpIHtcbiAgICByZXR1cm4gaXNUb3RhbGx5VmlzaWJsZSh7XG4gICAgICB0YXJnZXQ6IGdldEN1cnJlbnRQYWdlQm9yZGVyQm94KGRyYWdnYWJsZSwgYWZ0ZXJDcml0aWNhbCksXG4gICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50OiB0cnVlXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgZGlzdGFuY2VUb0EgPSBkaXN0YW5jZShwYWdlQm9yZGVyQm94Q2VudGVyLCB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50KGRlc3RpbmF0aW9uLCBnZXRDdXJyZW50UGFnZUJvcmRlckJveENlbnRlcihhLCBhZnRlckNyaXRpY2FsKSkpO1xuICAgIHZhciBkaXN0YW5jZVRvQiA9IGRpc3RhbmNlKHBhZ2VCb3JkZXJCb3hDZW50ZXIsIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQoZGVzdGluYXRpb24sIGdldEN1cnJlbnRQYWdlQm9yZGVyQm94Q2VudGVyKGIsIGFmdGVyQ3JpdGljYWwpKSk7XG5cbiAgICBpZiAoZGlzdGFuY2VUb0EgPCBkaXN0YW5jZVRvQikge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmIChkaXN0YW5jZVRvQiA8IGRpc3RhbmNlVG9BKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gYS5kZXNjcmlwdG9yLmluZGV4IC0gYi5kZXNjcmlwdG9yLmluZGV4O1xuICB9KTtcbiAgcmV0dXJuIHNvcnRlZFswXSB8fCBudWxsO1xufSk7XG5cbnZhciBnZXREaXNwbGFjZWRCeSA9IG1lbW9pemVPbmUoZnVuY3Rpb24gZ2V0RGlzcGxhY2VkQnkoYXhpcywgZGlzcGxhY2VCeSkge1xuICB2YXIgZGlzcGxhY2VtZW50ID0gZGlzcGxhY2VCeVtheGlzLmxpbmVdO1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiBkaXNwbGFjZW1lbnQsXG4gICAgcG9pbnQ6IHBhdGNoKGF4aXMubGluZSwgZGlzcGxhY2VtZW50KVxuICB9O1xufSk7XG5cbnZhciBnZXRSZXF1aXJlZEdyb3d0aEZvclBsYWNlaG9sZGVyID0gZnVuY3Rpb24gZ2V0UmVxdWlyZWRHcm93dGhGb3JQbGFjZWhvbGRlcihkcm9wcGFibGUsIHBsYWNlaG9sZGVyU2l6ZSwgZHJhZ2dhYmxlcykge1xuICB2YXIgYXhpcyA9IGRyb3BwYWJsZS5heGlzO1xuXG4gIGlmIChkcm9wcGFibGUuZGVzY3JpcHRvci5tb2RlID09PSAndmlydHVhbCcpIHtcbiAgICByZXR1cm4gcGF0Y2goYXhpcy5saW5lLCBwbGFjZWhvbGRlclNpemVbYXhpcy5saW5lXSk7XG4gIH1cblxuICB2YXIgYXZhaWxhYmxlU3BhY2UgPSBkcm9wcGFibGUuc3ViamVjdC5wYWdlLmNvbnRlbnRCb3hbYXhpcy5zaXplXTtcbiAgdmFyIGluc2lkZURyb3BwYWJsZSA9IGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUoZHJvcHBhYmxlLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgc3BhY2VVc2VkID0gaW5zaWRlRHJvcHBhYmxlLnJlZHVjZShmdW5jdGlvbiAoc3VtLCBkaW1lbnNpb24pIHtcbiAgICByZXR1cm4gc3VtICsgZGltZW5zaW9uLmNsaWVudC5tYXJnaW5Cb3hbYXhpcy5zaXplXTtcbiAgfSwgMCk7XG4gIHZhciByZXF1aXJlZFNwYWNlID0gc3BhY2VVc2VkICsgcGxhY2Vob2xkZXJTaXplW2F4aXMubGluZV07XG4gIHZhciBuZWVkc1RvR3Jvd0J5ID0gcmVxdWlyZWRTcGFjZSAtIGF2YWlsYWJsZVNwYWNlO1xuXG4gIGlmIChuZWVkc1RvR3Jvd0J5IDw9IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXRjaChheGlzLmxpbmUsIG5lZWRzVG9Hcm93QnkpO1xufTtcblxudmFyIHdpdGhNYXhTY3JvbGwgPSBmdW5jdGlvbiB3aXRoTWF4U2Nyb2xsKGZyYW1lLCBtYXgpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBmcmFtZSwge1xuICAgIHNjcm9sbDogX2V4dGVuZHMoe30sIGZyYW1lLnNjcm9sbCwge1xuICAgICAgbWF4OiBtYXhcbiAgICB9KVxuICB9KTtcbn07XG5cbnZhciBhZGRQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIGFkZFBsYWNlaG9sZGVyKGRyb3BwYWJsZSwgZHJhZ2dhYmxlLCBkcmFnZ2FibGVzKSB7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcbiAgISFpc0hvbWVPZihkcmFnZ2FibGUsIGRyb3BwYWJsZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgbm90IGFkZCBwbGFjZWhvbGRlciBzcGFjZSB0byBob21lIGxpc3QnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICEhZHJvcHBhYmxlLnN1YmplY3Qud2l0aFBsYWNlaG9sZGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGFkZCBwbGFjZWhvbGRlciBzaXplIHRvIGEgc3ViamVjdCB3aGVuIGl0IGFscmVhZHkgaGFzIG9uZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIHBsYWNlaG9sZGVyU2l6ZSA9IGdldERpc3BsYWNlZEJ5KGRyb3BwYWJsZS5heGlzLCBkcmFnZ2FibGUuZGlzcGxhY2VCeSkucG9pbnQ7XG4gIHZhciByZXF1aXJlZEdyb3d0aCA9IGdldFJlcXVpcmVkR3Jvd3RoRm9yUGxhY2Vob2xkZXIoZHJvcHBhYmxlLCBwbGFjZWhvbGRlclNpemUsIGRyYWdnYWJsZXMpO1xuICB2YXIgYWRkZWQgPSB7XG4gICAgcGxhY2Vob2xkZXJTaXplOiBwbGFjZWhvbGRlclNpemUsXG4gICAgaW5jcmVhc2VkQnk6IHJlcXVpcmVkR3Jvd3RoLFxuICAgIG9sZEZyYW1lTWF4U2Nyb2xsOiBkcm9wcGFibGUuZnJhbWUgPyBkcm9wcGFibGUuZnJhbWUuc2Nyb2xsLm1heCA6IG51bGxcbiAgfTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgdmFyIF9zdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgICBwYWdlOiBkcm9wcGFibGUuc3ViamVjdC5wYWdlLFxuICAgICAgd2l0aFBsYWNlaG9sZGVyOiBhZGRlZCxcbiAgICAgIGF4aXM6IGRyb3BwYWJsZS5heGlzLFxuICAgICAgZnJhbWU6IGRyb3BwYWJsZS5mcmFtZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBkcm9wcGFibGUsIHtcbiAgICAgIHN1YmplY3Q6IF9zdWJqZWN0XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbWF4U2Nyb2xsID0gcmVxdWlyZWRHcm93dGggPyBhZGQoZnJhbWUuc2Nyb2xsLm1heCwgcmVxdWlyZWRHcm93dGgpIDogZnJhbWUuc2Nyb2xsLm1heDtcbiAgdmFyIG5ld0ZyYW1lID0gd2l0aE1heFNjcm9sbChmcmFtZSwgbWF4U2Nyb2xsKTtcbiAgdmFyIHN1YmplY3QgPSBnZXRTdWJqZWN0KHtcbiAgICBwYWdlOiBkcm9wcGFibGUuc3ViamVjdC5wYWdlLFxuICAgIHdpdGhQbGFjZWhvbGRlcjogYWRkZWQsXG4gICAgYXhpczogZHJvcHBhYmxlLmF4aXMsXG4gICAgZnJhbWU6IG5ld0ZyYW1lXG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGRyb3BwYWJsZSwge1xuICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgZnJhbWU6IG5ld0ZyYW1lXG4gIH0pO1xufTtcbnZhciByZW1vdmVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIHJlbW92ZVBsYWNlaG9sZGVyKGRyb3BwYWJsZSkge1xuICB2YXIgYWRkZWQgPSBkcm9wcGFibGUuc3ViamVjdC53aXRoUGxhY2Vob2xkZXI7XG4gICFhZGRlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCByZW1vdmUgcGxhY2Vob2xkZXIgZm9ybSBzdWJqZWN0IHdoZW4gdGhlcmUgd2FzIG5vbmUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgdmFyIF9zdWJqZWN0MiA9IGdldFN1YmplY3Qoe1xuICAgICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICAgIGF4aXM6IGRyb3BwYWJsZS5heGlzLFxuICAgICAgZnJhbWU6IG51bGwsXG4gICAgICB3aXRoUGxhY2Vob2xkZXI6IG51bGxcbiAgICB9KTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlLCB7XG4gICAgICBzdWJqZWN0OiBfc3ViamVjdDJcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBvbGRNYXhTY3JvbGwgPSBhZGRlZC5vbGRGcmFtZU1heFNjcm9sbDtcbiAgIW9sZE1heFNjcm9sbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIGRyb3BwYWJsZSB3aXRoIGZyYW1lIHRvIGhhdmUgb2xkIG1heCBmcmFtZSBzY3JvbGwgd2hlbiByZW1vdmluZyBwbGFjZWhvbGRlcicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIG5ld0ZyYW1lID0gd2l0aE1heFNjcm9sbChmcmFtZSwgb2xkTWF4U2Nyb2xsKTtcbiAgdmFyIHN1YmplY3QgPSBnZXRTdWJqZWN0KHtcbiAgICBwYWdlOiBkcm9wcGFibGUuc3ViamVjdC5wYWdlLFxuICAgIGF4aXM6IGRyb3BwYWJsZS5heGlzLFxuICAgIGZyYW1lOiBuZXdGcmFtZSxcbiAgICB3aXRoUGxhY2Vob2xkZXI6IG51bGxcbiAgfSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlLCB7XG4gICAgc3ViamVjdDogc3ViamVjdCxcbiAgICBmcmFtZTogbmV3RnJhbWVcbiAgfSk7XG59O1xuXG52YXIgbW92ZVRvTmV3RHJvcHBhYmxlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIG1vdmVSZWxhdGl2ZVRvID0gX3JlZi5tb3ZlUmVsYXRpdmVUbyxcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmLmFmdGVyQ3JpdGljYWw7XG5cbiAgaWYgKCFtb3ZlUmVsYXRpdmVUbykge1xuICAgIGlmIChpbnNpZGVEZXN0aW5hdGlvbi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBwcm9wb3NlZCA9IHtcbiAgICAgIGRpc3BsYWNlZDogZW1wdHlHcm91cHMsXG4gICAgICBkaXNwbGFjZWRCeTogbm9EaXNwbGFjZWRCeSxcbiAgICAgIGF0OiB7XG4gICAgICAgIHR5cGU6ICdSRU9SREVSJyxcbiAgICAgICAgZGVzdGluYXRpb246IHtcbiAgICAgICAgICBkcm9wcGFibGVJZDogZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCxcbiAgICAgICAgICBpbmRleDogMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcHJvcG9zZWRQYWdlQm9yZGVyQm94Q2VudGVyID0gZ2V0UGFnZUJvcmRlckJveENlbnRlckZyb21JbXBhY3Qoe1xuICAgICAgaW1wYWN0OiBwcm9wb3NlZCxcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gICAgfSk7XG4gICAgdmFyIHdpdGhQbGFjZWhvbGRlciA9IGlzSG9tZU9mKGRyYWdnYWJsZSwgZGVzdGluYXRpb24pID8gZGVzdGluYXRpb24gOiBhZGRQbGFjZWhvbGRlcihkZXN0aW5hdGlvbiwgZHJhZ2dhYmxlLCBkcmFnZ2FibGVzKTtcbiAgICB2YXIgaXNWaXNpYmxlSW5OZXdMb2NhdGlvbiA9IGlzVG90YWxseVZpc2libGVJbk5ld0xvY2F0aW9uKHtcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb246IHdpdGhQbGFjZWhvbGRlcixcbiAgICAgIG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHByb3Bvc2VkUGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZSxcbiAgICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQ6IGZhbHNlLFxuICAgICAgb25seU9uTWFpbkF4aXM6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gaXNWaXNpYmxlSW5OZXdMb2NhdGlvbiA/IHByb3Bvc2VkIDogbnVsbDtcbiAgfVxuXG4gIHZhciBpc0dvaW5nQmVmb3JlVGFyZ2V0ID0gQm9vbGVhbihwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXJbZGVzdGluYXRpb24uYXhpcy5saW5lXSA8PSBtb3ZlUmVsYXRpdmVUby5wYWdlLmJvcmRlckJveC5jZW50ZXJbZGVzdGluYXRpb24uYXhpcy5saW5lXSk7XG5cbiAgdmFyIHByb3Bvc2VkSW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlbGF0aXZlVG8gPSBtb3ZlUmVsYXRpdmVUby5kZXNjcmlwdG9yLmluZGV4O1xuXG4gICAgaWYgKG1vdmVSZWxhdGl2ZVRvLmRlc2NyaXB0b3IuaWQgPT09IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkKSB7XG4gICAgICByZXR1cm4gcmVsYXRpdmVUbztcbiAgICB9XG5cbiAgICBpZiAoaXNHb2luZ0JlZm9yZVRhcmdldCkge1xuICAgICAgcmV0dXJuIHJlbGF0aXZlVG87XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbGF0aXZlVG8gKyAxO1xuICB9KCk7XG5cbiAgdmFyIGRpc3BsYWNlZEJ5ID0gZ2V0RGlzcGxhY2VkQnkoZGVzdGluYXRpb24uYXhpcywgZHJhZ2dhYmxlLmRpc3BsYWNlQnkpO1xuICByZXR1cm4gY2FsY3VsYXRlUmVvcmRlckltcGFjdCh7XG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGxhc3Q6IGVtcHR5R3JvdXBzLFxuICAgIGluZGV4OiBwcm9wb3NlZEluZGV4XG4gIH0pO1xufSk7XG5cbnZhciBtb3ZlQ3Jvc3NBeGlzID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlciA9IF9yZWYucHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBpc092ZXIgPSBfcmVmLmlzT3ZlcixcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzID0gX3JlZi5kcm9wcGFibGVzLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcbiAgdmFyIGRlc3RpbmF0aW9uID0gZ2V0QmVzdENyb3NzQXhpc0Ryb3BwYWJsZSh7XG4gICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgcGFnZUJvcmRlckJveENlbnRlcjogcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIHNvdXJjZTogaXNPdmVyLFxuICAgIGRyb3BwYWJsZXM6IGRyb3BwYWJsZXMsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xuXG4gIGlmICghZGVzdGluYXRpb24pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBpbnNpZGVEZXN0aW5hdGlvbiA9IGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUoZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCwgZHJhZ2dhYmxlcyk7XG4gIHZhciBtb3ZlUmVsYXRpdmVUbyA9IGdldENsb3Nlc3REcmFnZ2FibGUoe1xuICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXI6IHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xuICB2YXIgaW1wYWN0ID0gbW92ZVRvTmV3RHJvcHBhYmxlKHtcbiAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBtb3ZlUmVsYXRpdmVUbzogbW92ZVJlbGF0aXZlVG8sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xuXG4gIGlmICghaW1wYWN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcGFnZUJvcmRlckJveENlbnRlciA9IGdldFBhZ2VCb3JkZXJCb3hDZW50ZXJGcm9tSW1wYWN0KHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcm9wcGFibGU6IGRlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcbiAgdmFyIGNsaWVudFNlbGVjdGlvbiA9IGdldENsaWVudEZyb21QYWdlQm9yZGVyQm94Q2VudGVyKHtcbiAgICBwYWdlQm9yZGVyQm94Q2VudGVyOiBwYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBzY3JvbGxKdW1wUmVxdWVzdDogbnVsbFxuICB9O1xufSk7XG5cbnZhciB3aGF0SXNEcmFnZ2VkT3ZlciA9IChmdW5jdGlvbiAoaW1wYWN0KSB7XG4gIHZhciBhdCA9IGltcGFjdC5hdDtcblxuICBpZiAoIWF0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoYXQudHlwZSA9PT0gJ1JFT1JERVInKSB7XG4gICAgcmV0dXJuIGF0LmRlc3RpbmF0aW9uLmRyb3BwYWJsZUlkO1xuICB9XG5cbiAgcmV0dXJuIGF0LmNvbWJpbmUuZHJvcHBhYmxlSWQ7XG59KTtcblxudmFyIGdldERyb3BwYWJsZU92ZXIgPSBmdW5jdGlvbiBnZXREcm9wcGFibGVPdmVyKGltcGFjdCwgZHJvcHBhYmxlcykge1xuICB2YXIgaWQgPSB3aGF0SXNEcmFnZ2VkT3ZlcihpbXBhY3QpO1xuICByZXR1cm4gaWQgPyBkcm9wcGFibGVzW2lkXSA6IG51bGw7XG59O1xuXG52YXIgbW92ZUluRGlyZWN0aW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICB0eXBlID0gX3JlZi50eXBlO1xuICB2YXIgaXNBY3R1YWxseU92ZXIgPSBnZXREcm9wcGFibGVPdmVyKHN0YXRlLmltcGFjdCwgc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzKTtcbiAgdmFyIGlzTWFpbkF4aXNNb3ZlbWVudEFsbG93ZWQgPSBCb29sZWFuKGlzQWN0dWFsbHlPdmVyKTtcbiAgdmFyIGhvbWUgPSBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJvcHBhYmxlLmlkXTtcbiAgdmFyIGlzT3ZlciA9IGlzQWN0dWFsbHlPdmVyIHx8IGhvbWU7XG4gIHZhciBkaXJlY3Rpb24gPSBpc092ZXIuYXhpcy5kaXJlY3Rpb247XG4gIHZhciBpc01vdmluZ09uTWFpbkF4aXMgPSBkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcgJiYgKHR5cGUgPT09ICdNT1ZFX1VQJyB8fCB0eXBlID09PSAnTU9WRV9ET1dOJykgfHwgZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKHR5cGUgPT09ICdNT1ZFX0xFRlQnIHx8IHR5cGUgPT09ICdNT1ZFX1JJR0hUJyk7XG5cbiAgaWYgKGlzTW92aW5nT25NYWluQXhpcyAmJiAhaXNNYWluQXhpc01vdmVtZW50QWxsb3dlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IHR5cGUgPT09ICdNT1ZFX0RPV04nIHx8IHR5cGUgPT09ICdNT1ZFX1JJR0hUJztcbiAgdmFyIGRyYWdnYWJsZSA9IHN0YXRlLmRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuICB2YXIgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyID0gc3RhdGUuY3VycmVudC5wYWdlLmJvcmRlckJveENlbnRlcjtcbiAgdmFyIF9zdGF0ZSRkaW1lbnNpb25zID0gc3RhdGUuZGltZW5zaW9ucyxcbiAgICAgIGRyYWdnYWJsZXMgPSBfc3RhdGUkZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlcyA9IF9zdGF0ZSRkaW1lbnNpb25zLmRyb3BwYWJsZXM7XG4gIHJldHVybiBpc01vdmluZ09uTWFpbkF4aXMgPyBtb3ZlVG9OZXh0UGxhY2Uoe1xuICAgIGlzTW92aW5nRm9yd2FyZDogaXNNb3ZpbmdGb3J3YXJkLFxuICAgIHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcjogcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBpc092ZXIsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICB2aWV3cG9ydDogc3RhdGUudmlld3BvcnQsXG4gICAgcHJldmlvdXNDbGllbnRTZWxlY3Rpb246IHN0YXRlLmN1cnJlbnQuY2xpZW50LnNlbGVjdGlvbixcbiAgICBwcmV2aW91c0ltcGFjdDogc3RhdGUuaW1wYWN0LFxuICAgIGFmdGVyQ3JpdGljYWw6IHN0YXRlLmFmdGVyQ3JpdGljYWxcbiAgfSkgOiBtb3ZlQ3Jvc3NBeGlzKHtcbiAgICBpc01vdmluZ0ZvcndhcmQ6IGlzTW92aW5nRm9yd2FyZCxcbiAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBpc092ZXI6IGlzT3ZlcixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZXM6IGRyb3BwYWJsZXMsXG4gICAgdmlld3BvcnQ6IHN0YXRlLnZpZXdwb3J0LFxuICAgIGFmdGVyQ3JpdGljYWw6IHN0YXRlLmFmdGVyQ3JpdGljYWxcbiAgfSk7XG59KTtcblxuZnVuY3Rpb24gaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORyc7XG59XG5cbmZ1bmN0aW9uIGlzUG9zaXRpb25JbkZyYW1lKGZyYW1lKSB7XG4gIHZhciBpc1dpdGhpblZlcnRpY2FsID0gaXNXaXRoaW4oZnJhbWUudG9wLCBmcmFtZS5ib3R0b20pO1xuICB2YXIgaXNXaXRoaW5Ib3Jpem9udGFsID0gaXNXaXRoaW4oZnJhbWUubGVmdCwgZnJhbWUucmlnaHQpO1xuICByZXR1cm4gZnVuY3Rpb24gcnVuKHBvaW50KSB7XG4gICAgcmV0dXJuIGlzV2l0aGluVmVydGljYWwocG9pbnQueSkgJiYgaXNXaXRoaW5Ib3Jpem9udGFsKHBvaW50LngpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRIYXNPdmVybGFwKGZpcnN0LCBzZWNvbmQpIHtcbiAgcmV0dXJuIGZpcnN0LmxlZnQgPCBzZWNvbmQucmlnaHQgJiYgZmlyc3QucmlnaHQgPiBzZWNvbmQubGVmdCAmJiBmaXJzdC50b3AgPCBzZWNvbmQuYm90dG9tICYmIGZpcnN0LmJvdHRvbSA+IHNlY29uZC50b3A7XG59XG5cbmZ1bmN0aW9uIGdldEZ1cnRoZXN0QXdheShfcmVmKSB7XG4gIHZhciBwYWdlQm9yZGVyQm94ID0gX3JlZi5wYWdlQm9yZGVyQm94LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBjYW5kaWRhdGVzID0gX3JlZi5jYW5kaWRhdGVzO1xuICB2YXIgc3RhcnRDZW50ZXIgPSBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3guY2VudGVyO1xuICB2YXIgc29ydGVkID0gY2FuZGlkYXRlcy5tYXAoZnVuY3Rpb24gKGNhbmRpZGF0ZSkge1xuICAgIHZhciBheGlzID0gY2FuZGlkYXRlLmF4aXM7XG4gICAgdmFyIHRhcmdldCA9IHBhdGNoKGNhbmRpZGF0ZS5heGlzLmxpbmUsIHBhZ2VCb3JkZXJCb3guY2VudGVyW2F4aXMubGluZV0sIGNhbmRpZGF0ZS5wYWdlLmJvcmRlckJveC5jZW50ZXJbYXhpcy5jcm9zc0F4aXNMaW5lXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBjYW5kaWRhdGUuZGVzY3JpcHRvci5pZCxcbiAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZShzdGFydENlbnRlciwgdGFyZ2V0KVxuICAgIH07XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5kaXN0YW5jZSAtIGEuZGlzdGFuY2U7XG4gIH0pO1xuICByZXR1cm4gc29ydGVkWzBdID8gc29ydGVkWzBdLmlkIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0RHJvcHBhYmxlT3ZlciQxKF9yZWYyKSB7XG4gIHZhciBwYWdlQm9yZGVyQm94ID0gX3JlZjIucGFnZUJvcmRlckJveCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYyLmRyYWdnYWJsZSxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmMi5kcm9wcGFibGVzO1xuICB2YXIgY2FuZGlkYXRlcyA9IHRvRHJvcHBhYmxlTGlzdChkcm9wcGFibGVzKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoIWl0ZW0uaXNFbmFibGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGFjdGl2ZSA9IGl0ZW0uc3ViamVjdC5hY3RpdmU7XG5cbiAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghZ2V0SGFzT3ZlcmxhcChwYWdlQm9yZGVyQm94LCBhY3RpdmUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGlzUG9zaXRpb25JbkZyYW1lKGFjdGl2ZSkocGFnZUJvcmRlckJveC5jZW50ZXIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgYXhpcyA9IGl0ZW0uYXhpcztcbiAgICB2YXIgY2hpbGRDZW50ZXIgPSBhY3RpdmUuY2VudGVyW2F4aXMuY3Jvc3NBeGlzTGluZV07XG4gICAgdmFyIGNyb3NzQXhpc1N0YXJ0ID0gcGFnZUJvcmRlckJveFtheGlzLmNyb3NzQXhpc1N0YXJ0XTtcbiAgICB2YXIgY3Jvc3NBeGlzRW5kID0gcGFnZUJvcmRlckJveFtheGlzLmNyb3NzQXhpc0VuZF07XG4gICAgdmFyIGlzQ29udGFpbmVkID0gaXNXaXRoaW4oYWN0aXZlW2F4aXMuY3Jvc3NBeGlzU3RhcnRdLCBhY3RpdmVbYXhpcy5jcm9zc0F4aXNFbmRdKTtcbiAgICB2YXIgaXNTdGFydENvbnRhaW5lZCA9IGlzQ29udGFpbmVkKGNyb3NzQXhpc1N0YXJ0KTtcbiAgICB2YXIgaXNFbmRDb250YWluZWQgPSBpc0NvbnRhaW5lZChjcm9zc0F4aXNFbmQpO1xuXG4gICAgaWYgKCFpc1N0YXJ0Q29udGFpbmVkICYmICFpc0VuZENvbnRhaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlzU3RhcnRDb250YWluZWQpIHtcbiAgICAgIHJldHVybiBjcm9zc0F4aXNTdGFydCA8IGNoaWxkQ2VudGVyO1xuICAgIH1cblxuICAgIHJldHVybiBjcm9zc0F4aXNFbmQgPiBjaGlsZENlbnRlcjtcbiAgfSk7XG5cbiAgaWYgKCFjYW5kaWRhdGVzLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNhbmRpZGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZXNbMF0uZGVzY3JpcHRvci5pZDtcbiAgfVxuXG4gIHJldHVybiBnZXRGdXJ0aGVzdEF3YXkoe1xuICAgIHBhZ2VCb3JkZXJCb3g6IHBhZ2VCb3JkZXJCb3gsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgY2FuZGlkYXRlczogY2FuZGlkYXRlc1xuICB9KTtcbn1cblxudmFyIG9mZnNldFJlY3RCeVBvc2l0aW9uID0gZnVuY3Rpb24gb2Zmc2V0UmVjdEJ5UG9zaXRpb24ocmVjdCwgcG9pbnQpIHtcbiAgcmV0dXJuIGdldFJlY3Qob2Zmc2V0QnlQb3NpdGlvbihyZWN0LCBwb2ludCkpO1xufTtcblxudmFyIHdpdGhEcm9wcGFibGVTY3JvbGwgPSAoZnVuY3Rpb24gKGRyb3BwYWJsZSwgYXJlYSkge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHJldHVybiBhcmVhO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFJlY3RCeVBvc2l0aW9uKGFyZWEsIGZyYW1lLnNjcm9sbC5kaWZmLnZhbHVlKTtcbn0pO1xuXG5mdW5jdGlvbiBnZXRJc0Rpc3BsYWNlZChfcmVmKSB7XG4gIHZhciBkaXNwbGFjZWQgPSBfcmVmLmRpc3BsYWNlZCxcbiAgICAgIGlkID0gX3JlZi5pZDtcbiAgcmV0dXJuIEJvb2xlYW4oZGlzcGxhY2VkLnZpc2libGVbaWRdIHx8IGRpc3BsYWNlZC5pbnZpc2libGVbaWRdKTtcbn1cblxuZnVuY3Rpb24gYXRJbmRleChfcmVmKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGNsb3Nlc3QgPSBfcmVmLmNsb3Nlc3QsXG4gICAgICBpbkhvbWVMaXN0ID0gX3JlZi5pbkhvbWVMaXN0O1xuXG4gIGlmICghY2xvc2VzdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFpbkhvbWVMaXN0KSB7XG4gICAgcmV0dXJuIGNsb3Nlc3QuZGVzY3JpcHRvci5pbmRleDtcbiAgfVxuXG4gIGlmIChjbG9zZXN0LmRlc2NyaXB0b3IuaW5kZXggPiBkcmFnZ2FibGUuZGVzY3JpcHRvci5pbmRleCkge1xuICAgIHJldHVybiBjbG9zZXN0LmRlc2NyaXB0b3IuaW5kZXggLSAxO1xuICB9XG5cbiAgcmV0dXJuIGNsb3Nlc3QuZGVzY3JpcHRvci5pbmRleDtcbn1cblxudmFyIGdldFJlb3JkZXJJbXBhY3QgPSAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciB0YXJnZXRSZWN0ID0gX3JlZjIucGFnZUJvcmRlckJveFdpdGhEcm9wcGFibGVTY3JvbGwsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmMi5kcmFnZ2FibGUsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYyLmRlc3RpbmF0aW9uLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmMi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGxhc3QgPSBfcmVmMi5sYXN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmMi52aWV3cG9ydCxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmMi5hZnRlckNyaXRpY2FsO1xuICB2YXIgYXhpcyA9IGRlc3RpbmF0aW9uLmF4aXM7XG4gIHZhciBkaXNwbGFjZWRCeSA9IGdldERpc3BsYWNlZEJ5KGRlc3RpbmF0aW9uLmF4aXMsIGRyYWdnYWJsZS5kaXNwbGFjZUJ5KTtcbiAgdmFyIGRpc3BsYWNlbWVudCA9IGRpc3BsYWNlZEJ5LnZhbHVlO1xuICB2YXIgdGFyZ2V0U3RhcnQgPSB0YXJnZXRSZWN0W2F4aXMuc3RhcnRdO1xuICB2YXIgdGFyZ2V0RW5kID0gdGFyZ2V0UmVjdFtheGlzLmVuZF07XG4gIHZhciB3aXRob3V0RHJhZ2dpbmcgPSByZW1vdmVEcmFnZ2FibGVGcm9tTGlzdChkcmFnZ2FibGUsIGluc2lkZURlc3RpbmF0aW9uKTtcbiAgdmFyIGNsb3Nlc3QgPSBmaW5kKHdpdGhvdXREcmFnZ2luZywgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmFyIGlkID0gY2hpbGQuZGVzY3JpcHRvci5pZDtcbiAgICB2YXIgY2hpbGRDZW50ZXIgPSBjaGlsZC5wYWdlLmJvcmRlckJveC5jZW50ZXJbYXhpcy5saW5lXTtcbiAgICB2YXIgZGlkU3RhcnRBZnRlckNyaXRpY2FsJDEgPSBkaWRTdGFydEFmdGVyQ3JpdGljYWwoaWQsIGFmdGVyQ3JpdGljYWwpO1xuICAgIHZhciBpc0Rpc3BsYWNlZCA9IGdldElzRGlzcGxhY2VkKHtcbiAgICAgIGRpc3BsYWNlZDogbGFzdCxcbiAgICAgIGlkOiBpZFxuICAgIH0pO1xuXG4gICAgaWYgKGRpZFN0YXJ0QWZ0ZXJDcml0aWNhbCQxKSB7XG4gICAgICBpZiAoaXNEaXNwbGFjZWQpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldEVuZCA8PSBjaGlsZENlbnRlcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldFN0YXJ0IDwgY2hpbGRDZW50ZXIgLSBkaXNwbGFjZW1lbnQ7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGxhY2VkKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0RW5kIDw9IGNoaWxkQ2VudGVyICsgZGlzcGxhY2VtZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRTdGFydCA8IGNoaWxkQ2VudGVyO1xuICB9KTtcbiAgdmFyIG5ld0luZGV4ID0gYXRJbmRleCh7XG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgY2xvc2VzdDogY2xvc2VzdCxcbiAgICBpbkhvbWVMaXN0OiBpc0hvbWVPZihkcmFnZ2FibGUsIGRlc3RpbmF0aW9uKVxuICB9KTtcbiAgcmV0dXJuIGNhbGN1bGF0ZVJlb3JkZXJJbXBhY3Qoe1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGxhc3Q6IGxhc3QsXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGluZGV4OiBuZXdJbmRleFxuICB9KTtcbn0pO1xuXG52YXIgY29tYmluZVRocmVzaG9sZERpdmlzb3IgPSA0O1xudmFyIGdldENvbWJpbmVJbXBhY3QgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgdGFyZ2V0UmVjdCA9IF9yZWYucGFnZUJvcmRlckJveFdpdGhEcm9wcGFibGVTY3JvbGwsXG4gICAgICBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbiA9IF9yZWYuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuXG4gIGlmICghZGVzdGluYXRpb24uaXNDb21iaW5lRW5hYmxlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGF4aXMgPSBkZXN0aW5hdGlvbi5heGlzO1xuICB2YXIgZGlzcGxhY2VkQnkgPSBnZXREaXNwbGFjZWRCeShkZXN0aW5hdGlvbi5heGlzLCBkcmFnZ2FibGUuZGlzcGxhY2VCeSk7XG4gIHZhciBkaXNwbGFjZW1lbnQgPSBkaXNwbGFjZWRCeS52YWx1ZTtcbiAgdmFyIHRhcmdldFN0YXJ0ID0gdGFyZ2V0UmVjdFtheGlzLnN0YXJ0XTtcbiAgdmFyIHRhcmdldEVuZCA9IHRhcmdldFJlY3RbYXhpcy5lbmRdO1xuICB2YXIgd2l0aG91dERyYWdnaW5nID0gcmVtb3ZlRHJhZ2dhYmxlRnJvbUxpc3QoZHJhZ2dhYmxlLCBpbnNpZGVEZXN0aW5hdGlvbik7XG4gIHZhciBjb21iaW5lV2l0aCA9IGZpbmQod2l0aG91dERyYWdnaW5nLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICB2YXIgaWQgPSBjaGlsZC5kZXNjcmlwdG9yLmlkO1xuICAgIHZhciBjaGlsZFJlY3QgPSBjaGlsZC5wYWdlLmJvcmRlckJveDtcbiAgICB2YXIgY2hpbGRTaXplID0gY2hpbGRSZWN0W2F4aXMuc2l6ZV07XG4gICAgdmFyIHRocmVzaG9sZCA9IGNoaWxkU2l6ZSAvIGNvbWJpbmVUaHJlc2hvbGREaXZpc29yO1xuICAgIHZhciBkaWRTdGFydEFmdGVyQ3JpdGljYWwkMSA9IGRpZFN0YXJ0QWZ0ZXJDcml0aWNhbChpZCwgYWZ0ZXJDcml0aWNhbCk7XG4gICAgdmFyIGlzRGlzcGxhY2VkID0gZ2V0SXNEaXNwbGFjZWQoe1xuICAgICAgZGlzcGxhY2VkOiBwcmV2aW91c0ltcGFjdC5kaXNwbGFjZWQsXG4gICAgICBpZDogaWRcbiAgICB9KTtcblxuICAgIGlmIChkaWRTdGFydEFmdGVyQ3JpdGljYWwkMSkge1xuICAgICAgaWYgKGlzRGlzcGxhY2VkKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRFbmQgPiBjaGlsZFJlY3RbYXhpcy5zdGFydF0gKyB0aHJlc2hvbGQgJiYgdGFyZ2V0RW5kIDwgY2hpbGRSZWN0W2F4aXMuZW5kXSAtIHRocmVzaG9sZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldFN0YXJ0ID4gY2hpbGRSZWN0W2F4aXMuc3RhcnRdIC0gZGlzcGxhY2VtZW50ICsgdGhyZXNob2xkICYmIHRhcmdldFN0YXJ0IDwgY2hpbGRSZWN0W2F4aXMuZW5kXSAtIGRpc3BsYWNlbWVudCAtIHRocmVzaG9sZDtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwbGFjZWQpIHtcbiAgICAgIHJldHVybiB0YXJnZXRFbmQgPiBjaGlsZFJlY3RbYXhpcy5zdGFydF0gKyBkaXNwbGFjZW1lbnQgKyB0aHJlc2hvbGQgJiYgdGFyZ2V0RW5kIDwgY2hpbGRSZWN0W2F4aXMuZW5kXSArIGRpc3BsYWNlbWVudCAtIHRocmVzaG9sZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0U3RhcnQgPiBjaGlsZFJlY3RbYXhpcy5zdGFydF0gKyB0aHJlc2hvbGQgJiYgdGFyZ2V0U3RhcnQgPCBjaGlsZFJlY3RbYXhpcy5lbmRdIC0gdGhyZXNob2xkO1xuICB9KTtcblxuICBpZiAoIWNvbWJpbmVXaXRoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaW1wYWN0ID0ge1xuICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICBkaXNwbGFjZWQ6IHByZXZpb3VzSW1wYWN0LmRpc3BsYWNlZCxcbiAgICBhdDoge1xuICAgICAgdHlwZTogJ0NPTUJJTkUnLFxuICAgICAgY29tYmluZToge1xuICAgICAgICBkcmFnZ2FibGVJZDogY29tYmluZVdpdGguZGVzY3JpcHRvci5pZCxcbiAgICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWRcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBpbXBhY3Q7XG59KTtcblxudmFyIGdldERyYWdJbXBhY3QgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHBhZ2VPZmZzZXQgPSBfcmVmLnBhZ2VPZmZzZXQsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzID0gX3JlZi5kcm9wcGFibGVzLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcbiAgdmFyIHBhZ2VCb3JkZXJCb3ggPSBvZmZzZXRSZWN0QnlQb3NpdGlvbihkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3gsIHBhZ2VPZmZzZXQpO1xuICB2YXIgZGVzdGluYXRpb25JZCA9IGdldERyb3BwYWJsZU92ZXIkMSh7XG4gICAgcGFnZUJvcmRlckJveDogcGFnZUJvcmRlckJveCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcm9wcGFibGVzOiBkcm9wcGFibGVzXG4gIH0pO1xuXG4gIGlmICghZGVzdGluYXRpb25JZCkge1xuICAgIHJldHVybiBub0ltcGFjdDtcbiAgfVxuXG4gIHZhciBkZXN0aW5hdGlvbiA9IGRyb3BwYWJsZXNbZGVzdGluYXRpb25JZF07XG4gIHZhciBpbnNpZGVEZXN0aW5hdGlvbiA9IGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUoZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCwgZHJhZ2dhYmxlcyk7XG4gIHZhciBwYWdlQm9yZGVyQm94V2l0aERyb3BwYWJsZVNjcm9sbCA9IHdpdGhEcm9wcGFibGVTY3JvbGwoZGVzdGluYXRpb24sIHBhZ2VCb3JkZXJCb3gpO1xuICByZXR1cm4gZ2V0Q29tYmluZUltcGFjdCh7XG4gICAgcGFnZUJvcmRlckJveFdpdGhEcm9wcGFibGVTY3JvbGw6IHBhZ2VCb3JkZXJCb3hXaXRoRHJvcHBhYmxlU2Nyb2xsLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIGFmdGVyQ3JpdGljYWw6IGFmdGVyQ3JpdGljYWxcbiAgfSkgfHwgZ2V0UmVvcmRlckltcGFjdCh7XG4gICAgcGFnZUJvcmRlckJveFdpdGhEcm9wcGFibGVTY3JvbGw6IHBhZ2VCb3JkZXJCb3hXaXRoRHJvcHBhYmxlU2Nyb2xsLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgbGFzdDogcHJldmlvdXNJbXBhY3QuZGlzcGxhY2VkLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xufSk7XG5cbnZhciBwYXRjaERyb3BwYWJsZU1hcCA9IChmdW5jdGlvbiAoZHJvcHBhYmxlcywgdXBkYXRlZCkge1xuICB2YXIgX2V4dGVuZHMyO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlcywgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbdXBkYXRlZC5kZXNjcmlwdG9yLmlkXSA9IHVwZGF0ZWQsIF9leHRlbmRzMikpO1xufSk7XG5cbnZhciBjbGVhclVudXNlZFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gY2xlYXJVbnVzZWRQbGFjZWhvbGRlcihfcmVmKSB7XG4gIHZhciBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmLmRyb3BwYWJsZXM7XG4gIHZhciBsYXN0ID0gd2hhdElzRHJhZ2dlZE92ZXIocHJldmlvdXNJbXBhY3QpO1xuICB2YXIgbm93ID0gd2hhdElzRHJhZ2dlZE92ZXIoaW1wYWN0KTtcblxuICBpZiAoIWxhc3QpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlcztcbiAgfVxuXG4gIGlmIChsYXN0ID09PSBub3cpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlcztcbiAgfVxuXG4gIHZhciBsYXN0RHJvcHBhYmxlID0gZHJvcHBhYmxlc1tsYXN0XTtcblxuICBpZiAoIWxhc3REcm9wcGFibGUuc3ViamVjdC53aXRoUGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlcztcbiAgfVxuXG4gIHZhciB1cGRhdGVkID0gcmVtb3ZlUGxhY2Vob2xkZXIobGFzdERyb3BwYWJsZSk7XG4gIHJldHVybiBwYXRjaERyb3BwYWJsZU1hcChkcm9wcGFibGVzLCB1cGRhdGVkKTtcbn07XG5cbnZhciByZWNvbXB1dGVQbGFjZWhvbGRlcnMgPSAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmMi5kcmFnZ2FibGUsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZjIuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmMi5kcm9wcGFibGVzLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmMi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIGltcGFjdCA9IF9yZWYyLmltcGFjdDtcbiAgdmFyIGNsZWFuZWQgPSBjbGVhclVudXNlZFBsYWNlaG9sZGVyKHtcbiAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3QsXG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJvcHBhYmxlczogZHJvcHBhYmxlc1xuICB9KTtcbiAgdmFyIGlzT3ZlciA9IHdoYXRJc0RyYWdnZWRPdmVyKGltcGFjdCk7XG5cbiAgaWYgKCFpc092ZXIpIHtcbiAgICByZXR1cm4gY2xlYW5lZDtcbiAgfVxuXG4gIHZhciBkcm9wcGFibGUgPSBkcm9wcGFibGVzW2lzT3Zlcl07XG5cbiAgaWYgKGlzSG9tZU9mKGRyYWdnYWJsZSwgZHJvcHBhYmxlKSkge1xuICAgIHJldHVybiBjbGVhbmVkO1xuICB9XG5cbiAgaWYgKGRyb3BwYWJsZS5zdWJqZWN0LndpdGhQbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBjbGVhbmVkO1xuICB9XG5cbiAgdmFyIHBhdGNoZWQgPSBhZGRQbGFjZWhvbGRlcihkcm9wcGFibGUsIGRyYWdnYWJsZSwgZHJhZ2dhYmxlcyk7XG4gIHJldHVybiBwYXRjaERyb3BwYWJsZU1hcChjbGVhbmVkLCBwYXRjaGVkKTtcbn0pO1xuXG52YXIgdXBkYXRlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBmb3JjZWRDbGllbnRTZWxlY3Rpb24gPSBfcmVmLmNsaWVudFNlbGVjdGlvbixcbiAgICAgIGZvcmNlZERpbWVuc2lvbnMgPSBfcmVmLmRpbWVuc2lvbnMsXG4gICAgICBmb3JjZWRWaWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBmb3JjZWRJbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIHNjcm9sbEp1bXBSZXF1ZXN0ID0gX3JlZi5zY3JvbGxKdW1wUmVxdWVzdDtcbiAgdmFyIHZpZXdwb3J0ID0gZm9yY2VkVmlld3BvcnQgfHwgc3RhdGUudmlld3BvcnQ7XG4gIHZhciBkaW1lbnNpb25zID0gZm9yY2VkRGltZW5zaW9ucyB8fCBzdGF0ZS5kaW1lbnNpb25zO1xuICB2YXIgY2xpZW50U2VsZWN0aW9uID0gZm9yY2VkQ2xpZW50U2VsZWN0aW9uIHx8IHN0YXRlLmN1cnJlbnQuY2xpZW50LnNlbGVjdGlvbjtcbiAgdmFyIG9mZnNldCA9IHN1YnRyYWN0KGNsaWVudFNlbGVjdGlvbiwgc3RhdGUuaW5pdGlhbC5jbGllbnQuc2VsZWN0aW9uKTtcbiAgdmFyIGNsaWVudCA9IHtcbiAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICBzZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICBib3JkZXJCb3hDZW50ZXI6IGFkZChzdGF0ZS5pbml0aWFsLmNsaWVudC5ib3JkZXJCb3hDZW50ZXIsIG9mZnNldClcbiAgfTtcbiAgdmFyIHBhZ2UgPSB7XG4gICAgc2VsZWN0aW9uOiBhZGQoY2xpZW50LnNlbGVjdGlvbiwgdmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQpLFxuICAgIGJvcmRlckJveENlbnRlcjogYWRkKGNsaWVudC5ib3JkZXJCb3hDZW50ZXIsIHZpZXdwb3J0LnNjcm9sbC5jdXJyZW50KSxcbiAgICBvZmZzZXQ6IGFkZChjbGllbnQub2Zmc2V0LCB2aWV3cG9ydC5zY3JvbGwuZGlmZi52YWx1ZSlcbiAgfTtcbiAgdmFyIGN1cnJlbnQgPSB7XG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgcGFnZTogcGFnZVxuICB9O1xuXG4gIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIHBoYXNlOiAnQ09MTEVDVElORydcbiAgICB9LCBzdGF0ZSwge1xuICAgICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgIGN1cnJlbnQ6IGN1cnJlbnRcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBkcmFnZ2FibGUgPSBkaW1lbnNpb25zLmRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbiAgdmFyIG5ld0ltcGFjdCA9IGZvcmNlZEltcGFjdCB8fCBnZXREcmFnSW1wYWN0KHtcbiAgICBwYWdlT2Zmc2V0OiBwYWdlLm9mZnNldCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcmFnZ2FibGVzOiBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgZHJvcHBhYmxlczogZGltZW5zaW9ucy5kcm9wcGFibGVzLFxuICAgIHByZXZpb3VzSW1wYWN0OiBzdGF0ZS5pbXBhY3QsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGFmdGVyQ3JpdGljYWw6IHN0YXRlLmFmdGVyQ3JpdGljYWxcbiAgfSk7XG4gIHZhciB3aXRoVXBkYXRlZFBsYWNlaG9sZGVycyA9IHJlY29tcHV0ZVBsYWNlaG9sZGVycyh7XG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgaW1wYWN0OiBuZXdJbXBhY3QsXG4gICAgcHJldmlvdXNJbXBhY3Q6IHN0YXRlLmltcGFjdCxcbiAgICBkcmFnZ2FibGVzOiBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgZHJvcHBhYmxlczogZGltZW5zaW9ucy5kcm9wcGFibGVzXG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICBjdXJyZW50OiBjdXJyZW50LFxuICAgIGRpbWVuc2lvbnM6IHtcbiAgICAgIGRyYWdnYWJsZXM6IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZXM6IHdpdGhVcGRhdGVkUGxhY2Vob2xkZXJzXG4gICAgfSxcbiAgICBpbXBhY3Q6IG5ld0ltcGFjdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IHNjcm9sbEp1bXBSZXF1ZXN0IHx8IG51bGwsXG4gICAgZm9yY2VTaG91bGRBbmltYXRlOiBzY3JvbGxKdW1wUmVxdWVzdCA/IGZhbHNlIDogbnVsbFxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbmZ1bmN0aW9uIGdldERyYWdnYWJsZXMkMShpZHMsIGRyYWdnYWJsZXMpIHtcbiAgcmV0dXJuIGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIGRyYWdnYWJsZXNbaWRdO1xuICB9KTtcbn1cblxudmFyIHJlY29tcHV0ZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgZm9yY2VTaG91bGRBbmltYXRlID0gX3JlZi5mb3JjZVNob3VsZEFuaW1hdGU7XG4gIHZhciBsYXN0ID0gaW1wYWN0LmRpc3BsYWNlZDtcbiAgdmFyIGFmdGVyRHJhZ2dpbmcgPSBnZXREcmFnZ2FibGVzJDEobGFzdC5hbGwsIGRyYWdnYWJsZXMpO1xuICB2YXIgZGlzcGxhY2VkID0gZ2V0RGlzcGxhY2VtZW50R3JvdXBzKHtcbiAgICBhZnRlckRyYWdnaW5nOiBhZnRlckRyYWdnaW5nLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBkaXNwbGFjZWRCeTogaW1wYWN0LmRpc3BsYWNlZEJ5LFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZSxcbiAgICBmb3JjZVNob3VsZEFuaW1hdGU6IGZvcmNlU2hvdWxkQW5pbWF0ZSxcbiAgICBsYXN0OiBsYXN0XG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGltcGFjdCwge1xuICAgIGRpc3BsYWNlZDogZGlzcGxhY2VkXG4gIH0pO1xufSk7XG5cbnZhciBnZXRDbGllbnRCb3JkZXJCb3hDZW50ZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGltcGFjdCA9IF9yZWYuaW1wYWN0LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkcm9wcGFibGUgPSBfcmVmLmRyb3BwYWJsZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuICB2YXIgcGFnZUJvcmRlckJveENlbnRlciA9IGdldFBhZ2VCb3JkZXJCb3hDZW50ZXJGcm9tSW1wYWN0KHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZTogZHJvcHBhYmxlLFxuICAgIGFmdGVyQ3JpdGljYWw6IGFmdGVyQ3JpdGljYWxcbiAgfSk7XG4gIHJldHVybiBnZXRDbGllbnRGcm9tUGFnZUJvcmRlckJveENlbnRlcih7XG4gICAgcGFnZUJvcmRlckJveENlbnRlcjogcGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfSk7XG59KTtcblxudmFyIHJlZnJlc2hTbmFwID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBmb3JjZWREaW1lbnNpb25zID0gX3JlZi5kaW1lbnNpb25zLFxuICAgICAgZm9yY2VkVmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuICAhKHN0YXRlLm1vdmVtZW50TW9kZSA9PT0gJ1NOQVAnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgbmVlZHNWaXNpYmlsaXR5Q2hlY2sgPSBzdGF0ZS5pbXBhY3Q7XG4gIHZhciB2aWV3cG9ydCA9IGZvcmNlZFZpZXdwb3J0IHx8IHN0YXRlLnZpZXdwb3J0O1xuICB2YXIgZGltZW5zaW9ucyA9IGZvcmNlZERpbWVuc2lvbnMgfHwgc3RhdGUuZGltZW5zaW9ucztcbiAgdmFyIGRyYWdnYWJsZXMgPSBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzID0gZGltZW5zaW9ucy5kcm9wcGFibGVzO1xuICB2YXIgZHJhZ2dhYmxlID0gZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuICB2YXIgaXNPdmVyID0gd2hhdElzRHJhZ2dlZE92ZXIobmVlZHNWaXNpYmlsaXR5Q2hlY2spO1xuICAhaXNPdmVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnTXVzdCBiZSBvdmVyIGEgZGVzdGluYXRpb24gaW4gU05BUCBtb3ZlbWVudCBtb2RlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZGVzdGluYXRpb24gPSBkcm9wcGFibGVzW2lzT3Zlcl07XG4gIHZhciBpbXBhY3QgPSByZWNvbXB1dGUoe1xuICAgIGltcGFjdDogbmVlZHNWaXNpYmlsaXR5Q2hlY2ssXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzXG4gIH0pO1xuICB2YXIgY2xpZW50U2VsZWN0aW9uID0gZ2V0Q2xpZW50Qm9yZGVyQm94Q2VudGVyKHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcm9wcGFibGU6IGRlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGFmdGVyQ3JpdGljYWw6IHN0YXRlLmFmdGVyQ3JpdGljYWxcbiAgfSk7XG4gIHJldHVybiB1cGRhdGUoe1xuICAgIGltcGFjdDogaW1wYWN0LFxuICAgIGNsaWVudFNlbGVjdGlvbjogY2xpZW50U2VsZWN0aW9uLFxuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9KTtcbn0pO1xuXG52YXIgZ2V0SG9tZUxvY2F0aW9uID0gKGZ1bmN0aW9uIChkZXNjcmlwdG9yKSB7XG4gIHJldHVybiB7XG4gICAgaW5kZXg6IGRlc2NyaXB0b3IuaW5kZXgsXG4gICAgZHJvcHBhYmxlSWQ6IGRlc2NyaXB0b3IuZHJvcHBhYmxlSWRcbiAgfTtcbn0pO1xuXG52YXIgZ2V0TGlmdEVmZmVjdCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBob21lID0gX3JlZi5ob21lLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIGRpc3BsYWNlZEJ5ID0gZ2V0RGlzcGxhY2VkQnkoaG9tZS5heGlzLCBkcmFnZ2FibGUuZGlzcGxhY2VCeSk7XG4gIHZhciBpbnNpZGVIb21lID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShob21lLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgcmF3SW5kZXggPSBpbnNpZGVIb21lLmluZGV4T2YoZHJhZ2dhYmxlKTtcbiAgIShyYXdJbmRleCAhPT0gLTEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgZHJhZ2dhYmxlIHRvIGJlIGluc2lkZSBob21lIGxpc3QnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBhZnRlckRyYWdnaW5nID0gaW5zaWRlSG9tZS5zbGljZShyYXdJbmRleCArIDEpO1xuICB2YXIgZWZmZWN0ZWQgPSBhZnRlckRyYWdnaW5nLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGl0ZW0pIHtcbiAgICBwcmV2aW91c1tpdGVtLmRlc2NyaXB0b3IuaWRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcHJldmlvdXM7XG4gIH0sIHt9KTtcbiAgdmFyIGFmdGVyQ3JpdGljYWwgPSB7XG4gICAgaW5WaXJ0dWFsTGlzdDogaG9tZS5kZXNjcmlwdG9yLm1vZGUgPT09ICd2aXJ0dWFsJyxcbiAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgZWZmZWN0ZWQ6IGVmZmVjdGVkXG4gIH07XG4gIHZhciBkaXNwbGFjZWQgPSBnZXREaXNwbGFjZW1lbnRHcm91cHMoe1xuICAgIGFmdGVyRHJhZ2dpbmc6IGFmdGVyRHJhZ2dpbmcsXG4gICAgZGVzdGluYXRpb246IGhvbWUsXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGxhc3Q6IG51bGwsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LmZyYW1lLFxuICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogZmFsc2VcbiAgfSk7XG4gIHZhciBpbXBhY3QgPSB7XG4gICAgZGlzcGxhY2VkOiBkaXNwbGFjZWQsXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGF0OiB7XG4gICAgICB0eXBlOiAnUkVPUkRFUicsXG4gICAgICBkZXN0aW5hdGlvbjogZ2V0SG9tZUxvY2F0aW9uKGRyYWdnYWJsZS5kZXNjcmlwdG9yKVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH07XG59KTtcblxudmFyIHBhdGNoRGltZW5zaW9uTWFwID0gKGZ1bmN0aW9uIChkaW1lbnNpb25zLCB1cGRhdGVkKSB7XG4gIHJldHVybiB7XG4gICAgZHJhZ2dhYmxlczogZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZXM6IHBhdGNoRHJvcHBhYmxlTWFwKGRpbWVuc2lvbnMuZHJvcHBhYmxlcywgdXBkYXRlZClcbiAgfTtcbn0pO1xuXG52YXIgc3RhcnQgPSBmdW5jdGlvbiBzdGFydChrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59O1xudmFyIGZpbmlzaCA9IGZ1bmN0aW9uIGZpbmlzaChrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59O1xuXG52YXIgb2Zmc2V0RHJhZ2dhYmxlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIG9mZnNldCQxID0gX3JlZi5vZmZzZXQsXG4gICAgICBpbml0aWFsV2luZG93U2Nyb2xsID0gX3JlZi5pbml0aWFsV2luZG93U2Nyb2xsO1xuICB2YXIgY2xpZW50ID0gb2Zmc2V0KGRyYWdnYWJsZS5jbGllbnQsIG9mZnNldCQxKTtcbiAgdmFyIHBhZ2UgPSB3aXRoU2Nyb2xsKGNsaWVudCwgaW5pdGlhbFdpbmRvd1Njcm9sbCk7XG5cbiAgdmFyIG1vdmVkID0gX2V4dGVuZHMoe30sIGRyYWdnYWJsZSwge1xuICAgIHBsYWNlaG9sZGVyOiBfZXh0ZW5kcyh7fSwgZHJhZ2dhYmxlLnBsYWNlaG9sZGVyLCB7XG4gICAgICBjbGllbnQ6IGNsaWVudFxuICAgIH0pLFxuICAgIGNsaWVudDogY2xpZW50LFxuICAgIHBhZ2U6IHBhZ2VcbiAgfSk7XG5cbiAgcmV0dXJuIG1vdmVkO1xufSk7XG5cbnZhciBnZXRGcmFtZSA9IChmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcbiAgIWZyYW1lID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgRHJvcHBhYmxlIHRvIGhhdmUgYSBmcmFtZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGZyYW1lO1xufSk7XG5cbnZhciBhZGp1c3RBZGRpdGlvbnNGb3JTY3JvbGxDaGFuZ2VzID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBhZGRpdGlvbnMgPSBfcmVmLmFkZGl0aW9ucyxcbiAgICAgIHVwZGF0ZWREcm9wcGFibGVzID0gX3JlZi51cGRhdGVkRHJvcHBhYmxlcyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIHdpbmRvd1Njcm9sbENoYW5nZSA9IHZpZXdwb3J0LnNjcm9sbC5kaWZmLnZhbHVlO1xuICByZXR1cm4gYWRkaXRpb25zLm1hcChmdW5jdGlvbiAoZHJhZ2dhYmxlKSB7XG4gICAgdmFyIGRyb3BwYWJsZUlkID0gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWQ7XG4gICAgdmFyIG1vZGlmaWVkID0gdXBkYXRlZERyb3BwYWJsZXNbZHJvcHBhYmxlSWRdO1xuICAgIHZhciBmcmFtZSA9IGdldEZyYW1lKG1vZGlmaWVkKTtcbiAgICB2YXIgZHJvcHBhYmxlU2Nyb2xsQ2hhbmdlID0gZnJhbWUuc2Nyb2xsLmRpZmYudmFsdWU7XG4gICAgdmFyIHRvdGFsQ2hhbmdlID0gYWRkKHdpbmRvd1Njcm9sbENoYW5nZSwgZHJvcHBhYmxlU2Nyb2xsQ2hhbmdlKTtcbiAgICB2YXIgbW92ZWQgPSBvZmZzZXREcmFnZ2FibGUoe1xuICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICBvZmZzZXQ6IHRvdGFsQ2hhbmdlLFxuICAgICAgaW5pdGlhbFdpbmRvd1Njcm9sbDogdmlld3BvcnQuc2Nyb2xsLmluaXRpYWxcbiAgICB9KTtcbiAgICByZXR1cm4gbW92ZWQ7XG4gIH0pO1xufSk7XG5cbnZhciBwdWJsaXNoV2hpbGVEcmFnZ2luZ0luVmlydHVhbCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgcHVibGlzaGVkID0gX3JlZi5wdWJsaXNoZWQ7XG4gIHN0YXJ0KCk7XG4gIHZhciB3aXRoU2Nyb2xsQ2hhbmdlID0gcHVibGlzaGVkLm1vZGlmaWVkLm1hcChmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgdmFyIGV4aXN0aW5nID0gc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW3VwZGF0ZS5kcm9wcGFibGVJZF07XG4gICAgdmFyIHNjcm9sbGVkID0gc2Nyb2xsRHJvcHBhYmxlKGV4aXN0aW5nLCB1cGRhdGUuc2Nyb2xsKTtcbiAgICByZXR1cm4gc2Nyb2xsZWQ7XG4gIH0pO1xuXG4gIHZhciBkcm9wcGFibGVzID0gX2V4dGVuZHMoe30sIHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlcywge30sIHRvRHJvcHBhYmxlTWFwKHdpdGhTY3JvbGxDaGFuZ2UpKTtcblxuICB2YXIgdXBkYXRlZEFkZGl0aW9ucyA9IHRvRHJhZ2dhYmxlTWFwKGFkanVzdEFkZGl0aW9uc0ZvclNjcm9sbENoYW5nZXMoe1xuICAgIGFkZGl0aW9uczogcHVibGlzaGVkLmFkZGl0aW9ucyxcbiAgICB1cGRhdGVkRHJvcHBhYmxlczogZHJvcHBhYmxlcyxcbiAgICB2aWV3cG9ydDogc3RhdGUudmlld3BvcnRcbiAgfSkpO1xuXG4gIHZhciBkcmFnZ2FibGVzID0gX2V4dGVuZHMoe30sIHN0YXRlLmRpbWVuc2lvbnMuZHJhZ2dhYmxlcywge30sIHVwZGF0ZWRBZGRpdGlvbnMpO1xuXG4gIHB1Ymxpc2hlZC5yZW1vdmFscy5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgIGRlbGV0ZSBkcmFnZ2FibGVzW2lkXTtcbiAgfSk7XG4gIHZhciBkaW1lbnNpb25zID0ge1xuICAgIGRyb3BwYWJsZXM6IGRyb3BwYWJsZXMsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlc1xuICB9O1xuICB2YXIgd2FzT3ZlcklkID0gd2hhdElzRHJhZ2dlZE92ZXIoc3RhdGUuaW1wYWN0KTtcbiAgdmFyIHdhc092ZXIgPSB3YXNPdmVySWQgPyBkaW1lbnNpb25zLmRyb3BwYWJsZXNbd2FzT3ZlcklkXSA6IG51bGw7XG4gIHZhciBkcmFnZ2FibGUgPSBkaW1lbnNpb25zLmRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbiAgdmFyIGhvbWUgPSBkaW1lbnNpb25zLmRyb3BwYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJvcHBhYmxlLmlkXTtcblxuICB2YXIgX2dldExpZnRFZmZlY3QgPSBnZXRMaWZ0RWZmZWN0KHtcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBob21lOiBob21lLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgdmlld3BvcnQ6IHN0YXRlLnZpZXdwb3J0XG4gIH0pLFxuICAgICAgb25MaWZ0SW1wYWN0ID0gX2dldExpZnRFZmZlY3QuaW1wYWN0LFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9nZXRMaWZ0RWZmZWN0LmFmdGVyQ3JpdGljYWw7XG5cbiAgdmFyIHByZXZpb3VzSW1wYWN0ID0gd2FzT3ZlciAmJiB3YXNPdmVyLmlzQ29tYmluZUVuYWJsZWQgPyBzdGF0ZS5pbXBhY3QgOiBvbkxpZnRJbXBhY3Q7XG4gIHZhciBpbXBhY3QgPSBnZXREcmFnSW1wYWN0KHtcbiAgICBwYWdlT2Zmc2V0OiBzdGF0ZS5jdXJyZW50LnBhZ2Uub2Zmc2V0LFxuICAgIGRyYWdnYWJsZTogZGltZW5zaW9ucy5kcmFnZ2FibGVzW3N0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZF0sXG4gICAgZHJhZ2dhYmxlczogZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZXM6IGRpbWVuc2lvbnMuZHJvcHBhYmxlcyxcbiAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3QsXG4gICAgdmlld3BvcnQ6IHN0YXRlLnZpZXdwb3J0LFxuICAgIGFmdGVyQ3JpdGljYWw6IGFmdGVyQ3JpdGljYWxcbiAgfSk7XG4gIGZpbmlzaCgpO1xuXG4gIHZhciBkcmFnZ2luZ1N0YXRlID0gX2V4dGVuZHMoe1xuICAgIHBoYXNlOiAnRFJBR0dJTkcnXG4gIH0sIHN0YXRlLCB7XG4gICAgcGhhc2U6ICdEUkFHR0lORycsXG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgb25MaWZ0SW1wYWN0OiBvbkxpZnRJbXBhY3QsXG4gICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsLFxuICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogZmFsc2VcbiAgfSk7XG5cbiAgaWYgKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycpIHtcbiAgICByZXR1cm4gZHJhZ2dpbmdTdGF0ZTtcbiAgfVxuXG4gIHZhciBkcm9wUGVuZGluZyA9IF9leHRlbmRzKHtcbiAgICBwaGFzZTogJ0RST1BfUEVORElORydcbiAgfSwgZHJhZ2dpbmdTdGF0ZSwge1xuICAgIHBoYXNlOiAnRFJPUF9QRU5ESU5HJyxcbiAgICByZWFzb246IHN0YXRlLnJlYXNvbixcbiAgICBpc1dhaXRpbmc6IGZhbHNlXG4gIH0pO1xuXG4gIHJldHVybiBkcm9wUGVuZGluZztcbn0pO1xuXG52YXIgaXNTbmFwcGluZyA9IGZ1bmN0aW9uIGlzU25hcHBpbmcoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLm1vdmVtZW50TW9kZSA9PT0gJ1NOQVAnO1xufTtcblxudmFyIHBvc3REcm9wcGFibGVDaGFuZ2UgPSBmdW5jdGlvbiBwb3N0RHJvcHBhYmxlQ2hhbmdlKHN0YXRlLCB1cGRhdGVkLCBpc0VuYWJsZWRDaGFuZ2luZykge1xuICB2YXIgZGltZW5zaW9ucyA9IHBhdGNoRGltZW5zaW9uTWFwKHN0YXRlLmRpbWVuc2lvbnMsIHVwZGF0ZWQpO1xuXG4gIGlmICghaXNTbmFwcGluZyhzdGF0ZSkgfHwgaXNFbmFibGVkQ2hhbmdpbmcpIHtcbiAgICByZXR1cm4gdXBkYXRlKHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnNcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZWZyZXNoU25hcCh7XG4gICAgc3RhdGU6IHN0YXRlLFxuICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnNcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiByZW1vdmVTY3JvbGxKdW1wUmVxdWVzdChzdGF0ZSkge1xuICBpZiAoc3RhdGUuaXNEcmFnZ2luZyAmJiBzdGF0ZS5tb3ZlbWVudE1vZGUgPT09ICdTTkFQJykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBwaGFzZTogJ0RSQUdHSU5HJ1xuICAgIH0sIHN0YXRlLCB7XG4gICAgICBzY3JvbGxKdW1wUmVxdWVzdDogbnVsbFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG52YXIgaWRsZSA9IHtcbiAgcGhhc2U6ICdJRExFJyxcbiAgY29tcGxldGVkOiBudWxsLFxuICBzaG91bGRGbHVzaDogZmFsc2Vcbn07XG52YXIgcmVkdWNlciA9IChmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgIHN0YXRlID0gaWRsZTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0ZMVVNIJykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgaWRsZSwge1xuICAgICAgc2hvdWxkRmx1c2g6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0lOSVRJQUxfUFVCTElTSCcpIHtcbiAgICAhKHN0YXRlLnBoYXNlID09PSAnSURMRScpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSU5JVElBTF9QVUJMSVNIIG11c3QgY29tZSBhZnRlciBhIElETEUgcGhhc2UnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9hY3Rpb24kcGF5bG9hZCA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICBjcml0aWNhbCA9IF9hY3Rpb24kcGF5bG9hZC5jcml0aWNhbCxcbiAgICAgICAgY2xpZW50U2VsZWN0aW9uID0gX2FjdGlvbiRwYXlsb2FkLmNsaWVudFNlbGVjdGlvbixcbiAgICAgICAgdmlld3BvcnQgPSBfYWN0aW9uJHBheWxvYWQudmlld3BvcnQsXG4gICAgICAgIGRpbWVuc2lvbnMgPSBfYWN0aW9uJHBheWxvYWQuZGltZW5zaW9ucyxcbiAgICAgICAgbW92ZW1lbnRNb2RlID0gX2FjdGlvbiRwYXlsb2FkLm1vdmVtZW50TW9kZTtcbiAgICB2YXIgZHJhZ2dhYmxlID0gZGltZW5zaW9ucy5kcmFnZ2FibGVzW2NyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG4gICAgdmFyIGhvbWUgPSBkaW1lbnNpb25zLmRyb3BwYWJsZXNbY3JpdGljYWwuZHJvcHBhYmxlLmlkXTtcbiAgICB2YXIgY2xpZW50ID0ge1xuICAgICAgc2VsZWN0aW9uOiBjbGllbnRTZWxlY3Rpb24sXG4gICAgICBib3JkZXJCb3hDZW50ZXI6IGRyYWdnYWJsZS5jbGllbnQuYm9yZGVyQm94LmNlbnRlcixcbiAgICAgIG9mZnNldDogb3JpZ2luXG4gICAgfTtcbiAgICB2YXIgaW5pdGlhbCA9IHtcbiAgICAgIGNsaWVudDogY2xpZW50LFxuICAgICAgcGFnZToge1xuICAgICAgICBzZWxlY3Rpb246IGFkZChjbGllbnQuc2VsZWN0aW9uLCB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbCksXG4gICAgICAgIGJvcmRlckJveENlbnRlcjogYWRkKGNsaWVudC5zZWxlY3Rpb24sIHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsKSxcbiAgICAgICAgb2Zmc2V0OiBhZGQoY2xpZW50LnNlbGVjdGlvbiwgdmlld3BvcnQuc2Nyb2xsLmRpZmYudmFsdWUpXG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgaXNXaW5kb3dTY3JvbGxBbGxvd2VkID0gdG9Ecm9wcGFibGVMaXN0KGRpbWVuc2lvbnMuZHJvcHBhYmxlcykuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiAhaXRlbS5pc0ZpeGVkT25QYWdlO1xuICAgIH0pO1xuXG4gICAgdmFyIF9nZXRMaWZ0RWZmZWN0ID0gZ2V0TGlmdEVmZmVjdCh7XG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgIGhvbWU6IGhvbWUsXG4gICAgICBkcmFnZ2FibGVzOiBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgICB9KSxcbiAgICAgICAgaW1wYWN0ID0gX2dldExpZnRFZmZlY3QuaW1wYWN0LFxuICAgICAgICBhZnRlckNyaXRpY2FsID0gX2dldExpZnRFZmZlY3QuYWZ0ZXJDcml0aWNhbDtcblxuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBwaGFzZTogJ0RSQUdHSU5HJyxcbiAgICAgIGlzRHJhZ2dpbmc6IHRydWUsXG4gICAgICBjcml0aWNhbDogY3JpdGljYWwsXG4gICAgICBtb3ZlbWVudE1vZGU6IG1vdmVtZW50TW9kZSxcbiAgICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMsXG4gICAgICBpbml0aWFsOiBpbml0aWFsLFxuICAgICAgY3VycmVudDogaW5pdGlhbCxcbiAgICAgIGlzV2luZG93U2Nyb2xsQWxsb3dlZDogaXNXaW5kb3dTY3JvbGxBbGxvd2VkLFxuICAgICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsLFxuICAgICAgb25MaWZ0SW1wYWN0OiBpbXBhY3QsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgICBzY3JvbGxKdW1wUmVxdWVzdDogbnVsbCxcbiAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0NPTExFQ1RJT05fU1RBUlRJTkcnKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycgfHwgc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ29sbGVjdGlvbiBjYW5ub3Qgc3RhcnQgZnJvbSBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB2YXIgX3Jlc3VsdCA9IF9leHRlbmRzKHtcbiAgICAgIHBoYXNlOiAnQ09MTEVDVElORydcbiAgICB9LCBzdGF0ZSwge1xuICAgICAgcGhhc2U6ICdDT0xMRUNUSU5HJ1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF9yZXN1bHQ7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdQVUJMSVNIX1dISUxFX0RSQUdHSU5HJykge1xuICAgICEoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIlVuZXhwZWN0ZWQgXCIgKyBhY3Rpb24udHlwZSArIFwiIHJlY2VpdmVkIGluIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gcHVibGlzaFdoaWxlRHJhZ2dpbmdJblZpcnR1YWwoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgcHVibGlzaGVkOiBhY3Rpb24ucGF5bG9hZFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnTU9WRScpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIWlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgYWN0aW9uLnR5cGUgKyBcIiBub3QgcGVybWl0dGVkIGluIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX2NsaWVudFNlbGVjdGlvbiA9IGFjdGlvbi5wYXlsb2FkLmNsaWVudDtcblxuICAgIGlmIChpc0VxdWFsKF9jbGllbnRTZWxlY3Rpb24sIHN0YXRlLmN1cnJlbnQuY2xpZW50LnNlbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlKHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGNsaWVudFNlbGVjdGlvbjogX2NsaWVudFNlbGVjdGlvbixcbiAgICAgIGltcGFjdDogaXNTbmFwcGluZyhzdGF0ZSkgPyBzdGF0ZS5pbXBhY3QgOiBudWxsXG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdVUERBVEVfRFJPUFBBQkxFX1NDUk9MTCcpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gcmVtb3ZlU2Nyb2xsSnVtcFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnKSB7XG4gICAgICByZXR1cm4gcmVtb3ZlU2Nyb2xsSnVtcFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cblxuICAgICFpc01vdmVtZW50QWxsb3dlZChzdGF0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGFjdGlvbi50eXBlICsgXCIgbm90IHBlcm1pdHRlZCBpbiBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9hY3Rpb24kcGF5bG9hZDIgPSBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgaWQgPSBfYWN0aW9uJHBheWxvYWQyLmlkLFxuICAgICAgICBuZXdTY3JvbGwgPSBfYWN0aW9uJHBheWxvYWQyLm5ld1Njcm9sbDtcbiAgICB2YXIgdGFyZ2V0ID0gc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW2lkXTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbGVkID0gc2Nyb2xsRHJvcHBhYmxlKHRhcmdldCwgbmV3U2Nyb2xsKTtcbiAgICByZXR1cm4gcG9zdERyb3BwYWJsZUNoYW5nZShzdGF0ZSwgc2Nyb2xsZWQsIGZhbHNlKTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ1VQREFURV9EUk9QUEFCTEVfSVNfRU5BQkxFRCcpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIWlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBdHRlbXB0aW5nIHRvIG1vdmUgaW4gYW4gdW5zdXBwb3J0ZWQgcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfYWN0aW9uJHBheWxvYWQzID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgIF9pZCA9IF9hY3Rpb24kcGF5bG9hZDMuaWQsXG4gICAgICAgIGlzRW5hYmxlZCA9IF9hY3Rpb24kcGF5bG9hZDMuaXNFbmFibGVkO1xuICAgIHZhciBfdGFyZ2V0ID0gc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW19pZF07XG4gICAgIV90YXJnZXQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGZpbmQgRHJvcHBhYmxlW2lkOiBcIiArIF9pZCArIFwiXSB0byB0b2dnbGUgaXRzIGVuYWJsZWQgc3RhdGVcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoX3RhcmdldC5pc0VuYWJsZWQgIT09IGlzRW5hYmxlZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiVHJ5aW5nIHRvIHNldCBkcm9wcGFibGUgaXNFbmFibGVkIHRvIFwiICsgU3RyaW5nKGlzRW5hYmxlZCkgKyBcIlxcbiAgICAgIGJ1dCBpdCBpcyBhbHJlYWR5IFwiICsgU3RyaW5nKF90YXJnZXQuaXNFbmFibGVkKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIHVwZGF0ZWQgPSBfZXh0ZW5kcyh7fSwgX3RhcmdldCwge1xuICAgICAgaXNFbmFibGVkOiBpc0VuYWJsZWRcbiAgICB9KTtcblxuICAgIHJldHVybiBwb3N0RHJvcHBhYmxlQ2hhbmdlKHN0YXRlLCB1cGRhdGVkLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ1VQREFURV9EUk9QUEFCTEVfSVNfQ09NQklORV9FTkFCTEVEJykge1xuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICAhaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkF0dGVtcHRpbmcgdG8gbW92ZSBpbiBhbiB1bnN1cHBvcnRlZCBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9hY3Rpb24kcGF5bG9hZDQgPSBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgX2lkMiA9IF9hY3Rpb24kcGF5bG9hZDQuaWQsXG4gICAgICAgIGlzQ29tYmluZUVuYWJsZWQgPSBfYWN0aW9uJHBheWxvYWQ0LmlzQ29tYmluZUVuYWJsZWQ7XG4gICAgdmFyIF90YXJnZXQyID0gc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW19pZDJdO1xuICAgICFfdGFyZ2V0MiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgZmluZCBEcm9wcGFibGVbaWQ6IFwiICsgX2lkMiArIFwiXSB0byB0b2dnbGUgaXRzIGlzQ29tYmluZUVuYWJsZWQgc3RhdGVcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoX3RhcmdldDIuaXNDb21iaW5lRW5hYmxlZCAhPT0gaXNDb21iaW5lRW5hYmxlZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiVHJ5aW5nIHRvIHNldCBkcm9wcGFibGUgaXNDb21iaW5lRW5hYmxlZCB0byBcIiArIFN0cmluZyhpc0NvbWJpbmVFbmFibGVkKSArIFwiXFxuICAgICAgYnV0IGl0IGlzIGFscmVhZHkgXCIgKyBTdHJpbmcoX3RhcmdldDIuaXNDb21iaW5lRW5hYmxlZCkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBfdXBkYXRlZCA9IF9leHRlbmRzKHt9LCBfdGFyZ2V0Miwge1xuICAgICAgaXNDb21iaW5lRW5hYmxlZDogaXNDb21iaW5lRW5hYmxlZFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBvc3REcm9wcGFibGVDaGFuZ2Uoc3RhdGUsIF91cGRhdGVkLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ01PVkVfQllfV0lORE9XX1NDUk9MTCcpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIWlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgbW92ZSBieSB3aW5kb3cgaW4gcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICFzdGF0ZS5pc1dpbmRvd1Njcm9sbEFsbG93ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdXaW5kb3cgc2Nyb2xsaW5nIGlzIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkIGZvciBmaXhlZCBsaXN0cycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX25ld1Njcm9sbCA9IGFjdGlvbi5wYXlsb2FkLm5ld1Njcm9sbDtcblxuICAgIGlmIChpc0VxdWFsKHN0YXRlLnZpZXdwb3J0LnNjcm9sbC5jdXJyZW50LCBfbmV3U2Nyb2xsKSkge1xuICAgICAgcmV0dXJuIHJlbW92ZVNjcm9sbEp1bXBSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG5cbiAgICB2YXIgX3ZpZXdwb3J0ID0gc2Nyb2xsVmlld3BvcnQoc3RhdGUudmlld3BvcnQsIF9uZXdTY3JvbGwpO1xuXG4gICAgaWYgKGlzU25hcHBpbmcoc3RhdGUpKSB7XG4gICAgICByZXR1cm4gcmVmcmVzaFNuYXAoe1xuICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgIHZpZXdwb3J0OiBfdmlld3BvcnRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGUoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgdmlld3BvcnQ6IF92aWV3cG9ydFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnVVBEQVRFX1ZJRVdQT1JUX01BWF9TQ1JPTEwnKSB7XG4gICAgaWYgKCFpc01vdmVtZW50QWxsb3dlZChzdGF0ZSkpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgbWF4U2Nyb2xsID0gYWN0aW9uLnBheWxvYWQubWF4U2Nyb2xsO1xuXG4gICAgaWYgKGlzRXF1YWwobWF4U2Nyb2xsLCBzdGF0ZS52aWV3cG9ydC5zY3JvbGwubWF4KSkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIHZhciB3aXRoTWF4U2Nyb2xsID0gX2V4dGVuZHMoe30sIHN0YXRlLnZpZXdwb3J0LCB7XG4gICAgICBzY3JvbGw6IF9leHRlbmRzKHt9LCBzdGF0ZS52aWV3cG9ydC5zY3JvbGwsIHtcbiAgICAgICAgbWF4OiBtYXhTY3JvbGxcbiAgICAgIH0pXG4gICAgfSk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgcGhhc2U6ICdEUkFHR0lORydcbiAgICB9LCBzdGF0ZSwge1xuICAgICAgdmlld3BvcnQ6IHdpdGhNYXhTY3JvbGxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ01PVkVfVVAnIHx8IGFjdGlvbi50eXBlID09PSAnTU9WRV9ET1dOJyB8fCBhY3Rpb24udHlwZSA9PT0gJ01PVkVfTEVGVCcgfHwgYWN0aW9uLnR5cGUgPT09ICdNT1ZFX1JJR0hUJykge1xuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgICEoc3RhdGUucGhhc2UgPT09ICdEUkFHR0lORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBhY3Rpb24udHlwZSArIFwiIHJlY2VpdmVkIHdoaWxlIG5vdCBpbiBEUkFHR0lORyBwaGFzZVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB2YXIgX3Jlc3VsdDIgPSBtb3ZlSW5EaXJlY3Rpb24oe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgdHlwZTogYWN0aW9uLnR5cGVcbiAgICB9KTtcblxuICAgIGlmICghX3Jlc3VsdDIpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlKHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGltcGFjdDogX3Jlc3VsdDIuaW1wYWN0LFxuICAgICAgY2xpZW50U2VsZWN0aW9uOiBfcmVzdWx0Mi5jbGllbnRTZWxlY3Rpb24sXG4gICAgICBzY3JvbGxKdW1wUmVxdWVzdDogX3Jlc3VsdDIuc2Nyb2xsSnVtcFJlcXVlc3RcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfUEVORElORycpIHtcbiAgICB2YXIgcmVhc29uID0gYWN0aW9uLnBheWxvYWQucmVhc29uO1xuICAgICEoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSBtb3ZlIGludG8gdGhlIERST1BfUEVORElORyBwaGFzZSBmcm9tIHRoZSBDT0xMRUNUSU5HIHBoYXNlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIG5ld1N0YXRlID0gX2V4dGVuZHMoe1xuICAgICAgcGhhc2U6ICdEUk9QX1BFTkRJTkcnXG4gICAgfSwgc3RhdGUsIHtcbiAgICAgIHBoYXNlOiAnRFJPUF9QRU5ESU5HJyxcbiAgICAgIGlzV2FpdGluZzogdHJ1ZSxcbiAgICAgIHJlYXNvbjogcmVhc29uXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3U3RhdGU7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdEUk9QX0FOSU1BVEUnKSB7XG4gICAgdmFyIF9hY3Rpb24kcGF5bG9hZDUgPSBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgY29tcGxldGVkID0gX2FjdGlvbiRwYXlsb2FkNS5jb21wbGV0ZWQsXG4gICAgICAgIGRyb3BEdXJhdGlvbiA9IF9hY3Rpb24kcGF5bG9hZDUuZHJvcER1cmF0aW9uLFxuICAgICAgICBuZXdIb21lQ2xpZW50T2Zmc2V0ID0gX2FjdGlvbiRwYXlsb2FkNS5uZXdIb21lQ2xpZW50T2Zmc2V0O1xuICAgICEoc3RhdGUucGhhc2UgPT09ICdEUkFHR0lORycgfHwgc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgYW5pbWF0ZSBkcm9wIGZyb20gcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfcmVzdWx0MyA9IHtcbiAgICAgIHBoYXNlOiAnRFJPUF9BTklNQVRJTkcnLFxuICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQsXG4gICAgICBkcm9wRHVyYXRpb246IGRyb3BEdXJhdGlvbixcbiAgICAgIG5ld0hvbWVDbGllbnRPZmZzZXQ6IG5ld0hvbWVDbGllbnRPZmZzZXQsXG4gICAgICBkaW1lbnNpb25zOiBzdGF0ZS5kaW1lbnNpb25zXG4gICAgfTtcbiAgICByZXR1cm4gX3Jlc3VsdDM7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdEUk9QX0NPTVBMRVRFJykge1xuICAgIHZhciBfY29tcGxldGVkID0gYWN0aW9uLnBheWxvYWQuY29tcGxldGVkO1xuICAgIHJldHVybiB7XG4gICAgICBwaGFzZTogJ0lETEUnLFxuICAgICAgY29tcGxldGVkOiBfY29tcGxldGVkLFxuICAgICAgc2hvdWxkRmx1c2g6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn0pO1xuXG52YXIgYmVmb3JlSW5pdGlhbENhcHR1cmUgPSBmdW5jdGlvbiBiZWZvcmVJbml0aWFsQ2FwdHVyZShhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0JFRk9SRV9JTklUSUFMX0NBUFRVUkUnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgbGlmdCA9IGZ1bmN0aW9uIGxpZnQoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdMSUZUJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGluaXRpYWxQdWJsaXNoID0gZnVuY3Rpb24gaW5pdGlhbFB1Ymxpc2goYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdJTklUSUFMX1BVQkxJU0gnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgcHVibGlzaFdoaWxlRHJhZ2dpbmcgPSBmdW5jdGlvbiBwdWJsaXNoV2hpbGVEcmFnZ2luZyhhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1BVQkxJU0hfV0hJTEVfRFJBR0dJTkcnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgY29sbGVjdGlvblN0YXJ0aW5nID0gZnVuY3Rpb24gY29sbGVjdGlvblN0YXJ0aW5nKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdDT0xMRUNUSU9OX1NUQVJUSU5HJyxcbiAgICBwYXlsb2FkOiBudWxsXG4gIH07XG59O1xudmFyIHVwZGF0ZURyb3BwYWJsZVNjcm9sbCA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZVNjcm9sbChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1VQREFURV9EUk9QUEFCTEVfU0NST0xMJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZCA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1VQREFURV9EUk9QUEFCTEVfSVNfRU5BQkxFRCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciB1cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkID0gZnVuY3Rpb24gdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1VQREFURV9EUk9QUEFCTEVfSVNfQ09NQklORV9FTkFCTEVEJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIG1vdmUgPSBmdW5jdGlvbiBtb3ZlKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTU9WRScsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBtb3ZlQnlXaW5kb3dTY3JvbGwgPSBmdW5jdGlvbiBtb3ZlQnlXaW5kb3dTY3JvbGwoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdNT1ZFX0JZX1dJTkRPV19TQ1JPTEwnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgdXBkYXRlVmlld3BvcnRNYXhTY3JvbGwgPSBmdW5jdGlvbiB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1VQREFURV9WSUVXUE9SVF9NQVhfU0NST0xMJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIG1vdmVVcCA9IGZ1bmN0aW9uIG1vdmVVcCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTU9WRV9VUCcsXG4gICAgcGF5bG9hZDogbnVsbFxuICB9O1xufTtcbnZhciBtb3ZlRG93biA9IGZ1bmN0aW9uIG1vdmVEb3duKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdNT1ZFX0RPV04nLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG52YXIgbW92ZVJpZ2h0ID0gZnVuY3Rpb24gbW92ZVJpZ2h0KCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdNT1ZFX1JJR0hUJyxcbiAgICBwYXlsb2FkOiBudWxsXG4gIH07XG59O1xudmFyIG1vdmVMZWZ0ID0gZnVuY3Rpb24gbW92ZUxlZnQoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkVfTEVGVCcsXG4gICAgcGF5bG9hZDogbnVsbFxuICB9O1xufTtcbnZhciBmbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdGTFVTSCcsXG4gICAgcGF5bG9hZDogbnVsbFxuICB9O1xufTtcbnZhciBhbmltYXRlRHJvcCA9IGZ1bmN0aW9uIGFuaW1hdGVEcm9wKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnRFJPUF9BTklNQVRFJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGNvbXBsZXRlRHJvcCA9IGZ1bmN0aW9uIGNvbXBsZXRlRHJvcChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0RST1BfQ09NUExFVEUnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgZHJvcCA9IGZ1bmN0aW9uIGRyb3AoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdEUk9QJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGRyb3BQZW5kaW5nID0gZnVuY3Rpb24gZHJvcFBlbmRpbmcoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdEUk9QX1BFTkRJTkcnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgZHJvcEFuaW1hdGlvbkZpbmlzaGVkID0gZnVuY3Rpb24gZHJvcEFuaW1hdGlvbkZpbmlzaGVkKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdEUk9QX0FOSU1BVElPTl9GSU5JU0hFRCcsXG4gICAgcGF5bG9hZDogbnVsbFxuICB9O1xufTtcblxuZnVuY3Rpb24gY2hlY2tJbmRleGVzKGluc2lkZURlc3RpbmF0aW9uKSB7XG4gIGlmIChpbnNpZGVEZXN0aW5hdGlvbi5sZW5ndGggPD0gMSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpbmRleGVzID0gaW5zaWRlRGVzdGluYXRpb24ubWFwKGZ1bmN0aW9uIChkKSB7XG4gICAgcmV0dXJuIGQuZGVzY3JpcHRvci5pbmRleDtcbiAgfSk7XG4gIHZhciBlcnJvcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGluZGV4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY3VycmVudCA9IGluZGV4ZXNbaV07XG4gICAgdmFyIHByZXZpb3VzID0gaW5kZXhlc1tpIC0gMV07XG5cbiAgICBpZiAoY3VycmVudCAhPT0gcHJldmlvdXMgKyAxKSB7XG4gICAgICBlcnJvcnNbY3VycmVudF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghT2JqZWN0LmtleXMoZXJyb3JzKS5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZm9ybWF0dGVkID0gaW5kZXhlcy5tYXAoZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgdmFyIGhhc0Vycm9yID0gQm9vbGVhbihlcnJvcnNbaW5kZXhdKTtcbiAgICByZXR1cm4gaGFzRXJyb3IgPyBcIltcXHVEODNEXFx1REQyNVwiICsgaW5kZXggKyBcIl1cIiA6IFwiXCIgKyBpbmRleDtcbiAgfSkuam9pbignLCAnKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICBEZXRlY3RlZCBub24tY29uc2VjdXRpdmUgPERyYWdnYWJsZSAvPiBpbmRleGVzLlxcblxcbiAgICAoVGhpcyBjYW4gY2F1c2UgdW5leHBlY3RlZCBidWdzKVxcblxcbiAgICBcIiArIGZvcm1hdHRlZCArIFwiXFxuICBcIikgOiB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGltZW5zaW9ucyhjcml0aWNhbCwgZGltZW5zaW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBpbnNpZGVEZXN0aW5hdGlvbiA9IGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUoY3JpdGljYWwuZHJvcHBhYmxlLmlkLCBkaW1lbnNpb25zLmRyYWdnYWJsZXMpO1xuICAgIGNoZWNrSW5kZXhlcyhpbnNpZGVEZXN0aW5hdGlvbik7XG4gIH1cbn1cblxudmFyIGxpZnQkMSA9IChmdW5jdGlvbiAobWFyc2hhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgIT09ICdMSUZUJykge1xuICAgICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2FjdGlvbiRwYXlsb2FkID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgICAgICBpZCA9IF9hY3Rpb24kcGF5bG9hZC5pZCxcbiAgICAgICAgICAgIGNsaWVudFNlbGVjdGlvbiA9IF9hY3Rpb24kcGF5bG9hZC5jbGllbnRTZWxlY3Rpb24sXG4gICAgICAgICAgICBtb3ZlbWVudE1vZGUgPSBfYWN0aW9uJHBheWxvYWQubW92ZW1lbnRNb2RlO1xuICAgICAgICB2YXIgaW5pdGlhbCA9IGdldFN0YXRlKCk7XG5cbiAgICAgICAgaWYgKGluaXRpYWwucGhhc2UgPT09ICdEUk9QX0FOSU1BVElORycpIHtcbiAgICAgICAgICBkaXNwYXRjaChjb21wbGV0ZURyb3Aoe1xuICAgICAgICAgICAgY29tcGxldGVkOiBpbml0aWFsLmNvbXBsZXRlZFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgICEoZ2V0U3RhdGUoKS5waGFzZSA9PT0gJ0lETEUnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1VuZXhwZWN0ZWQgcGhhc2UgdG8gc3RhcnQgYSBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBkaXNwYXRjaChmbHVzaCgpKTtcbiAgICAgICAgZGlzcGF0Y2goYmVmb3JlSW5pdGlhbENhcHR1cmUoe1xuICAgICAgICAgIGRyYWdnYWJsZUlkOiBpZCxcbiAgICAgICAgICBtb3ZlbWVudE1vZGU6IG1vdmVtZW50TW9kZVxuICAgICAgICB9KSk7XG4gICAgICAgIHZhciBzY3JvbGxPcHRpb25zID0ge1xuICAgICAgICAgIHNob3VsZFB1Ymxpc2hJbW1lZGlhdGVseTogbW92ZW1lbnRNb2RlID09PSAnU05BUCdcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB7XG4gICAgICAgICAgZHJhZ2dhYmxlSWQ6IGlkLFxuICAgICAgICAgIHNjcm9sbE9wdGlvbnM6IHNjcm9sbE9wdGlvbnNcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgX21hcnNoYWwkc3RhcnRQdWJsaXNoID0gbWFyc2hhbC5zdGFydFB1Ymxpc2hpbmcocmVxdWVzdCksXG4gICAgICAgICAgICBjcml0aWNhbCA9IF9tYXJzaGFsJHN0YXJ0UHVibGlzaC5jcml0aWNhbCxcbiAgICAgICAgICAgIGRpbWVuc2lvbnMgPSBfbWFyc2hhbCRzdGFydFB1Ymxpc2guZGltZW5zaW9ucyxcbiAgICAgICAgICAgIHZpZXdwb3J0ID0gX21hcnNoYWwkc3RhcnRQdWJsaXNoLnZpZXdwb3J0O1xuXG4gICAgICAgIHZhbGlkYXRlRGltZW5zaW9ucyhjcml0aWNhbCwgZGltZW5zaW9ucyk7XG4gICAgICAgIGRpc3BhdGNoKGluaXRpYWxQdWJsaXNoKHtcbiAgICAgICAgICBjcml0aWNhbDogY3JpdGljYWwsXG4gICAgICAgICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICAgICAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICAgICAgICBtb3ZlbWVudE1vZGU6IG1vdmVtZW50TW9kZSxcbiAgICAgICAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgICAgICAgfSkpO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBzdHlsZSA9IChmdW5jdGlvbiAobWFyc2hhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnSU5JVElBTF9QVUJMSVNIJykge1xuICAgICAgICAgIG1hcnNoYWwuZHJhZ2dpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQU5JTUFURScpIHtcbiAgICAgICAgICBtYXJzaGFsLmRyb3BwaW5nKGFjdGlvbi5wYXlsb2FkLmNvbXBsZXRlZC5yZXN1bHQucmVhc29uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0ZMVVNIJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnKSB7XG4gICAgICAgICAgbWFyc2hhbC5yZXN0aW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGN1cnZlcyA9IHtcbiAgb3V0T2ZUaGVXYXk6ICdjdWJpYy1iZXppZXIoMC4yLCAwLCAwLCAxKScsXG4gIGRyb3A6ICdjdWJpYy1iZXppZXIoLjIsMSwuMSwxKSdcbn07XG52YXIgY29tYmluZSA9IHtcbiAgb3BhY2l0eToge1xuICAgIGRyb3A6IDAsXG4gICAgY29tYmluaW5nOiAwLjdcbiAgfSxcbiAgc2NhbGU6IHtcbiAgICBkcm9wOiAwLjc1XG4gIH1cbn07XG52YXIgdGltaW5ncyA9IHtcbiAgb3V0T2ZUaGVXYXk6IDAuMixcbiAgbWluRHJvcFRpbWU6IDAuMzMsXG4gIG1heERyb3BUaW1lOiAwLjU1XG59O1xudmFyIG91dE9mVGhlV2F5VGltaW5nID0gdGltaW5ncy5vdXRPZlRoZVdheSArIFwicyBcIiArIGN1cnZlcy5vdXRPZlRoZVdheTtcbnZhciB0cmFuc2l0aW9ucyA9IHtcbiAgZmx1aWQ6IFwib3BhY2l0eSBcIiArIG91dE9mVGhlV2F5VGltaW5nLFxuICBzbmFwOiBcInRyYW5zZm9ybSBcIiArIG91dE9mVGhlV2F5VGltaW5nICsgXCIsIG9wYWNpdHkgXCIgKyBvdXRPZlRoZVdheVRpbWluZyxcbiAgZHJvcDogZnVuY3Rpb24gZHJvcChkdXJhdGlvbikge1xuICAgIHZhciB0aW1pbmcgPSBkdXJhdGlvbiArIFwicyBcIiArIGN1cnZlcy5kcm9wO1xuICAgIHJldHVybiBcInRyYW5zZm9ybSBcIiArIHRpbWluZyArIFwiLCBvcGFjaXR5IFwiICsgdGltaW5nO1xuICB9LFxuICBvdXRPZlRoZVdheTogXCJ0cmFuc2Zvcm0gXCIgKyBvdXRPZlRoZVdheVRpbWluZyxcbiAgcGxhY2Vob2xkZXI6IFwiaGVpZ2h0IFwiICsgb3V0T2ZUaGVXYXlUaW1pbmcgKyBcIiwgd2lkdGggXCIgKyBvdXRPZlRoZVdheVRpbWluZyArIFwiLCBtYXJnaW4gXCIgKyBvdXRPZlRoZVdheVRpbWluZ1xufTtcblxudmFyIG1vdmVUbyA9IGZ1bmN0aW9uIG1vdmVUbyhvZmZzZXQpIHtcbiAgcmV0dXJuIGlzRXF1YWwob2Zmc2V0LCBvcmlnaW4pID8gbnVsbCA6IFwidHJhbnNsYXRlKFwiICsgb2Zmc2V0LnggKyBcInB4LCBcIiArIG9mZnNldC55ICsgXCJweClcIjtcbn07XG5cbnZhciB0cmFuc2Zvcm1zID0ge1xuICBtb3ZlVG86IG1vdmVUbyxcbiAgZHJvcDogZnVuY3Rpb24gZHJvcChvZmZzZXQsIGlzQ29tYmluaW5nKSB7XG4gICAgdmFyIHRyYW5zbGF0ZSA9IG1vdmVUbyhvZmZzZXQpO1xuXG4gICAgaWYgKCF0cmFuc2xhdGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghaXNDb21iaW5pbmcpIHtcbiAgICAgIHJldHVybiB0cmFuc2xhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zbGF0ZSArIFwiIHNjYWxlKFwiICsgY29tYmluZS5zY2FsZS5kcm9wICsgXCIpXCI7XG4gIH1cbn07XG5cbnZhciBtaW5Ecm9wVGltZSA9IHRpbWluZ3MubWluRHJvcFRpbWUsXG4gICAgbWF4RHJvcFRpbWUgPSB0aW1pbmdzLm1heERyb3BUaW1lO1xudmFyIGRyb3BUaW1lUmFuZ2UgPSBtYXhEcm9wVGltZSAtIG1pbkRyb3BUaW1lO1xudmFyIG1heERyb3BUaW1lQXREaXN0YW5jZSA9IDE1MDA7XG52YXIgY2FuY2VsRHJvcE1vZGlmaWVyID0gMC42O1xudmFyIGdldERyb3BEdXJhdGlvbiA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY3VycmVudCA9IF9yZWYuY3VycmVudCxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIHJlYXNvbiA9IF9yZWYucmVhc29uO1xuICB2YXIgZGlzdGFuY2UkMSA9IGRpc3RhbmNlKGN1cnJlbnQsIGRlc3RpbmF0aW9uKTtcblxuICBpZiAoZGlzdGFuY2UkMSA8PSAwKSB7XG4gICAgcmV0dXJuIG1pbkRyb3BUaW1lO1xuICB9XG5cbiAgaWYgKGRpc3RhbmNlJDEgPj0gbWF4RHJvcFRpbWVBdERpc3RhbmNlKSB7XG4gICAgcmV0dXJuIG1heERyb3BUaW1lO1xuICB9XG5cbiAgdmFyIHBlcmNlbnRhZ2UgPSBkaXN0YW5jZSQxIC8gbWF4RHJvcFRpbWVBdERpc3RhbmNlO1xuICB2YXIgZHVyYXRpb24gPSBtaW5Ecm9wVGltZSArIGRyb3BUaW1lUmFuZ2UgKiBwZXJjZW50YWdlO1xuICB2YXIgd2l0aER1cmF0aW9uID0gcmVhc29uID09PSAnQ0FOQ0VMJyA/IGR1cmF0aW9uICogY2FuY2VsRHJvcE1vZGlmaWVyIDogZHVyYXRpb247XG4gIHJldHVybiBOdW1iZXIod2l0aER1cmF0aW9uLnRvRml4ZWQoMikpO1xufSk7XG5cbnZhciBnZXROZXdIb21lQ2xpZW50T2Zmc2V0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZGltZW5zaW9ucyA9IF9yZWYuZGltZW5zaW9ucyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmLmFmdGVyQ3JpdGljYWw7XG4gIHZhciBkcmFnZ2FibGVzID0gZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlcyA9IGRpbWVuc2lvbnMuZHJvcHBhYmxlcztcbiAgdmFyIGRyb3BwYWJsZUlkID0gd2hhdElzRHJhZ2dlZE92ZXIoaW1wYWN0KTtcbiAgdmFyIGRlc3RpbmF0aW9uID0gZHJvcHBhYmxlSWQgPyBkcm9wcGFibGVzW2Ryb3BwYWJsZUlkXSA6IG51bGw7XG4gIHZhciBob21lID0gZHJvcHBhYmxlc1tkcmFnZ2FibGUuZGVzY3JpcHRvci5kcm9wcGFibGVJZF07XG4gIHZhciBuZXdDbGllbnRDZW50ZXIgPSBnZXRDbGllbnRCb3JkZXJCb3hDZW50ZXIoe1xuICAgIGltcGFjdDogaW1wYWN0LFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbCxcbiAgICBkcm9wcGFibGU6IGRlc3RpbmF0aW9uIHx8IGhvbWUsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xuICB2YXIgb2Zmc2V0ID0gc3VidHJhY3QobmV3Q2xpZW50Q2VudGVyLCBkcmFnZ2FibGUuY2xpZW50LmJvcmRlckJveC5jZW50ZXIpO1xuICByZXR1cm4gb2Zmc2V0O1xufSk7XG5cbnZhciBnZXREcm9wSW1wYWN0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgcmVhc29uID0gX3JlZi5yZWFzb24sXG4gICAgICBsYXN0SW1wYWN0ID0gX3JlZi5sYXN0SW1wYWN0LFxuICAgICAgaG9tZSA9IF9yZWYuaG9tZSxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIG9uTGlmdEltcGFjdCA9IF9yZWYub25MaWZ0SW1wYWN0O1xuXG4gIGlmICghbGFzdEltcGFjdC5hdCB8fCByZWFzb24gIT09ICdEUk9QJykge1xuICAgIHZhciByZWNvbXB1dGVkSG9tZUltcGFjdCA9IHJlY29tcHV0ZSh7XG4gICAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgICAgaW1wYWN0OiBvbkxpZnRJbXBhY3QsXG4gICAgICBkZXN0aW5hdGlvbjogaG9tZSxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpbXBhY3Q6IHJlY29tcHV0ZWRIb21lSW1wYWN0LFxuICAgICAgZGlkRHJvcEluc2lkZURyb3BwYWJsZTogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgaWYgKGxhc3RJbXBhY3QuYXQudHlwZSA9PT0gJ1JFT1JERVInKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGltcGFjdDogbGFzdEltcGFjdCxcbiAgICAgIGRpZERyb3BJbnNpZGVEcm9wcGFibGU6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgdmFyIHdpdGhvdXRNb3ZlbWVudCA9IF9leHRlbmRzKHt9LCBsYXN0SW1wYWN0LCB7XG4gICAgZGlzcGxhY2VkOiBlbXB0eUdyb3Vwc1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGltcGFjdDogd2l0aG91dE1vdmVtZW50LFxuICAgIGRpZERyb3BJbnNpZGVEcm9wcGFibGU6IHRydWVcbiAgfTtcbn0pO1xuXG52YXIgZHJvcCQxID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGUsXG4gICAgICBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7XG4gIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICBpZiAoYWN0aW9uLnR5cGUgIT09ICdEUk9QJykge1xuICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgIHZhciByZWFzb24gPSBhY3Rpb24ucGF5bG9hZC5yZWFzb247XG5cbiAgICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnKSB7XG4gICAgICAgIGRpc3BhdGNoKGRyb3BQZW5kaW5nKHtcbiAgICAgICAgICByZWFzb246IHJlYXNvblxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLnBoYXNlID09PSAnSURMRScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNXYWl0aW5nRm9yRHJvcCA9IHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJyAmJiBzdGF0ZS5pc1dhaXRpbmc7XG4gICAgICAhIWlzV2FpdGluZ0ZvckRyb3AgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdBIERST1AgYWN0aW9uIG9jY3VycmVkIHdoaWxlIERST1BfUEVORElORyBhbmQgc3RpbGwgd2FpdGluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICEoc3RhdGUucGhhc2UgPT09ICdEUkFHR0lORycgfHwgc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgZHJvcCBpbiBwaGFzZTogXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGNyaXRpY2FsID0gc3RhdGUuY3JpdGljYWw7XG4gICAgICB2YXIgZGltZW5zaW9ucyA9IHN0YXRlLmRpbWVuc2lvbnM7XG4gICAgICB2YXIgZHJhZ2dhYmxlID0gZGltZW5zaW9ucy5kcmFnZ2FibGVzW3N0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG5cbiAgICAgIHZhciBfZ2V0RHJvcEltcGFjdCA9IGdldERyb3BJbXBhY3Qoe1xuICAgICAgICByZWFzb246IHJlYXNvbixcbiAgICAgICAgbGFzdEltcGFjdDogc3RhdGUuaW1wYWN0LFxuICAgICAgICBhZnRlckNyaXRpY2FsOiBzdGF0ZS5hZnRlckNyaXRpY2FsLFxuICAgICAgICBvbkxpZnRJbXBhY3Q6IHN0YXRlLm9uTGlmdEltcGFjdCxcbiAgICAgICAgaG9tZTogc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW3N0YXRlLmNyaXRpY2FsLmRyb3BwYWJsZS5pZF0sXG4gICAgICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydCxcbiAgICAgICAgZHJhZ2dhYmxlczogc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzXG4gICAgICB9KSxcbiAgICAgICAgICBpbXBhY3QgPSBfZ2V0RHJvcEltcGFjdC5pbXBhY3QsXG4gICAgICAgICAgZGlkRHJvcEluc2lkZURyb3BwYWJsZSA9IF9nZXREcm9wSW1wYWN0LmRpZERyb3BJbnNpZGVEcm9wcGFibGU7XG5cbiAgICAgIHZhciBkZXN0aW5hdGlvbiA9IGRpZERyb3BJbnNpZGVEcm9wcGFibGUgPyB0cnlHZXREZXN0aW5hdGlvbihpbXBhY3QpIDogbnVsbDtcbiAgICAgIHZhciBjb21iaW5lID0gZGlkRHJvcEluc2lkZURyb3BwYWJsZSA/IHRyeUdldENvbWJpbmUoaW1wYWN0KSA6IG51bGw7XG4gICAgICB2YXIgc291cmNlID0ge1xuICAgICAgICBpbmRleDogY3JpdGljYWwuZHJhZ2dhYmxlLmluZGV4LFxuICAgICAgICBkcm9wcGFibGVJZDogY3JpdGljYWwuZHJvcHBhYmxlLmlkXG4gICAgICB9O1xuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgZHJhZ2dhYmxlSWQ6IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkLFxuICAgICAgICB0eXBlOiBkcmFnZ2FibGUuZGVzY3JpcHRvci50eXBlLFxuICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgcmVhc29uOiByZWFzb24sXG4gICAgICAgIG1vZGU6IHN0YXRlLm1vdmVtZW50TW9kZSxcbiAgICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgICAgICBjb21iaW5lOiBjb21iaW5lXG4gICAgICB9O1xuICAgICAgdmFyIG5ld0hvbWVDbGllbnRPZmZzZXQgPSBnZXROZXdIb21lQ2xpZW50T2Zmc2V0KHtcbiAgICAgICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zLFxuICAgICAgICB2aWV3cG9ydDogc3RhdGUudmlld3BvcnQsXG4gICAgICAgIGFmdGVyQ3JpdGljYWw6IHN0YXRlLmFmdGVyQ3JpdGljYWxcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbXBsZXRlZCA9IHtcbiAgICAgICAgY3JpdGljYWw6IHN0YXRlLmNyaXRpY2FsLFxuICAgICAgICBhZnRlckNyaXRpY2FsOiBzdGF0ZS5hZnRlckNyaXRpY2FsLFxuICAgICAgICByZXN1bHQ6IHJlc3VsdCxcbiAgICAgICAgaW1wYWN0OiBpbXBhY3RcbiAgICAgIH07XG4gICAgICB2YXIgaXNBbmltYXRpb25SZXF1aXJlZCA9ICFpc0VxdWFsKHN0YXRlLmN1cnJlbnQuY2xpZW50Lm9mZnNldCwgbmV3SG9tZUNsaWVudE9mZnNldCkgfHwgQm9vbGVhbihyZXN1bHQuY29tYmluZSk7XG5cbiAgICAgIGlmICghaXNBbmltYXRpb25SZXF1aXJlZCkge1xuICAgICAgICBkaXNwYXRjaChjb21wbGV0ZURyb3Aoe1xuICAgICAgICAgIGNvbXBsZXRlZDogY29tcGxldGVkXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZHJvcER1cmF0aW9uID0gZ2V0RHJvcER1cmF0aW9uKHtcbiAgICAgICAgY3VycmVudDogc3RhdGUuY3VycmVudC5jbGllbnQub2Zmc2V0LFxuICAgICAgICBkZXN0aW5hdGlvbjogbmV3SG9tZUNsaWVudE9mZnNldCxcbiAgICAgICAgcmVhc29uOiByZWFzb25cbiAgICAgIH0pO1xuICAgICAgdmFyIGFyZ3MgPSB7XG4gICAgICAgIG5ld0hvbWVDbGllbnRPZmZzZXQ6IG5ld0hvbWVDbGllbnRPZmZzZXQsXG4gICAgICAgIGRyb3BEdXJhdGlvbjogZHJvcER1cmF0aW9uLFxuICAgICAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZFxuICAgICAgfTtcbiAgICAgIGRpc3BhdGNoKGFuaW1hdGVEcm9wKGFyZ3MpKTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBnZXRXaW5kb3dTY3JvbGwgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfTtcbn0pO1xuXG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCaW5kaW5nKHVwZGF0ZSkge1xuICByZXR1cm4ge1xuICAgIGV2ZW50TmFtZTogJ3Njcm9sbCcsXG4gICAgb3B0aW9uczoge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IHdpbmRvdyAmJiBldmVudC50YXJnZXQgIT09IHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsTGlzdGVuZXIoX3JlZikge1xuICB2YXIgb25XaW5kb3dTY3JvbGwgPSBfcmVmLm9uV2luZG93U2Nyb2xsO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbCgpIHtcbiAgICBvbldpbmRvd1Njcm9sbChnZXRXaW5kb3dTY3JvbGwoKSk7XG4gIH1cblxuICB2YXIgc2NoZWR1bGVkID0gcmFmU2NoZCh1cGRhdGVTY3JvbGwpO1xuICB2YXIgYmluZGluZyA9IGdldFdpbmRvd1Njcm9sbEJpbmRpbmcoc2NoZWR1bGVkKTtcbiAgdmFyIHVuYmluZCA9IG5vb3A7XG5cbiAgZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgcmV0dXJuIHVuYmluZCAhPT0gbm9vcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICEhaXNBY3RpdmUoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzdGFydCBzY3JvbGwgbGlzdGVuZXIgd2hlbiBhbHJlYWR5IGFjdGl2ZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB1bmJpbmQgPSBiaW5kRXZlbnRzKHdpbmRvdywgW2JpbmRpbmddKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgIWlzQWN0aXZlKCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc3RvcCBzY3JvbGwgbGlzdGVuZXIgd2hlbiBub3QgYWN0aXZlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHNjaGVkdWxlZC5jYW5jZWwoKTtcbiAgICB1bmJpbmQoKTtcbiAgICB1bmJpbmQgPSBub29wO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnQsXG4gICAgc3RvcDogc3RvcCxcbiAgICBpc0FjdGl2ZTogaXNBY3RpdmVcbiAgfTtcbn1cblxudmFyIHNob3VsZEVuZCA9IGZ1bmN0aW9uIHNob3VsZEVuZChhY3Rpb24pIHtcbiAgcmV0dXJuIGFjdGlvbi50eXBlID09PSAnRFJPUF9DT01QTEVURScgfHwgYWN0aW9uLnR5cGUgPT09ICdEUk9QX0FOSU1BVEUnIHx8IGFjdGlvbi50eXBlID09PSAnRkxVU0gnO1xufTtcblxudmFyIHNjcm9sbExpc3RlbmVyID0gKGZ1bmN0aW9uIChzdG9yZSkge1xuICB2YXIgbGlzdGVuZXIgPSBnZXRTY3JvbGxMaXN0ZW5lcih7XG4gICAgb25XaW5kb3dTY3JvbGw6IGZ1bmN0aW9uIG9uV2luZG93U2Nyb2xsKG5ld1Njcm9sbCkge1xuICAgICAgc3RvcmUuZGlzcGF0Y2gobW92ZUJ5V2luZG93U2Nyb2xsKHtcbiAgICAgICAgbmV3U2Nyb2xsOiBuZXdTY3JvbGxcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgaWYgKCFsaXN0ZW5lci5pc0FjdGl2ZSgpICYmIGFjdGlvbi50eXBlID09PSAnSU5JVElBTF9QVUJMSVNIJykge1xuICAgICAgICBsaXN0ZW5lci5zdGFydCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGlzdGVuZXIuaXNBY3RpdmUoKSAmJiBzaG91bGRFbmQoYWN0aW9uKSkge1xuICAgICAgICBsaXN0ZW5lci5zdG9wKCk7XG4gICAgICB9XG5cbiAgICAgIG5leHQoYWN0aW9uKTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBnZXRFeHBpcmluZ0Fubm91bmNlID0gKGZ1bmN0aW9uIChhbm5vdW5jZSkge1xuICB2YXIgd2FzQ2FsbGVkID0gZmFsc2U7XG4gIHZhciBpc0V4cGlyZWQgPSBmYWxzZTtcbiAgdmFyIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlzRXhwaXJlZCA9IHRydWU7XG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQobWVzc2FnZSkge1xuICAgIGlmICh3YXNDYWxsZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoJ0Fubm91bmNlbWVudCBhbHJlYWR5IG1hZGUuIE5vdCBtYWtpbmcgYSBzZWNvbmQgYW5ub3VuY2VtZW50JykgOiB2b2lkIDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzRXhwaXJlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgICAgQW5ub3VuY2VtZW50cyBjYW5ub3QgYmUgbWFkZSBhc3luY2hyb25vdXNseS5cXG4gICAgICAgIERlZmF1bHQgbWVzc2FnZSBoYXMgYWxyZWFkeSBiZWVuIGFubm91bmNlZC5cXG4gICAgICBcIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FzQ2FsbGVkID0gdHJ1ZTtcbiAgICBhbm5vdW5jZShtZXNzYWdlKTtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgfTtcblxuICByZXN1bHQud2FzQ2FsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB3YXNDYWxsZWQ7XG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG52YXIgZ2V0QXN5bmNNYXJzaGFsID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVudHJpZXMgPSBbXTtcblxuICB2YXIgZXhlY3V0ZSA9IGZ1bmN0aW9uIGV4ZWN1dGUodGltZXJJZCkge1xuICAgIHZhciBpbmRleCA9IGZpbmRJbmRleChlbnRyaWVzLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0udGltZXJJZCA9PT0gdGltZXJJZDtcbiAgICB9KTtcbiAgICAhKGluZGV4ICE9PSAtMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDb3VsZCBub3QgZmluZCB0aW1lcicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBfZW50cmllcyRzcGxpY2UgPSBlbnRyaWVzLnNwbGljZShpbmRleCwgMSksXG4gICAgICAgIGVudHJ5ID0gX2VudHJpZXMkc3BsaWNlWzBdO1xuXG4gICAgZW50cnkuY2FsbGJhY2soKTtcbiAgfTtcblxuICB2YXIgYWRkID0gZnVuY3Rpb24gYWRkKGZuKSB7XG4gICAgdmFyIHRpbWVySWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBleGVjdXRlKHRpbWVySWQpO1xuICAgIH0pO1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIHRpbWVySWQ6IHRpbWVySWQsXG4gICAgICBjYWxsYmFjazogZm5cbiAgICB9O1xuICAgIGVudHJpZXMucHVzaChlbnRyeSk7XG4gIH07XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKCFlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzaGFsbG93ID0gW10uY29uY2F0KGVudHJpZXMpO1xuICAgIGVudHJpZXMubGVuZ3RoID0gMDtcbiAgICBzaGFsbG93LmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICBjbGVhclRpbWVvdXQoZW50cnkudGltZXJJZCk7XG4gICAgICBlbnRyeS5jYWxsYmFjaygpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYWRkOiBhZGQsXG4gICAgZmx1c2g6IGZsdXNoXG4gIH07XG59KTtcblxudmFyIGFyZUxvY2F0aW9uc0VxdWFsID0gZnVuY3Rpb24gYXJlTG9jYXRpb25zRXF1YWwoZmlyc3QsIHNlY29uZCkge1xuICBpZiAoZmlyc3QgPT0gbnVsbCAmJiBzZWNvbmQgPT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGZpcnN0ID09IG51bGwgfHwgc2Vjb25kID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZmlyc3QuZHJvcHBhYmxlSWQgPT09IHNlY29uZC5kcm9wcGFibGVJZCAmJiBmaXJzdC5pbmRleCA9PT0gc2Vjb25kLmluZGV4O1xufTtcbnZhciBpc0NvbWJpbmVFcXVhbCA9IGZ1bmN0aW9uIGlzQ29tYmluZUVxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgaWYgKGZpcnN0ID09IG51bGwgJiYgc2Vjb25kID09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChmaXJzdCA9PSBudWxsIHx8IHNlY29uZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZpcnN0LmRyYWdnYWJsZUlkID09PSBzZWNvbmQuZHJhZ2dhYmxlSWQgJiYgZmlyc3QuZHJvcHBhYmxlSWQgPT09IHNlY29uZC5kcm9wcGFibGVJZDtcbn07XG52YXIgaXNDcml0aWNhbEVxdWFsID0gZnVuY3Rpb24gaXNDcml0aWNhbEVxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgaWYgKGZpcnN0ID09PSBzZWNvbmQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBpc0RyYWdnYWJsZUVxdWFsID0gZmlyc3QuZHJhZ2dhYmxlLmlkID09PSBzZWNvbmQuZHJhZ2dhYmxlLmlkICYmIGZpcnN0LmRyYWdnYWJsZS5kcm9wcGFibGVJZCA9PT0gc2Vjb25kLmRyYWdnYWJsZS5kcm9wcGFibGVJZCAmJiBmaXJzdC5kcmFnZ2FibGUudHlwZSA9PT0gc2Vjb25kLmRyYWdnYWJsZS50eXBlICYmIGZpcnN0LmRyYWdnYWJsZS5pbmRleCA9PT0gc2Vjb25kLmRyYWdnYWJsZS5pbmRleDtcbiAgdmFyIGlzRHJvcHBhYmxlRXF1YWwgPSBmaXJzdC5kcm9wcGFibGUuaWQgPT09IHNlY29uZC5kcm9wcGFibGUuaWQgJiYgZmlyc3QuZHJvcHBhYmxlLnR5cGUgPT09IHNlY29uZC5kcm9wcGFibGUudHlwZTtcbiAgcmV0dXJuIGlzRHJhZ2dhYmxlRXF1YWwgJiYgaXNEcm9wcGFibGVFcXVhbDtcbn07XG5cbnZhciB3aXRoVGltaW5ncyA9IGZ1bmN0aW9uIHdpdGhUaW1pbmdzKGtleSwgZm4pIHtcbiAgc3RhcnQoKTtcbiAgZm4oKTtcbiAgZmluaXNoKCk7XG59O1xuXG52YXIgZ2V0RHJhZ1N0YXJ0ID0gZnVuY3Rpb24gZ2V0RHJhZ1N0YXJ0KGNyaXRpY2FsLCBtb2RlKSB7XG4gIHJldHVybiB7XG4gICAgZHJhZ2dhYmxlSWQ6IGNyaXRpY2FsLmRyYWdnYWJsZS5pZCxcbiAgICB0eXBlOiBjcml0aWNhbC5kcm9wcGFibGUudHlwZSxcbiAgICBzb3VyY2U6IHtcbiAgICAgIGRyb3BwYWJsZUlkOiBjcml0aWNhbC5kcm9wcGFibGUuaWQsXG4gICAgICBpbmRleDogY3JpdGljYWwuZHJhZ2dhYmxlLmluZGV4XG4gICAgfSxcbiAgICBtb2RlOiBtb2RlXG4gIH07XG59O1xuXG52YXIgZXhlY3V0ZSA9IGZ1bmN0aW9uIGV4ZWN1dGUocmVzcG9uZGVyLCBkYXRhLCBhbm5vdW5jZSwgZ2V0RGVmYXVsdE1lc3NhZ2UpIHtcbiAgaWYgKCFyZXNwb25kZXIpIHtcbiAgICBhbm5vdW5jZShnZXREZWZhdWx0TWVzc2FnZShkYXRhKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHdpbGxFeHBpcmUgPSBnZXRFeHBpcmluZ0Fubm91bmNlKGFubm91bmNlKTtcbiAgdmFyIHByb3ZpZGVkID0ge1xuICAgIGFubm91bmNlOiB3aWxsRXhwaXJlXG4gIH07XG4gIHJlc3BvbmRlcihkYXRhLCBwcm92aWRlZCk7XG5cbiAgaWYgKCF3aWxsRXhwaXJlLndhc0NhbGxlZCgpKSB7XG4gICAgYW5ub3VuY2UoZ2V0RGVmYXVsdE1lc3NhZ2UoZGF0YSkpO1xuICB9XG59O1xuXG52YXIgZ2V0UHVibGlzaGVyID0gKGZ1bmN0aW9uIChnZXRSZXNwb25kZXJzLCBhbm5vdW5jZSkge1xuICB2YXIgYXN5bmNNYXJzaGFsID0gZ2V0QXN5bmNNYXJzaGFsKCk7XG4gIHZhciBkcmFnZ2luZyA9IG51bGw7XG5cbiAgdmFyIGJlZm9yZUNhcHR1cmUgPSBmdW5jdGlvbiBiZWZvcmVDYXB0dXJlKGRyYWdnYWJsZUlkLCBtb2RlKSB7XG4gICAgISFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaXJlIG9uQmVmb3JlQ2FwdHVyZSBhcyBhIGRyYWcgc3RhcnQgaGFzIGFscmVhZHkgYmVlbiBwdWJsaXNoZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgd2l0aFRpbWluZ3MoJ29uQmVmb3JlQ2FwdHVyZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBmbiA9IGdldFJlc3BvbmRlcnMoKS5vbkJlZm9yZUNhcHR1cmU7XG5cbiAgICAgIGlmIChmbikge1xuICAgICAgICB2YXIgYmVmb3JlID0ge1xuICAgICAgICAgIGRyYWdnYWJsZUlkOiBkcmFnZ2FibGVJZCxcbiAgICAgICAgICBtb2RlOiBtb2RlXG4gICAgICAgIH07XG4gICAgICAgIGZuKGJlZm9yZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGJlZm9yZVN0YXJ0ID0gZnVuY3Rpb24gYmVmb3JlU3RhcnQoY3JpdGljYWwsIG1vZGUpIHtcbiAgICAhIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpcmUgb25CZWZvcmVEcmFnU3RhcnQgYXMgYSBkcmFnIHN0YXJ0IGhhcyBhbHJlYWR5IGJlZW4gcHVibGlzaGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHdpdGhUaW1pbmdzKCdvbkJlZm9yZURyYWdTdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBmbiA9IGdldFJlc3BvbmRlcnMoKS5vbkJlZm9yZURyYWdTdGFydDtcblxuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIGZuKGdldERyYWdTdGFydChjcml0aWNhbCwgbW9kZSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBzdGFydCA9IGZ1bmN0aW9uIHN0YXJ0KGNyaXRpY2FsLCBtb2RlKSB7XG4gICAgISFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaXJlIG9uQmVmb3JlRHJhZ1N0YXJ0IGFzIGEgZHJhZyBzdGFydCBoYXMgYWxyZWFkeSBiZWVuIHB1Ymxpc2hlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgZGF0YSA9IGdldERyYWdTdGFydChjcml0aWNhbCwgbW9kZSk7XG4gICAgZHJhZ2dpbmcgPSB7XG4gICAgICBtb2RlOiBtb2RlLFxuICAgICAgbGFzdENyaXRpY2FsOiBjcml0aWNhbCxcbiAgICAgIGxhc3RMb2NhdGlvbjogZGF0YS5zb3VyY2UsXG4gICAgICBsYXN0Q29tYmluZTogbnVsbFxuICAgIH07XG4gICAgYXN5bmNNYXJzaGFsLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICB3aXRoVGltaW5ncygnb25EcmFnU3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBleGVjdXRlKGdldFJlc3BvbmRlcnMoKS5vbkRyYWdTdGFydCwgZGF0YSwgYW5ub3VuY2UsIHByZXNldC5vbkRyYWdTdGFydCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGNyaXRpY2FsLCBpbXBhY3QpIHtcbiAgICB2YXIgbG9jYXRpb24gPSB0cnlHZXREZXN0aW5hdGlvbihpbXBhY3QpO1xuICAgIHZhciBjb21iaW5lID0gdHJ5R2V0Q29tYmluZShpbXBhY3QpO1xuICAgICFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaXJlIG9uRHJhZ01vdmUgd2hlbiBvbkRyYWdTdGFydCBoYXMgbm90IGJlZW4gY2FsbGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoYXNDcml0aWNhbENoYW5nZWQgPSAhaXNDcml0aWNhbEVxdWFsKGNyaXRpY2FsLCBkcmFnZ2luZy5sYXN0Q3JpdGljYWwpO1xuXG4gICAgaWYgKGhhc0NyaXRpY2FsQ2hhbmdlZCkge1xuICAgICAgZHJhZ2dpbmcubGFzdENyaXRpY2FsID0gY3JpdGljYWw7XG4gICAgfVxuXG4gICAgdmFyIGhhc0xvY2F0aW9uQ2hhbmdlZCA9ICFhcmVMb2NhdGlvbnNFcXVhbChkcmFnZ2luZy5sYXN0TG9jYXRpb24sIGxvY2F0aW9uKTtcblxuICAgIGlmIChoYXNMb2NhdGlvbkNoYW5nZWQpIHtcbiAgICAgIGRyYWdnaW5nLmxhc3RMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgIH1cblxuICAgIHZhciBoYXNHcm91cGluZ0NoYW5nZWQgPSAhaXNDb21iaW5lRXF1YWwoZHJhZ2dpbmcubGFzdENvbWJpbmUsIGNvbWJpbmUpO1xuXG4gICAgaWYgKGhhc0dyb3VwaW5nQ2hhbmdlZCkge1xuICAgICAgZHJhZ2dpbmcubGFzdENvbWJpbmUgPSBjb21iaW5lO1xuICAgIH1cblxuICAgIGlmICghaGFzQ3JpdGljYWxDaGFuZ2VkICYmICFoYXNMb2NhdGlvbkNoYW5nZWQgJiYgIWhhc0dyb3VwaW5nQ2hhbmdlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0gX2V4dGVuZHMoe30sIGdldERyYWdTdGFydChjcml0aWNhbCwgZHJhZ2dpbmcubW9kZSksIHtcbiAgICAgIGNvbWJpbmU6IGNvbWJpbmUsXG4gICAgICBkZXN0aW5hdGlvbjogbG9jYXRpb25cbiAgICB9KTtcblxuICAgIGFzeW5jTWFyc2hhbC5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgd2l0aFRpbWluZ3MoJ29uRHJhZ1VwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGUoZ2V0UmVzcG9uZGVycygpLm9uRHJhZ1VwZGF0ZSwgZGF0YSwgYW5ub3VuY2UsIHByZXNldC5vbkRyYWdVcGRhdGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2FuIG9ubHkgZmx1c2ggcmVzcG9uZGVycyB3aGlsZSBkcmFnZ2luZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBhc3luY01hcnNoYWwuZmx1c2goKTtcbiAgfTtcblxuICB2YXIgZHJvcCA9IGZ1bmN0aW9uIGRyb3AocmVzdWx0KSB7XG4gICAgIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpcmUgb25EcmFnRW5kIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgb25EcmFnU3RhcnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgZHJhZ2dpbmcgPSBudWxsO1xuICAgIHdpdGhUaW1pbmdzKCdvbkRyYWdFbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZXhlY3V0ZShnZXRSZXNwb25kZXJzKCkub25EcmFnRW5kLCByZXN1bHQsIGFubm91bmNlLCBwcmVzZXQub25EcmFnRW5kKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgYWJvcnQgPSBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IF9leHRlbmRzKHt9LCBnZXREcmFnU3RhcnQoZHJhZ2dpbmcubGFzdENyaXRpY2FsLCBkcmFnZ2luZy5tb2RlKSwge1xuICAgICAgY29tYmluZTogbnVsbCxcbiAgICAgIGRlc3RpbmF0aW9uOiBudWxsLFxuICAgICAgcmVhc29uOiAnQ0FOQ0VMJ1xuICAgIH0pO1xuXG4gICAgZHJvcChyZXN1bHQpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYmVmb3JlQ2FwdHVyZTogYmVmb3JlQ2FwdHVyZSxcbiAgICBiZWZvcmVTdGFydDogYmVmb3JlU3RhcnQsXG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgIGZsdXNoOiBmbHVzaCxcbiAgICBkcm9wOiBkcm9wLFxuICAgIGFib3J0OiBhYm9ydFxuICB9O1xufSk7XG5cbnZhciByZXNwb25kZXJzID0gKGZ1bmN0aW9uIChnZXRSZXNwb25kZXJzLCBhbm5vdW5jZSkge1xuICB2YXIgcHVibGlzaGVyID0gZ2V0UHVibGlzaGVyKGdldFJlc3BvbmRlcnMsIGFubm91bmNlKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnQkVGT1JFX0lOSVRJQUxfQ0FQVFVSRScpIHtcbiAgICAgICAgICBwdWJsaXNoZXIuYmVmb3JlQ2FwdHVyZShhY3Rpb24ucGF5bG9hZC5kcmFnZ2FibGVJZCwgYWN0aW9uLnBheWxvYWQubW92ZW1lbnRNb2RlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdJTklUSUFMX1BVQkxJU0gnKSB7XG4gICAgICAgICAgdmFyIGNyaXRpY2FsID0gYWN0aW9uLnBheWxvYWQuY3JpdGljYWw7XG4gICAgICAgICAgcHVibGlzaGVyLmJlZm9yZVN0YXJ0KGNyaXRpY2FsLCBhY3Rpb24ucGF5bG9hZC5tb3ZlbWVudE1vZGUpO1xuICAgICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgICBwdWJsaXNoZXIuc3RhcnQoY3JpdGljYWwsIGFjdGlvbi5wYXlsb2FkLm1vdmVtZW50TW9kZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnRFJPUF9DT01QTEVURScpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gYWN0aW9uLnBheWxvYWQuY29tcGxldGVkLnJlc3VsdDtcbiAgICAgICAgICBwdWJsaXNoZXIuZmx1c2goKTtcbiAgICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgICAgcHVibGlzaGVyLmRyb3AocmVzdWx0KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0KGFjdGlvbik7XG5cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnRkxVU0gnKSB7XG4gICAgICAgICAgcHVibGlzaGVyLmFib3J0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUkFHR0lORycpIHtcbiAgICAgICAgICBwdWJsaXNoZXIudXBkYXRlKHN0YXRlLmNyaXRpY2FsLCBzdGF0ZS5pbXBhY3QpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGRyb3BBbmltYXRpb25GaW5pc2ggPSAoZnVuY3Rpb24gKHN0b3JlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICBpZiAoYWN0aW9uLnR5cGUgIT09ICdEUk9QX0FOSU1BVElPTl9GSU5JU0hFRCcpIHtcbiAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAhKHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaW5pc2ggYSBkcm9wIGFuaW1hdGluZyB3aGVuIG5vIGRyb3AgaXMgb2NjdXJyaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgc3RvcmUuZGlzcGF0Y2goY29tcGxldGVEcm9wKHtcbiAgICAgICAgY29tcGxldGVkOiBzdGF0ZS5jb21wbGV0ZWRcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBkcm9wQW5pbWF0aW9uRmx1c2hPblNjcm9sbCA9IChmdW5jdGlvbiAoc3RvcmUpIHtcbiAgdmFyIHVuYmluZCA9IG51bGw7XG4gIHZhciBmcmFtZUlkID0gbnVsbDtcblxuICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICBpZiAoZnJhbWVJZCkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWVJZCk7XG4gICAgICBmcmFtZUlkID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodW5iaW5kKSB7XG4gICAgICB1bmJpbmQoKTtcbiAgICAgIHVuYmluZCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0ZMVVNIJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnIHx8IGFjdGlvbi50eXBlID09PSAnRFJPUF9BTklNQVRJT05fRklOSVNIRUQnKSB7XG4gICAgICAgIGNsZWFyKCk7XG4gICAgICB9XG5cbiAgICAgIG5leHQoYWN0aW9uKTtcblxuICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSAnRFJPUF9BTklNQVRFJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBiaW5kaW5nID0ge1xuICAgICAgICBldmVudE5hbWU6ICdzY3JvbGwnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGZuOiBmdW5jdGlvbiBmbHVzaERyb3BBbmltYXRpb24oKSB7XG4gICAgICAgICAgdmFyIHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RST1BfQU5JTUFUSU5HJykge1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goZHJvcEFuaW1hdGlvbkZpbmlzaGVkKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGZyYW1lSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBmcmFtZUlkID0gbnVsbDtcbiAgICAgICAgdW5iaW5kID0gYmluZEV2ZW50cyh3aW5kb3csIFtiaW5kaW5nXSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBkaW1lbnNpb25NYXJzaGFsU3RvcHBlciA9IChmdW5jdGlvbiAobWFyc2hhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnRFJPUF9DT01QTEVURScgfHwgYWN0aW9uLnR5cGUgPT09ICdGTFVTSCcgfHwgYWN0aW9uLnR5cGUgPT09ICdEUk9QX0FOSU1BVEUnKSB7XG4gICAgICAgICAgbWFyc2hhbC5zdG9wUHVibGlzaGluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBmb2N1cyA9IChmdW5jdGlvbiAobWFyc2hhbCkge1xuICB2YXIgaXNXYXRjaGluZyA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnSU5JVElBTF9QVUJMSVNIJykge1xuICAgICAgICAgIGlzV2F0Y2hpbmcgPSB0cnVlO1xuICAgICAgICAgIG1hcnNoYWwudHJ5UmVjb3JkRm9jdXMoYWN0aW9uLnBheWxvYWQuY3JpdGljYWwuZHJhZ2dhYmxlLmlkKTtcbiAgICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgICAgbWFyc2hhbC50cnlSZXN0b3JlRm9jdXNSZWNvcmRlZCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHQoYWN0aW9uKTtcblxuICAgICAgICBpZiAoIWlzV2F0Y2hpbmcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdGTFVTSCcpIHtcbiAgICAgICAgICBpc1dhdGNoaW5nID0gZmFsc2U7XG4gICAgICAgICAgbWFyc2hhbC50cnlSZXN0b3JlRm9jdXNSZWNvcmRlZCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnKSB7XG4gICAgICAgICAgaXNXYXRjaGluZyA9IGZhbHNlO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBhY3Rpb24ucGF5bG9hZC5jb21wbGV0ZWQucmVzdWx0O1xuXG4gICAgICAgICAgaWYgKHJlc3VsdC5jb21iaW5lKSB7XG4gICAgICAgICAgICBtYXJzaGFsLnRyeVNoaWZ0UmVjb3JkKHJlc3VsdC5kcmFnZ2FibGVJZCwgcmVzdWx0LmNvbWJpbmUuZHJhZ2dhYmxlSWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1hcnNoYWwudHJ5UmVzdG9yZUZvY3VzUmVjb3JkZWQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBzaG91bGRTdG9wID0gZnVuY3Rpb24gc2hvdWxkU3RvcChhY3Rpb24pIHtcbiAgcmV0dXJuIGFjdGlvbi50eXBlID09PSAnRFJPUF9DT01QTEVURScgfHwgYWN0aW9uLnR5cGUgPT09ICdEUk9QX0FOSU1BVEUnIHx8IGFjdGlvbi50eXBlID09PSAnRkxVU0gnO1xufTtcblxudmFyIGF1dG9TY3JvbGwgPSAoZnVuY3Rpb24gKGF1dG9TY3JvbGxlcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAoc2hvdWxkU3RvcChhY3Rpb24pKSB7XG4gICAgICAgICAgYXV0b1Njcm9sbGVyLnN0b3AoKTtcbiAgICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnSU5JVElBTF9QVUJMSVNIJykge1xuICAgICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICEoc3RhdGUucGhhc2UgPT09ICdEUkFHR0lORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgcGhhc2UgdG8gYmUgRFJBR0dJTkcgYWZ0ZXIgSU5JVElBTF9QVUJMSVNIJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgIGF1dG9TY3JvbGxlci5zdGFydChzdGF0ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICBhdXRvU2Nyb2xsZXIuc2Nyb2xsKHN0b3JlLmdldFN0YXRlKCkpO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBwZW5kaW5nRHJvcCA9IChmdW5jdGlvbiAoc3RvcmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIG5leHQoYWN0aW9uKTtcblxuICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSAnUFVCTElTSF9XSElMRV9EUkFHR0lORycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9zdEFjdGlvblN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgaWYgKHBvc3RBY3Rpb25TdGF0ZS5waGFzZSAhPT0gJ0RST1BfUEVORElORycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocG9zdEFjdGlvblN0YXRlLmlzV2FpdGluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN0b3JlLmRpc3BhdGNoKGRyb3Aoe1xuICAgICAgICByZWFzb246IHBvc3RBY3Rpb25TdGF0ZS5yZWFzb25cbiAgICAgIH0pKTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBjb21wb3NlRW5oYW5jZXJzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyh7XG4gIG5hbWU6ICdyZWFjdC1iZWF1dGlmdWwtZG5kJ1xufSkgOiBjb21wb3NlO1xudmFyIGNyZWF0ZVN0b3JlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkaW1lbnNpb25NYXJzaGFsID0gX3JlZi5kaW1lbnNpb25NYXJzaGFsLFxuICAgICAgZm9jdXNNYXJzaGFsID0gX3JlZi5mb2N1c01hcnNoYWwsXG4gICAgICBzdHlsZU1hcnNoYWwgPSBfcmVmLnN0eWxlTWFyc2hhbCxcbiAgICAgIGdldFJlc3BvbmRlcnMgPSBfcmVmLmdldFJlc3BvbmRlcnMsXG4gICAgICBhbm5vdW5jZSA9IF9yZWYuYW5ub3VuY2UsXG4gICAgICBhdXRvU2Nyb2xsZXIgPSBfcmVmLmF1dG9TY3JvbGxlcjtcbiAgcmV0dXJuIGNyZWF0ZVN0b3JlJDEocmVkdWNlciwgY29tcG9zZUVuaGFuY2VycyhhcHBseU1pZGRsZXdhcmUoc3R5bGUoc3R5bGVNYXJzaGFsKSwgZGltZW5zaW9uTWFyc2hhbFN0b3BwZXIoZGltZW5zaW9uTWFyc2hhbCksIGxpZnQkMShkaW1lbnNpb25NYXJzaGFsKSwgZHJvcCQxLCBkcm9wQW5pbWF0aW9uRmluaXNoLCBkcm9wQW5pbWF0aW9uRmx1c2hPblNjcm9sbCwgcGVuZGluZ0Ryb3AsIGF1dG9TY3JvbGwoYXV0b1Njcm9sbGVyKSwgc2Nyb2xsTGlzdGVuZXIsIGZvY3VzKGZvY3VzTWFyc2hhbCksIHJlc3BvbmRlcnMoZ2V0UmVzcG9uZGVycywgYW5ub3VuY2UpKSkpO1xufSk7XG5cbnZhciBjbGVhbiQxID0gZnVuY3Rpb24gY2xlYW4oKSB7XG4gIHJldHVybiB7XG4gICAgYWRkaXRpb25zOiB7fSxcbiAgICByZW1vdmFsczoge30sXG4gICAgbW9kaWZpZWQ6IHt9XG4gIH07XG59O1xuZnVuY3Rpb24gY3JlYXRlUHVibGlzaGVyKF9yZWYpIHtcbiAgdmFyIHJlZ2lzdHJ5ID0gX3JlZi5yZWdpc3RyeSxcbiAgICAgIGNhbGxiYWNrcyA9IF9yZWYuY2FsbGJhY2tzO1xuICB2YXIgc3RhZ2luZyA9IGNsZWFuJDEoKTtcbiAgdmFyIGZyYW1lSWQgPSBudWxsO1xuXG4gIHZhciBjb2xsZWN0ID0gZnVuY3Rpb24gY29sbGVjdCgpIHtcbiAgICBpZiAoZnJhbWVJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhbGxiYWNrcy5jb2xsZWN0aW9uU3RhcnRpbmcoKTtcbiAgICBmcmFtZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZyYW1lSWQgPSBudWxsO1xuICAgICAgc3RhcnQoKTtcbiAgICAgIHZhciBfc3RhZ2luZyA9IHN0YWdpbmcsXG4gICAgICAgICAgYWRkaXRpb25zID0gX3N0YWdpbmcuYWRkaXRpb25zLFxuICAgICAgICAgIHJlbW92YWxzID0gX3N0YWdpbmcucmVtb3ZhbHMsXG4gICAgICAgICAgbW9kaWZpZWQgPSBfc3RhZ2luZy5tb2RpZmllZDtcbiAgICAgIHZhciBhZGRlZCA9IE9iamVjdC5rZXlzKGFkZGl0aW9ucykubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICByZXR1cm4gcmVnaXN0cnkuZHJhZ2dhYmxlLmdldEJ5SWQoaWQpLmdldERpbWVuc2lvbihvcmlnaW4pO1xuICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5kZXNjcmlwdG9yLmluZGV4IC0gYi5kZXNjcmlwdG9yLmluZGV4O1xuICAgICAgfSk7XG4gICAgICB2YXIgdXBkYXRlZCA9IE9iamVjdC5rZXlzKG1vZGlmaWVkKS5tYXAoZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHJlZ2lzdHJ5LmRyb3BwYWJsZS5nZXRCeUlkKGlkKTtcbiAgICAgICAgdmFyIHNjcm9sbCA9IGVudHJ5LmNhbGxiYWNrcy5nZXRTY3JvbGxXaGlsZURyYWdnaW5nKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZHJvcHBhYmxlSWQ6IGlkLFxuICAgICAgICAgIHNjcm9sbDogc2Nyb2xsXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGFkZGl0aW9uczogYWRkZWQsXG4gICAgICAgIHJlbW92YWxzOiBPYmplY3Qua2V5cyhyZW1vdmFscyksXG4gICAgICAgIG1vZGlmaWVkOiB1cGRhdGVkXG4gICAgICB9O1xuICAgICAgc3RhZ2luZyA9IGNsZWFuJDEoKTtcbiAgICAgIGZpbmlzaCgpO1xuICAgICAgY2FsbGJhY2tzLnB1Ymxpc2gocmVzdWx0KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgYWRkID0gZnVuY3Rpb24gYWRkKGVudHJ5KSB7XG4gICAgdmFyIGlkID0gZW50cnkuZGVzY3JpcHRvci5pZDtcbiAgICBzdGFnaW5nLmFkZGl0aW9uc1tpZF0gPSBlbnRyeTtcbiAgICBzdGFnaW5nLm1vZGlmaWVkW2VudHJ5LmRlc2NyaXB0b3IuZHJvcHBhYmxlSWRdID0gdHJ1ZTtcblxuICAgIGlmIChzdGFnaW5nLnJlbW92YWxzW2lkXSkge1xuICAgICAgZGVsZXRlIHN0YWdpbmcucmVtb3ZhbHNbaWRdO1xuICAgIH1cblxuICAgIGNvbGxlY3QoKTtcbiAgfTtcblxuICB2YXIgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKGVudHJ5KSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBlbnRyeS5kZXNjcmlwdG9yO1xuICAgIHN0YWdpbmcucmVtb3ZhbHNbZGVzY3JpcHRvci5pZF0gPSB0cnVlO1xuICAgIHN0YWdpbmcubW9kaWZpZWRbZGVzY3JpcHRvci5kcm9wcGFibGVJZF0gPSB0cnVlO1xuXG4gICAgaWYgKHN0YWdpbmcuYWRkaXRpb25zW2Rlc2NyaXB0b3IuaWRdKSB7XG4gICAgICBkZWxldGUgc3RhZ2luZy5hZGRpdGlvbnNbZGVzY3JpcHRvci5pZF07XG4gICAgfVxuXG4gICAgY29sbGVjdCgpO1xuICB9O1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBpZiAoIWZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZUlkKTtcbiAgICBmcmFtZUlkID0gbnVsbDtcbiAgICBzdGFnaW5nID0gY2xlYW4kMSgpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYWRkOiBhZGQsXG4gICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgc3RvcDogc3RvcFxuICB9O1xufVxuXG52YXIgZ2V0TWF4U2Nyb2xsID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzY3JvbGxIZWlnaHQgPSBfcmVmLnNjcm9sbEhlaWdodCxcbiAgICAgIHNjcm9sbFdpZHRoID0gX3JlZi5zY3JvbGxXaWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0LFxuICAgICAgd2lkdGggPSBfcmVmLndpZHRoO1xuICB2YXIgbWF4U2Nyb2xsID0gc3VidHJhY3Qoe1xuICAgIHg6IHNjcm9sbFdpZHRoLFxuICAgIHk6IHNjcm9sbEhlaWdodFxuICB9LCB7XG4gICAgeDogd2lkdGgsXG4gICAgeTogaGVpZ2h0XG4gIH0pO1xuICB2YXIgYWRqdXN0ZWRNYXhTY3JvbGwgPSB7XG4gICAgeDogTWF0aC5tYXgoMCwgbWF4U2Nyb2xsLngpLFxuICAgIHk6IE1hdGgubWF4KDAsIG1heFNjcm9sbC55KVxuICB9O1xuICByZXR1cm4gYWRqdXN0ZWRNYXhTY3JvbGw7XG59KTtcblxudmFyIGdldERvY3VtZW50RWxlbWVudCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBkb2MgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICFkb2MgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmluZCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBkb2M7XG59KTtcblxudmFyIGdldE1heFdpbmRvd1Njcm9sbCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBkb2MgPSBnZXREb2N1bWVudEVsZW1lbnQoKTtcbiAgdmFyIG1heFNjcm9sbCA9IGdldE1heFNjcm9sbCh7XG4gICAgc2Nyb2xsSGVpZ2h0OiBkb2Muc2Nyb2xsSGVpZ2h0LFxuICAgIHNjcm9sbFdpZHRoOiBkb2Muc2Nyb2xsV2lkdGgsXG4gICAgd2lkdGg6IGRvYy5jbGllbnRXaWR0aCxcbiAgICBoZWlnaHQ6IGRvYy5jbGllbnRIZWlnaHRcbiAgfSk7XG4gIHJldHVybiBtYXhTY3JvbGw7XG59KTtcblxudmFyIGdldFZpZXdwb3J0ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbCgpO1xuICB2YXIgbWF4U2Nyb2xsID0gZ2V0TWF4V2luZG93U2Nyb2xsKCk7XG4gIHZhciB0b3AgPSBzY3JvbGwueTtcbiAgdmFyIGxlZnQgPSBzY3JvbGwueDtcbiAgdmFyIGRvYyA9IGdldERvY3VtZW50RWxlbWVudCgpO1xuICB2YXIgd2lkdGggPSBkb2MuY2xpZW50V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBkb2MuY2xpZW50SGVpZ2h0O1xuICB2YXIgcmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG4gIHZhciBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gIHZhciBmcmFtZSA9IGdldFJlY3Qoe1xuICAgIHRvcDogdG9wLFxuICAgIGxlZnQ6IGxlZnQsXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIGJvdHRvbTogYm90dG9tXG4gIH0pO1xuICB2YXIgdmlld3BvcnQgPSB7XG4gICAgZnJhbWU6IGZyYW1lLFxuICAgIHNjcm9sbDoge1xuICAgICAgaW5pdGlhbDogc2Nyb2xsLFxuICAgICAgY3VycmVudDogc2Nyb2xsLFxuICAgICAgbWF4OiBtYXhTY3JvbGwsXG4gICAgICBkaWZmOiB7XG4gICAgICAgIHZhbHVlOiBvcmlnaW4sXG4gICAgICAgIGRpc3BsYWNlbWVudDogb3JpZ2luXG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gdmlld3BvcnQ7XG59KTtcblxudmFyIGdldEluaXRpYWxQdWJsaXNoID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjcml0aWNhbCA9IF9yZWYuY3JpdGljYWwsXG4gICAgICBzY3JvbGxPcHRpb25zID0gX3JlZi5zY3JvbGxPcHRpb25zLFxuICAgICAgcmVnaXN0cnkgPSBfcmVmLnJlZ2lzdHJ5O1xuICBzdGFydCgpO1xuICB2YXIgdmlld3BvcnQgPSBnZXRWaWV3cG9ydCgpO1xuICB2YXIgd2luZG93U2Nyb2xsID0gdmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQ7XG4gIHZhciBob21lID0gY3JpdGljYWwuZHJvcHBhYmxlO1xuICB2YXIgZHJvcHBhYmxlcyA9IHJlZ2lzdHJ5LmRyb3BwYWJsZS5nZXRBbGxCeVR5cGUoaG9tZS50eXBlKS5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIGVudHJ5LmNhbGxiYWNrcy5nZXREaW1lbnNpb25BbmRXYXRjaFNjcm9sbCh3aW5kb3dTY3JvbGwsIHNjcm9sbE9wdGlvbnMpO1xuICB9KTtcbiAgdmFyIGRyYWdnYWJsZXMgPSByZWdpc3RyeS5kcmFnZ2FibGUuZ2V0QWxsQnlUeXBlKGNyaXRpY2FsLmRyYWdnYWJsZS50eXBlKS5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIGVudHJ5LmdldERpbWVuc2lvbih3aW5kb3dTY3JvbGwpO1xuICB9KTtcbiAgdmFyIGRpbWVuc2lvbnMgPSB7XG4gICAgZHJhZ2dhYmxlczogdG9EcmFnZ2FibGVNYXAoZHJhZ2dhYmxlcyksXG4gICAgZHJvcHBhYmxlczogdG9Ecm9wcGFibGVNYXAoZHJvcHBhYmxlcylcbiAgfTtcbiAgZmluaXNoKCk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICBjcml0aWNhbDogY3JpdGljYWwsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxuZnVuY3Rpb24gc2hvdWxkUHVibGlzaFVwZGF0ZShyZWdpc3RyeSwgZHJhZ2dpbmcsIGVudHJ5KSB7XG4gIGlmIChlbnRyeS5kZXNjcmlwdG9yLmlkID09PSBkcmFnZ2luZy5pZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChlbnRyeS5kZXNjcmlwdG9yLnR5cGUgIT09IGRyYWdnaW5nLnR5cGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgaG9tZSA9IHJlZ2lzdHJ5LmRyb3BwYWJsZS5nZXRCeUlkKGVudHJ5LmRlc2NyaXB0b3IuZHJvcHBhYmxlSWQpO1xuXG4gIGlmIChob21lLmRlc2NyaXB0b3IubW9kZSAhPT0gJ3ZpcnR1YWwnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIFlvdSBhcmUgYXR0ZW1wdGluZyB0byBhZGQgb3IgcmVtb3ZlIGEgRHJhZ2dhYmxlIFtpZDogXCIgKyBlbnRyeS5kZXNjcmlwdG9yLmlkICsgXCJdXFxuICAgICAgd2hpbGUgYSBkcmFnIGlzIG9jY3VycmluZy4gVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgdmlydHVhbCBsaXN0cy5cXG5cXG4gICAgICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kL2Jsb2IvbWFzdGVyL2RvY3MvcGF0dGVybnMvdmlydHVhbC1saXN0cy5tZFxcbiAgICBcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbnZhciBjcmVhdGVEaW1lbnNpb25NYXJzaGFsID0gKGZ1bmN0aW9uIChyZWdpc3RyeSwgY2FsbGJhY2tzKSB7XG4gIHZhciBjb2xsZWN0aW9uID0gbnVsbDtcbiAgdmFyIHB1Ymxpc2hlciA9IGNyZWF0ZVB1Ymxpc2hlcih7XG4gICAgY2FsbGJhY2tzOiB7XG4gICAgICBwdWJsaXNoOiBjYWxsYmFja3MucHVibGlzaFdoaWxlRHJhZ2dpbmcsXG4gICAgICBjb2xsZWN0aW9uU3RhcnRpbmc6IGNhbGxiYWNrcy5jb2xsZWN0aW9uU3RhcnRpbmdcbiAgICB9LFxuICAgIHJlZ2lzdHJ5OiByZWdpc3RyeVxuICB9KTtcblxuICB2YXIgdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkID0gZnVuY3Rpb24gdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkKGlkLCBpc0VuYWJsZWQpIHtcbiAgICAhcmVnaXN0cnkuZHJvcHBhYmxlLmV4aXN0cyhpZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IHVwZGF0ZSBpcyBlbmFibGVkIGZsYWcgb2YgRHJvcHBhYmxlIFwiICsgaWQgKyBcIiBhcyBpdCBpcyBub3QgcmVnaXN0ZXJlZFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYWxsYmFja3MudXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkKHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGlzRW5hYmxlZDogaXNFbmFibGVkXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQgPSBmdW5jdGlvbiB1cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkKGlkLCBpc0NvbWJpbmVFbmFibGVkKSB7XG4gICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgIXJlZ2lzdHJ5LmRyb3BwYWJsZS5leGlzdHMoaWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCB1cGRhdGUgaXNDb21iaW5lRW5hYmxlZCBmbGFnIG9mIERyb3BwYWJsZSBcIiArIGlkICsgXCIgYXMgaXQgaXMgbm90IHJlZ2lzdGVyZWRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGNhbGxiYWNrcy51cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkKHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGlzQ29tYmluZUVuYWJsZWQ6IGlzQ29tYmluZUVuYWJsZWRcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgdXBkYXRlRHJvcHBhYmxlU2Nyb2xsID0gZnVuY3Rpb24gdXBkYXRlRHJvcHBhYmxlU2Nyb2xsKGlkLCBuZXdTY3JvbGwpIHtcbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAhcmVnaXN0cnkuZHJvcHBhYmxlLmV4aXN0cyhpZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IHVwZGF0ZSB0aGUgc2Nyb2xsIG9uIERyb3BwYWJsZSBcIiArIGlkICsgXCIgYXMgaXQgaXMgbm90IHJlZ2lzdGVyZWRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGNhbGxiYWNrcy51cGRhdGVEcm9wcGFibGVTY3JvbGwoe1xuICAgICAgaWQ6IGlkLFxuICAgICAgbmV3U2Nyb2xsOiBuZXdTY3JvbGxcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgc2Nyb2xsRHJvcHBhYmxlID0gZnVuY3Rpb24gc2Nyb2xsRHJvcHBhYmxlKGlkLCBjaGFuZ2UpIHtcbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZWdpc3RyeS5kcm9wcGFibGUuZ2V0QnlJZChpZCkuY2FsbGJhY2tzLnNjcm9sbChjaGFuZ2UpO1xuICB9O1xuXG4gIHZhciBzdG9wUHVibGlzaGluZyA9IGZ1bmN0aW9uIHN0b3BQdWJsaXNoaW5nKCkge1xuICAgIGlmICghY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHB1Ymxpc2hlci5zdG9wKCk7XG4gICAgdmFyIGhvbWUgPSBjb2xsZWN0aW9uLmNyaXRpY2FsLmRyb3BwYWJsZTtcbiAgICByZWdpc3RyeS5kcm9wcGFibGUuZ2V0QWxsQnlUeXBlKGhvbWUudHlwZSkuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIHJldHVybiBlbnRyeS5jYWxsYmFja3MuZHJhZ1N0b3BwZWQoKTtcbiAgICB9KTtcbiAgICBjb2xsZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgY29sbGVjdGlvbiA9IG51bGw7XG4gIH07XG5cbiAgdmFyIHN1YnNjcmliZXIgPSBmdW5jdGlvbiBzdWJzY3JpYmVyKGV2ZW50KSB7XG4gICAgIWNvbGxlY3Rpb24gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgb25seSBiZSBzdWJzY3JpYmVkIHdoZW4gYSBjb2xsZWN0aW9uIGlzIG9jY3VycmluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgZHJhZ2dpbmcgPSBjb2xsZWN0aW9uLmNyaXRpY2FsLmRyYWdnYWJsZTtcblxuICAgIGlmIChldmVudC50eXBlID09PSAnQURESVRJT04nKSB7XG4gICAgICBpZiAoc2hvdWxkUHVibGlzaFVwZGF0ZShyZWdpc3RyeSwgZHJhZ2dpbmcsIGV2ZW50LnZhbHVlKSkge1xuICAgICAgICBwdWJsaXNoZXIuYWRkKGV2ZW50LnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ1JFTU9WQUwnKSB7XG4gICAgICBpZiAoc2hvdWxkUHVibGlzaFVwZGF0ZShyZWdpc3RyeSwgZHJhZ2dpbmcsIGV2ZW50LnZhbHVlKSkge1xuICAgICAgICBwdWJsaXNoZXIucmVtb3ZlKGV2ZW50LnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHN0YXJ0UHVibGlzaGluZyA9IGZ1bmN0aW9uIHN0YXJ0UHVibGlzaGluZyhyZXF1ZXN0KSB7XG4gICAgISFjb2xsZWN0aW9uID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHN0YXJ0IGNhcHR1cmluZyBjcml0aWNhbCBkaW1lbnNpb25zIGFzIHRoZXJlIGlzIGFscmVhZHkgYSBjb2xsZWN0aW9uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBlbnRyeSA9IHJlZ2lzdHJ5LmRyYWdnYWJsZS5nZXRCeUlkKHJlcXVlc3QuZHJhZ2dhYmxlSWQpO1xuICAgIHZhciBob21lID0gcmVnaXN0cnkuZHJvcHBhYmxlLmdldEJ5SWQoZW50cnkuZGVzY3JpcHRvci5kcm9wcGFibGVJZCk7XG4gICAgdmFyIGNyaXRpY2FsID0ge1xuICAgICAgZHJhZ2dhYmxlOiBlbnRyeS5kZXNjcmlwdG9yLFxuICAgICAgZHJvcHBhYmxlOiBob21lLmRlc2NyaXB0b3JcbiAgICB9O1xuICAgIHZhciB1bnN1YnNjcmliZSA9IHJlZ2lzdHJ5LnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICBjb2xsZWN0aW9uID0ge1xuICAgICAgY3JpdGljYWw6IGNyaXRpY2FsLFxuICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgfTtcbiAgICByZXR1cm4gZ2V0SW5pdGlhbFB1Ymxpc2goe1xuICAgICAgY3JpdGljYWw6IGNyaXRpY2FsLFxuICAgICAgcmVnaXN0cnk6IHJlZ2lzdHJ5LFxuICAgICAgc2Nyb2xsT3B0aW9uczogcmVxdWVzdC5zY3JvbGxPcHRpb25zXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIG1hcnNoYWwgPSB7XG4gICAgdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkOiB1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQsXG4gICAgdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZDogdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCxcbiAgICBzY3JvbGxEcm9wcGFibGU6IHNjcm9sbERyb3BwYWJsZSxcbiAgICB1cGRhdGVEcm9wcGFibGVTY3JvbGw6IHVwZGF0ZURyb3BwYWJsZVNjcm9sbCxcbiAgICBzdGFydFB1Ymxpc2hpbmc6IHN0YXJ0UHVibGlzaGluZyxcbiAgICBzdG9wUHVibGlzaGluZzogc3RvcFB1Ymxpc2hpbmdcbiAgfTtcbiAgcmV0dXJuIG1hcnNoYWw7XG59KTtcblxudmFyIGNhblN0YXJ0RHJhZyA9IChmdW5jdGlvbiAoc3RhdGUsIGlkKSB7XG4gIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0lETEUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc3RhdGUucGhhc2UgIT09ICdEUk9QX0FOSU1BVElORycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoc3RhdGUuY29tcGxldGVkLnJlc3VsdC5kcmFnZ2FibGVJZCA9PT0gaWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gc3RhdGUuY29tcGxldGVkLnJlc3VsdC5yZWFzb24gPT09ICdEUk9QJztcbn0pO1xuXG52YXIgc2Nyb2xsV2luZG93ID0gKGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgd2luZG93LnNjcm9sbEJ5KGNoYW5nZS54LCBjaGFuZ2UueSk7XG59KTtcblxudmFyIGdldFNjcm9sbGFibGVEcm9wcGFibGVzID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJvcHBhYmxlcykge1xuICByZXR1cm4gdG9Ecm9wcGFibGVMaXN0KGRyb3BwYWJsZXMpLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgaWYgKCFkcm9wcGFibGUuaXNFbmFibGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFkcm9wcGFibGUuZnJhbWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG59KTtcblxudmFyIGdldFNjcm9sbGFibGVEcm9wcGFibGVPdmVyID0gZnVuY3Rpb24gZ2V0U2Nyb2xsYWJsZURyb3BwYWJsZU92ZXIodGFyZ2V0LCBkcm9wcGFibGVzKSB7XG4gIHZhciBtYXliZSA9IGZpbmQoZ2V0U2Nyb2xsYWJsZURyb3BwYWJsZXMoZHJvcHBhYmxlcyksIGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICAhZHJvcHBhYmxlLmZyYW1lID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSW52YWxpZCByZXN1bHQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGlzUG9zaXRpb25JbkZyYW1lKGRyb3BwYWJsZS5mcmFtZS5wYWdlTWFyZ2luQm94KSh0YXJnZXQpO1xuICB9KTtcbiAgcmV0dXJuIG1heWJlO1xufTtcblxudmFyIGdldEJlc3RTY3JvbGxhYmxlRHJvcHBhYmxlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjZW50ZXIgPSBfcmVmLmNlbnRlcixcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmLmRyb3BwYWJsZXM7XG5cbiAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgdmFyIF9kaW1lbnNpb24gPSBkcm9wcGFibGVzW2Rlc3RpbmF0aW9uXTtcblxuICAgIGlmICghX2RpbWVuc2lvbi5mcmFtZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9kaW1lbnNpb247XG4gIH1cblxuICB2YXIgZGltZW5zaW9uID0gZ2V0U2Nyb2xsYWJsZURyb3BwYWJsZU92ZXIoY2VudGVyLCBkcm9wcGFibGVzKTtcbiAgcmV0dXJuIGRpbWVuc2lvbjtcbn0pO1xuXG52YXIgY29uZmlnID0ge1xuICBzdGFydEZyb21QZXJjZW50YWdlOiAwLjI1LFxuICBtYXhTY3JvbGxBdFBlcmNlbnRhZ2U6IDAuMDUsXG4gIG1heFBpeGVsU2Nyb2xsOiAyOCxcbiAgZWFzZTogZnVuY3Rpb24gZWFzZShwZXJjZW50YWdlKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHBlcmNlbnRhZ2UsIDIpO1xuICB9LFxuICBkdXJhdGlvbkRhbXBlbmluZzoge1xuICAgIHN0b3BEYW1wZW5pbmdBdDogMTIwMCxcbiAgICBhY2NlbGVyYXRlQXQ6IDM2MFxuICB9XG59O1xuXG52YXIgZ2V0RGlzdGFuY2VUaHJlc2hvbGRzID0gKGZ1bmN0aW9uIChjb250YWluZXIsIGF4aXMpIHtcbiAgdmFyIHN0YXJ0U2Nyb2xsaW5nRnJvbSA9IGNvbnRhaW5lcltheGlzLnNpemVdICogY29uZmlnLnN0YXJ0RnJvbVBlcmNlbnRhZ2U7XG4gIHZhciBtYXhTY3JvbGxWYWx1ZUF0ID0gY29udGFpbmVyW2F4aXMuc2l6ZV0gKiBjb25maWcubWF4U2Nyb2xsQXRQZXJjZW50YWdlO1xuICB2YXIgdGhyZXNob2xkcyA9IHtcbiAgICBzdGFydFNjcm9sbGluZ0Zyb206IHN0YXJ0U2Nyb2xsaW5nRnJvbSxcbiAgICBtYXhTY3JvbGxWYWx1ZUF0OiBtYXhTY3JvbGxWYWx1ZUF0XG4gIH07XG4gIHJldHVybiB0aHJlc2hvbGRzO1xufSk7XG5cbnZhciBnZXRQZXJjZW50YWdlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGFydE9mUmFuZ2UgPSBfcmVmLnN0YXJ0T2ZSYW5nZSxcbiAgICAgIGVuZE9mUmFuZ2UgPSBfcmVmLmVuZE9mUmFuZ2UsXG4gICAgICBjdXJyZW50ID0gX3JlZi5jdXJyZW50O1xuICB2YXIgcmFuZ2UgPSBlbmRPZlJhbmdlIC0gc3RhcnRPZlJhbmdlO1xuXG4gIGlmIChyYW5nZSA9PT0gMCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICBEZXRlY3RlZCBkaXN0YW5jZSByYW5nZSBvZiAwIGluIHRoZSBmbHVpZCBhdXRvIHNjcm9sbGVyXFxuICAgICAgVGhpcyBpcyB1bmV4cGVjdGVkIGFuZCB3b3VsZCBjYXVzZSBhIGRpdmlkZSBieSAwIGlzc3VlLlxcbiAgICAgIE5vdCBhbGxvd2luZyBhbiBhdXRvIHNjcm9sbFxcbiAgICBcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgY3VycmVudEluUmFuZ2UgPSBjdXJyZW50IC0gc3RhcnRPZlJhbmdlO1xuICB2YXIgcGVyY2VudGFnZSA9IGN1cnJlbnRJblJhbmdlIC8gcmFuZ2U7XG4gIHJldHVybiBwZXJjZW50YWdlO1xufSk7XG5cbnZhciBtaW5TY3JvbGwgPSAxO1xuXG52YXIgZ2V0VmFsdWVGcm9tRGlzdGFuY2UgPSAoZnVuY3Rpb24gKGRpc3RhbmNlVG9FZGdlLCB0aHJlc2hvbGRzKSB7XG4gIGlmIChkaXN0YW5jZVRvRWRnZSA+IHRocmVzaG9sZHMuc3RhcnRTY3JvbGxpbmdGcm9tKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoZGlzdGFuY2VUb0VkZ2UgPD0gdGhyZXNob2xkcy5tYXhTY3JvbGxWYWx1ZUF0KSB7XG4gICAgcmV0dXJuIGNvbmZpZy5tYXhQaXhlbFNjcm9sbDtcbiAgfVxuXG4gIGlmIChkaXN0YW5jZVRvRWRnZSA9PT0gdGhyZXNob2xkcy5zdGFydFNjcm9sbGluZ0Zyb20pIHtcbiAgICByZXR1cm4gbWluU2Nyb2xsO1xuICB9XG5cbiAgdmFyIHBlcmNlbnRhZ2VGcm9tTWF4U2Nyb2xsVmFsdWVBdCA9IGdldFBlcmNlbnRhZ2Uoe1xuICAgIHN0YXJ0T2ZSYW5nZTogdGhyZXNob2xkcy5tYXhTY3JvbGxWYWx1ZUF0LFxuICAgIGVuZE9mUmFuZ2U6IHRocmVzaG9sZHMuc3RhcnRTY3JvbGxpbmdGcm9tLFxuICAgIGN1cnJlbnQ6IGRpc3RhbmNlVG9FZGdlXG4gIH0pO1xuICB2YXIgcGVyY2VudGFnZUZyb21TdGFydFNjcm9sbGluZ0Zyb20gPSAxIC0gcGVyY2VudGFnZUZyb21NYXhTY3JvbGxWYWx1ZUF0O1xuICB2YXIgc2Nyb2xsID0gY29uZmlnLm1heFBpeGVsU2Nyb2xsICogY29uZmlnLmVhc2UocGVyY2VudGFnZUZyb21TdGFydFNjcm9sbGluZ0Zyb20pO1xuICByZXR1cm4gTWF0aC5jZWlsKHNjcm9sbCk7XG59KTtcblxudmFyIGFjY2VsZXJhdGVBdCA9IGNvbmZpZy5kdXJhdGlvbkRhbXBlbmluZy5hY2NlbGVyYXRlQXQ7XG52YXIgc3RvcEF0ID0gY29uZmlnLmR1cmF0aW9uRGFtcGVuaW5nLnN0b3BEYW1wZW5pbmdBdDtcbnZhciBkYW1wZW5WYWx1ZUJ5VGltZSA9IChmdW5jdGlvbiAocHJvcG9zZWRTY3JvbGwsIGRyYWdTdGFydFRpbWUpIHtcbiAgdmFyIHN0YXJ0T2ZSYW5nZSA9IGRyYWdTdGFydFRpbWU7XG4gIHZhciBlbmRPZlJhbmdlID0gc3RvcEF0O1xuICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgdmFyIHJ1blRpbWUgPSBub3cgLSBzdGFydE9mUmFuZ2U7XG5cbiAgaWYgKHJ1blRpbWUgPj0gc3RvcEF0KSB7XG4gICAgcmV0dXJuIHByb3Bvc2VkU2Nyb2xsO1xuICB9XG5cbiAgaWYgKHJ1blRpbWUgPCBhY2NlbGVyYXRlQXQpIHtcbiAgICByZXR1cm4gbWluU2Nyb2xsO1xuICB9XG5cbiAgdmFyIGJldHdlZW5BY2NlbGVyYXRlQXRBbmRTdG9wQXRQZXJjZW50YWdlID0gZ2V0UGVyY2VudGFnZSh7XG4gICAgc3RhcnRPZlJhbmdlOiBhY2NlbGVyYXRlQXQsXG4gICAgZW5kT2ZSYW5nZTogZW5kT2ZSYW5nZSxcbiAgICBjdXJyZW50OiBydW5UaW1lXG4gIH0pO1xuICB2YXIgc2Nyb2xsID0gcHJvcG9zZWRTY3JvbGwgKiBjb25maWcuZWFzZShiZXR3ZWVuQWNjZWxlcmF0ZUF0QW5kU3RvcEF0UGVyY2VudGFnZSk7XG4gIHJldHVybiBNYXRoLmNlaWwoc2Nyb2xsKTtcbn0pO1xuXG52YXIgZ2V0VmFsdWUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRpc3RhbmNlVG9FZGdlID0gX3JlZi5kaXN0YW5jZVRvRWRnZSxcbiAgICAgIHRocmVzaG9sZHMgPSBfcmVmLnRocmVzaG9sZHMsXG4gICAgICBkcmFnU3RhcnRUaW1lID0gX3JlZi5kcmFnU3RhcnRUaW1lLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9yZWYuc2hvdWxkVXNlVGltZURhbXBlbmluZztcbiAgdmFyIHNjcm9sbCA9IGdldFZhbHVlRnJvbURpc3RhbmNlKGRpc3RhbmNlVG9FZGdlLCB0aHJlc2hvbGRzKTtcblxuICBpZiAoc2Nyb2xsID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoIXNob3VsZFVzZVRpbWVEYW1wZW5pbmcpIHtcbiAgICByZXR1cm4gc2Nyb2xsO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4KGRhbXBlblZhbHVlQnlUaW1lKHNjcm9sbCwgZHJhZ1N0YXJ0VGltZSksIG1pblNjcm9sbCk7XG59KTtcblxudmFyIGdldFNjcm9sbE9uQXhpcyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY29udGFpbmVyID0gX3JlZi5jb250YWluZXIsXG4gICAgICBkaXN0YW5jZVRvRWRnZXMgPSBfcmVmLmRpc3RhbmNlVG9FZGdlcyxcbiAgICAgIGRyYWdTdGFydFRpbWUgPSBfcmVmLmRyYWdTdGFydFRpbWUsXG4gICAgICBheGlzID0gX3JlZi5heGlzLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9yZWYuc2hvdWxkVXNlVGltZURhbXBlbmluZztcbiAgdmFyIHRocmVzaG9sZHMgPSBnZXREaXN0YW5jZVRocmVzaG9sZHMoY29udGFpbmVyLCBheGlzKTtcbiAgdmFyIGlzQ2xvc2VyVG9FbmQgPSBkaXN0YW5jZVRvRWRnZXNbYXhpcy5lbmRdIDwgZGlzdGFuY2VUb0VkZ2VzW2F4aXMuc3RhcnRdO1xuXG4gIGlmIChpc0Nsb3NlclRvRW5kKSB7XG4gICAgcmV0dXJuIGdldFZhbHVlKHtcbiAgICAgIGRpc3RhbmNlVG9FZGdlOiBkaXN0YW5jZVRvRWRnZXNbYXhpcy5lbmRdLFxuICAgICAgdGhyZXNob2xkczogdGhyZXNob2xkcyxcbiAgICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gLTEgKiBnZXRWYWx1ZSh7XG4gICAgZGlzdGFuY2VUb0VkZ2U6IGRpc3RhbmNlVG9FZGdlc1theGlzLnN0YXJ0XSxcbiAgICB0aHJlc2hvbGRzOiB0aHJlc2hvbGRzLFxuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICB9KTtcbn0pO1xuXG52YXIgYWRqdXN0Rm9yU2l6ZUxpbWl0cyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY29udGFpbmVyID0gX3JlZi5jb250YWluZXIsXG4gICAgICBzdWJqZWN0ID0gX3JlZi5zdWJqZWN0LFxuICAgICAgcHJvcG9zZWRTY3JvbGwgPSBfcmVmLnByb3Bvc2VkU2Nyb2xsO1xuICB2YXIgaXNUb29CaWdWZXJ0aWNhbGx5ID0gc3ViamVjdC5oZWlnaHQgPiBjb250YWluZXIuaGVpZ2h0O1xuICB2YXIgaXNUb29CaWdIb3Jpem9udGFsbHkgPSBzdWJqZWN0LndpZHRoID4gY29udGFpbmVyLndpZHRoO1xuXG4gIGlmICghaXNUb29CaWdIb3Jpem9udGFsbHkgJiYgIWlzVG9vQmlnVmVydGljYWxseSkge1xuICAgIHJldHVybiBwcm9wb3NlZFNjcm9sbDtcbiAgfVxuXG4gIGlmIChpc1Rvb0JpZ0hvcml6b250YWxseSAmJiBpc1Rvb0JpZ1ZlcnRpY2FsbHkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogaXNUb29CaWdIb3Jpem9udGFsbHkgPyAwIDogcHJvcG9zZWRTY3JvbGwueCxcbiAgICB5OiBpc1Rvb0JpZ1ZlcnRpY2FsbHkgPyAwIDogcHJvcG9zZWRTY3JvbGwueVxuICB9O1xufSk7XG5cbnZhciBjbGVhbiQyID0gYXBwbHkoZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbn0pO1xudmFyIGdldFNjcm9sbCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJhZ1N0YXJ0VGltZSA9IF9yZWYuZHJhZ1N0YXJ0VGltZSxcbiAgICAgIGNvbnRhaW5lciA9IF9yZWYuY29udGFpbmVyLFxuICAgICAgc3ViamVjdCA9IF9yZWYuc3ViamVjdCxcbiAgICAgIGNlbnRlciA9IF9yZWYuY2VudGVyLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9yZWYuc2hvdWxkVXNlVGltZURhbXBlbmluZztcbiAgdmFyIGRpc3RhbmNlVG9FZGdlcyA9IHtcbiAgICB0b3A6IGNlbnRlci55IC0gY29udGFpbmVyLnRvcCxcbiAgICByaWdodDogY29udGFpbmVyLnJpZ2h0IC0gY2VudGVyLngsXG4gICAgYm90dG9tOiBjb250YWluZXIuYm90dG9tIC0gY2VudGVyLnksXG4gICAgbGVmdDogY2VudGVyLnggLSBjb250YWluZXIubGVmdFxuICB9O1xuICB2YXIgeSA9IGdldFNjcm9sbE9uQXhpcyh7XG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgZGlzdGFuY2VUb0VkZ2VzOiBkaXN0YW5jZVRvRWRnZXMsXG4gICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICBheGlzOiB2ZXJ0aWNhbCxcbiAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gIH0pO1xuICB2YXIgeCA9IGdldFNjcm9sbE9uQXhpcyh7XG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgZGlzdGFuY2VUb0VkZ2VzOiBkaXN0YW5jZVRvRWRnZXMsXG4gICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICBheGlzOiBob3Jpem9udGFsLFxuICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgfSk7XG4gIHZhciByZXF1aXJlZCA9IGNsZWFuJDIoe1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9KTtcblxuICBpZiAoaXNFcXVhbChyZXF1aXJlZCwgb3JpZ2luKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGxpbWl0ZWQgPSBhZGp1c3RGb3JTaXplTGltaXRzKHtcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgIHByb3Bvc2VkU2Nyb2xsOiByZXF1aXJlZFxuICB9KTtcblxuICBpZiAoIWxpbWl0ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBpc0VxdWFsKGxpbWl0ZWQsIG9yaWdpbikgPyBudWxsIDogbGltaXRlZDtcbn0pO1xuXG52YXIgc21hbGxlc3RTaWduZWQgPSBhcHBseShmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gdmFsdWUgPiAwID8gMSA6IC0xO1xufSk7XG52YXIgZ2V0T3ZlcmxhcCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGdldFJlbWFpbmRlciA9IGZ1bmN0aW9uIGdldFJlbWFpbmRlcih0YXJnZXQsIG1heCkge1xuICAgIGlmICh0YXJnZXQgPCAwKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICh0YXJnZXQgPiBtYXgpIHtcbiAgICAgIHJldHVybiB0YXJnZXQgLSBtYXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBfcmVmLmN1cnJlbnQsXG4gICAgICAgIG1heCA9IF9yZWYubWF4LFxuICAgICAgICBjaGFuZ2UgPSBfcmVmLmNoYW5nZTtcbiAgICB2YXIgdGFyZ2V0U2Nyb2xsID0gYWRkKGN1cnJlbnQsIGNoYW5nZSk7XG4gICAgdmFyIG92ZXJsYXAgPSB7XG4gICAgICB4OiBnZXRSZW1haW5kZXIodGFyZ2V0U2Nyb2xsLngsIG1heC54KSxcbiAgICAgIHk6IGdldFJlbWFpbmRlcih0YXJnZXRTY3JvbGwueSwgbWF4LnkpXG4gICAgfTtcblxuICAgIGlmIChpc0VxdWFsKG92ZXJsYXAsIG9yaWdpbikpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBvdmVybGFwO1xuICB9O1xufSgpO1xudmFyIGNhblBhcnRpYWxseVNjcm9sbCA9IGZ1bmN0aW9uIGNhblBhcnRpYWxseVNjcm9sbChfcmVmMikge1xuICB2YXIgcmF3TWF4ID0gX3JlZjIubWF4LFxuICAgICAgY3VycmVudCA9IF9yZWYyLmN1cnJlbnQsXG4gICAgICBjaGFuZ2UgPSBfcmVmMi5jaGFuZ2U7XG4gIHZhciBtYXggPSB7XG4gICAgeDogTWF0aC5tYXgoY3VycmVudC54LCByYXdNYXgueCksXG4gICAgeTogTWF0aC5tYXgoY3VycmVudC55LCByYXdNYXgueSlcbiAgfTtcbiAgdmFyIHNtYWxsZXN0Q2hhbmdlID0gc21hbGxlc3RTaWduZWQoY2hhbmdlKTtcbiAgdmFyIG92ZXJsYXAgPSBnZXRPdmVybGFwKHtcbiAgICBtYXg6IG1heCxcbiAgICBjdXJyZW50OiBjdXJyZW50LFxuICAgIGNoYW5nZTogc21hbGxlc3RDaGFuZ2VcbiAgfSk7XG5cbiAgaWYgKCFvdmVybGFwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc21hbGxlc3RDaGFuZ2UueCAhPT0gMCAmJiBvdmVybGFwLnggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChzbWFsbGVzdENoYW5nZS55ICE9PSAwICYmIG92ZXJsYXAueSA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbnZhciBjYW5TY3JvbGxXaW5kb3cgPSBmdW5jdGlvbiBjYW5TY3JvbGxXaW5kb3codmlld3BvcnQsIGNoYW5nZSkge1xuICByZXR1cm4gY2FuUGFydGlhbGx5U2Nyb2xsKHtcbiAgICBjdXJyZW50OiB2aWV3cG9ydC5zY3JvbGwuY3VycmVudCxcbiAgICBtYXg6IHZpZXdwb3J0LnNjcm9sbC5tYXgsXG4gICAgY2hhbmdlOiBjaGFuZ2VcbiAgfSk7XG59O1xudmFyIGdldFdpbmRvd092ZXJsYXAgPSBmdW5jdGlvbiBnZXRXaW5kb3dPdmVybGFwKHZpZXdwb3J0LCBjaGFuZ2UpIHtcbiAgaWYgKCFjYW5TY3JvbGxXaW5kb3codmlld3BvcnQsIGNoYW5nZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtYXggPSB2aWV3cG9ydC5zY3JvbGwubWF4O1xuICB2YXIgY3VycmVudCA9IHZpZXdwb3J0LnNjcm9sbC5jdXJyZW50O1xuICByZXR1cm4gZ2V0T3ZlcmxhcCh7XG4gICAgY3VycmVudDogY3VycmVudCxcbiAgICBtYXg6IG1heCxcbiAgICBjaGFuZ2U6IGNoYW5nZVxuICB9KTtcbn07XG52YXIgY2FuU2Nyb2xsRHJvcHBhYmxlID0gZnVuY3Rpb24gY2FuU2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZSwgY2hhbmdlKSB7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhblBhcnRpYWxseVNjcm9sbCh7XG4gICAgY3VycmVudDogZnJhbWUuc2Nyb2xsLmN1cnJlbnQsXG4gICAgbWF4OiBmcmFtZS5zY3JvbGwubWF4LFxuICAgIGNoYW5nZTogY2hhbmdlXG4gIH0pO1xufTtcbnZhciBnZXREcm9wcGFibGVPdmVybGFwID0gZnVuY3Rpb24gZ2V0RHJvcHBhYmxlT3ZlcmxhcChkcm9wcGFibGUsIGNoYW5nZSkge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFjYW5TY3JvbGxEcm9wcGFibGUoZHJvcHBhYmxlLCBjaGFuZ2UpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZ2V0T3ZlcmxhcCh7XG4gICAgY3VycmVudDogZnJhbWUuc2Nyb2xsLmN1cnJlbnQsXG4gICAgbWF4OiBmcmFtZS5zY3JvbGwubWF4LFxuICAgIGNoYW5nZTogY2hhbmdlXG4gIH0pO1xufTtcblxudmFyIGdldFdpbmRvd1Njcm9sbENoYW5nZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgc3ViamVjdCA9IF9yZWYuc3ViamVjdCxcbiAgICAgIGNlbnRlciA9IF9yZWYuY2VudGVyLFxuICAgICAgZHJhZ1N0YXJ0VGltZSA9IF9yZWYuZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfcmVmLnNob3VsZFVzZVRpbWVEYW1wZW5pbmc7XG4gIHZhciBzY3JvbGwgPSBnZXRTY3JvbGwoe1xuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgY29udGFpbmVyOiB2aWV3cG9ydC5mcmFtZSxcbiAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgIGNlbnRlcjogY2VudGVyLFxuICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgfSk7XG4gIHJldHVybiBzY3JvbGwgJiYgY2FuU2Nyb2xsV2luZG93KHZpZXdwb3J0LCBzY3JvbGwpID8gc2Nyb2xsIDogbnVsbDtcbn0pO1xuXG52YXIgZ2V0RHJvcHBhYmxlU2Nyb2xsQ2hhbmdlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkcm9wcGFibGUgPSBfcmVmLmRyb3BwYWJsZSxcbiAgICAgIHN1YmplY3QgPSBfcmVmLnN1YmplY3QsXG4gICAgICBjZW50ZXIgPSBfcmVmLmNlbnRlcixcbiAgICAgIGRyYWdTdGFydFRpbWUgPSBfcmVmLmRyYWdTdGFydFRpbWUsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nID0gX3JlZi5zaG91bGRVc2VUaW1lRGFtcGVuaW5nO1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHNjcm9sbCA9IGdldFNjcm9sbCh7XG4gICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICBjb250YWluZXI6IGZyYW1lLnBhZ2VNYXJnaW5Cb3gsXG4gICAgc3ViamVjdDogc3ViamVjdCxcbiAgICBjZW50ZXI6IGNlbnRlcixcbiAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gIH0pO1xuICByZXR1cm4gc2Nyb2xsICYmIGNhblNjcm9sbERyb3BwYWJsZShkcm9wcGFibGUsIHNjcm9sbCkgPyBzY3JvbGwgOiBudWxsO1xufSk7XG5cbnZhciBzY3JvbGwkMSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgZHJhZ1N0YXJ0VGltZSA9IF9yZWYuZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfcmVmLnNob3VsZFVzZVRpbWVEYW1wZW5pbmcsXG4gICAgICBzY3JvbGxXaW5kb3cgPSBfcmVmLnNjcm9sbFdpbmRvdyxcbiAgICAgIHNjcm9sbERyb3BwYWJsZSA9IF9yZWYuc2Nyb2xsRHJvcHBhYmxlO1xuICB2YXIgY2VudGVyID0gc3RhdGUuY3VycmVudC5wYWdlLmJvcmRlckJveENlbnRlcjtcbiAgdmFyIGRyYWdnYWJsZSA9IHN0YXRlLmRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuICB2YXIgc3ViamVjdCA9IGRyYWdnYWJsZS5wYWdlLm1hcmdpbkJveDtcblxuICBpZiAoc3RhdGUuaXNXaW5kb3dTY3JvbGxBbGxvd2VkKSB7XG4gICAgdmFyIHZpZXdwb3J0ID0gc3RhdGUudmlld3BvcnQ7XG5cbiAgICB2YXIgX2NoYW5nZSA9IGdldFdpbmRvd1Njcm9sbENoYW5nZSh7XG4gICAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgICAgc3ViamVjdDogc3ViamVjdCxcbiAgICAgIGNlbnRlcjogY2VudGVyLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICAgIH0pO1xuXG4gICAgaWYgKF9jaGFuZ2UpIHtcbiAgICAgIHNjcm9sbFdpbmRvdyhfY2hhbmdlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICB2YXIgZHJvcHBhYmxlID0gZ2V0QmVzdFNjcm9sbGFibGVEcm9wcGFibGUoe1xuICAgIGNlbnRlcjogY2VudGVyLFxuICAgIGRlc3RpbmF0aW9uOiB3aGF0SXNEcmFnZ2VkT3ZlcihzdGF0ZS5pbXBhY3QpLFxuICAgIGRyb3BwYWJsZXM6IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1xuICB9KTtcblxuICBpZiAoIWRyb3BwYWJsZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGFuZ2UgPSBnZXREcm9wcGFibGVTY3JvbGxDaGFuZ2Uoe1xuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgZHJvcHBhYmxlOiBkcm9wcGFibGUsXG4gICAgc3ViamVjdDogc3ViamVjdCxcbiAgICBjZW50ZXI6IGNlbnRlcixcbiAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gIH0pO1xuXG4gIGlmIChjaGFuZ2UpIHtcbiAgICBzY3JvbGxEcm9wcGFibGUoZHJvcHBhYmxlLmRlc2NyaXB0b3IuaWQsIGNoYW5nZSk7XG4gIH1cbn0pO1xuXG52YXIgY3JlYXRlRmx1aWRTY3JvbGxlciA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc2Nyb2xsV2luZG93ID0gX3JlZi5zY3JvbGxXaW5kb3csXG4gICAgICBzY3JvbGxEcm9wcGFibGUgPSBfcmVmLnNjcm9sbERyb3BwYWJsZTtcbiAgdmFyIHNjaGVkdWxlV2luZG93U2Nyb2xsID0gcmFmU2NoZChzY3JvbGxXaW5kb3cpO1xuICB2YXIgc2NoZWR1bGVEcm9wcGFibGVTY3JvbGwgPSByYWZTY2hkKHNjcm9sbERyb3BwYWJsZSk7XG4gIHZhciBkcmFnZ2luZyA9IG51bGw7XG5cbiAgdmFyIHRyeVNjcm9sbCA9IGZ1bmN0aW9uIHRyeVNjcm9sbChzdGF0ZSkge1xuICAgICFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmbHVpZCBzY3JvbGwgaWYgbm90IGRyYWdnaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfZHJhZ2dpbmcgPSBkcmFnZ2luZyxcbiAgICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9kcmFnZ2luZy5zaG91bGRVc2VUaW1lRGFtcGVuaW5nLFxuICAgICAgICBkcmFnU3RhcnRUaW1lID0gX2RyYWdnaW5nLmRyYWdTdGFydFRpbWU7XG4gICAgc2Nyb2xsJDEoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgc2Nyb2xsV2luZG93OiBzY2hlZHVsZVdpbmRvd1Njcm9sbCxcbiAgICAgIHNjcm9sbERyb3BwYWJsZTogc2NoZWR1bGVEcm9wcGFibGVTY3JvbGwsXG4gICAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBzdGFydCQxID0gZnVuY3Rpb24gc3RhcnQkMShzdGF0ZSkge1xuICAgIHN0YXJ0KCk7XG4gICAgISFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzdGFydCBhdXRvIHNjcm9sbGluZyB3aGVuIGFscmVhZHkgc3RhcnRlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgZHJhZ1N0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgdmFyIHdhc1Njcm9sbE5lZWRlZCA9IGZhbHNlO1xuXG4gICAgdmFyIGZha2VTY3JvbGxDYWxsYmFjayA9IGZ1bmN0aW9uIGZha2VTY3JvbGxDYWxsYmFjaygpIHtcbiAgICAgIHdhc1Njcm9sbE5lZWRlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIHNjcm9sbCQxKHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGRyYWdTdGFydFRpbWU6IDAsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBmYWxzZSxcbiAgICAgIHNjcm9sbFdpbmRvdzogZmFrZVNjcm9sbENhbGxiYWNrLFxuICAgICAgc2Nyb2xsRHJvcHBhYmxlOiBmYWtlU2Nyb2xsQ2FsbGJhY2tcbiAgICB9KTtcbiAgICBkcmFnZ2luZyA9IHtcbiAgICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiB3YXNTY3JvbGxOZWVkZWRcbiAgICB9O1xuICAgIGZpbmlzaCgpO1xuXG4gICAgaWYgKHdhc1Njcm9sbE5lZWRlZCkge1xuICAgICAgdHJ5U2Nyb2xsKHN0YXRlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHN0b3AgPSBmdW5jdGlvbiBzdG9wKCkge1xuICAgIGlmICghZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZVdpbmRvd1Njcm9sbC5jYW5jZWwoKTtcbiAgICBzY2hlZHVsZURyb3BwYWJsZVNjcm9sbC5jYW5jZWwoKTtcbiAgICBkcmFnZ2luZyA9IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnQkMSxcbiAgICBzdG9wOiBzdG9wLFxuICAgIHNjcm9sbDogdHJ5U2Nyb2xsXG4gIH07XG59KTtcblxudmFyIGNyZWF0ZUp1bXBTY3JvbGxlciA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgbW92ZSA9IF9yZWYubW92ZSxcbiAgICAgIHNjcm9sbERyb3BwYWJsZSA9IF9yZWYuc2Nyb2xsRHJvcHBhYmxlLFxuICAgICAgc2Nyb2xsV2luZG93ID0gX3JlZi5zY3JvbGxXaW5kb3c7XG5cbiAgdmFyIG1vdmVCeU9mZnNldCA9IGZ1bmN0aW9uIG1vdmVCeU9mZnNldChzdGF0ZSwgb2Zmc2V0KSB7XG4gICAgdmFyIGNsaWVudCA9IGFkZChzdGF0ZS5jdXJyZW50LmNsaWVudC5zZWxlY3Rpb24sIG9mZnNldCk7XG4gICAgbW92ZSh7XG4gICAgICBjbGllbnQ6IGNsaWVudFxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBzY3JvbGxEcm9wcGFibGVBc011Y2hBc0l0Q2FuID0gZnVuY3Rpb24gc2Nyb2xsRHJvcHBhYmxlQXNNdWNoQXNJdENhbihkcm9wcGFibGUsIGNoYW5nZSkge1xuICAgIGlmICghY2FuU2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZSwgY2hhbmdlKSkge1xuICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG5cbiAgICB2YXIgb3ZlcmxhcCA9IGdldERyb3BwYWJsZU92ZXJsYXAoZHJvcHBhYmxlLCBjaGFuZ2UpO1xuXG4gICAgaWYgKCFvdmVybGFwKSB7XG4gICAgICBzY3JvbGxEcm9wcGFibGUoZHJvcHBhYmxlLmRlc2NyaXB0b3IuaWQsIGNoYW5nZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgd2hhdFRoZURyb3BwYWJsZUNhblNjcm9sbCA9IHN1YnRyYWN0KGNoYW5nZSwgb3ZlcmxhcCk7XG4gICAgc2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkLCB3aGF0VGhlRHJvcHBhYmxlQ2FuU2Nyb2xsKTtcbiAgICB2YXIgcmVtYWluZGVyID0gc3VidHJhY3QoY2hhbmdlLCB3aGF0VGhlRHJvcHBhYmxlQ2FuU2Nyb2xsKTtcbiAgICByZXR1cm4gcmVtYWluZGVyO1xuICB9O1xuXG4gIHZhciBzY3JvbGxXaW5kb3dBc011Y2hBc0l0Q2FuID0gZnVuY3Rpb24gc2Nyb2xsV2luZG93QXNNdWNoQXNJdENhbihpc1dpbmRvd1Njcm9sbEFsbG93ZWQsIHZpZXdwb3J0LCBjaGFuZ2UpIHtcbiAgICBpZiAoIWlzV2luZG93U2Nyb2xsQWxsb3dlZCkge1xuICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG5cbiAgICBpZiAoIWNhblNjcm9sbFdpbmRvdyh2aWV3cG9ydCwgY2hhbmdlKSkge1xuICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG5cbiAgICB2YXIgb3ZlcmxhcCA9IGdldFdpbmRvd092ZXJsYXAodmlld3BvcnQsIGNoYW5nZSk7XG5cbiAgICBpZiAoIW92ZXJsYXApIHtcbiAgICAgIHNjcm9sbFdpbmRvdyhjaGFuZ2UpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHdoYXRUaGVXaW5kb3dDYW5TY3JvbGwgPSBzdWJ0cmFjdChjaGFuZ2UsIG92ZXJsYXApO1xuICAgIHNjcm9sbFdpbmRvdyh3aGF0VGhlV2luZG93Q2FuU2Nyb2xsKTtcbiAgICB2YXIgcmVtYWluZGVyID0gc3VidHJhY3QoY2hhbmdlLCB3aGF0VGhlV2luZG93Q2FuU2Nyb2xsKTtcbiAgICByZXR1cm4gcmVtYWluZGVyO1xuICB9O1xuXG4gIHZhciBqdW1wU2Nyb2xsZXIgPSBmdW5jdGlvbiBqdW1wU2Nyb2xsZXIoc3RhdGUpIHtcbiAgICB2YXIgcmVxdWVzdCA9IHN0YXRlLnNjcm9sbEp1bXBSZXF1ZXN0O1xuXG4gICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRlc3RpbmF0aW9uID0gd2hhdElzRHJhZ2dlZE92ZXIoc3RhdGUuaW1wYWN0KTtcbiAgICAhZGVzdGluYXRpb24gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcGVyZm9ybSBhIGp1bXAgc2Nyb2xsIHdoZW4gdGhlcmUgaXMgbm8gZGVzdGluYXRpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGRyb3BwYWJsZVJlbWFpbmRlciA9IHNjcm9sbERyb3BwYWJsZUFzTXVjaEFzSXRDYW4oc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW2Rlc3RpbmF0aW9uXSwgcmVxdWVzdCk7XG5cbiAgICBpZiAoIWRyb3BwYWJsZVJlbWFpbmRlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2aWV3cG9ydCA9IHN0YXRlLnZpZXdwb3J0O1xuICAgIHZhciB3aW5kb3dSZW1haW5kZXIgPSBzY3JvbGxXaW5kb3dBc011Y2hBc0l0Q2FuKHN0YXRlLmlzV2luZG93U2Nyb2xsQWxsb3dlZCwgdmlld3BvcnQsIGRyb3BwYWJsZVJlbWFpbmRlcik7XG5cbiAgICBpZiAoIXdpbmRvd1JlbWFpbmRlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1vdmVCeU9mZnNldChzdGF0ZSwgd2luZG93UmVtYWluZGVyKTtcbiAgfTtcblxuICByZXR1cm4ganVtcFNjcm9sbGVyO1xufSk7XG5cbnZhciBjcmVhdGVBdXRvU2Nyb2xsZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHNjcm9sbERyb3BwYWJsZSA9IF9yZWYuc2Nyb2xsRHJvcHBhYmxlLFxuICAgICAgc2Nyb2xsV2luZG93ID0gX3JlZi5zY3JvbGxXaW5kb3csXG4gICAgICBtb3ZlID0gX3JlZi5tb3ZlO1xuICB2YXIgZmx1aWRTY3JvbGxlciA9IGNyZWF0ZUZsdWlkU2Nyb2xsZXIoe1xuICAgIHNjcm9sbFdpbmRvdzogc2Nyb2xsV2luZG93LFxuICAgIHNjcm9sbERyb3BwYWJsZTogc2Nyb2xsRHJvcHBhYmxlXG4gIH0pO1xuICB2YXIganVtcFNjcm9sbCA9IGNyZWF0ZUp1bXBTY3JvbGxlcih7XG4gICAgbW92ZTogbW92ZSxcbiAgICBzY3JvbGxXaW5kb3c6IHNjcm9sbFdpbmRvdyxcbiAgICBzY3JvbGxEcm9wcGFibGU6IHNjcm9sbERyb3BwYWJsZVxuICB9KTtcblxuICB2YXIgc2Nyb2xsID0gZnVuY3Rpb24gc2Nyb2xsKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlICE9PSAnRFJBR0dJTkcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLm1vdmVtZW50TW9kZSA9PT0gJ0ZMVUlEJykge1xuICAgICAgZmx1aWRTY3JvbGxlci5zY3JvbGwoc3RhdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghc3RhdGUuc2Nyb2xsSnVtcFJlcXVlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBqdW1wU2Nyb2xsKHN0YXRlKTtcbiAgfTtcblxuICB2YXIgc2Nyb2xsZXIgPSB7XG4gICAgc2Nyb2xsOiBzY3JvbGwsXG4gICAgc3RhcnQ6IGZsdWlkU2Nyb2xsZXIuc3RhcnQsXG4gICAgc3RvcDogZmx1aWRTY3JvbGxlci5zdG9wXG4gIH07XG4gIHJldHVybiBzY3JvbGxlcjtcbn0pO1xuXG52YXIgcHJlZml4JDEgPSAnZGF0YS1yYmQnO1xudmFyIGRyYWdIYW5kbGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBiYXNlID0gcHJlZml4JDEgKyBcIi1kcmFnLWhhbmRsZVwiO1xuICByZXR1cm4ge1xuICAgIGJhc2U6IGJhc2UsXG4gICAgZHJhZ2dhYmxlSWQ6IGJhc2UgKyBcIi1kcmFnZ2FibGUtaWRcIixcbiAgICBjb250ZXh0SWQ6IGJhc2UgKyBcIi1jb250ZXh0LWlkXCJcbiAgfTtcbn0oKTtcbnZhciBkcmFnZ2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBiYXNlID0gcHJlZml4JDEgKyBcIi1kcmFnZ2FibGVcIjtcbiAgcmV0dXJuIHtcbiAgICBiYXNlOiBiYXNlLFxuICAgIGNvbnRleHRJZDogYmFzZSArIFwiLWNvbnRleHQtaWRcIixcbiAgICBpZDogYmFzZSArIFwiLWlkXCJcbiAgfTtcbn0oKTtcbnZhciBkcm9wcGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBiYXNlID0gcHJlZml4JDEgKyBcIi1kcm9wcGFibGVcIjtcbiAgcmV0dXJuIHtcbiAgICBiYXNlOiBiYXNlLFxuICAgIGNvbnRleHRJZDogYmFzZSArIFwiLWNvbnRleHQtaWRcIixcbiAgICBpZDogYmFzZSArIFwiLWlkXCJcbiAgfTtcbn0oKTtcbnZhciBzY3JvbGxDb250YWluZXIgPSB7XG4gIGNvbnRleHRJZDogcHJlZml4JDEgKyBcIi1zY3JvbGwtY29udGFpbmVyLWNvbnRleHQtaWRcIlxufTtcblxudmFyIG1ha2VHZXRTZWxlY3RvciA9IGZ1bmN0aW9uIG1ha2VHZXRTZWxlY3Rvcihjb250ZXh0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgcmV0dXJuIFwiW1wiICsgYXR0cmlidXRlICsgXCI9XFxcIlwiICsgY29udGV4dCArIFwiXFxcIl1cIjtcbiAgfTtcbn07XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiBnZXRTdHlsZXMocnVsZXMsIHByb3BlcnR5KSB7XG4gIHJldHVybiBydWxlcy5tYXAoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICB2YXIgdmFsdWUgPSBydWxlLnN0eWxlc1twcm9wZXJ0eV07XG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGUuc2VsZWN0b3IgKyBcIiB7IFwiICsgdmFsdWUgKyBcIiB9XCI7XG4gIH0pLmpvaW4oJyAnKTtcbn07XG5cbnZhciBub1BvaW50ZXJFdmVudHMgPSAncG9pbnRlci1ldmVudHM6IG5vbmU7JztcbnZhciBnZXRTdHlsZXMkMSA9IChmdW5jdGlvbiAoY29udGV4dElkKSB7XG4gIHZhciBnZXRTZWxlY3RvciA9IG1ha2VHZXRTZWxlY3Rvcihjb250ZXh0SWQpO1xuXG4gIHZhciBkcmFnSGFuZGxlJDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGdyYWJDdXJzb3IgPSBcIlxcbiAgICAgIGN1cnNvcjogLXdlYmtpdC1ncmFiO1xcbiAgICAgIGN1cnNvcjogZ3JhYjtcXG4gICAgXCI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdG9yOiBnZXRTZWxlY3RvcihkcmFnSGFuZGxlLmNvbnRleHRJZCksXG4gICAgICBzdHlsZXM6IHtcbiAgICAgICAgYWx3YXlzOiBcIlxcbiAgICAgICAgICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxuICAgICAgICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLDAsMCwwKTtcXG4gICAgICAgICAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XFxuICAgICAgICBcIixcbiAgICAgICAgcmVzdGluZzogZ3JhYkN1cnNvcixcbiAgICAgICAgZHJhZ2dpbmc6IG5vUG9pbnRlckV2ZW50cyxcbiAgICAgICAgZHJvcEFuaW1hdGluZzogZ3JhYkN1cnNvclxuICAgICAgfVxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgZHJhZ2dhYmxlJDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRyYW5zaXRpb24gPSBcIlxcbiAgICAgIHRyYW5zaXRpb246IFwiICsgdHJhbnNpdGlvbnMub3V0T2ZUaGVXYXkgKyBcIjtcXG4gICAgXCI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdG9yOiBnZXRTZWxlY3RvcihkcmFnZ2FibGUuY29udGV4dElkKSxcbiAgICAgIHN0eWxlczoge1xuICAgICAgICBkcmFnZ2luZzogdHJhbnNpdGlvbixcbiAgICAgICAgZHJvcEFuaW1hdGluZzogdHJhbnNpdGlvbixcbiAgICAgICAgdXNlckNhbmNlbDogdHJhbnNpdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgZHJvcHBhYmxlJDEgPSB7XG4gICAgc2VsZWN0b3I6IGdldFNlbGVjdG9yKGRyb3BwYWJsZS5jb250ZXh0SWQpLFxuICAgIHN0eWxlczoge1xuICAgICAgYWx3YXlzOiBcIm92ZXJmbG93LWFuY2hvcjogbm9uZTtcIlxuICAgIH1cbiAgfTtcbiAgdmFyIGJvZHkgPSB7XG4gICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICBzdHlsZXM6IHtcbiAgICAgIGRyYWdnaW5nOiBcIlxcbiAgICAgICAgY3Vyc29yOiBncmFiYmluZztcXG4gICAgICAgIGN1cnNvcjogLXdlYmtpdC1ncmFiYmluZztcXG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICBvdmVyZmxvdy1hbmNob3I6IG5vbmU7XFxuICAgICAgXCJcbiAgICB9XG4gIH07XG4gIHZhciBydWxlcyA9IFtkcmFnZ2FibGUkMSwgZHJhZ0hhbmRsZSQxLCBkcm9wcGFibGUkMSwgYm9keV07XG4gIHJldHVybiB7XG4gICAgYWx3YXlzOiBnZXRTdHlsZXMocnVsZXMsICdhbHdheXMnKSxcbiAgICByZXN0aW5nOiBnZXRTdHlsZXMocnVsZXMsICdyZXN0aW5nJyksXG4gICAgZHJhZ2dpbmc6IGdldFN0eWxlcyhydWxlcywgJ2RyYWdnaW5nJyksXG4gICAgZHJvcEFuaW1hdGluZzogZ2V0U3R5bGVzKHJ1bGVzLCAnZHJvcEFuaW1hdGluZycpLFxuICAgIHVzZXJDYW5jZWw6IGdldFN0eWxlcyhydWxlcywgJ3VzZXJDYW5jZWwnKVxuICB9O1xufSk7XG5cbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxudmFyIGdldEhlYWQgPSBmdW5jdGlvbiBnZXRIZWFkKCkge1xuICB2YXIgaGVhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbiAgIWhlYWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmluZCB0aGUgaGVhZCB0byBhcHBlbmQgYSBzdHlsZSB0bycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGhlYWQ7XG59O1xuXG52YXIgY3JlYXRlU3R5bGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWwobm9uY2UpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICBpZiAobm9uY2UpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xuICB9XG5cbiAgZWwudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gIHJldHVybiBlbDtcbn07XG5cbmZ1bmN0aW9uIHVzZVN0eWxlTWFyc2hhbChjb250ZXh0SWQsIG5vbmNlKSB7XG4gIHZhciBzdHlsZXMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0U3R5bGVzJDEoY29udGV4dElkKTtcbiAgfSwgW2NvbnRleHRJZF0pO1xuICB2YXIgYWx3YXlzUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgZHluYW1pY1JlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIHNldER5bmFtaWNTdHlsZSA9IHVzZUNhbGxiYWNrKG1lbW9pemVPbmUoZnVuY3Rpb24gKHByb3Bvc2VkKSB7XG4gICAgdmFyIGVsID0gZHluYW1pY1JlZi5jdXJyZW50O1xuICAgICFlbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzZXQgZHluYW1pYyBzdHlsZSBlbGVtZW50IGlmIGl0IGlzIG5vdCBzZXQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgZWwudGV4dENvbnRlbnQgPSBwcm9wb3NlZDtcbiAgfSksIFtdKTtcbiAgdmFyIHNldEFsd2F5c1N0eWxlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHByb3Bvc2VkKSB7XG4gICAgdmFyIGVsID0gYWx3YXlzUmVmLmN1cnJlbnQ7XG4gICAgIWVsID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHNldCBkeW5hbWljIHN0eWxlIGVsZW1lbnQgaWYgaXQgaXMgbm90IHNldCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBlbC50ZXh0Q29udGVudCA9IHByb3Bvc2VkO1xuICB9LCBbXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICEoIWFsd2F5c1JlZi5jdXJyZW50ICYmICFkeW5hbWljUmVmLmN1cnJlbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnc3R5bGUgZWxlbWVudHMgYWxyZWFkeSBtb3VudGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBhbHdheXMgPSBjcmVhdGVTdHlsZUVsKG5vbmNlKTtcbiAgICB2YXIgZHluYW1pYyA9IGNyZWF0ZVN0eWxlRWwobm9uY2UpO1xuICAgIGFsd2F5c1JlZi5jdXJyZW50ID0gYWx3YXlzO1xuICAgIGR5bmFtaWNSZWYuY3VycmVudCA9IGR5bmFtaWM7XG4gICAgYWx3YXlzLnNldEF0dHJpYnV0ZShwcmVmaXgkMSArIFwiLWFsd2F5c1wiLCBjb250ZXh0SWQpO1xuICAgIGR5bmFtaWMuc2V0QXR0cmlidXRlKHByZWZpeCQxICsgXCItZHluYW1pY1wiLCBjb250ZXh0SWQpO1xuICAgIGdldEhlYWQoKS5hcHBlbmRDaGlsZChhbHdheXMpO1xuICAgIGdldEhlYWQoKS5hcHBlbmRDaGlsZChkeW5hbWljKTtcbiAgICBzZXRBbHdheXNTdHlsZShzdHlsZXMuYWx3YXlzKTtcbiAgICBzZXREeW5hbWljU3R5bGUoc3R5bGVzLnJlc3RpbmcpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHJlZikge1xuICAgICAgICB2YXIgY3VycmVudCA9IHJlZi5jdXJyZW50O1xuICAgICAgICAhY3VycmVudCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCB1bm1vdW50IHJlZiBhcyBpdCBpcyBub3Qgc2V0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBnZXRIZWFkKCkucmVtb3ZlQ2hpbGQoY3VycmVudCk7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIHJlbW92ZShhbHdheXNSZWYpO1xuICAgICAgcmVtb3ZlKGR5bmFtaWNSZWYpO1xuICAgIH07XG4gIH0sIFtub25jZSwgc2V0QWx3YXlzU3R5bGUsIHNldER5bmFtaWNTdHlsZSwgc3R5bGVzLmFsd2F5cywgc3R5bGVzLnJlc3RpbmcsIGNvbnRleHRJZF0pO1xuICB2YXIgZHJhZ2dpbmcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHNldER5bmFtaWNTdHlsZShzdHlsZXMuZHJhZ2dpbmcpO1xuICB9LCBbc2V0RHluYW1pY1N0eWxlLCBzdHlsZXMuZHJhZ2dpbmddKTtcbiAgdmFyIGRyb3BwaW5nID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIGlmIChyZWFzb24gPT09ICdEUk9QJykge1xuICAgICAgc2V0RHluYW1pY1N0eWxlKHN0eWxlcy5kcm9wQW5pbWF0aW5nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXREeW5hbWljU3R5bGUoc3R5bGVzLnVzZXJDYW5jZWwpO1xuICB9LCBbc2V0RHluYW1pY1N0eWxlLCBzdHlsZXMuZHJvcEFuaW1hdGluZywgc3R5bGVzLnVzZXJDYW5jZWxdKTtcbiAgdmFyIHJlc3RpbmcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkeW5hbWljUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXREeW5hbWljU3R5bGUoc3R5bGVzLnJlc3RpbmcpO1xuICB9LCBbc2V0RHluYW1pY1N0eWxlLCBzdHlsZXMucmVzdGluZ10pO1xuICB2YXIgbWFyc2hhbCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkcmFnZ2luZzogZHJhZ2dpbmcsXG4gICAgICBkcm9wcGluZzogZHJvcHBpbmcsXG4gICAgICByZXN0aW5nOiByZXN0aW5nXG4gICAgfTtcbiAgfSwgW2RyYWdnaW5nLCBkcm9wcGluZywgcmVzdGluZ10pO1xuICByZXR1cm4gbWFyc2hhbDtcbn1cblxudmFyIGdldFdpbmRvd0Zyb21FbCA9IChmdW5jdGlvbiAoZWwpIHtcbiAgcmV0dXJuIGVsICYmIGVsLm93bmVyRG9jdW1lbnQgPyBlbC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufSk7XG5cbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQoZWwpIHtcbiAgcmV0dXJuIGVsIGluc3RhbmNlb2YgZ2V0V2luZG93RnJvbUVsKGVsKS5IVE1MRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZmluZERyYWdIYW5kbGUoY29udGV4dElkLCBkcmFnZ2FibGVJZCkge1xuICB2YXIgc2VsZWN0b3IgPSBcIltcIiArIGRyYWdIYW5kbGUuY29udGV4dElkICsgXCI9XFxcIlwiICsgY29udGV4dElkICsgXCJcXFwiXVwiO1xuICB2YXIgcG9zc2libGUgPSB0b0FycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcblxuICBpZiAoIXBvc3NpYmxlLmxlbmd0aCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJVbmFibGUgdG8gZmluZCBhbnkgZHJhZyBoYW5kbGVzIGluIHRoZSBjb250ZXh0IFxcXCJcIiArIGNvbnRleHRJZCArIFwiXFxcIlwiKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBoYW5kbGUgPSBmaW5kKHBvc3NpYmxlLCBmdW5jdGlvbiAoZWwpIHtcbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKGRyYWdIYW5kbGUuZHJhZ2dhYmxlSWQpID09PSBkcmFnZ2FibGVJZDtcbiAgfSk7XG5cbiAgaWYgKCFoYW5kbGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiVW5hYmxlIHRvIGZpbmQgZHJhZyBoYW5kbGUgd2l0aCBpZCBcXFwiXCIgKyBkcmFnZ2FibGVJZCArIFwiXFxcIiBhcyBubyBoYW5kbGUgd2l0aCBhIG1hdGNoaW5nIGlkIHdhcyBmb3VuZFwiKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghaXNIdG1sRWxlbWVudChoYW5kbGUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZygnZHJhZyBoYW5kbGUgbmVlZHMgdG8gYmUgYSBIVE1MRWxlbWVudCcpIDogdm9pZCAwO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGhhbmRsZTtcbn1cblxuZnVuY3Rpb24gdXNlRm9jdXNNYXJzaGFsKGNvbnRleHRJZCkge1xuICB2YXIgZW50cmllc1JlZiA9IHVzZVJlZih7fSk7XG4gIHZhciByZWNvcmRSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciByZXN0b3JlRm9jdXNGcmFtZVJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIGlzTW91bnRlZFJlZiA9IHVzZVJlZihmYWxzZSk7XG4gIHZhciByZWdpc3RlciA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHJlZ2lzdGVyKGlkLCBmb2N1cykge1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZvY3VzOiBmb2N1c1xuICAgIH07XG4gICAgZW50cmllc1JlZi5jdXJyZW50W2lkXSA9IGVudHJ5O1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnJlZ2lzdGVyKCkge1xuICAgICAgdmFyIGVudHJpZXMgPSBlbnRyaWVzUmVmLmN1cnJlbnQ7XG4gICAgICB2YXIgY3VycmVudCA9IGVudHJpZXNbaWRdO1xuXG4gICAgICBpZiAoY3VycmVudCAhPT0gZW50cnkpIHtcbiAgICAgICAgZGVsZXRlIGVudHJpZXNbaWRdO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgdmFyIHRyeUdpdmVGb2N1cyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHRyeUdpdmVGb2N1cyh0cnlHaXZlRm9jdXNUbykge1xuICAgIHZhciBoYW5kbGUgPSBmaW5kRHJhZ0hhbmRsZShjb250ZXh0SWQsIHRyeUdpdmVGb2N1c1RvKTtcblxuICAgIGlmIChoYW5kbGUgJiYgaGFuZGxlICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICBoYW5kbGUuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFtjb250ZXh0SWRdKTtcbiAgdmFyIHRyeVNoaWZ0UmVjb3JkID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdHJ5U2hpZnRSZWNvcmQocHJldmlvdXMsIHJlZGlyZWN0VG8pIHtcbiAgICBpZiAocmVjb3JkUmVmLmN1cnJlbnQgPT09IHByZXZpb3VzKSB7XG4gICAgICByZWNvcmRSZWYuY3VycmVudCA9IHJlZGlyZWN0VG87XG4gICAgfVxuICB9LCBbXSk7XG4gIHZhciB0cnlSZXN0b3JlRm9jdXNSZWNvcmRlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHRyeVJlc3RvcmVGb2N1c1JlY29yZGVkKCkge1xuICAgIGlmIChyZXN0b3JlRm9jdXNGcmFtZVJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFpc01vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlc3RvcmVGb2N1c0ZyYW1lUmVmLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVzdG9yZUZvY3VzRnJhbWVSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICB2YXIgcmVjb3JkID0gcmVjb3JkUmVmLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgdHJ5R2l2ZUZvY3VzKHJlY29yZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sIFt0cnlHaXZlRm9jdXNdKTtcbiAgdmFyIHRyeVJlY29yZEZvY3VzID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdHJ5UmVjb3JkRm9jdXMoaWQpIHtcbiAgICByZWNvcmRSZWYuY3VycmVudCA9IG51bGw7XG4gICAgdmFyIGZvY3VzZWQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gICAgaWYgKCFmb2N1c2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGZvY3VzZWQuZ2V0QXR0cmlidXRlKGRyYWdIYW5kbGUuZHJhZ2dhYmxlSWQpICE9PSBpZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlY29yZFJlZi5jdXJyZW50ID0gaWQ7XG4gIH0sIFtdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIHJldHVybiBmdW5jdGlvbiBjbGVhckZyYW1lT25Vbm1vdW50KCkge1xuICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHZhciBmcmFtZUlkID0gcmVzdG9yZUZvY3VzRnJhbWVSZWYuY3VycmVudDtcblxuICAgICAgaWYgKGZyYW1lSWQpIHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWVJZCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuICB2YXIgbWFyc2hhbCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZWdpc3RlcjogcmVnaXN0ZXIsXG4gICAgICB0cnlSZWNvcmRGb2N1czogdHJ5UmVjb3JkRm9jdXMsXG4gICAgICB0cnlSZXN0b3JlRm9jdXNSZWNvcmRlZDogdHJ5UmVzdG9yZUZvY3VzUmVjb3JkZWQsXG4gICAgICB0cnlTaGlmdFJlY29yZDogdHJ5U2hpZnRSZWNvcmRcbiAgICB9O1xuICB9LCBbcmVnaXN0ZXIsIHRyeVJlY29yZEZvY3VzLCB0cnlSZXN0b3JlRm9jdXNSZWNvcmRlZCwgdHJ5U2hpZnRSZWNvcmRdKTtcbiAgcmV0dXJuIG1hcnNoYWw7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlZ2lzdHJ5KCkge1xuICB2YXIgZW50cmllcyA9IHtcbiAgICBkcmFnZ2FibGVzOiB7fSxcbiAgICBkcm9wcGFibGVzOiB7fVxuICB9O1xuICB2YXIgc3Vic2NyaWJlcnMgPSBbXTtcblxuICBmdW5jdGlvbiBzdWJzY3JpYmUoY2IpIHtcbiAgICBzdWJzY3JpYmVycy5wdXNoKGNiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICB2YXIgaW5kZXggPSBzdWJzY3JpYmVycy5pbmRleE9mKGNiKTtcblxuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN1YnNjcmliZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeShldmVudCkge1xuICAgIGlmIChzdWJzY3JpYmVycy5sZW5ndGgpIHtcbiAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHJldHVybiBjYihldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kRHJhZ2dhYmxlQnlJZChpZCkge1xuICAgIHJldHVybiBlbnRyaWVzLmRyYWdnYWJsZXNbaWRdIHx8IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREcmFnZ2FibGVCeUlkKGlkKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZERyYWdnYWJsZUJ5SWQoaWQpO1xuICAgICFlbnRyeSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgZmluZCBkcmFnZ2FibGUgZW50cnkgd2l0aCBpZCBbXCIgKyBpZCArIFwiXVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGVudHJ5O1xuICB9XG5cbiAgdmFyIGRyYWdnYWJsZUFQSSA9IHtcbiAgICByZWdpc3RlcjogZnVuY3Rpb24gcmVnaXN0ZXIoZW50cnkpIHtcbiAgICAgIGVudHJpZXMuZHJhZ2dhYmxlc1tlbnRyeS5kZXNjcmlwdG9yLmlkXSA9IGVudHJ5O1xuICAgICAgbm90aWZ5KHtcbiAgICAgICAgdHlwZTogJ0FERElUSU9OJyxcbiAgICAgICAgdmFsdWU6IGVudHJ5XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGVudHJ5LCBsYXN0KSB7XG4gICAgICB2YXIgY3VycmVudCA9IGVudHJpZXMuZHJhZ2dhYmxlc1tsYXN0LmRlc2NyaXB0b3IuaWRdO1xuXG4gICAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudC51bmlxdWVJZCAhPT0gZW50cnkudW5pcXVlSWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgZW50cmllcy5kcmFnZ2FibGVzW2xhc3QuZGVzY3JpcHRvci5pZF07XG4gICAgICBlbnRyaWVzLmRyYWdnYWJsZXNbZW50cnkuZGVzY3JpcHRvci5pZF0gPSBlbnRyeTtcbiAgICB9LFxuICAgIHVucmVnaXN0ZXI6IGZ1bmN0aW9uIHVucmVnaXN0ZXIoZW50cnkpIHtcbiAgICAgIHZhciBkcmFnZ2FibGVJZCA9IGVudHJ5LmRlc2NyaXB0b3IuaWQ7XG4gICAgICB2YXIgY3VycmVudCA9IGZpbmREcmFnZ2FibGVCeUlkKGRyYWdnYWJsZUlkKTtcblxuICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVudHJ5LnVuaXF1ZUlkICE9PSBjdXJyZW50LnVuaXF1ZUlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIGVudHJpZXMuZHJhZ2dhYmxlc1tkcmFnZ2FibGVJZF07XG4gICAgICBub3RpZnkoe1xuICAgICAgICB0eXBlOiAnUkVNT1ZBTCcsXG4gICAgICAgIHZhbHVlOiBlbnRyeVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRCeUlkOiBnZXREcmFnZ2FibGVCeUlkLFxuICAgIGZpbmRCeUlkOiBmaW5kRHJhZ2dhYmxlQnlJZCxcbiAgICBleGlzdHM6IGZ1bmN0aW9uIGV4aXN0cyhpZCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4oZmluZERyYWdnYWJsZUJ5SWQoaWQpKTtcbiAgICB9LFxuICAgIGdldEFsbEJ5VHlwZTogZnVuY3Rpb24gZ2V0QWxsQnlUeXBlKHR5cGUpIHtcbiAgICAgIHJldHVybiB2YWx1ZXMoZW50cmllcy5kcmFnZ2FibGVzKS5maWx0ZXIoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgIHJldHVybiBlbnRyeS5kZXNjcmlwdG9yLnR5cGUgPT09IHR5cGU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZmluZERyb3BwYWJsZUJ5SWQoaWQpIHtcbiAgICByZXR1cm4gZW50cmllcy5kcm9wcGFibGVzW2lkXSB8fCBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RHJvcHBhYmxlQnlJZChpZCkge1xuICAgIHZhciBlbnRyeSA9IGZpbmREcm9wcGFibGVCeUlkKGlkKTtcbiAgICAhZW50cnkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGZpbmQgZHJvcHBhYmxlIGVudHJ5IHdpdGggaWQgW1wiICsgaWQgKyBcIl1cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBlbnRyeTtcbiAgfVxuXG4gIHZhciBkcm9wcGFibGVBUEkgPSB7XG4gICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKGVudHJ5KSB7XG4gICAgICBlbnRyaWVzLmRyb3BwYWJsZXNbZW50cnkuZGVzY3JpcHRvci5pZF0gPSBlbnRyeTtcbiAgICB9LFxuICAgIHVucmVnaXN0ZXI6IGZ1bmN0aW9uIHVucmVnaXN0ZXIoZW50cnkpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gZmluZERyb3BwYWJsZUJ5SWQoZW50cnkuZGVzY3JpcHRvci5pZCk7XG5cbiAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChlbnRyeS51bmlxdWVJZCAhPT0gY3VycmVudC51bmlxdWVJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBlbnRyaWVzLmRyb3BwYWJsZXNbZW50cnkuZGVzY3JpcHRvci5pZF07XG4gICAgfSxcbiAgICBnZXRCeUlkOiBnZXREcm9wcGFibGVCeUlkLFxuICAgIGZpbmRCeUlkOiBmaW5kRHJvcHBhYmxlQnlJZCxcbiAgICBleGlzdHM6IGZ1bmN0aW9uIGV4aXN0cyhpZCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4oZmluZERyb3BwYWJsZUJ5SWQoaWQpKTtcbiAgICB9LFxuICAgIGdldEFsbEJ5VHlwZTogZnVuY3Rpb24gZ2V0QWxsQnlUeXBlKHR5cGUpIHtcbiAgICAgIHJldHVybiB2YWx1ZXMoZW50cmllcy5kcm9wcGFibGVzKS5maWx0ZXIoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgIHJldHVybiBlbnRyeS5kZXNjcmlwdG9yLnR5cGUgPT09IHR5cGU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gY2xlYW4oKSB7XG4gICAgZW50cmllcy5kcmFnZ2FibGVzID0ge307XG4gICAgZW50cmllcy5kcm9wcGFibGVzID0ge307XG4gICAgc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGVBUEksXG4gICAgZHJvcHBhYmxlOiBkcm9wcGFibGVBUEksXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgY2xlYW46IGNsZWFuXG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZVJlZ2lzdHJ5KCkge1xuICB2YXIgcmVnaXN0cnkgPSB1c2VNZW1vKGNyZWF0ZVJlZ2lzdHJ5LCBbXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVnaXN0cnkuY2xlYW4pO1xuICAgIH07XG4gIH0sIFtyZWdpc3RyeV0pO1xuICByZXR1cm4gcmVnaXN0cnk7XG59XG5cbnZhciBTdG9yZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG52YXIgZ2V0Qm9keUVsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICFib2R5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpbmQgZG9jdW1lbnQuYm9keScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGJvZHk7XG59KTtcblxudmFyIHZpc3VhbGx5SGlkZGVuID0ge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxcHgnLFxuICBoZWlnaHQ6ICcxcHgnLFxuICBtYXJnaW46ICctMXB4JyxcbiAgYm9yZGVyOiAnMCcsXG4gIHBhZGRpbmc6ICcwJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBjbGlwOiAncmVjdCgwIDAgMCAwKScsXG4gICdjbGlwLXBhdGgnOiAnaW5zZXQoMTAwJSknXG59O1xuXG52YXIgZ2V0SWQgPSBmdW5jdGlvbiBnZXRJZChjb250ZXh0SWQpIHtcbiAgcmV0dXJuIFwicmJkLWFubm91bmNlbWVudC1cIiArIGNvbnRleHRJZDtcbn07XG5mdW5jdGlvbiB1c2VBbm5vdW5jZXIoY29udGV4dElkKSB7XG4gIHZhciBpZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRJZChjb250ZXh0SWQpO1xuICB9LCBbY29udGV4dElkXSk7XG4gIHZhciByZWYgPSB1c2VSZWYobnVsbCk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICByZWYuY3VycmVudCA9IGVsO1xuICAgIGVsLmlkID0gaWQ7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAnYXNzZXJ0aXZlJyk7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdhcmlhLWF0b21pYycsICd0cnVlJyk7XG5cbiAgICBfZXh0ZW5kcyhlbC5zdHlsZSwgdmlzdWFsbHlIaWRkZW4pO1xuXG4gICAgZ2V0Qm9keUVsZW1lbnQoKS5hcHBlbmRDaGlsZChlbCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgdmFyIGJvZHkgPSBnZXRCb2R5RWxlbWVudCgpO1xuXG4gICAgICAgIGlmIChib2R5LmNvbnRhaW5zKGVsKSkge1xuICAgICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsID09PSByZWYuY3VycmVudCkge1xuICAgICAgICAgIHJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSwgW2lkXSk7XG4gIHZhciBhbm5vdW5jZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgdmFyIGVsID0gcmVmLmN1cnJlbnQ7XG5cbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgQSBzY3JlZW4gcmVhZGVyIG1lc3NhZ2Ugd2FzIHRyeWluZyB0byBiZSBhbm5vdW5jZWQgYnV0IGl0IHdhcyB1bmFibGUgdG8gZG8gc28uXFxuICAgICAgVGhpcyBjYW4gb2NjdXIgaWYgeW91IHVubW91bnQgeW91ciA8RHJhZ0Ryb3BDb250ZXh0IC8+IGluIHlvdXIgb25EcmFnRW5kLlxcbiAgICAgIENvbnNpZGVyIGNhbGxpbmcgcHJvdmlkZWQuYW5ub3VuY2UoKSBiZWZvcmUgdGhlIHVubW91bnQgc28gdGhhdCB0aGUgaW5zdHJ1Y3Rpb24gd2lsbFxcbiAgICAgIG5vdCBiZSBsb3N0IGZvciB1c2VycyByZWx5aW5nIG9uIGEgc2NyZWVuIHJlYWRlci5cXG5cXG4gICAgICBNZXNzYWdlIG5vdCBwYXNzZWQgdG8gc2NyZWVuIHJlYWRlcjpcXG5cXG4gICAgICBcXFwiXCIgKyBtZXNzYWdlICsgXCJcXFwiXFxuICAgIFwiKSA6IHZvaWQgMDtcbiAgfSwgW10pO1xuICByZXR1cm4gYW5ub3VuY2U7XG59XG5cbnZhciBjb3VudCA9IDA7XG52YXIgZGVmYXVsdHMgPSB7XG4gIHNlcGFyYXRvcjogJzo6J1xufTtcbmZ1bmN0aW9uIHJlc2V0KCkge1xuICBjb3VudCA9IDA7XG59XG5mdW5jdGlvbiB1c2VVbmlxdWVJZChwcmVmaXgsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSBkZWZhdWx0cztcbiAgfVxuXG4gIHJldHVybiB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJcIiArIHByZWZpeCArIG9wdGlvbnMuc2VwYXJhdG9yICsgY291bnQrKztcbiAgfSwgW29wdGlvbnMuc2VwYXJhdG9yLCBwcmVmaXhdKTtcbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudElkKF9yZWYpIHtcbiAgdmFyIGNvbnRleHRJZCA9IF9yZWYuY29udGV4dElkLFxuICAgICAgdW5pcXVlSWQgPSBfcmVmLnVuaXF1ZUlkO1xuICByZXR1cm4gXCJyYmQtaGlkZGVuLXRleHQtXCIgKyBjb250ZXh0SWQgKyBcIi1cIiArIHVuaXF1ZUlkO1xufVxuZnVuY3Rpb24gdXNlSGlkZGVuVGV4dEVsZW1lbnQoX3JlZjIpIHtcbiAgdmFyIGNvbnRleHRJZCA9IF9yZWYyLmNvbnRleHRJZCxcbiAgICAgIHRleHQgPSBfcmVmMi50ZXh0O1xuICB2YXIgdW5pcXVlSWQgPSB1c2VVbmlxdWVJZCgnaGlkZGVuLXRleHQnLCB7XG4gICAgc2VwYXJhdG9yOiAnLSdcbiAgfSk7XG4gIHZhciBpZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRFbGVtZW50SWQoe1xuICAgICAgY29udGV4dElkOiBjb250ZXh0SWQsXG4gICAgICB1bmlxdWVJZDogdW5pcXVlSWRcbiAgICB9KTtcbiAgfSwgW3VuaXF1ZUlkLCBjb250ZXh0SWRdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsLmlkID0gaWQ7XG4gICAgZWwudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgZ2V0Qm9keUVsZW1lbnQoKS5hcHBlbmRDaGlsZChlbCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgICB2YXIgYm9keSA9IGdldEJvZHlFbGVtZW50KCk7XG5cbiAgICAgIGlmIChib2R5LmNvbnRhaW5zKGVsKSkge1xuICAgICAgICBib2R5LnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbaWQsIHRleHRdKTtcbiAgcmV0dXJuIGlkO1xufVxuXG52YXIgQXBwQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbnZhciBwZWVyRGVwZW5kZW5jaWVzID0ge1xuXHRyZWFjdDogXCJeMTYuOC41IHx8IF4xNy4wLjBcIixcblx0XCJyZWFjdC1kb21cIjogXCJeMTYuOC41IHx8IF4xNy4wLjBcIlxufTtcblxudmFyIHNlbXZlciA9IC8oXFxkKylcXC4oXFxkKylcXC4oXFxkKykvO1xuXG52YXIgZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uIGdldFZlcnNpb24odmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHNlbXZlci5leGVjKHZhbHVlKTtcbiAgIShyZXN1bHQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiVW5hYmxlIHRvIHBhcnNlIFJlYWN0IHZlcnNpb24gXCIgKyB2YWx1ZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgbWFqb3IgPSBOdW1iZXIocmVzdWx0WzFdKTtcbiAgdmFyIG1pbm9yID0gTnVtYmVyKHJlc3VsdFsyXSk7XG4gIHZhciBwYXRjaCA9IE51bWJlcihyZXN1bHRbM10pO1xuICByZXR1cm4ge1xuICAgIG1ham9yOiBtYWpvcixcbiAgICBtaW5vcjogbWlub3IsXG4gICAgcGF0Y2g6IHBhdGNoLFxuICAgIHJhdzogdmFsdWVcbiAgfTtcbn07XG5cbnZhciBpc1NhdGlzZmllZCA9IGZ1bmN0aW9uIGlzU2F0aXNmaWVkKGV4cGVjdGVkLCBhY3R1YWwpIHtcbiAgaWYgKGFjdHVhbC5tYWpvciA+IGV4cGVjdGVkLm1ham9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoYWN0dWFsLm1ham9yIDwgZXhwZWN0ZWQubWFqb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoYWN0dWFsLm1pbm9yID4gZXhwZWN0ZWQubWlub3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChhY3R1YWwubWlub3IgPCBleHBlY3RlZC5taW5vcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBhY3R1YWwucGF0Y2ggPj0gZXhwZWN0ZWQucGF0Y2g7XG59O1xuXG52YXIgY2hlY2tSZWFjdFZlcnNpb24gPSAoZnVuY3Rpb24gKHBlZXJEZXBWYWx1ZSwgYWN0dWFsVmFsdWUpIHtcbiAgdmFyIHBlZXJEZXAgPSBnZXRWZXJzaW9uKHBlZXJEZXBWYWx1ZSk7XG4gIHZhciBhY3R1YWwgPSBnZXRWZXJzaW9uKGFjdHVhbFZhbHVlKTtcblxuICBpZiAoaXNTYXRpc2ZpZWQocGVlckRlcCwgYWN0dWFsKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgUmVhY3QgdmVyc2lvbjogW1wiICsgYWN0dWFsLnJhdyArIFwiXVxcbiAgICBkb2VzIG5vdCBzYXRpc2Z5IGV4cGVjdGVkIHBlZXIgZGVwZW5kZW5jeSB2ZXJzaW9uOiBbXCIgKyBwZWVyRGVwLnJhdyArIFwiXVxcblxcbiAgICBUaGlzIGNhbiByZXN1bHQgaW4gcnVuIHRpbWUgYnVncywgYW5kIGV2ZW4gZmF0YWwgY3Jhc2hlc1xcbiAgXCIpIDogdm9pZCAwO1xufSk7XG5cbnZhciBzdWZmaXggPSBcIlxcbiAgV2UgZXhwZWN0IGEgaHRtbDUgZG9jdHlwZTogPCFkb2N0eXBlIGh0bWw+XFxuICBUaGlzIGlzIHRvIGVuc3VyZSBjb25zaXN0ZW50IGJyb3dzZXIgbGF5b3V0IGFuZCBtZWFzdXJlbWVudFxcblxcbiAgTW9yZSBpbmZvcm1hdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kL2Jsb2IvbWFzdGVyL2RvY3MvZ3VpZGVzL2RvY3R5cGUubWRcXG5cIjtcbnZhciBjaGVja0RvY3R5cGUgPSAoZnVuY3Rpb24gKGRvYykge1xuICB2YXIgZG9jdHlwZSA9IGRvYy5kb2N0eXBlO1xuXG4gIGlmICghZG9jdHlwZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICBObyA8IWRvY3R5cGUgaHRtbD4gZm91bmQuXFxuXFxuICAgICAgXCIgKyBzdWZmaXggKyBcIlxcbiAgICBcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRvY3R5cGUubmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnaHRtbCcpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgVW5leHBlY3RlZCA8IWRvY3R5cGU+IGZvdW5kOiAoXCIgKyBkb2N0eXBlLm5hbWUgKyBcIilcXG5cXG4gICAgICBcIiArIHN1ZmZpeCArIFwiXFxuICAgIFwiKSA6IHZvaWQgMDtcbiAgfVxuXG4gIGlmIChkb2N0eXBlLnB1YmxpY0lkICE9PSAnJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICBVbmV4cGVjdGVkIDwhZG9jdHlwZT4gcHVibGljSWQgZm91bmQ6IChcIiArIGRvY3R5cGUucHVibGljSWQgKyBcIilcXG4gICAgICBBIGh0bWw1IGRvY3R5cGUgZG9lcyBub3QgaGF2ZSBhIHB1YmxpY0lkXFxuXFxuICAgICAgXCIgKyBzdWZmaXggKyBcIlxcbiAgICBcIikgOiB2b2lkIDA7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1c2VEZXYodXNlSG9vaykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVzZUhvb2soKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1c2VEZXZTZXR1cFdhcm5pbmcoZm4sIGlucHV0cykge1xuICB1c2VEZXYoZnVuY3Rpb24gKCkge1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlcnJvcihcIlxcbiAgICAgICAgICBBIHNldHVwIHByb2JsZW0gd2FzIGVuY291bnRlcmVkLlxcblxcbiAgICAgICAgICA+IFwiICsgZS5tZXNzYWdlICsgXCJcXG4gICAgICAgIFwiKTtcbiAgICAgIH1cbiAgICB9LCBpbnB1dHMpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdXNlU3RhcnR1cFZhbGlkYXRpb24oKSB7XG4gIHVzZURldlNldHVwV2FybmluZyhmdW5jdGlvbiAoKSB7XG4gICAgY2hlY2tSZWFjdFZlcnNpb24ocGVlckRlcGVuZGVuY2llcy5yZWFjdCwgUmVhY3QudmVyc2lvbik7XG4gICAgY2hlY2tEb2N0eXBlKGRvY3VtZW50KTtcbiAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiB1c2VQcmV2aW91cyhjdXJyZW50KSB7XG4gIHZhciByZWYgPSB1c2VSZWYoY3VycmVudCk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmVmLmN1cnJlbnQgPSBjdXJyZW50O1xuICB9KTtcbiAgcmV0dXJuIHJlZjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgbG9jayA9IG51bGw7XG5cbiAgZnVuY3Rpb24gaXNDbGFpbWVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKGxvY2spO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBY3RpdmUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxvY2s7XG4gIH1cblxuICBmdW5jdGlvbiBjbGFpbShhYmFuZG9uKSB7XG4gICAgISFsb2NrID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGNsYWltIGxvY2sgYXMgaXQgaXMgYWxyZWFkeSBjbGFpbWVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBuZXdMb2NrID0ge1xuICAgICAgYWJhbmRvbjogYWJhbmRvblxuICAgIH07XG4gICAgbG9jayA9IG5ld0xvY2s7XG4gICAgcmV0dXJuIG5ld0xvY2s7XG4gIH1cblxuICBmdW5jdGlvbiByZWxlYXNlKCkge1xuICAgICFsb2NrID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHJlbGVhc2UgbG9jayB3aGVuIHRoZXJlIGlzIG5vIGxvY2snKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbG9jayA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlBYmFuZG9uKCkge1xuICAgIGlmIChsb2NrKSB7XG4gICAgICBsb2NrLmFiYW5kb24oKTtcbiAgICAgIHJlbGVhc2UoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlzQ2xhaW1lZDogaXNDbGFpbWVkLFxuICAgIGlzQWN0aXZlOiBpc0FjdGl2ZSxcbiAgICBjbGFpbTogY2xhaW0sXG4gICAgcmVsZWFzZTogcmVsZWFzZSxcbiAgICB0cnlBYmFuZG9uOiB0cnlBYmFuZG9uXG4gIH07XG59XG5cbnZhciB0YWIgPSA5O1xudmFyIGVudGVyID0gMTM7XG52YXIgZXNjYXBlID0gMjc7XG52YXIgc3BhY2UgPSAzMjtcbnZhciBwYWdlVXAgPSAzMztcbnZhciBwYWdlRG93biA9IDM0O1xudmFyIGVuZCA9IDM1O1xudmFyIGhvbWUgPSAzNjtcbnZhciBhcnJvd0xlZnQgPSAzNztcbnZhciBhcnJvd1VwID0gMzg7XG52YXIgYXJyb3dSaWdodCA9IDM5O1xudmFyIGFycm93RG93biA9IDQwO1xuXG52YXIgX3ByZXZlbnRlZEtleXM7XG52YXIgcHJldmVudGVkS2V5cyA9IChfcHJldmVudGVkS2V5cyA9IHt9LCBfcHJldmVudGVkS2V5c1tlbnRlcl0gPSB0cnVlLCBfcHJldmVudGVkS2V5c1t0YWJdID0gdHJ1ZSwgX3ByZXZlbnRlZEtleXMpO1xudmFyIHByZXZlbnRTdGFuZGFyZEtleUV2ZW50cyA9IChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHByZXZlbnRlZEtleXNbZXZlbnQua2V5Q29kZV0pIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59KTtcblxudmFyIHN1cHBvcnRlZEV2ZW50TmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJhc2UgPSAndmlzaWJpbGl0eWNoYW5nZSc7XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuXG4gIHZhciBjYW5kaWRhdGVzID0gW2Jhc2UsIFwibXNcIiArIGJhc2UsIFwid2Via2l0XCIgKyBiYXNlLCBcIm1velwiICsgYmFzZSwgXCJvXCIgKyBiYXNlXTtcbiAgdmFyIHN1cHBvcnRlZCA9IGZpbmQoY2FuZGlkYXRlcywgZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgIHJldHVybiBcIm9uXCIgKyBldmVudE5hbWUgaW4gZG9jdW1lbnQ7XG4gIH0pO1xuICByZXR1cm4gc3VwcG9ydGVkIHx8IGJhc2U7XG59KCk7XG5cbnZhciBwcmltYXJ5QnV0dG9uID0gMDtcbnZhciBzbG9wcHlDbGlja1RocmVzaG9sZCA9IDU7XG5cbmZ1bmN0aW9uIGlzU2xvcHB5Q2xpY2tUaHJlc2hvbGRFeGNlZWRlZChvcmlnaW5hbCwgY3VycmVudCkge1xuICByZXR1cm4gTWF0aC5hYnMoY3VycmVudC54IC0gb3JpZ2luYWwueCkgPj0gc2xvcHB5Q2xpY2tUaHJlc2hvbGQgfHwgTWF0aC5hYnMoY3VycmVudC55IC0gb3JpZ2luYWwueSkgPj0gc2xvcHB5Q2xpY2tUaHJlc2hvbGQ7XG59XG5cbnZhciBpZGxlJDEgPSB7XG4gIHR5cGU6ICdJRExFJ1xufTtcblxuZnVuY3Rpb24gZ2V0Q2FwdHVyZUJpbmRpbmdzKF9yZWYpIHtcbiAgdmFyIGNhbmNlbCA9IF9yZWYuY2FuY2VsLFxuICAgICAgY29tcGxldGVkID0gX3JlZi5jb21wbGV0ZWQsXG4gICAgICBnZXRQaGFzZSA9IF9yZWYuZ2V0UGhhc2UsXG4gICAgICBzZXRQaGFzZSA9IF9yZWYuc2V0UGhhc2U7XG4gIHJldHVybiBbe1xuICAgIGV2ZW50TmFtZTogJ21vdXNlbW92ZScsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICB2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uLFxuICAgICAgICAgIGNsaWVudFggPSBldmVudC5jbGllbnRYLFxuICAgICAgICAgIGNsaWVudFkgPSBldmVudC5jbGllbnRZO1xuXG4gICAgICBpZiAoYnV0dG9uICE9PSBwcmltYXJ5QnV0dG9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvaW50ID0ge1xuICAgICAgICB4OiBjbGllbnRYLFxuICAgICAgICB5OiBjbGllbnRZXG4gICAgICB9O1xuICAgICAgdmFyIHBoYXNlID0gZ2V0UGhhc2UoKTtcblxuICAgICAgaWYgKHBoYXNlLnR5cGUgPT09ICdEUkFHR0lORycpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcGhhc2UuYWN0aW9ucy5tb3ZlKHBvaW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAhKHBoYXNlLnR5cGUgPT09ICdQRU5ESU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgYmUgSURMRScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBwZW5kaW5nID0gcGhhc2UucG9pbnQ7XG5cbiAgICAgIGlmICghaXNTbG9wcHlDbGlja1RocmVzaG9sZEV4Y2VlZGVkKHBlbmRpbmcsIHBvaW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgYWN0aW9ucyA9IHBoYXNlLmFjdGlvbnMuZmx1aWRMaWZ0KHBvaW50KTtcbiAgICAgIHNldFBoYXNlKHtcbiAgICAgICAgdHlwZTogJ0RSQUdHSU5HJyxcbiAgICAgICAgYWN0aW9uczogYWN0aW9uc1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAnbW91c2V1cCcsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICB2YXIgcGhhc2UgPSBnZXRQaGFzZSgpO1xuXG4gICAgICBpZiAocGhhc2UudHlwZSAhPT0gJ0RSQUdHSU5HJykge1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcGhhc2UuYWN0aW9ucy5kcm9wKHtcbiAgICAgICAgc2hvdWxkQmxvY2tOZXh0Q2xpY2s6IHRydWVcbiAgICAgIH0pO1xuICAgICAgY29tcGxldGVkKCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAnbW91c2Vkb3duJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIGlmIChnZXRQaGFzZSgpLnR5cGUgPT09ICdEUkFHR0lORycpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY2FuY2VsKCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAna2V5ZG93bicsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICB2YXIgcGhhc2UgPSBnZXRQaGFzZSgpO1xuXG4gICAgICBpZiAocGhhc2UudHlwZSA9PT0gJ1BFTkRJTkcnKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBlc2NhcGUpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcHJldmVudFN0YW5kYXJkS2V5RXZlbnRzKGV2ZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdyZXNpemUnLFxuICAgIGZuOiBjYW5jZWxcbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ3Njcm9sbCcsXG4gICAgb3B0aW9uczoge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSxcbiAgICBmbjogZnVuY3Rpb24gZm4oKSB7XG4gICAgICBpZiAoZ2V0UGhhc2UoKS50eXBlID09PSAnUEVORElORycpIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAnd2Via2l0bW91c2Vmb3JjZWRvd24nLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgdmFyIHBoYXNlID0gZ2V0UGhhc2UoKTtcbiAgICAgICEocGhhc2UudHlwZSAhPT0gJ0lETEUnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1VuZXhwZWN0ZWQgcGhhc2UnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICAgIGlmIChwaGFzZS5hY3Rpb25zLnNob3VsZFJlc3BlY3RGb3JjZVByZXNzKCkpIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6IHN1cHBvcnRlZEV2ZW50TmFtZSxcbiAgICBmbjogY2FuY2VsXG4gIH1dO1xufVxuXG5mdW5jdGlvbiB1c2VNb3VzZVNlbnNvcihhcGkpIHtcbiAgdmFyIHBoYXNlUmVmID0gdXNlUmVmKGlkbGUkMSk7XG4gIHZhciB1bmJpbmRFdmVudHNSZWYgPSB1c2VSZWYobm9vcCk7XG4gIHZhciBzdGFydENhcHR1cmVCaW5kaW5nID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV2ZW50TmFtZTogJ21vdXNlZG93bicsXG4gICAgICBmbjogZnVuY3Rpb24gb25Nb3VzZURvd24oZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSBwcmltYXJ5QnV0dG9uKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSB8fCBldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJhZ2dhYmxlSWQgPSBhcGkuZmluZENsb3Nlc3REcmFnZ2FibGVJZChldmVudCk7XG5cbiAgICAgICAgaWYgKCFkcmFnZ2FibGVJZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb25zID0gYXBpLnRyeUdldExvY2soZHJhZ2dhYmxlSWQsIHN0b3AsIHtcbiAgICAgICAgICBzb3VyY2VFdmVudDogZXZlbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFhY3Rpb25zKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIHBvaW50ID0ge1xuICAgICAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICAgICAgeTogZXZlbnQuY2xpZW50WVxuICAgICAgICB9O1xuICAgICAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCgpO1xuICAgICAgICBzdGFydFBlbmRpbmdEcmFnKGFjdGlvbnMsIHBvaW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbYXBpXSk7XG4gIHZhciBwcmV2ZW50Rm9yY2VQcmVzc0JpbmRpbmcgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXZlbnROYW1lOiAnd2Via2l0bW91c2Vmb3JjZXdpbGxiZWdpbicsXG4gICAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaWQgPSBhcGkuZmluZENsb3Nlc3REcmFnZ2FibGVJZChldmVudCk7XG5cbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0gYXBpLmZpbmRPcHRpb25zRm9yRHJhZ2dhYmxlKGlkKTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5zaG91bGRSZXNwZWN0Rm9yY2VQcmVzcykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYXBpLmNhbkdldExvY2soaWQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbYXBpXSk7XG4gIHZhciBsaXN0ZW5Gb3JDYXB0dXJlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gbGlzdGVuRm9yQ2FwdHVyZSgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH07XG4gICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQgPSBiaW5kRXZlbnRzKHdpbmRvdywgW3ByZXZlbnRGb3JjZVByZXNzQmluZGluZywgc3RhcnRDYXB0dXJlQmluZGluZ10sIG9wdGlvbnMpO1xuICB9LCBbcHJldmVudEZvcmNlUHJlc3NCaW5kaW5nLCBzdGFydENhcHR1cmVCaW5kaW5nXSk7XG4gIHZhciBzdG9wID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJyZW50ID0gcGhhc2VSZWYuY3VycmVudDtcblxuICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICdJRExFJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBoYXNlUmVmLmN1cnJlbnQgPSBpZGxlJDE7XG4gICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQoKTtcbiAgICBsaXN0ZW5Gb3JDYXB0dXJlKCk7XG4gIH0sIFtsaXN0ZW5Gb3JDYXB0dXJlXSk7XG4gIHZhciBjYW5jZWwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBoYXNlID0gcGhhc2VSZWYuY3VycmVudDtcbiAgICBzdG9wKCk7XG5cbiAgICBpZiAocGhhc2UudHlwZSA9PT0gJ0RSQUdHSU5HJykge1xuICAgICAgcGhhc2UuYWN0aW9ucy5jYW5jZWwoe1xuICAgICAgICBzaG91bGRCbG9ja05leHRDbGljazogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHBoYXNlLnR5cGUgPT09ICdQRU5ESU5HJykge1xuICAgICAgcGhhc2UuYWN0aW9ucy5hYm9ydCgpO1xuICAgIH1cbiAgfSwgW3N0b3BdKTtcbiAgdmFyIGJpbmRDYXB0dXJpbmdFdmVudHMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiBiaW5kQ2FwdHVyaW5nRXZlbnRzKCkge1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfTtcbiAgICB2YXIgYmluZGluZ3MgPSBnZXRDYXB0dXJlQmluZGluZ3Moe1xuICAgICAgY2FuY2VsOiBjYW5jZWwsXG4gICAgICBjb21wbGV0ZWQ6IHN0b3AsXG4gICAgICBnZXRQaGFzZTogZnVuY3Rpb24gZ2V0UGhhc2UoKSB7XG4gICAgICAgIHJldHVybiBwaGFzZVJlZi5jdXJyZW50O1xuICAgICAgfSxcbiAgICAgIHNldFBoYXNlOiBmdW5jdGlvbiBzZXRQaGFzZShwaGFzZSkge1xuICAgICAgICBwaGFzZVJlZi5jdXJyZW50ID0gcGhhc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQgPSBiaW5kRXZlbnRzKHdpbmRvdywgYmluZGluZ3MsIG9wdGlvbnMpO1xuICB9LCBbY2FuY2VsLCBzdG9wXSk7XG4gIHZhciBzdGFydFBlbmRpbmdEcmFnID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gc3RhcnRQZW5kaW5nRHJhZyhhY3Rpb25zLCBwb2ludCkge1xuICAgICEocGhhc2VSZWYuY3VycmVudC50eXBlID09PSAnSURMRScpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgdG8gbW92ZSBmcm9tIElETEUgdG8gUEVORElORyBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHBoYXNlUmVmLmN1cnJlbnQgPSB7XG4gICAgICB0eXBlOiAnUEVORElORycsXG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBhY3Rpb25zOiBhY3Rpb25zXG4gICAgfTtcbiAgICBiaW5kQ2FwdHVyaW5nRXZlbnRzKCk7XG4gIH0sIFtiaW5kQ2FwdHVyaW5nRXZlbnRzXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgbGlzdGVuRm9yQ2FwdHVyZSgpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bm1vdW50KCkge1xuICAgICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQoKTtcbiAgICB9O1xuICB9LCBbbGlzdGVuRm9yQ2FwdHVyZV0pO1xufVxuXG52YXIgX3Njcm9sbEp1bXBLZXlzO1xuXG5mdW5jdGlvbiBub29wJDEoKSB7fVxuXG52YXIgc2Nyb2xsSnVtcEtleXMgPSAoX3Njcm9sbEp1bXBLZXlzID0ge30sIF9zY3JvbGxKdW1wS2V5c1twYWdlRG93bl0gPSB0cnVlLCBfc2Nyb2xsSnVtcEtleXNbcGFnZVVwXSA9IHRydWUsIF9zY3JvbGxKdW1wS2V5c1tob21lXSA9IHRydWUsIF9zY3JvbGxKdW1wS2V5c1tlbmRdID0gdHJ1ZSwgX3Njcm9sbEp1bXBLZXlzKTtcblxuZnVuY3Rpb24gZ2V0RHJhZ2dpbmdCaW5kaW5ncyhhY3Rpb25zLCBzdG9wKSB7XG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBzdG9wKCk7XG4gICAgYWN0aW9ucy5jYW5jZWwoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyb3AoKSB7XG4gICAgc3RvcCgpO1xuICAgIGFjdGlvbnMuZHJvcCgpO1xuICB9XG5cbiAgcmV0dXJuIFt7XG4gICAgZXZlbnROYW1lOiAna2V5ZG93bicsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gZXNjYXBlKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBzcGFjZSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBkcm9wKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGFycm93RG93bikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBhY3Rpb25zLm1vdmVEb3duKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGFycm93VXApIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYWN0aW9ucy5tb3ZlVXAoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gYXJyb3dSaWdodCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBhY3Rpb25zLm1vdmVSaWdodCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBhcnJvd0xlZnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYWN0aW9ucy5tb3ZlTGVmdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzY3JvbGxKdW1wS2V5c1tldmVudC5rZXlDb2RlXSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHByZXZlbnRTdGFuZGFyZEtleUV2ZW50cyhldmVudCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAnbW91c2Vkb3duJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdtb3VzZXVwJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdjbGljaycsXG4gICAgZm46IGNhbmNlbFxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAndG91Y2hzdGFydCcsXG4gICAgZm46IGNhbmNlbFxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAncmVzaXplJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd3aGVlbCcsXG4gICAgZm46IGNhbmNlbCxcbiAgICBvcHRpb25zOiB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiBzdXBwb3J0ZWRFdmVudE5hbWUsXG4gICAgZm46IGNhbmNlbFxuICB9XTtcbn1cblxuZnVuY3Rpb24gdXNlS2V5Ym9hcmRTZW5zb3IoYXBpKSB7XG4gIHZhciB1bmJpbmRFdmVudHNSZWYgPSB1c2VSZWYobm9vcCQxKTtcbiAgdmFyIHN0YXJ0Q2FwdHVyZUJpbmRpbmcgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXZlbnROYW1lOiAna2V5ZG93bicsXG4gICAgICBmbjogZnVuY3Rpb24gb25LZXlEb3duKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgIT09IHNwYWNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRyYWdnYWJsZUlkID0gYXBpLmZpbmRDbG9zZXN0RHJhZ2dhYmxlSWQoZXZlbnQpO1xuXG4gICAgICAgIGlmICghZHJhZ2dhYmxlSWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJlRHJhZyA9IGFwaS50cnlHZXRMb2NrKGRyYWdnYWJsZUlkLCBzdG9wLCB7XG4gICAgICAgICAgc291cmNlRXZlbnQ6IGV2ZW50XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghcHJlRHJhZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBpc0NhcHR1cmluZyA9IHRydWU7XG4gICAgICAgIHZhciBhY3Rpb25zID0gcHJlRHJhZy5zbmFwTGlmdCgpO1xuICAgICAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgICAgIWlzQ2FwdHVyaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHN0b3AgY2FwdHVyaW5nIGEga2V5Ym9hcmQgZHJhZyB3aGVuIG5vdCBjYXB0dXJpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgaXNDYXB0dXJpbmcgPSBmYWxzZTtcbiAgICAgICAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCgpO1xuICAgICAgICAgIGxpc3RlbkZvckNhcHR1cmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50ID0gYmluZEV2ZW50cyh3aW5kb3csIGdldERyYWdnaW5nQmluZGluZ3MoYWN0aW9ucywgc3RvcCksIHtcbiAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFthcGldKTtcbiAgdmFyIGxpc3RlbkZvckNhcHR1cmUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB0cnlTdGFydENhcHR1cmUoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9O1xuICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50ID0gYmluZEV2ZW50cyh3aW5kb3csIFtzdGFydENhcHR1cmVCaW5kaW5nXSwgb3B0aW9ucyk7XG4gIH0sIFtzdGFydENhcHR1cmVCaW5kaW5nXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgbGlzdGVuRm9yQ2FwdHVyZSgpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bm1vdW50KCkge1xuICAgICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQoKTtcbiAgICB9O1xuICB9LCBbbGlzdGVuRm9yQ2FwdHVyZV0pO1xufVxuXG52YXIgaWRsZSQyID0ge1xuICB0eXBlOiAnSURMRSdcbn07XG52YXIgdGltZUZvckxvbmdQcmVzcyA9IDEyMDtcbnZhciBmb3JjZVByZXNzVGhyZXNob2xkID0gMC4xNTtcblxuZnVuY3Rpb24gZ2V0V2luZG93QmluZGluZ3MoX3JlZikge1xuICB2YXIgY2FuY2VsID0gX3JlZi5jYW5jZWwsXG4gICAgICBnZXRQaGFzZSA9IF9yZWYuZ2V0UGhhc2U7XG4gIHJldHVybiBbe1xuICAgIGV2ZW50TmFtZTogJ29yaWVudGF0aW9uY2hhbmdlJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdyZXNpemUnLFxuICAgIGZuOiBjYW5jZWxcbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ2NvbnRleHRtZW51JyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAna2V5ZG93bicsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBpZiAoZ2V0UGhhc2UoKS50eXBlICE9PSAnRFJBR0dJTkcnKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBlc2NhcGUpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY2FuY2VsKCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiBzdXBwb3J0ZWRFdmVudE5hbWUsXG4gICAgZm46IGNhbmNlbFxuICB9XTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFuZGxlQmluZGluZ3MoX3JlZjIpIHtcbiAgdmFyIGNhbmNlbCA9IF9yZWYyLmNhbmNlbCxcbiAgICAgIGNvbXBsZXRlZCA9IF9yZWYyLmNvbXBsZXRlZCxcbiAgICAgIGdldFBoYXNlID0gX3JlZjIuZ2V0UGhhc2U7XG4gIHJldHVybiBbe1xuICAgIGV2ZW50TmFtZTogJ3RvdWNobW92ZScsXG4gICAgb3B0aW9uczoge1xuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9LFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgdmFyIHBoYXNlID0gZ2V0UGhhc2UoKTtcblxuICAgICAgaWYgKHBoYXNlLnR5cGUgIT09ICdEUkFHR0lORycpIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGhhc2UuaGFzTW92ZWQgPSB0cnVlO1xuICAgICAgdmFyIF9ldmVudCR0b3VjaGVzJCA9IGV2ZW50LnRvdWNoZXNbMF0sXG4gICAgICAgICAgY2xpZW50WCA9IF9ldmVudCR0b3VjaGVzJC5jbGllbnRYLFxuICAgICAgICAgIGNsaWVudFkgPSBfZXZlbnQkdG91Y2hlcyQuY2xpZW50WTtcbiAgICAgIHZhciBwb2ludCA9IHtcbiAgICAgICAgeDogY2xpZW50WCxcbiAgICAgICAgeTogY2xpZW50WVxuICAgICAgfTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBwaGFzZS5hY3Rpb25zLm1vdmUocG9pbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ3RvdWNoZW5kJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIHZhciBwaGFzZSA9IGdldFBoYXNlKCk7XG5cbiAgICAgIGlmIChwaGFzZS50eXBlICE9PSAnRFJBR0dJTkcnKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBwaGFzZS5hY3Rpb25zLmRyb3Aoe1xuICAgICAgICBzaG91bGRCbG9ja05leHRDbGljazogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBjb21wbGV0ZWQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd0b3VjaGNhbmNlbCcsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBpZiAoZ2V0UGhhc2UoKS50eXBlICE9PSAnRFJBR0dJTkcnKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjYW5jZWwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd0b3VjaGZvcmNlY2hhbmdlJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIHZhciBwaGFzZSA9IGdldFBoYXNlKCk7XG4gICAgICAhKHBoYXNlLnR5cGUgIT09ICdJRExFJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF07XG5cbiAgICAgIGlmICghdG91Y2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNGb3JjZVByZXNzID0gdG91Y2guZm9yY2UgPj0gZm9yY2VQcmVzc1RocmVzaG9sZDtcblxuICAgICAgaWYgKCFpc0ZvcmNlUHJlc3MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvdWxkUmVzcGVjdCA9IHBoYXNlLmFjdGlvbnMuc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MoKTtcblxuICAgICAgaWYgKHBoYXNlLnR5cGUgPT09ICdQRU5ESU5HJykge1xuICAgICAgICBpZiAoc2hvdWxkUmVzcGVjdCkge1xuICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkUmVzcGVjdCkge1xuICAgICAgICBpZiAocGhhc2UuaGFzTW92ZWQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiBzdXBwb3J0ZWRFdmVudE5hbWUsXG4gICAgZm46IGNhbmNlbFxuICB9XTtcbn1cblxuZnVuY3Rpb24gdXNlVG91Y2hTZW5zb3IoYXBpKSB7XG4gIHZhciBwaGFzZVJlZiA9IHVzZVJlZihpZGxlJDIpO1xuICB2YXIgdW5iaW5kRXZlbnRzUmVmID0gdXNlUmVmKG5vb3ApO1xuICB2YXIgZ2V0UGhhc2UgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiBnZXRQaGFzZSgpIHtcbiAgICByZXR1cm4gcGhhc2VSZWYuY3VycmVudDtcbiAgfSwgW10pO1xuICB2YXIgc2V0UGhhc2UgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiBzZXRQaGFzZShwaGFzZSkge1xuICAgIHBoYXNlUmVmLmN1cnJlbnQgPSBwaGFzZTtcbiAgfSwgW10pO1xuICB2YXIgc3RhcnRDYXB0dXJlQmluZGluZyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBldmVudE5hbWU6ICd0b3VjaHN0YXJ0JyxcbiAgICAgIGZuOiBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJhZ2dhYmxlSWQgPSBhcGkuZmluZENsb3Nlc3REcmFnZ2FibGVJZChldmVudCk7XG5cbiAgICAgICAgaWYgKCFkcmFnZ2FibGVJZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb25zID0gYXBpLnRyeUdldExvY2soZHJhZ2dhYmxlSWQsIHN0b3AsIHtcbiAgICAgICAgICBzb3VyY2VFdmVudDogZXZlbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFhY3Rpb25zKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgdmFyIGNsaWVudFggPSB0b3VjaC5jbGllbnRYLFxuICAgICAgICAgICAgY2xpZW50WSA9IHRvdWNoLmNsaWVudFk7XG4gICAgICAgIHZhciBwb2ludCA9IHtcbiAgICAgICAgICB4OiBjbGllbnRYLFxuICAgICAgICAgIHk6IGNsaWVudFlcbiAgICAgICAgfTtcbiAgICAgICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQoKTtcbiAgICAgICAgc3RhcnRQZW5kaW5nRHJhZyhhY3Rpb25zLCBwb2ludCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2FwaV0pO1xuICB2YXIgbGlzdGVuRm9yQ2FwdHVyZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIGxpc3RlbkZvckNhcHR1cmUoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9O1xuICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50ID0gYmluZEV2ZW50cyh3aW5kb3csIFtzdGFydENhcHR1cmVCaW5kaW5nXSwgb3B0aW9ucyk7XG4gIH0sIFtzdGFydENhcHR1cmVCaW5kaW5nXSk7XG4gIHZhciBzdG9wID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJyZW50ID0gcGhhc2VSZWYuY3VycmVudDtcblxuICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICdJRExFJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICdQRU5ESU5HJykge1xuICAgICAgY2xlYXJUaW1lb3V0KGN1cnJlbnQubG9uZ1ByZXNzVGltZXJJZCk7XG4gICAgfVxuXG4gICAgc2V0UGhhc2UoaWRsZSQyKTtcbiAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCgpO1xuICAgIGxpc3RlbkZvckNhcHR1cmUoKTtcbiAgfSwgW2xpc3RlbkZvckNhcHR1cmUsIHNldFBoYXNlXSk7XG4gIHZhciBjYW5jZWwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBoYXNlID0gcGhhc2VSZWYuY3VycmVudDtcbiAgICBzdG9wKCk7XG5cbiAgICBpZiAocGhhc2UudHlwZSA9PT0gJ0RSQUdHSU5HJykge1xuICAgICAgcGhhc2UuYWN0aW9ucy5jYW5jZWwoe1xuICAgICAgICBzaG91bGRCbG9ja05leHRDbGljazogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHBoYXNlLnR5cGUgPT09ICdQRU5ESU5HJykge1xuICAgICAgcGhhc2UuYWN0aW9ucy5hYm9ydCgpO1xuICAgIH1cbiAgfSwgW3N0b3BdKTtcbiAgdmFyIGJpbmRDYXB0dXJpbmdFdmVudHMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiBiaW5kQ2FwdHVyaW5nRXZlbnRzKCkge1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfTtcbiAgICB2YXIgYXJncyA9IHtcbiAgICAgIGNhbmNlbDogY2FuY2VsLFxuICAgICAgY29tcGxldGVkOiBzdG9wLFxuICAgICAgZ2V0UGhhc2U6IGdldFBoYXNlXG4gICAgfTtcbiAgICB2YXIgdW5iaW5kVGFyZ2V0ID0gYmluZEV2ZW50cyh3aW5kb3csIGdldEhhbmRsZUJpbmRpbmdzKGFyZ3MpLCBvcHRpb25zKTtcbiAgICB2YXIgdW5iaW5kV2luZG93ID0gYmluZEV2ZW50cyh3aW5kb3csIGdldFdpbmRvd0JpbmRpbmdzKGFyZ3MpLCBvcHRpb25zKTtcblxuICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50ID0gZnVuY3Rpb24gdW5iaW5kQWxsKCkge1xuICAgICAgdW5iaW5kVGFyZ2V0KCk7XG4gICAgICB1bmJpbmRXaW5kb3coKTtcbiAgICB9O1xuICB9LCBbY2FuY2VsLCBnZXRQaGFzZSwgc3RvcF0pO1xuICB2YXIgc3RhcnREcmFnZ2luZyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHN0YXJ0RHJhZ2dpbmcoKSB7XG4gICAgdmFyIHBoYXNlID0gZ2V0UGhhc2UoKTtcbiAgICAhKHBoYXNlLnR5cGUgPT09ICdQRU5ESU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IHN0YXJ0IGRyYWdnaW5nIGZyb20gcGhhc2UgXCIgKyBwaGFzZS50eXBlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbnMgPSBwaGFzZS5hY3Rpb25zLmZsdWlkTGlmdChwaGFzZS5wb2ludCk7XG4gICAgc2V0UGhhc2Uoe1xuICAgICAgdHlwZTogJ0RSQUdHSU5HJyxcbiAgICAgIGFjdGlvbnM6IGFjdGlvbnMsXG4gICAgICBoYXNNb3ZlZDogZmFsc2VcbiAgICB9KTtcbiAgfSwgW2dldFBoYXNlLCBzZXRQaGFzZV0pO1xuICB2YXIgc3RhcnRQZW5kaW5nRHJhZyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHN0YXJ0UGVuZGluZ0RyYWcoYWN0aW9ucywgcG9pbnQpIHtcbiAgICAhKGdldFBoYXNlKCkudHlwZSA9PT0gJ0lETEUnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHRvIG1vdmUgZnJvbSBJRExFIHRvIFBFTkRJTkcgZHJhZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgbG9uZ1ByZXNzVGltZXJJZCA9IHNldFRpbWVvdXQoc3RhcnREcmFnZ2luZywgdGltZUZvckxvbmdQcmVzcyk7XG4gICAgc2V0UGhhc2Uoe1xuICAgICAgdHlwZTogJ1BFTkRJTkcnLFxuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgYWN0aW9uczogYWN0aW9ucyxcbiAgICAgIGxvbmdQcmVzc1RpbWVySWQ6IGxvbmdQcmVzc1RpbWVySWRcbiAgICB9KTtcbiAgICBiaW5kQ2FwdHVyaW5nRXZlbnRzKCk7XG4gIH0sIFtiaW5kQ2FwdHVyaW5nRXZlbnRzLCBnZXRQaGFzZSwgc2V0UGhhc2UsIHN0YXJ0RHJhZ2dpbmddKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBsaXN0ZW5Gb3JDYXB0dXJlKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCgpO1xuICAgICAgdmFyIHBoYXNlID0gZ2V0UGhhc2UoKTtcblxuICAgICAgaWYgKHBoYXNlLnR5cGUgPT09ICdQRU5ESU5HJykge1xuICAgICAgICBjbGVhclRpbWVvdXQocGhhc2UubG9uZ1ByZXNzVGltZXJJZCk7XG4gICAgICAgIHNldFBoYXNlKGlkbGUkMik7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2dldFBoYXNlLCBsaXN0ZW5Gb3JDYXB0dXJlLCBzZXRQaGFzZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uIHdlYmtpdEhhY2soKSB7XG4gICAgdmFyIHVuYmluZCA9IGJpbmRFdmVudHMod2luZG93LCBbe1xuICAgICAgZXZlbnROYW1lOiAndG91Y2htb3ZlJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBjYXB0dXJlOiBmYWxzZSxcbiAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIHVuYmluZDtcbiAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiB1c2VWYWxpZGF0ZVNlbnNvckhvb2tzKHNlbnNvckhvb2tzKSB7XG4gIHVzZURldihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByZXZpb3VzUmVmID0gdXNlUHJldmlvdXMoc2Vuc29ySG9va3MpO1xuICAgIHVzZURldlNldHVwV2FybmluZyhmdW5jdGlvbiAoKSB7XG4gICAgICAhKHByZXZpb3VzUmVmLmN1cnJlbnQubGVuZ3RoID09PSBzZW5zb3JIb29rcy5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGNoYW5nZSB0aGUgYW1vdW50IG9mIHNlbnNvciBob29rcyBhZnRlciBtb3VudGluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9KTtcbiAgfSk7XG59XG5cbnZhciBpbnRlcmFjdGl2ZVRhZ05hbWVzID0ge1xuICBpbnB1dDogdHJ1ZSxcbiAgYnV0dG9uOiB0cnVlLFxuICB0ZXh0YXJlYTogdHJ1ZSxcbiAgc2VsZWN0OiB0cnVlLFxuICBvcHRpb246IHRydWUsXG4gIG9wdGdyb3VwOiB0cnVlLFxuICB2aWRlbzogdHJ1ZSxcbiAgYXVkaW86IHRydWVcbn07XG5cbmZ1bmN0aW9uIGlzQW5JbnRlcmFjdGl2ZUVsZW1lbnQocGFyZW50LCBjdXJyZW50KSB7XG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgaGFzQW5JbnRlcmFjdGl2ZVRhZyA9IEJvb2xlYW4oaW50ZXJhY3RpdmVUYWdOYW1lc1tjdXJyZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKV0pO1xuXG4gIGlmIChoYXNBbkludGVyYWN0aXZlVGFnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgYXR0cmlidXRlID0gY3VycmVudC5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpO1xuXG4gIGlmIChhdHRyaWJ1dGUgPT09ICd0cnVlJyB8fCBhdHRyaWJ1dGUgPT09ICcnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoY3VycmVudCA9PT0gcGFyZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzQW5JbnRlcmFjdGl2ZUVsZW1lbnQocGFyZW50LCBjdXJyZW50LnBhcmVudEVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBpc0V2ZW50SW5JbnRlcmFjdGl2ZUVsZW1lbnQoZHJhZ2dhYmxlLCBldmVudCkge1xuICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gIGlmICghaXNIdG1sRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzQW5JbnRlcmFjdGl2ZUVsZW1lbnQoZHJhZ2dhYmxlLCB0YXJnZXQpO1xufVxuXG52YXIgZ2V0Qm9yZGVyQm94Q2VudGVyUG9zaXRpb24gPSAoZnVuY3Rpb24gKGVsKSB7XG4gIHJldHVybiBnZXRSZWN0KGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKS5jZW50ZXI7XG59KTtcblxuZnVuY3Rpb24gaXNFbGVtZW50KGVsKSB7XG4gIHJldHVybiBlbCBpbnN0YW5jZW9mIGdldFdpbmRvd0Zyb21FbChlbCkuRWxlbWVudDtcbn1cblxudmFyIHN1cHBvcnRlZE1hdGNoZXNOYW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYmFzZSA9ICdtYXRjaGVzJztcblxuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBiYXNlO1xuICB9XG5cbiAgdmFyIGNhbmRpZGF0ZXMgPSBbYmFzZSwgJ21zTWF0Y2hlc1NlbGVjdG9yJywgJ3dlYmtpdE1hdGNoZXNTZWxlY3RvciddO1xuICB2YXIgdmFsdWUgPSBmaW5kKGNhbmRpZGF0ZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUgaW4gRWxlbWVudC5wcm90b3R5cGU7XG4gIH0pO1xuICByZXR1cm4gdmFsdWUgfHwgYmFzZTtcbn0oKTtcblxuZnVuY3Rpb24gY2xvc2VzdFBvbnlmaWxsKGVsLCBzZWxlY3Rvcikge1xuICBpZiAoZWwgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGVsW3N1cHBvcnRlZE1hdGNoZXNOYW1lXShzZWxlY3RvcikpIHtcbiAgICByZXR1cm4gZWw7XG4gIH1cblxuICByZXR1cm4gY2xvc2VzdFBvbnlmaWxsKGVsLnBhcmVudEVsZW1lbnQsIHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gY2xvc2VzdCQxKGVsLCBzZWxlY3Rvcikge1xuICBpZiAoZWwuY2xvc2VzdCkge1xuICAgIHJldHVybiBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgfVxuXG4gIHJldHVybiBjbG9zZXN0UG9ueWZpbGwoZWwsIHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2VsZWN0b3IoY29udGV4dElkKSB7XG4gIHJldHVybiBcIltcIiArIGRyYWdIYW5kbGUuY29udGV4dElkICsgXCI9XFxcIlwiICsgY29udGV4dElkICsgXCJcXFwiXVwiO1xufVxuXG5mdW5jdGlvbiBmaW5kQ2xvc2VzdERyYWdIYW5kbGVGcm9tRXZlbnQoY29udGV4dElkLCBldmVudCkge1xuICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gIGlmICghaXNFbGVtZW50KHRhcmdldCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCdldmVudC50YXJnZXQgbXVzdCBiZSBhIEVsZW1lbnQnKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzZWxlY3RvciA9IGdldFNlbGVjdG9yKGNvbnRleHRJZCk7XG4gIHZhciBoYW5kbGUgPSBjbG9zZXN0JDEodGFyZ2V0LCBzZWxlY3Rvcik7XG5cbiAgaWYgKCFoYW5kbGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghaXNIdG1sRWxlbWVudChoYW5kbGUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZygnZHJhZyBoYW5kbGUgbXVzdCBiZSBhIEhUTUxFbGVtZW50JykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gaGFuZGxlO1xufVxuXG5mdW5jdGlvbiB0cnlHZXRDbG9zZXN0RHJhZ2dhYmxlSWRGcm9tRXZlbnQoY29udGV4dElkLCBldmVudCkge1xuICB2YXIgaGFuZGxlID0gZmluZENsb3Nlc3REcmFnSGFuZGxlRnJvbUV2ZW50KGNvbnRleHRJZCwgZXZlbnQpO1xuXG4gIGlmICghaGFuZGxlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gaGFuZGxlLmdldEF0dHJpYnV0ZShkcmFnSGFuZGxlLmRyYWdnYWJsZUlkKTtcbn1cblxuZnVuY3Rpb24gZmluZERyYWdnYWJsZShjb250ZXh0SWQsIGRyYWdnYWJsZUlkKSB7XG4gIHZhciBzZWxlY3RvciA9IFwiW1wiICsgZHJhZ2dhYmxlLmNvbnRleHRJZCArIFwiPVxcXCJcIiArIGNvbnRleHRJZCArIFwiXFxcIl1cIjtcbiAgdmFyIHBvc3NpYmxlID0gdG9BcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gIHZhciBkcmFnZ2FibGUkMSA9IGZpbmQocG9zc2libGUsIGZ1bmN0aW9uIChlbCkge1xuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoZHJhZ2dhYmxlLmlkKSA9PT0gZHJhZ2dhYmxlSWQ7XG4gIH0pO1xuXG4gIGlmICghZHJhZ2dhYmxlJDEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghaXNIdG1sRWxlbWVudChkcmFnZ2FibGUkMSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCdEcmFnZ2FibGUgZWxlbWVudCBpcyBub3QgYSBIVE1MRWxlbWVudCcpIDogdm9pZCAwO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRyYWdnYWJsZSQxO1xufVxuXG5mdW5jdGlvbiBwcmV2ZW50RGVmYXVsdChldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5mdW5jdGlvbiBfaXNBY3RpdmUoX3JlZikge1xuICB2YXIgZXhwZWN0ZWQgPSBfcmVmLmV4cGVjdGVkLFxuICAgICAgcGhhc2UgPSBfcmVmLnBoYXNlLFxuICAgICAgaXNMb2NrQWN0aXZlID0gX3JlZi5pc0xvY2tBY3RpdmUsXG4gICAgICBzaG91bGRXYXJuID0gX3JlZi5zaG91bGRXYXJuO1xuXG4gIGlmICghaXNMb2NrQWN0aXZlKCkpIHtcbiAgICBpZiAoc2hvdWxkV2Fybikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgICAgQ2Fubm90IHBlcmZvcm0gYWN0aW9uLlxcbiAgICAgICAgVGhlIHNlbnNvciBubyBsb25nZXIgaGFzIGFuIGFjdGlvbiBsb2NrLlxcblxcbiAgICAgICAgVGlwczpcXG5cXG4gICAgICAgIC0gVGhyb3cgYXdheSB5b3VyIGFjdGlvbiBoYW5kbGVycyB3aGVuIGZvcmNlU3RvcCgpIGlzIGNhbGxlZFxcbiAgICAgICAgLSBDaGVjayBhY3Rpb25zLmlzQWN0aXZlKCkgaWYgeW91IHJlYWxseSBuZWVkIHRvXFxuICAgICAgXCIpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChleHBlY3RlZCAhPT0gcGhhc2UpIHtcbiAgICBpZiAoc2hvdWxkV2Fybikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgICAgQ2Fubm90IHBlcmZvcm0gYWN0aW9uLlxcbiAgICAgICAgVGhlIGFjdGlvbnMgeW91IHVzZWQgYmVsb25nIHRvIGFuIG91dGRhdGVkIHBoYXNlXFxuXFxuICAgICAgICBDdXJyZW50IHBoYXNlOiBcIiArIGV4cGVjdGVkICsgXCJcXG4gICAgICAgIFlvdSBjYWxsZWQgYW4gYWN0aW9uIGZyb20gb3V0ZGF0ZWQgcGhhc2U6IFwiICsgcGhhc2UgKyBcIlxcblxcbiAgICAgICAgVGlwczpcXG5cXG4gICAgICAgIC0gRG8gbm90IHVzZSBwcmVEcmFnQWN0aW9ucyBhY3Rpb25zIGFmdGVyIGNhbGxpbmcgcHJlRHJhZ0FjdGlvbnMubGlmdCgpXFxuICAgICAgXCIpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjYW5TdGFydChfcmVmMikge1xuICB2YXIgbG9ja0FQSSA9IF9yZWYyLmxvY2tBUEksXG4gICAgICBzdG9yZSA9IF9yZWYyLnN0b3JlLFxuICAgICAgcmVnaXN0cnkgPSBfcmVmMi5yZWdpc3RyeSxcbiAgICAgIGRyYWdnYWJsZUlkID0gX3JlZjIuZHJhZ2dhYmxlSWQ7XG5cbiAgaWYgKGxvY2tBUEkuaXNDbGFpbWVkKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZW50cnkgPSByZWdpc3RyeS5kcmFnZ2FibGUuZmluZEJ5SWQoZHJhZ2dhYmxlSWQpO1xuXG4gIGlmICghZW50cnkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiVW5hYmxlIHRvIGZpbmQgZHJhZ2dhYmxlIHdpdGggaWQ6IFwiICsgZHJhZ2dhYmxlSWQpIDogdm9pZCAwO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghZW50cnkub3B0aW9ucy5pc0VuYWJsZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIWNhblN0YXJ0RHJhZyhzdG9yZS5nZXRTdGF0ZSgpLCBkcmFnZ2FibGVJZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdHJ5U3RhcnQoX3JlZjMpIHtcbiAgdmFyIGxvY2tBUEkgPSBfcmVmMy5sb2NrQVBJLFxuICAgICAgY29udGV4dElkID0gX3JlZjMuY29udGV4dElkLFxuICAgICAgc3RvcmUgPSBfcmVmMy5zdG9yZSxcbiAgICAgIHJlZ2lzdHJ5ID0gX3JlZjMucmVnaXN0cnksXG4gICAgICBkcmFnZ2FibGVJZCA9IF9yZWYzLmRyYWdnYWJsZUlkLFxuICAgICAgZm9yY2VTZW5zb3JTdG9wID0gX3JlZjMuZm9yY2VTZW5zb3JTdG9wLFxuICAgICAgc291cmNlRXZlbnQgPSBfcmVmMy5zb3VyY2VFdmVudDtcbiAgdmFyIHNob3VsZFN0YXJ0ID0gY2FuU3RhcnQoe1xuICAgIGxvY2tBUEk6IGxvY2tBUEksXG4gICAgc3RvcmU6IHN0b3JlLFxuICAgIHJlZ2lzdHJ5OiByZWdpc3RyeSxcbiAgICBkcmFnZ2FibGVJZDogZHJhZ2dhYmxlSWRcbiAgfSk7XG5cbiAgaWYgKCFzaG91bGRTdGFydCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGVudHJ5ID0gcmVnaXN0cnkuZHJhZ2dhYmxlLmdldEJ5SWQoZHJhZ2dhYmxlSWQpO1xuICB2YXIgZWwgPSBmaW5kRHJhZ2dhYmxlKGNvbnRleHRJZCwgZW50cnkuZGVzY3JpcHRvci5pZCk7XG5cbiAgaWYgKCFlbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJVbmFibGUgdG8gZmluZCBkcmFnZ2FibGUgZWxlbWVudCB3aXRoIGlkOiBcIiArIGRyYWdnYWJsZUlkKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChzb3VyY2VFdmVudCAmJiAhZW50cnkub3B0aW9ucy5jYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cyAmJiBpc0V2ZW50SW5JbnRlcmFjdGl2ZUVsZW1lbnQoZWwsIHNvdXJjZUV2ZW50KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGxvY2sgPSBsb2NrQVBJLmNsYWltKGZvcmNlU2Vuc29yU3RvcCB8fCBub29wKTtcbiAgdmFyIHBoYXNlID0gJ1BSRV9EUkFHJztcblxuICBmdW5jdGlvbiBnZXRTaG91bGRSZXNwZWN0Rm9yY2VQcmVzcygpIHtcbiAgICByZXR1cm4gZW50cnkub3B0aW9ucy5zaG91bGRSZXNwZWN0Rm9yY2VQcmVzcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTG9ja0FjdGl2ZSgpIHtcbiAgICByZXR1cm4gbG9ja0FQSS5pc0FjdGl2ZShsb2NrKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeURpc3BhdGNoKGV4cGVjdGVkLCBnZXRBY3Rpb24pIHtcbiAgICBpZiAoX2lzQWN0aXZlKHtcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIHBoYXNlOiBwaGFzZSxcbiAgICAgIGlzTG9ja0FjdGl2ZTogaXNMb2NrQWN0aXZlLFxuICAgICAgc2hvdWxkV2FybjogdHJ1ZVxuICAgIH0pKSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChnZXRBY3Rpb24oKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHRyeURpc3BhdGNoV2hlbkRyYWdnaW5nID0gdHJ5RGlzcGF0Y2guYmluZChudWxsLCAnRFJBR0dJTkcnKTtcblxuICBmdW5jdGlvbiBsaWZ0JDEoYXJncykge1xuICAgIGZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcbiAgICAgIGxvY2tBUEkucmVsZWFzZSgpO1xuICAgICAgcGhhc2UgPSAnQ09NUExFVEVEJztcbiAgICB9XG5cbiAgICBpZiAocGhhc2UgIT09ICdQUkVfRFJBRycpIHtcbiAgICAgIGNvbXBsZXRlZCgpO1xuICAgICAgIShwaGFzZSA9PT0gJ1BSRV9EUkFHJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGxpZnQgaW4gcGhhc2UgXCIgKyBwaGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHN0b3JlLmRpc3BhdGNoKGxpZnQoYXJncy5saWZ0QWN0aW9uQXJncykpO1xuICAgIHBoYXNlID0gJ0RSQUdHSU5HJztcblxuICAgIGZ1bmN0aW9uIGZpbmlzaChyZWFzb24sIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzaG91bGRCbG9ja05leHRDbGljazogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgYXJncy5jbGVhbnVwKCk7XG5cbiAgICAgIGlmIChvcHRpb25zLnNob3VsZEJsb2NrTmV4dENsaWNrKSB7XG4gICAgICAgIHZhciB1bmJpbmQgPSBiaW5kRXZlbnRzKHdpbmRvdywgW3tcbiAgICAgICAgICBldmVudE5hbWU6ICdjbGljaycsXG4gICAgICAgICAgZm46IHByZXZlbnREZWZhdWx0LFxuICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIG9uY2U6IHRydWUsXG4gICAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGNhcHR1cmU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1dKTtcbiAgICAgICAgc2V0VGltZW91dCh1bmJpbmQpO1xuICAgICAgfVxuXG4gICAgICBjb21wbGV0ZWQoKTtcbiAgICAgIHN0b3JlLmRpc3BhdGNoKGRyb3Aoe1xuICAgICAgICByZWFzb246IHJlYXNvblxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBpc0FjdGl2ZTogZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiBfaXNBY3RpdmUoe1xuICAgICAgICAgIGV4cGVjdGVkOiAnRFJBR0dJTkcnLFxuICAgICAgICAgIHBoYXNlOiBwaGFzZSxcbiAgICAgICAgICBpc0xvY2tBY3RpdmU6IGlzTG9ja0FjdGl2ZSxcbiAgICAgICAgICBzaG91bGRXYXJuOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzczogZ2V0U2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MsXG4gICAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGZpbmlzaCgnRFJPUCcsIG9wdGlvbnMpO1xuICAgICAgfSxcbiAgICAgIGNhbmNlbDogZnVuY3Rpb24gY2FuY2VsKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGZpbmlzaCgnQ0FOQ0VMJywgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSwgYXJncy5hY3Rpb25zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdWlkTGlmdChjbGllbnRTZWxlY3Rpb24pIHtcbiAgICB2YXIgbW92ZSQxID0gcmFmU2NoZChmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICB0cnlEaXNwYXRjaFdoZW5EcmFnZ2luZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBtb3ZlKHtcbiAgICAgICAgICBjbGllbnQ6IGNsaWVudFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBhcGkgPSBsaWZ0JDEoe1xuICAgICAgbGlmdEFjdGlvbkFyZ3M6IHtcbiAgICAgICAgaWQ6IGRyYWdnYWJsZUlkLFxuICAgICAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICAgICAgbW92ZW1lbnRNb2RlOiAnRkxVSUQnXG4gICAgICB9LFxuICAgICAgY2xlYW51cDogZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgcmV0dXJuIG1vdmUkMS5jYW5jZWwoKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb25zOiB7XG4gICAgICAgIG1vdmU6IG1vdmUkMVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXBpLCB7XG4gICAgICBtb3ZlOiBtb3ZlJDFcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNuYXBMaWZ0KCkge1xuICAgIHZhciBhY3Rpb25zID0ge1xuICAgICAgbW92ZVVwOiBmdW5jdGlvbiBtb3ZlVXAkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRyeURpc3BhdGNoV2hlbkRyYWdnaW5nKG1vdmVVcCk7XG4gICAgICB9LFxuICAgICAgbW92ZVJpZ2h0OiBmdW5jdGlvbiBtb3ZlUmlnaHQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRyeURpc3BhdGNoV2hlbkRyYWdnaW5nKG1vdmVSaWdodCk7XG4gICAgICB9LFxuICAgICAgbW92ZURvd246IGZ1bmN0aW9uIG1vdmVEb3duJDEoKSB7XG4gICAgICAgIHJldHVybiB0cnlEaXNwYXRjaFdoZW5EcmFnZ2luZyhtb3ZlRG93bik7XG4gICAgICB9LFxuICAgICAgbW92ZUxlZnQ6IGZ1bmN0aW9uIG1vdmVMZWZ0JDEoKSB7XG4gICAgICAgIHJldHVybiB0cnlEaXNwYXRjaFdoZW5EcmFnZ2luZyhtb3ZlTGVmdCk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gbGlmdCQxKHtcbiAgICAgIGxpZnRBY3Rpb25BcmdzOiB7XG4gICAgICAgIGlkOiBkcmFnZ2FibGVJZCxcbiAgICAgICAgY2xpZW50U2VsZWN0aW9uOiBnZXRCb3JkZXJCb3hDZW50ZXJQb3NpdGlvbihlbCksXG4gICAgICAgIG1vdmVtZW50TW9kZTogJ1NOQVAnXG4gICAgICB9LFxuICAgICAgY2xlYW51cDogbm9vcCxcbiAgICAgIGFjdGlvbnM6IGFjdGlvbnNcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFib3J0UHJlRHJhZygpIHtcbiAgICB2YXIgc2hvdWxkUmVsZWFzZSA9IF9pc0FjdGl2ZSh7XG4gICAgICBleHBlY3RlZDogJ1BSRV9EUkFHJyxcbiAgICAgIHBoYXNlOiBwaGFzZSxcbiAgICAgIGlzTG9ja0FjdGl2ZTogaXNMb2NrQWN0aXZlLFxuICAgICAgc2hvdWxkV2FybjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgaWYgKHNob3VsZFJlbGVhc2UpIHtcbiAgICAgIGxvY2tBUEkucmVsZWFzZSgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcmVEcmFnID0ge1xuICAgIGlzQWN0aXZlOiBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICAgIHJldHVybiBfaXNBY3RpdmUoe1xuICAgICAgICBleHBlY3RlZDogJ1BSRV9EUkFHJyxcbiAgICAgICAgcGhhc2U6IHBoYXNlLFxuICAgICAgICBpc0xvY2tBY3RpdmU6IGlzTG9ja0FjdGl2ZSxcbiAgICAgICAgc2hvdWxkV2FybjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3M6IGdldFNob3VsZFJlc3BlY3RGb3JjZVByZXNzLFxuICAgIGZsdWlkTGlmdDogZmx1aWRMaWZ0LFxuICAgIHNuYXBMaWZ0OiBzbmFwTGlmdCxcbiAgICBhYm9ydDogYWJvcnRQcmVEcmFnXG4gIH07XG4gIHJldHVybiBwcmVEcmFnO1xufVxuXG52YXIgZGVmYXVsdFNlbnNvcnMgPSBbdXNlTW91c2VTZW5zb3IsIHVzZUtleWJvYXJkU2Vuc29yLCB1c2VUb3VjaFNlbnNvcl07XG5mdW5jdGlvbiB1c2VTZW5zb3JNYXJzaGFsKF9yZWY0KSB7XG4gIHZhciBjb250ZXh0SWQgPSBfcmVmNC5jb250ZXh0SWQsXG4gICAgICBzdG9yZSA9IF9yZWY0LnN0b3JlLFxuICAgICAgcmVnaXN0cnkgPSBfcmVmNC5yZWdpc3RyeSxcbiAgICAgIGN1c3RvbVNlbnNvcnMgPSBfcmVmNC5jdXN0b21TZW5zb3JzLFxuICAgICAgZW5hYmxlRGVmYXVsdFNlbnNvcnMgPSBfcmVmNC5lbmFibGVEZWZhdWx0U2Vuc29ycztcbiAgdmFyIHVzZVNlbnNvcnMgPSBbXS5jb25jYXQoZW5hYmxlRGVmYXVsdFNlbnNvcnMgPyBkZWZhdWx0U2Vuc29ycyA6IFtdLCBjdXN0b21TZW5zb3JzIHx8IFtdKTtcbiAgdmFyIGxvY2tBUEkgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZSgpO1xuICB9KVswXTtcbiAgdmFyIHRyeUFiYW5kb25Mb2NrID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdHJ5QWJhbmRvbkxvY2socHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICBpZiAocHJldmlvdXMuaXNEcmFnZ2luZyAmJiAhY3VycmVudC5pc0RyYWdnaW5nKSB7XG4gICAgICBsb2NrQVBJLnRyeUFiYW5kb24oKTtcbiAgICB9XG4gIH0sIFtsb2NrQVBJXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gbGlzdGVuVG9TdG9yZSgpIHtcbiAgICB2YXIgcHJldmlvdXMgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHZhciB1bnN1YnNjcmliZSA9IHN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICB0cnlBYmFuZG9uTG9jayhwcmV2aW91cywgY3VycmVudCk7XG4gICAgICBwcmV2aW91cyA9IGN1cnJlbnQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICB9LCBbbG9ja0FQSSwgc3RvcmUsIHRyeUFiYW5kb25Mb2NrXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsb2NrQVBJLnRyeUFiYW5kb247XG4gIH0sIFtsb2NrQVBJLnRyeUFiYW5kb25dKTtcbiAgdmFyIGNhbkdldExvY2sgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZHJhZ2dhYmxlSWQpIHtcbiAgICByZXR1cm4gY2FuU3RhcnQoe1xuICAgICAgbG9ja0FQSTogbG9ja0FQSSxcbiAgICAgIHJlZ2lzdHJ5OiByZWdpc3RyeSxcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIGRyYWdnYWJsZUlkOiBkcmFnZ2FibGVJZFxuICAgIH0pO1xuICB9LCBbbG9ja0FQSSwgcmVnaXN0cnksIHN0b3JlXSk7XG4gIHZhciB0cnlHZXRMb2NrID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGRyYWdnYWJsZUlkLCBmb3JjZVN0b3AsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdHJ5U3RhcnQoe1xuICAgICAgbG9ja0FQSTogbG9ja0FQSSxcbiAgICAgIHJlZ2lzdHJ5OiByZWdpc3RyeSxcbiAgICAgIGNvbnRleHRJZDogY29udGV4dElkLFxuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgZHJhZ2dhYmxlSWQ6IGRyYWdnYWJsZUlkLFxuICAgICAgZm9yY2VTZW5zb3JTdG9wOiBmb3JjZVN0b3AsXG4gICAgICBzb3VyY2VFdmVudDogb3B0aW9ucyAmJiBvcHRpb25zLnNvdXJjZUV2ZW50ID8gb3B0aW9ucy5zb3VyY2VFdmVudCA6IG51bGxcbiAgICB9KTtcbiAgfSwgW2NvbnRleHRJZCwgbG9ja0FQSSwgcmVnaXN0cnksIHN0b3JlXSk7XG4gIHZhciBmaW5kQ2xvc2VzdERyYWdnYWJsZUlkID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIHRyeUdldENsb3Nlc3REcmFnZ2FibGVJZEZyb21FdmVudChjb250ZXh0SWQsIGV2ZW50KTtcbiAgfSwgW2NvbnRleHRJZF0pO1xuICB2YXIgZmluZE9wdGlvbnNGb3JEcmFnZ2FibGUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgZW50cnkgPSByZWdpc3RyeS5kcmFnZ2FibGUuZmluZEJ5SWQoaWQpO1xuICAgIHJldHVybiBlbnRyeSA/IGVudHJ5Lm9wdGlvbnMgOiBudWxsO1xuICB9LCBbcmVnaXN0cnkuZHJhZ2dhYmxlXSk7XG4gIHZhciB0cnlSZWxlYXNlTG9jayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHRyeVJlbGVhc2VMb2NrKCkge1xuICAgIGlmICghbG9ja0FQSS5pc0NsYWltZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxvY2tBUEkudHJ5QWJhbmRvbigpO1xuXG4gICAgaWYgKHN0b3JlLmdldFN0YXRlKCkucGhhc2UgIT09ICdJRExFJykge1xuICAgICAgc3RvcmUuZGlzcGF0Y2goZmx1c2goKSk7XG4gICAgfVxuICB9LCBbbG9ja0FQSSwgc3RvcmVdKTtcbiAgdmFyIGlzTG9ja0NsYWltZWQgPSB1c2VDYWxsYmFjayhsb2NrQVBJLmlzQ2xhaW1lZCwgW2xvY2tBUEldKTtcbiAgdmFyIGFwaSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjYW5HZXRMb2NrOiBjYW5HZXRMb2NrLFxuICAgICAgdHJ5R2V0TG9jazogdHJ5R2V0TG9jayxcbiAgICAgIGZpbmRDbG9zZXN0RHJhZ2dhYmxlSWQ6IGZpbmRDbG9zZXN0RHJhZ2dhYmxlSWQsXG4gICAgICBmaW5kT3B0aW9uc0ZvckRyYWdnYWJsZTogZmluZE9wdGlvbnNGb3JEcmFnZ2FibGUsXG4gICAgICB0cnlSZWxlYXNlTG9jazogdHJ5UmVsZWFzZUxvY2ssXG4gICAgICBpc0xvY2tDbGFpbWVkOiBpc0xvY2tDbGFpbWVkXG4gICAgfTtcbiAgfSwgW2NhbkdldExvY2ssIHRyeUdldExvY2ssIGZpbmRDbG9zZXN0RHJhZ2dhYmxlSWQsIGZpbmRPcHRpb25zRm9yRHJhZ2dhYmxlLCB0cnlSZWxlYXNlTG9jaywgaXNMb2NrQ2xhaW1lZF0pO1xuICB1c2VWYWxpZGF0ZVNlbnNvckhvb2tzKHVzZVNlbnNvcnMpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdXNlU2Vuc29ycy5sZW5ndGg7IGkrKykge1xuICAgIHVzZVNlbnNvcnNbaV0oYXBpKTtcbiAgfVxufVxuXG52YXIgY3JlYXRlUmVzcG9uZGVycyA9IGZ1bmN0aW9uIGNyZWF0ZVJlc3BvbmRlcnMocHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICBvbkJlZm9yZUNhcHR1cmU6IHByb3BzLm9uQmVmb3JlQ2FwdHVyZSxcbiAgICBvbkJlZm9yZURyYWdTdGFydDogcHJvcHMub25CZWZvcmVEcmFnU3RhcnQsXG4gICAgb25EcmFnU3RhcnQ6IHByb3BzLm9uRHJhZ1N0YXJ0LFxuICAgIG9uRHJhZ0VuZDogcHJvcHMub25EcmFnRW5kLFxuICAgIG9uRHJhZ1VwZGF0ZTogcHJvcHMub25EcmFnVXBkYXRlXG4gIH07XG59O1xuXG5mdW5jdGlvbiBnZXRTdG9yZShsYXp5UmVmKSB7XG4gICFsYXp5UmVmLmN1cnJlbnQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDb3VsZCBub3QgZmluZCBzdG9yZSBmcm9tIGxhenkgcmVmJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gbGF6eVJlZi5jdXJyZW50O1xufVxuXG5mdW5jdGlvbiBBcHAocHJvcHMpIHtcbiAgdmFyIGNvbnRleHRJZCA9IHByb3BzLmNvbnRleHRJZCxcbiAgICAgIHNldENhbGxiYWNrcyA9IHByb3BzLnNldENhbGxiYWNrcyxcbiAgICAgIHNlbnNvcnMgPSBwcm9wcy5zZW5zb3JzLFxuICAgICAgbm9uY2UgPSBwcm9wcy5ub25jZSxcbiAgICAgIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9ucyA9IHByb3BzLmRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9ucztcbiAgdmFyIGxhenlTdG9yZVJlZiA9IHVzZVJlZihudWxsKTtcbiAgdXNlU3RhcnR1cFZhbGlkYXRpb24oKTtcbiAgdmFyIGxhc3RQcm9wc1JlZiA9IHVzZVByZXZpb3VzKHByb3BzKTtcbiAgdmFyIGdldFJlc3BvbmRlcnMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlc3BvbmRlcnMobGFzdFByb3BzUmVmLmN1cnJlbnQpO1xuICB9LCBbbGFzdFByb3BzUmVmXSk7XG4gIHZhciBhbm5vdW5jZSA9IHVzZUFubm91bmNlcihjb250ZXh0SWQpO1xuICB2YXIgZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zSWQgPSB1c2VIaWRkZW5UZXh0RWxlbWVudCh7XG4gICAgY29udGV4dElkOiBjb250ZXh0SWQsXG4gICAgdGV4dDogZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zXG4gIH0pO1xuICB2YXIgc3R5bGVNYXJzaGFsID0gdXNlU3R5bGVNYXJzaGFsKGNvbnRleHRJZCwgbm9uY2UpO1xuICB2YXIgbGF6eURpc3BhdGNoID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIGdldFN0b3JlKGxhenlTdG9yZVJlZikuZGlzcGF0Y2goYWN0aW9uKTtcbiAgfSwgW10pO1xuICB2YXIgbWFyc2hhbENhbGxiYWNrcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMoe1xuICAgICAgcHVibGlzaFdoaWxlRHJhZ2dpbmc6IHB1Ymxpc2hXaGlsZURyYWdnaW5nLFxuICAgICAgdXBkYXRlRHJvcHBhYmxlU2Nyb2xsOiB1cGRhdGVEcm9wcGFibGVTY3JvbGwsXG4gICAgICB1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQ6IHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZCxcbiAgICAgIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQ6IHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQsXG4gICAgICBjb2xsZWN0aW9uU3RhcnRpbmc6IGNvbGxlY3Rpb25TdGFydGluZ1xuICAgIH0sIGxhenlEaXNwYXRjaCk7XG4gIH0sIFtsYXp5RGlzcGF0Y2hdKTtcbiAgdmFyIHJlZ2lzdHJ5ID0gdXNlUmVnaXN0cnkoKTtcbiAgdmFyIGRpbWVuc2lvbk1hcnNoYWwgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlRGltZW5zaW9uTWFyc2hhbChyZWdpc3RyeSwgbWFyc2hhbENhbGxiYWNrcyk7XG4gIH0sIFtyZWdpc3RyeSwgbWFyc2hhbENhbGxiYWNrc10pO1xuICB2YXIgYXV0b1Njcm9sbGVyID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUF1dG9TY3JvbGxlcihfZXh0ZW5kcyh7XG4gICAgICBzY3JvbGxXaW5kb3c6IHNjcm9sbFdpbmRvdyxcbiAgICAgIHNjcm9sbERyb3BwYWJsZTogZGltZW5zaW9uTWFyc2hhbC5zY3JvbGxEcm9wcGFibGVcbiAgICB9LCBiaW5kQWN0aW9uQ3JlYXRvcnMoe1xuICAgICAgbW92ZTogbW92ZVxuICAgIH0sIGxhenlEaXNwYXRjaCkpKTtcbiAgfSwgW2RpbWVuc2lvbk1hcnNoYWwuc2Nyb2xsRHJvcHBhYmxlLCBsYXp5RGlzcGF0Y2hdKTtcbiAgdmFyIGZvY3VzTWFyc2hhbCA9IHVzZUZvY3VzTWFyc2hhbChjb250ZXh0SWQpO1xuICB2YXIgc3RvcmUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlU3RvcmUoe1xuICAgICAgYW5ub3VuY2U6IGFubm91bmNlLFxuICAgICAgYXV0b1Njcm9sbGVyOiBhdXRvU2Nyb2xsZXIsXG4gICAgICBkaW1lbnNpb25NYXJzaGFsOiBkaW1lbnNpb25NYXJzaGFsLFxuICAgICAgZm9jdXNNYXJzaGFsOiBmb2N1c01hcnNoYWwsXG4gICAgICBnZXRSZXNwb25kZXJzOiBnZXRSZXNwb25kZXJzLFxuICAgICAgc3R5bGVNYXJzaGFsOiBzdHlsZU1hcnNoYWxcbiAgICB9KTtcbiAgfSwgW2Fubm91bmNlLCBhdXRvU2Nyb2xsZXIsIGRpbWVuc2lvbk1hcnNoYWwsIGZvY3VzTWFyc2hhbCwgZ2V0UmVzcG9uZGVycywgc3R5bGVNYXJzaGFsXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAobGF6eVN0b3JlUmVmLmN1cnJlbnQgJiYgbGF6eVN0b3JlUmVmLmN1cnJlbnQgIT09IHN0b3JlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCd1bmV4cGVjdGVkIHN0b3JlIGNoYW5nZScpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIGxhenlTdG9yZVJlZi5jdXJyZW50ID0gc3RvcmU7XG4gIHZhciB0cnlSZXNldFN0b3JlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJyZW50ID0gZ2V0U3RvcmUobGF6eVN0b3JlUmVmKTtcbiAgICB2YXIgc3RhdGUgPSBjdXJyZW50LmdldFN0YXRlKCk7XG5cbiAgICBpZiAoc3RhdGUucGhhc2UgIT09ICdJRExFJykge1xuICAgICAgY3VycmVudC5kaXNwYXRjaChmbHVzaCgpKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgdmFyIGlzRHJhZ2dpbmcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gZ2V0U3RvcmUobGF6eVN0b3JlUmVmKS5nZXRTdGF0ZSgpO1xuICAgIHJldHVybiBzdGF0ZS5pc0RyYWdnaW5nIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnO1xuICB9LCBbXSk7XG4gIHZhciBhcHBDYWxsYmFja3MgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNEcmFnZ2luZzogaXNEcmFnZ2luZyxcbiAgICAgIHRyeUFib3J0OiB0cnlSZXNldFN0b3JlXG4gICAgfTtcbiAgfSwgW2lzRHJhZ2dpbmcsIHRyeVJlc2V0U3RvcmVdKTtcbiAgc2V0Q2FsbGJhY2tzKGFwcENhbGxiYWNrcyk7XG4gIHZhciBnZXRDYW5MaWZ0ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIGNhblN0YXJ0RHJhZyhnZXRTdG9yZShsYXp5U3RvcmVSZWYpLmdldFN0YXRlKCksIGlkKTtcbiAgfSwgW10pO1xuICB2YXIgZ2V0SXNNb3ZlbWVudEFsbG93ZWQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzTW92ZW1lbnRBbGxvd2VkKGdldFN0b3JlKGxhenlTdG9yZVJlZikuZ2V0U3RhdGUoKSk7XG4gIH0sIFtdKTtcbiAgdmFyIGFwcENvbnRleHQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFyc2hhbDogZGltZW5zaW9uTWFyc2hhbCxcbiAgICAgIGZvY3VzOiBmb2N1c01hcnNoYWwsXG4gICAgICBjb250ZXh0SWQ6IGNvbnRleHRJZCxcbiAgICAgIGNhbkxpZnQ6IGdldENhbkxpZnQsXG4gICAgICBpc01vdmVtZW50QWxsb3dlZDogZ2V0SXNNb3ZlbWVudEFsbG93ZWQsXG4gICAgICBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNJZDogZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zSWQsXG4gICAgICByZWdpc3RyeTogcmVnaXN0cnlcbiAgICB9O1xuICB9LCBbY29udGV4dElkLCBkaW1lbnNpb25NYXJzaGFsLCBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNJZCwgZm9jdXNNYXJzaGFsLCBnZXRDYW5MaWZ0LCBnZXRJc01vdmVtZW50QWxsb3dlZCwgcmVnaXN0cnldKTtcbiAgdXNlU2Vuc29yTWFyc2hhbCh7XG4gICAgY29udGV4dElkOiBjb250ZXh0SWQsXG4gICAgc3RvcmU6IHN0b3JlLFxuICAgIHJlZ2lzdHJ5OiByZWdpc3RyeSxcbiAgICBjdXN0b21TZW5zb3JzOiBzZW5zb3JzLFxuICAgIGVuYWJsZURlZmF1bHRTZW5zb3JzOiBwcm9wcy5lbmFibGVEZWZhdWx0U2Vuc29ycyAhPT0gZmFsc2VcbiAgfSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRyeVJlc2V0U3RvcmU7XG4gIH0sIFt0cnlSZXNldFN0b3JlXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEFwcENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogYXBwQ29udGV4dFxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFByb3ZpZGVyLCB7XG4gICAgY29udGV4dDogU3RvcmVDb250ZXh0LFxuICAgIHN0b3JlOiBzdG9yZVxuICB9LCBwcm9wcy5jaGlsZHJlbikpO1xufVxuXG52YXIgY291bnQkMSA9IDA7XG5mdW5jdGlvbiByZXNldCQxKCkge1xuICBjb3VudCQxID0gMDtcbn1cbmZ1bmN0aW9uIHVzZUluc3RhbmNlQ291bnQoKSB7XG4gIHJldHVybiB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJcIiArIGNvdW50JDErKztcbiAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiByZXNldFNlcnZlckNvbnRleHQoKSB7XG4gIHJlc2V0JDEoKTtcbiAgcmVzZXQoKTtcbn1cbmZ1bmN0aW9uIERyYWdEcm9wQ29udGV4dChwcm9wcykge1xuICB2YXIgY29udGV4dElkID0gdXNlSW5zdGFuY2VDb3VudCgpO1xuICB2YXIgZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zID0gcHJvcHMuZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zIHx8IHByZXNldC5kcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnM7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVycm9yQm91bmRhcnksIG51bGwsIGZ1bmN0aW9uIChzZXRDYWxsYmFja3MpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBcHAsIHtcbiAgICAgIG5vbmNlOiBwcm9wcy5ub25jZSxcbiAgICAgIGNvbnRleHRJZDogY29udGV4dElkLFxuICAgICAgc2V0Q2FsbGJhY2tzOiBzZXRDYWxsYmFja3MsXG4gICAgICBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnM6IGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9ucyxcbiAgICAgIGVuYWJsZURlZmF1bHRTZW5zb3JzOiBwcm9wcy5lbmFibGVEZWZhdWx0U2Vuc29ycyxcbiAgICAgIHNlbnNvcnM6IHByb3BzLnNlbnNvcnMsXG4gICAgICBvbkJlZm9yZUNhcHR1cmU6IHByb3BzLm9uQmVmb3JlQ2FwdHVyZSxcbiAgICAgIG9uQmVmb3JlRHJhZ1N0YXJ0OiBwcm9wcy5vbkJlZm9yZURyYWdTdGFydCxcbiAgICAgIG9uRHJhZ1N0YXJ0OiBwcm9wcy5vbkRyYWdTdGFydCxcbiAgICAgIG9uRHJhZ1VwZGF0ZTogcHJvcHMub25EcmFnVXBkYXRlLFxuICAgICAgb25EcmFnRW5kOiBwcm9wcy5vbkRyYWdFbmRcbiAgICB9LCBwcm9wcy5jaGlsZHJlbik7XG4gIH0pO1xufVxuXG52YXIgaXNFcXVhbCQxID0gZnVuY3Rpb24gaXNFcXVhbChiYXNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYmFzZSA9PT0gdmFsdWU7XG4gIH07XG59O1xuXG52YXIgaXNTY3JvbGwgPSBpc0VxdWFsJDEoJ3Njcm9sbCcpO1xudmFyIGlzQXV0byA9IGlzRXF1YWwkMSgnYXV0bycpO1xudmFyIGlzVmlzaWJsZSQxID0gaXNFcXVhbCQxKCd2aXNpYmxlJyk7XG5cbnZhciBpc0VpdGhlciA9IGZ1bmN0aW9uIGlzRWl0aGVyKG92ZXJmbG93LCBmbikge1xuICByZXR1cm4gZm4ob3ZlcmZsb3cub3ZlcmZsb3dYKSB8fCBmbihvdmVyZmxvdy5vdmVyZmxvd1kpO1xufTtcblxudmFyIGlzQm90aCA9IGZ1bmN0aW9uIGlzQm90aChvdmVyZmxvdywgZm4pIHtcbiAgcmV0dXJuIGZuKG92ZXJmbG93Lm92ZXJmbG93WCkgJiYgZm4ob3ZlcmZsb3cub3ZlcmZsb3dZKTtcbn07XG5cbnZhciBpc0VsZW1lbnRTY3JvbGxhYmxlID0gZnVuY3Rpb24gaXNFbGVtZW50U2Nyb2xsYWJsZShlbCkge1xuICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIHZhciBvdmVyZmxvdyA9IHtcbiAgICBvdmVyZmxvd1g6IHN0eWxlLm92ZXJmbG93WCxcbiAgICBvdmVyZmxvd1k6IHN0eWxlLm92ZXJmbG93WVxuICB9O1xuICByZXR1cm4gaXNFaXRoZXIob3ZlcmZsb3csIGlzU2Nyb2xsKSB8fCBpc0VpdGhlcihvdmVyZmxvdywgaXNBdXRvKTtcbn07XG5cbnZhciBpc0JvZHlTY3JvbGxhYmxlID0gZnVuY3Rpb24gaXNCb2R5U2Nyb2xsYWJsZSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYm9keSA9IGdldEJvZHlFbGVtZW50KCk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAhaHRtbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIGlmICghaXNFbGVtZW50U2Nyb2xsYWJsZShib2R5KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBodG1sU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcbiAgdmFyIGh0bWxPdmVyZmxvdyA9IHtcbiAgICBvdmVyZmxvd1g6IGh0bWxTdHlsZS5vdmVyZmxvd1gsXG4gICAgb3ZlcmZsb3dZOiBodG1sU3R5bGUub3ZlcmZsb3dZXG4gIH07XG5cbiAgaWYgKGlzQm90aChodG1sT3ZlcmZsb3csIGlzVmlzaWJsZSQxKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgV2UgaGF2ZSBkZXRlY3RlZCB0aGF0IHlvdXIgPGJvZHk+IGVsZW1lbnQgbWlnaHQgYmUgYSBzY3JvbGwgY29udGFpbmVyLlxcbiAgICBXZSBoYXZlIGZvdW5kIG5vIHJlbGlhYmxlIHdheSBvZiBkZXRlY3Rpbmcgd2hldGhlciB0aGUgPGJvZHk+IGVsZW1lbnQgaXMgYSBzY3JvbGwgY29udGFpbmVyLlxcbiAgICBVbmRlciBtb3N0IGNpcmN1bXN0YW5jZXMgYSA8Ym9keT4gc2Nyb2xsIGJhciB3aWxsIGJlIG9uIHRoZSA8aHRtbD4gZWxlbWVudCAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KVxcblxcbiAgICBCZWNhdXNlIHdlIGNhbm5vdCBkZXRlcm1pbmUgaWYgdGhlIDxib2R5PiBpcyBhIHNjcm9sbCBjb250YWluZXIsIGFuZCBnZW5lcmFsbHkgaXQgaXMgbm90IG9uZSxcXG4gICAgd2Ugd2lsbCBiZSB0cmVhdGluZyB0aGUgPGJvZHk+IGFzICpub3QqIGEgc2Nyb2xsIGNvbnRhaW5lclxcblxcbiAgICBNb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vYXRsYXNzaWFuL3JlYWN0LWJlYXV0aWZ1bC1kbmQvYmxvYi9tYXN0ZXIvZG9jcy9ndWlkZXMvaG93LXdlLWRldGVjdC1zY3JvbGwtY29udGFpbmVycy5tZFxcbiAgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgZ2V0Q2xvc2VzdFNjcm9sbGFibGUgPSBmdW5jdGlvbiBnZXRDbG9zZXN0U2Nyb2xsYWJsZShlbCkge1xuICBpZiAoZWwgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGVsID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIGlzQm9keVNjcm9sbGFibGUoKSA/IGVsIDogbnVsbDtcbiAgfVxuXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIWlzRWxlbWVudFNjcm9sbGFibGUoZWwpKSB7XG4gICAgcmV0dXJuIGdldENsb3Nlc3RTY3JvbGxhYmxlKGVsLnBhcmVudEVsZW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGVsO1xufTtcblxudmFyIGNoZWNrRm9yTmVzdGVkU2Nyb2xsQ29udGFpbmVycyA9IChmdW5jdGlvbiAoc2Nyb2xsYWJsZSkge1xuICBpZiAoIXNjcm9sbGFibGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYW5vdGhlclNjcm9sbFBhcmVudCA9IGdldENsb3Nlc3RTY3JvbGxhYmxlKHNjcm9sbGFibGUucGFyZW50RWxlbWVudCk7XG5cbiAgaWYgKCFhbm90aGVyU2Nyb2xsUGFyZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICBEcm9wcGFibGU6IHVuc3VwcG9ydGVkIG5lc3RlZCBzY3JvbGwgY29udGFpbmVyIGRldGVjdGVkLlxcbiAgICBBIERyb3BwYWJsZSBjYW4gb25seSBoYXZlIG9uZSBzY3JvbGwgcGFyZW50ICh3aGljaCBjYW4gYmUgaXRzZWxmKVxcbiAgICBOZXN0ZWQgc2Nyb2xsIGNvbnRhaW5lcnMgYXJlIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkLlxcblxcbiAgICBXZSBob3BlIHRvIHN1cHBvcnQgbmVzdGVkIHNjcm9sbCBjb250YWluZXJzIHNvb246IGh0dHBzOi8vZ2l0aHViLmNvbS9hdGxhc3NpYW4vcmVhY3QtYmVhdXRpZnVsLWRuZC9pc3N1ZXMvMTMxXFxuICBcIikgOiB2b2lkIDA7XG59KTtcblxudmFyIGdldFNjcm9sbCQxID0gKGZ1bmN0aW9uIChlbCkge1xuICByZXR1cm4ge1xuICAgIHg6IGVsLnNjcm9sbExlZnQsXG4gICAgeTogZWwuc2Nyb2xsVG9wXG4gIH07XG59KTtcblxudmFyIGdldElzRml4ZWQgPSBmdW5jdGlvbiBnZXRJc0ZpeGVkKGVsKSB7XG4gIGlmICghZWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG5cbiAgaWYgKHN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZ2V0SXNGaXhlZChlbC5wYXJlbnRFbGVtZW50KTtcbn07XG5cbnZhciBnZXRFbnYgPSAoZnVuY3Rpb24gKHN0YXJ0KSB7XG4gIHZhciBjbG9zZXN0U2Nyb2xsYWJsZSA9IGdldENsb3Nlc3RTY3JvbGxhYmxlKHN0YXJ0KTtcbiAgdmFyIGlzRml4ZWRPblBhZ2UgPSBnZXRJc0ZpeGVkKHN0YXJ0KTtcbiAgcmV0dXJuIHtcbiAgICBjbG9zZXN0U2Nyb2xsYWJsZTogY2xvc2VzdFNjcm9sbGFibGUsXG4gICAgaXNGaXhlZE9uUGFnZTogaXNGaXhlZE9uUGFnZVxuICB9O1xufSk7XG5cbnZhciBnZXREcm9wcGFibGVEaW1lbnNpb24gPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBfcmVmLmRlc2NyaXB0b3IsXG4gICAgICBpc0VuYWJsZWQgPSBfcmVmLmlzRW5hYmxlZCxcbiAgICAgIGlzQ29tYmluZUVuYWJsZWQgPSBfcmVmLmlzQ29tYmluZUVuYWJsZWQsXG4gICAgICBpc0ZpeGVkT25QYWdlID0gX3JlZi5pc0ZpeGVkT25QYWdlLFxuICAgICAgZGlyZWN0aW9uID0gX3JlZi5kaXJlY3Rpb24sXG4gICAgICBjbGllbnQgPSBfcmVmLmNsaWVudCxcbiAgICAgIHBhZ2UgPSBfcmVmLnBhZ2UsXG4gICAgICBjbG9zZXN0ID0gX3JlZi5jbG9zZXN0O1xuXG4gIHZhciBmcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNsb3Nlc3QpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzY3JvbGxTaXplID0gY2xvc2VzdC5zY3JvbGxTaXplLFxuICAgICAgICBmcmFtZUNsaWVudCA9IGNsb3Nlc3QuY2xpZW50O1xuICAgIHZhciBtYXhTY3JvbGwgPSBnZXRNYXhTY3JvbGwoe1xuICAgICAgc2Nyb2xsSGVpZ2h0OiBzY3JvbGxTaXplLnNjcm9sbEhlaWdodCxcbiAgICAgIHNjcm9sbFdpZHRoOiBzY3JvbGxTaXplLnNjcm9sbFdpZHRoLFxuICAgICAgaGVpZ2h0OiBmcmFtZUNsaWVudC5wYWRkaW5nQm94LmhlaWdodCxcbiAgICAgIHdpZHRoOiBmcmFtZUNsaWVudC5wYWRkaW5nQm94LndpZHRoXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhZ2VNYXJnaW5Cb3g6IGNsb3Nlc3QucGFnZS5tYXJnaW5Cb3gsXG4gICAgICBmcmFtZUNsaWVudDogZnJhbWVDbGllbnQsXG4gICAgICBzY3JvbGxTaXplOiBzY3JvbGxTaXplLFxuICAgICAgc2hvdWxkQ2xpcFN1YmplY3Q6IGNsb3Nlc3Quc2hvdWxkQ2xpcFN1YmplY3QsXG4gICAgICBzY3JvbGw6IHtcbiAgICAgICAgaW5pdGlhbDogY2xvc2VzdC5zY3JvbGwsXG4gICAgICAgIGN1cnJlbnQ6IGNsb3Nlc3Quc2Nyb2xsLFxuICAgICAgICBtYXg6IG1heFNjcm9sbCxcbiAgICAgICAgZGlmZjoge1xuICAgICAgICAgIHZhbHVlOiBvcmlnaW4sXG4gICAgICAgICAgZGlzcGxhY2VtZW50OiBvcmlnaW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgYXhpcyA9IGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/IHZlcnRpY2FsIDogaG9yaXpvbnRhbDtcbiAgdmFyIHN1YmplY3QgPSBnZXRTdWJqZWN0KHtcbiAgICBwYWdlOiBwYWdlLFxuICAgIHdpdGhQbGFjZWhvbGRlcjogbnVsbCxcbiAgICBheGlzOiBheGlzLFxuICAgIGZyYW1lOiBmcmFtZVxuICB9KTtcbiAgdmFyIGRpbWVuc2lvbiA9IHtcbiAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgIGlzQ29tYmluZUVuYWJsZWQ6IGlzQ29tYmluZUVuYWJsZWQsXG4gICAgaXNGaXhlZE9uUGFnZTogaXNGaXhlZE9uUGFnZSxcbiAgICBheGlzOiBheGlzLFxuICAgIGlzRW5hYmxlZDogaXNFbmFibGVkLFxuICAgIGNsaWVudDogY2xpZW50LFxuICAgIHBhZ2U6IHBhZ2UsXG4gICAgZnJhbWU6IGZyYW1lLFxuICAgIHN1YmplY3Q6IHN1YmplY3RcbiAgfTtcbiAgcmV0dXJuIGRpbWVuc2lvbjtcbn0pO1xuXG52YXIgZ2V0Q2xpZW50ID0gZnVuY3Rpb24gZ2V0Q2xpZW50KHRhcmdldFJlZiwgY2xvc2VzdFNjcm9sbGFibGUpIHtcbiAgdmFyIGJhc2UgPSBnZXRCb3godGFyZ2V0UmVmKTtcblxuICBpZiAoIWNsb3Nlc3RTY3JvbGxhYmxlKSB7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICBpZiAodGFyZ2V0UmVmICE9PSBjbG9zZXN0U2Nyb2xsYWJsZSkge1xuICAgIHJldHVybiBiYXNlO1xuICB9XG5cbiAgdmFyIHRvcCA9IGJhc2UucGFkZGluZ0JveC50b3AgLSBjbG9zZXN0U2Nyb2xsYWJsZS5zY3JvbGxUb3A7XG4gIHZhciBsZWZ0ID0gYmFzZS5wYWRkaW5nQm94LmxlZnQgLSBjbG9zZXN0U2Nyb2xsYWJsZS5zY3JvbGxMZWZ0O1xuICB2YXIgYm90dG9tID0gdG9wICsgY2xvc2VzdFNjcm9sbGFibGUuc2Nyb2xsSGVpZ2h0O1xuICB2YXIgcmlnaHQgPSBsZWZ0ICsgY2xvc2VzdFNjcm9sbGFibGUuc2Nyb2xsV2lkdGg7XG4gIHZhciBwYWRkaW5nQm94ID0ge1xuICAgIHRvcDogdG9wLFxuICAgIHJpZ2h0OiByaWdodCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICBsZWZ0OiBsZWZ0XG4gIH07XG4gIHZhciBib3JkZXJCb3ggPSBleHBhbmQocGFkZGluZ0JveCwgYmFzZS5ib3JkZXIpO1xuICB2YXIgY2xpZW50ID0gY3JlYXRlQm94KHtcbiAgICBib3JkZXJCb3g6IGJvcmRlckJveCxcbiAgICBtYXJnaW46IGJhc2UubWFyZ2luLFxuICAgIGJvcmRlcjogYmFzZS5ib3JkZXIsXG4gICAgcGFkZGluZzogYmFzZS5wYWRkaW5nXG4gIH0pO1xuICByZXR1cm4gY2xpZW50O1xufTtcblxudmFyIGdldERpbWVuc2lvbiA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgcmVmID0gX3JlZi5yZWYsXG4gICAgICBkZXNjcmlwdG9yID0gX3JlZi5kZXNjcmlwdG9yLFxuICAgICAgZW52ID0gX3JlZi5lbnYsXG4gICAgICB3aW5kb3dTY3JvbGwgPSBfcmVmLndpbmRvd1Njcm9sbCxcbiAgICAgIGRpcmVjdGlvbiA9IF9yZWYuZGlyZWN0aW9uLFxuICAgICAgaXNEcm9wRGlzYWJsZWQgPSBfcmVmLmlzRHJvcERpc2FibGVkLFxuICAgICAgaXNDb21iaW5lRW5hYmxlZCA9IF9yZWYuaXNDb21iaW5lRW5hYmxlZCxcbiAgICAgIHNob3VsZENsaXBTdWJqZWN0ID0gX3JlZi5zaG91bGRDbGlwU3ViamVjdDtcbiAgdmFyIGNsb3Nlc3RTY3JvbGxhYmxlID0gZW52LmNsb3Nlc3RTY3JvbGxhYmxlO1xuICB2YXIgY2xpZW50ID0gZ2V0Q2xpZW50KHJlZiwgY2xvc2VzdFNjcm9sbGFibGUpO1xuICB2YXIgcGFnZSA9IHdpdGhTY3JvbGwoY2xpZW50LCB3aW5kb3dTY3JvbGwpO1xuXG4gIHZhciBjbG9zZXN0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2xvc2VzdFNjcm9sbGFibGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBmcmFtZUNsaWVudCA9IGdldEJveChjbG9zZXN0U2Nyb2xsYWJsZSk7XG4gICAgdmFyIHNjcm9sbFNpemUgPSB7XG4gICAgICBzY3JvbGxIZWlnaHQ6IGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbEhlaWdodCxcbiAgICAgIHNjcm9sbFdpZHRoOiBjbG9zZXN0U2Nyb2xsYWJsZS5zY3JvbGxXaWR0aFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsaWVudDogZnJhbWVDbGllbnQsXG4gICAgICBwYWdlOiB3aXRoU2Nyb2xsKGZyYW1lQ2xpZW50LCB3aW5kb3dTY3JvbGwpLFxuICAgICAgc2Nyb2xsOiBnZXRTY3JvbGwkMShjbG9zZXN0U2Nyb2xsYWJsZSksXG4gICAgICBzY3JvbGxTaXplOiBzY3JvbGxTaXplLFxuICAgICAgc2hvdWxkQ2xpcFN1YmplY3Q6IHNob3VsZENsaXBTdWJqZWN0XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBkaW1lbnNpb24gPSBnZXREcm9wcGFibGVEaW1lbnNpb24oe1xuICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgaXNFbmFibGVkOiAhaXNEcm9wRGlzYWJsZWQsXG4gICAgaXNDb21iaW5lRW5hYmxlZDogaXNDb21iaW5lRW5hYmxlZCxcbiAgICBpc0ZpeGVkT25QYWdlOiBlbnYuaXNGaXhlZE9uUGFnZSxcbiAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICBjbGllbnQ6IGNsaWVudCxcbiAgICBwYWdlOiBwYWdlLFxuICAgIGNsb3Nlc3Q6IGNsb3Nlc3RcbiAgfSk7XG4gIHJldHVybiBkaW1lbnNpb247XG59KTtcblxudmFyIGltbWVkaWF0ZSA9IHtcbiAgcGFzc2l2ZTogZmFsc2Vcbn07XG52YXIgZGVsYXllZCA9IHtcbiAgcGFzc2l2ZTogdHJ1ZVxufTtcbnZhciBnZXRMaXN0ZW5lck9wdGlvbnMgPSAoZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2hvdWxkUHVibGlzaEltbWVkaWF0ZWx5ID8gaW1tZWRpYXRlIDogZGVsYXllZDtcbn0pO1xuXG5mdW5jdGlvbiB1c2VSZXF1aXJlZENvbnRleHQoQ29udGV4dCkge1xuICB2YXIgcmVzdWx0ID0gdXNlQ29udGV4dChDb250ZXh0KTtcbiAgIXJlc3VsdCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NvdWxkIG5vdCBmaW5kIHJlcXVpcmVkIGNvbnRleHQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBnZXRDbG9zZXN0U2Nyb2xsYWJsZUZyb21EcmFnID0gZnVuY3Rpb24gZ2V0Q2xvc2VzdFNjcm9sbGFibGVGcm9tRHJhZyhkcmFnZ2luZykge1xuICByZXR1cm4gZHJhZ2dpbmcgJiYgZHJhZ2dpbmcuZW52LmNsb3Nlc3RTY3JvbGxhYmxlIHx8IG51bGw7XG59O1xuXG5mdW5jdGlvbiB1c2VEcm9wcGFibGVQdWJsaXNoZXIoYXJncykge1xuICB2YXIgd2hpbGVEcmFnZ2luZ1JlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIGFwcENvbnRleHQgPSB1c2VSZXF1aXJlZENvbnRleHQoQXBwQ29udGV4dCk7XG4gIHZhciB1bmlxdWVJZCA9IHVzZVVuaXF1ZUlkKCdkcm9wcGFibGUnKTtcbiAgdmFyIHJlZ2lzdHJ5ID0gYXBwQ29udGV4dC5yZWdpc3RyeSxcbiAgICAgIG1hcnNoYWwgPSBhcHBDb250ZXh0Lm1hcnNoYWw7XG4gIHZhciBwcmV2aW91c1JlZiA9IHVzZVByZXZpb3VzKGFyZ3MpO1xuICB2YXIgZGVzY3JpcHRvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogYXJncy5kcm9wcGFibGVJZCxcbiAgICAgIHR5cGU6IGFyZ3MudHlwZSxcbiAgICAgIG1vZGU6IGFyZ3MubW9kZVxuICAgIH07XG4gIH0sIFthcmdzLmRyb3BwYWJsZUlkLCBhcmdzLm1vZGUsIGFyZ3MudHlwZV0pO1xuICB2YXIgcHVibGlzaGVkRGVzY3JpcHRvclJlZiA9IHVzZVJlZihkZXNjcmlwdG9yKTtcbiAgdmFyIG1lbW9pemVkVXBkYXRlU2Nyb2xsID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1lbW9pemVPbmUoZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICF3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSB1cGRhdGUgc2Nyb2xsIHdoZW4gZHJhZ2dpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgc2Nyb2xsID0ge1xuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5XG4gICAgICB9O1xuICAgICAgbWFyc2hhbC51cGRhdGVEcm9wcGFibGVTY3JvbGwoZGVzY3JpcHRvci5pZCwgc2Nyb2xsKTtcbiAgICB9KTtcbiAgfSwgW2Rlc2NyaXB0b3IuaWQsIG1hcnNoYWxdKTtcbiAgdmFyIGdldENsb3Nlc3RTY3JvbGwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRyYWdnaW5nID0gd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50O1xuXG4gICAgaWYgKCFkcmFnZ2luZyB8fCAhZHJhZ2dpbmcuZW52LmNsb3Nlc3RTY3JvbGxhYmxlKSB7XG4gICAgICByZXR1cm4gb3JpZ2luO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRTY3JvbGwkMShkcmFnZ2luZy5lbnYuY2xvc2VzdFNjcm9sbGFibGUpO1xuICB9LCBbXSk7XG4gIHZhciB1cGRhdGVTY3JvbGwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbCA9IGdldENsb3Nlc3RTY3JvbGwoKTtcbiAgICBtZW1vaXplZFVwZGF0ZVNjcm9sbChzY3JvbGwueCwgc2Nyb2xsLnkpO1xuICB9LCBbZ2V0Q2xvc2VzdFNjcm9sbCwgbWVtb2l6ZWRVcGRhdGVTY3JvbGxdKTtcbiAgdmFyIHNjaGVkdWxlU2Nyb2xsVXBkYXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJhZlNjaGQodXBkYXRlU2Nyb2xsKTtcbiAgfSwgW3VwZGF0ZVNjcm9sbF0pO1xuICB2YXIgb25DbG9zZXN0U2Nyb2xsID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBkcmFnZ2luZyA9IHdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudDtcbiAgICB2YXIgY2xvc2VzdCA9IGdldENsb3Nlc3RTY3JvbGxhYmxlRnJvbURyYWcoZHJhZ2dpbmcpO1xuICAgICEoZHJhZ2dpbmcgJiYgY2xvc2VzdCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDb3VsZCBub3QgZmluZCBzY3JvbGwgb3B0aW9ucyB3aGlsZSBzY3JvbGxpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIG9wdGlvbnMgPSBkcmFnZ2luZy5zY3JvbGxPcHRpb25zO1xuXG4gICAgaWYgKG9wdGlvbnMuc2hvdWxkUHVibGlzaEltbWVkaWF0ZWx5KSB7XG4gICAgICB1cGRhdGVTY3JvbGwoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZVNjcm9sbFVwZGF0ZSgpO1xuICB9LCBbc2NoZWR1bGVTY3JvbGxVcGRhdGUsIHVwZGF0ZVNjcm9sbF0pO1xuICB2YXIgZ2V0RGltZW5zaW9uQW5kV2F0Y2hTY3JvbGwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAod2luZG93U2Nyb2xsLCBvcHRpb25zKSB7XG4gICAgISF3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY29sbGVjdCBhIGRyb3BwYWJsZSB3aGlsZSBhIGRyYWcgaXMgb2NjdXJyaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBwcmV2aW91cyA9IHByZXZpb3VzUmVmLmN1cnJlbnQ7XG4gICAgdmFyIHJlZiA9IHByZXZpb3VzLmdldERyb3BwYWJsZVJlZigpO1xuICAgICFyZWYgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY29sbGVjdCB3aXRob3V0IGEgZHJvcHBhYmxlIHJlZicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgZW52ID0gZ2V0RW52KHJlZik7XG4gICAgdmFyIGRyYWdnaW5nID0ge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgICAgZW52OiBlbnYsXG4gICAgICBzY3JvbGxPcHRpb25zOiBvcHRpb25zXG4gICAgfTtcbiAgICB3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQgPSBkcmFnZ2luZztcbiAgICB2YXIgZGltZW5zaW9uID0gZ2V0RGltZW5zaW9uKHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgIGVudjogZW52LFxuICAgICAgd2luZG93U2Nyb2xsOiB3aW5kb3dTY3JvbGwsXG4gICAgICBkaXJlY3Rpb246IHByZXZpb3VzLmRpcmVjdGlvbixcbiAgICAgIGlzRHJvcERpc2FibGVkOiBwcmV2aW91cy5pc0Ryb3BEaXNhYmxlZCxcbiAgICAgIGlzQ29tYmluZUVuYWJsZWQ6IHByZXZpb3VzLmlzQ29tYmluZUVuYWJsZWQsXG4gICAgICBzaG91bGRDbGlwU3ViamVjdDogIXByZXZpb3VzLmlnbm9yZUNvbnRhaW5lckNsaXBwaW5nXG4gICAgfSk7XG4gICAgdmFyIHNjcm9sbGFibGUgPSBlbnYuY2xvc2VzdFNjcm9sbGFibGU7XG5cbiAgICBpZiAoc2Nyb2xsYWJsZSkge1xuICAgICAgc2Nyb2xsYWJsZS5zZXRBdHRyaWJ1dGUoc2Nyb2xsQ29udGFpbmVyLmNvbnRleHRJZCwgYXBwQ29udGV4dC5jb250ZXh0SWQpO1xuICAgICAgc2Nyb2xsYWJsZS5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvbkNsb3Nlc3RTY3JvbGwsIGdldExpc3RlbmVyT3B0aW9ucyhkcmFnZ2luZy5zY3JvbGxPcHRpb25zKSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRm9yTmVzdGVkU2Nyb2xsQ29udGFpbmVycyhzY3JvbGxhYmxlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGltZW5zaW9uO1xuICB9LCBbYXBwQ29udGV4dC5jb250ZXh0SWQsIGRlc2NyaXB0b3IsIG9uQ2xvc2VzdFNjcm9sbCwgcHJldmlvdXNSZWZdKTtcbiAgdmFyIGdldFNjcm9sbFdoaWxlRHJhZ2dpbmcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRyYWdnaW5nID0gd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50O1xuICAgIHZhciBjbG9zZXN0ID0gZ2V0Q2xvc2VzdFNjcm9sbGFibGVGcm9tRHJhZyhkcmFnZ2luZyk7XG4gICAgIShkcmFnZ2luZyAmJiBjbG9zZXN0KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NhbiBvbmx5IHJlY29sbGVjdCBEcm9wcGFibGUgY2xpZW50IGZvciBEcm9wcGFibGVzIHRoYXQgaGF2ZSBhIHNjcm9sbCBjb250YWluZXInKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGdldFNjcm9sbCQxKGNsb3Nlc3QpO1xuICB9LCBbXSk7XG4gIHZhciBkcmFnU3RvcHBlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZHJhZ2dpbmcgPSB3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQ7XG4gICAgIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHN0b3AgZHJhZyB3aGVuIG5vIGFjdGl2ZSBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjbG9zZXN0ID0gZ2V0Q2xvc2VzdFNjcm9sbGFibGVGcm9tRHJhZyhkcmFnZ2luZyk7XG4gICAgd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50ID0gbnVsbDtcblxuICAgIGlmICghY2xvc2VzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNjaGVkdWxlU2Nyb2xsVXBkYXRlLmNhbmNlbCgpO1xuICAgIGNsb3Nlc3QucmVtb3ZlQXR0cmlidXRlKHNjcm9sbENvbnRhaW5lci5jb250ZXh0SWQpO1xuICAgIGNsb3Nlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25DbG9zZXN0U2Nyb2xsLCBnZXRMaXN0ZW5lck9wdGlvbnMoZHJhZ2dpbmcuc2Nyb2xsT3B0aW9ucykpO1xuICB9LCBbb25DbG9zZXN0U2Nyb2xsLCBzY2hlZHVsZVNjcm9sbFVwZGF0ZV0pO1xuICB2YXIgc2Nyb2xsID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgIHZhciBkcmFnZ2luZyA9IHdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudDtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc2Nyb2xsIHdoZW4gdGhlcmUgaXMgbm8gZHJhZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY2xvc2VzdCA9IGdldENsb3Nlc3RTY3JvbGxhYmxlRnJvbURyYWcoZHJhZ2dpbmcpO1xuICAgICFjbG9zZXN0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHNjcm9sbCBhIGRyb3BwYWJsZSB3aXRoIG5vIGNsb3Nlc3Qgc2Nyb2xsYWJsZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBjbG9zZXN0LnNjcm9sbFRvcCArPSBjaGFuZ2UueTtcbiAgICBjbG9zZXN0LnNjcm9sbExlZnQgKz0gY2hhbmdlLng7XG4gIH0sIFtdKTtcbiAgdmFyIGNhbGxiYWNrcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXREaW1lbnNpb25BbmRXYXRjaFNjcm9sbDogZ2V0RGltZW5zaW9uQW5kV2F0Y2hTY3JvbGwsXG4gICAgICBnZXRTY3JvbGxXaGlsZURyYWdnaW5nOiBnZXRTY3JvbGxXaGlsZURyYWdnaW5nLFxuICAgICAgZHJhZ1N0b3BwZWQ6IGRyYWdTdG9wcGVkLFxuICAgICAgc2Nyb2xsOiBzY3JvbGxcbiAgICB9O1xuICB9LCBbZHJhZ1N0b3BwZWQsIGdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsLCBnZXRTY3JvbGxXaGlsZURyYWdnaW5nLCBzY3JvbGxdKTtcbiAgdmFyIGVudHJ5ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVuaXF1ZUlkOiB1bmlxdWVJZCxcbiAgICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgICBjYWxsYmFja3M6IGNhbGxiYWNrc1xuICAgIH07XG4gIH0sIFtjYWxsYmFja3MsIGRlc2NyaXB0b3IsIHVuaXF1ZUlkXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHB1Ymxpc2hlZERlc2NyaXB0b3JSZWYuY3VycmVudCA9IGVudHJ5LmRlc2NyaXB0b3I7XG4gICAgcmVnaXN0cnkuZHJvcHBhYmxlLnJlZ2lzdGVyKGVudHJ5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCdVbnN1cHBvcnRlZDogY2hhbmdpbmcgdGhlIGRyb3BwYWJsZUlkIG9yIHR5cGUgb2YgYSBEcm9wcGFibGUgZHVyaW5nIGEgZHJhZycpIDogdm9pZCAwO1xuICAgICAgICBkcmFnU3RvcHBlZCgpO1xuICAgICAgfVxuXG4gICAgICByZWdpc3RyeS5kcm9wcGFibGUudW5yZWdpc3RlcihlbnRyeSk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrcywgZGVzY3JpcHRvciwgZHJhZ1N0b3BwZWQsIGVudHJ5LCBtYXJzaGFsLCByZWdpc3RyeS5kcm9wcGFibGVdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtYXJzaGFsLnVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZChwdWJsaXNoZWREZXNjcmlwdG9yUmVmLmN1cnJlbnQuaWQsICFhcmdzLmlzRHJvcERpc2FibGVkKTtcbiAgfSwgW2FyZ3MuaXNEcm9wRGlzYWJsZWQsIG1hcnNoYWxdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtYXJzaGFsLnVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQocHVibGlzaGVkRGVzY3JpcHRvclJlZi5jdXJyZW50LmlkLCBhcmdzLmlzQ29tYmluZUVuYWJsZWQpO1xuICB9LCBbYXJncy5pc0NvbWJpbmVFbmFibGVkLCBtYXJzaGFsXSk7XG59XG5cbmZ1bmN0aW9uIG5vb3AkMigpIHt9XG5cbnZhciBlbXB0eSA9IHtcbiAgd2lkdGg6IDAsXG4gIGhlaWdodDogMCxcbiAgbWFyZ2luOiBub1NwYWNpbmdcbn07XG5cbnZhciBnZXRTaXplID0gZnVuY3Rpb24gZ2V0U2l6ZShfcmVmKSB7XG4gIHZhciBpc0FuaW1hdGluZ09wZW5Pbk1vdW50ID0gX3JlZi5pc0FuaW1hdGluZ09wZW5Pbk1vdW50LFxuICAgICAgcGxhY2Vob2xkZXIgPSBfcmVmLnBsYWNlaG9sZGVyLFxuICAgICAgYW5pbWF0ZSA9IF9yZWYuYW5pbWF0ZTtcblxuICBpZiAoaXNBbmltYXRpbmdPcGVuT25Nb3VudCkge1xuICAgIHJldHVybiBlbXB0eTtcbiAgfVxuXG4gIGlmIChhbmltYXRlID09PSAnY2xvc2UnKSB7XG4gICAgcmV0dXJuIGVtcHR5O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IHBsYWNlaG9sZGVyLmNsaWVudC5ib3JkZXJCb3guaGVpZ2h0LFxuICAgIHdpZHRoOiBwbGFjZWhvbGRlci5jbGllbnQuYm9yZGVyQm94LndpZHRoLFxuICAgIG1hcmdpbjogcGxhY2Vob2xkZXIuY2xpZW50Lm1hcmdpblxuICB9O1xufTtcblxudmFyIGdldFN0eWxlID0gZnVuY3Rpb24gZ2V0U3R5bGUoX3JlZjIpIHtcbiAgdmFyIGlzQW5pbWF0aW5nT3Blbk9uTW91bnQgPSBfcmVmMi5pc0FuaW1hdGluZ09wZW5Pbk1vdW50LFxuICAgICAgcGxhY2Vob2xkZXIgPSBfcmVmMi5wbGFjZWhvbGRlcixcbiAgICAgIGFuaW1hdGUgPSBfcmVmMi5hbmltYXRlO1xuICB2YXIgc2l6ZSA9IGdldFNpemUoe1xuICAgIGlzQW5pbWF0aW5nT3Blbk9uTW91bnQ6IGlzQW5pbWF0aW5nT3Blbk9uTW91bnQsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIGFuaW1hdGU6IGFuaW1hdGVcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogcGxhY2Vob2xkZXIuZGlzcGxheSxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICB3aWR0aDogc2l6ZS53aWR0aCxcbiAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0LFxuICAgIG1hcmdpblRvcDogc2l6ZS5tYXJnaW4udG9wLFxuICAgIG1hcmdpblJpZ2h0OiBzaXplLm1hcmdpbi5yaWdodCxcbiAgICBtYXJnaW5Cb3R0b206IHNpemUubWFyZ2luLmJvdHRvbSxcbiAgICBtYXJnaW5MZWZ0OiBzaXplLm1hcmdpbi5sZWZ0LFxuICAgIGZsZXhTaHJpbms6ICcwJyxcbiAgICBmbGV4R3JvdzogJzAnLFxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICB0cmFuc2l0aW9uOiBhbmltYXRlICE9PSAnbm9uZScgPyB0cmFuc2l0aW9ucy5wbGFjZWhvbGRlciA6IG51bGxcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIFBsYWNlaG9sZGVyKHByb3BzKSB7XG4gIHZhciBhbmltYXRlT3BlblRpbWVyUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgdHJ5Q2xlYXJBbmltYXRlT3BlblRpbWVyID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmICghYW5pbWF0ZU9wZW5UaW1lclJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGFuaW1hdGVPcGVuVGltZXJSZWYuY3VycmVudCk7XG4gICAgYW5pbWF0ZU9wZW5UaW1lclJlZi5jdXJyZW50ID0gbnVsbDtcbiAgfSwgW10pO1xuICB2YXIgYW5pbWF0ZSA9IHByb3BzLmFuaW1hdGUsXG4gICAgICBvblRyYW5zaXRpb25FbmQgPSBwcm9wcy5vblRyYW5zaXRpb25FbmQsXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIGNvbnRleHRJZCA9IHByb3BzLmNvbnRleHRJZDtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUocHJvcHMuYW5pbWF0ZSA9PT0gJ29wZW4nKSxcbiAgICAgIGlzQW5pbWF0aW5nT3Blbk9uTW91bnQgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBzZXRJc0FuaW1hdGluZ09wZW5Pbk1vdW50ID0gX3VzZVN0YXRlWzFdO1xuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpc0FuaW1hdGluZ09wZW5Pbk1vdW50KSB7XG4gICAgICByZXR1cm4gbm9vcCQyO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlICE9PSAnb3BlbicpIHtcbiAgICAgIHRyeUNsZWFyQW5pbWF0ZU9wZW5UaW1lcigpO1xuICAgICAgc2V0SXNBbmltYXRpbmdPcGVuT25Nb3VudChmYWxzZSk7XG4gICAgICByZXR1cm4gbm9vcCQyO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlT3BlblRpbWVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybiBub29wJDI7XG4gICAgfVxuXG4gICAgYW5pbWF0ZU9wZW5UaW1lclJlZi5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhbmltYXRlT3BlblRpbWVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgc2V0SXNBbmltYXRpbmdPcGVuT25Nb3VudChmYWxzZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRyeUNsZWFyQW5pbWF0ZU9wZW5UaW1lcjtcbiAgfSwgW2FuaW1hdGUsIGlzQW5pbWF0aW5nT3Blbk9uTW91bnQsIHRyeUNsZWFyQW5pbWF0ZU9wZW5UaW1lcl0pO1xuICB2YXIgb25TaXplQ2hhbmdlRW5kID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnByb3BlcnR5TmFtZSAhPT0gJ2hlaWdodCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvblRyYW5zaXRpb25FbmQoKTtcblxuICAgIGlmIChhbmltYXRlID09PSAnY2xvc2UnKSB7XG4gICAgICBvbkNsb3NlKCk7XG4gICAgfVxuICB9LCBbYW5pbWF0ZSwgb25DbG9zZSwgb25UcmFuc2l0aW9uRW5kXSk7XG4gIHZhciBzdHlsZSA9IGdldFN0eWxlKHtcbiAgICBpc0FuaW1hdGluZ09wZW5Pbk1vdW50OiBpc0FuaW1hdGluZ09wZW5Pbk1vdW50LFxuICAgIGFuaW1hdGU6IHByb3BzLmFuaW1hdGUsXG4gICAgcGxhY2Vob2xkZXI6IHByb3BzLnBsYWNlaG9sZGVyXG4gIH0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wcy5wbGFjZWhvbGRlci50YWdOYW1lLCB7XG4gICAgc3R5bGU6IHN0eWxlLFxuICAgICdkYXRhLXJiZC1wbGFjZWhvbGRlci1jb250ZXh0LWlkJzogY29udGV4dElkLFxuICAgIG9uVHJhbnNpdGlvbkVuZDogb25TaXplQ2hhbmdlRW5kLFxuICAgIHJlZjogcHJvcHMuaW5uZXJSZWZcbiAgfSk7XG59XG5cbnZhciBQbGFjZWhvbGRlciQxID0gUmVhY3QubWVtbyhQbGFjZWhvbGRlcik7XG5cbnZhciBEcm9wcGFibGVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuZnVuY3Rpb24gY2hlY2tJc1ZhbGlkSW5uZXJSZWYoZWwpIHtcbiAgIShlbCAmJiBpc0h0bWxFbGVtZW50KGVsKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiXFxuICAgIHByb3ZpZGVkLmlubmVyUmVmIGhhcyBub3QgYmVlbiBwcm92aWRlZCB3aXRoIGEgSFRNTEVsZW1lbnQuXFxuXFxuICAgIFlvdSBjYW4gZmluZCBhIGd1aWRlIG9uIHVzaW5nIHRoZSBpbm5lclJlZiBjYWxsYmFjayBmdW5jdGlvbnMgYXQ6XFxuICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9hdGxhc3NpYW4vcmVhY3QtYmVhdXRpZnVsLWRuZC9ibG9iL21hc3Rlci9kb2NzL2d1aWRlcy91c2luZy1pbm5lci1yZWYubWRcXG4gIFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG59XG5cbmZ1bmN0aW9uIHJ1bkNoZWNrcyhhcmdzLCBjaGVja3MpIHtcbiAgY2hlY2tzLmZvckVhY2goZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgcmV0dXJuIGNoZWNrKGFyZ3MpO1xuICB9KTtcbn1cblxudmFyIHNoYXJlZCA9IFtmdW5jdGlvbiByZXF1aXJlZChfcmVmKSB7XG4gIHZhciBwcm9wcyA9IF9yZWYucHJvcHM7XG4gICFwcm9wcy5kcm9wcGFibGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0EgRHJvcHBhYmxlIHJlcXVpcmVzIGEgZHJvcHBhYmxlSWQgcHJvcCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgISh0eXBlb2YgcHJvcHMuZHJvcHBhYmxlSWQgPT09ICdzdHJpbmcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBIERyb3BwYWJsZSByZXF1aXJlcyBhIFtzdHJpbmddIGRyb3BwYWJsZUlkLiBQcm92aWRlZDogW1wiICsgdHlwZW9mIHByb3BzLmRyb3BwYWJsZUlkICsgXCJdXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn0sIGZ1bmN0aW9uIF9ib29sZWFuKF9yZWYyKSB7XG4gIHZhciBwcm9wcyA9IF9yZWYyLnByb3BzO1xuICAhaXNCb29sZWFuKHByb3BzLmlzRHJvcERpc2FibGVkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2lzRHJvcERpc2FibGVkIG11c3QgYmUgYSBib29sZWFuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhaXNCb29sZWFuKHByb3BzLmlzQ29tYmluZUVuYWJsZWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnaXNDb21iaW5lRW5hYmxlZCBtdXN0IGJlIGEgYm9vbGVhbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIWlzQm9vbGVhbihwcm9wcy5pZ25vcmVDb250YWluZXJDbGlwcGluZykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdpZ25vcmVDb250YWluZXJDbGlwcGluZyBtdXN0IGJlIGEgYm9vbGVhbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn0sIGZ1bmN0aW9uIHJlZihfcmVmMykge1xuICB2YXIgZ2V0RHJvcHBhYmxlUmVmID0gX3JlZjMuZ2V0RHJvcHBhYmxlUmVmO1xuICBjaGVja0lzVmFsaWRJbm5lclJlZihnZXREcm9wcGFibGVSZWYoKSk7XG59XTtcbnZhciBzdGFuZGFyZCA9IFtmdW5jdGlvbiBwbGFjZWhvbGRlcihfcmVmNCkge1xuICB2YXIgcHJvcHMgPSBfcmVmNC5wcm9wcyxcbiAgICAgIGdldFBsYWNlaG9sZGVyUmVmID0gX3JlZjQuZ2V0UGxhY2Vob2xkZXJSZWY7XG5cbiAgaWYgKCFwcm9wcy5wbGFjZWhvbGRlcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciByZWYgPSBnZXRQbGFjZWhvbGRlclJlZigpO1xuXG4gIGlmIChyZWYpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgRHJvcHBhYmxlIHNldHVwIGlzc3VlIFtkcm9wcGFibGVJZDogXFxcIlwiICsgcHJvcHMuZHJvcHBhYmxlSWQgKyBcIlxcXCJdOlxcbiAgICAgIERyb3BwYWJsZVByb3ZpZGVkID4gcGxhY2Vob2xkZXIgY291bGQgbm90IGJlIGZvdW5kLlxcblxcbiAgICAgIFBsZWFzZSBiZSBzdXJlIHRvIGFkZCB0aGUge3Byb3ZpZGVkLnBsYWNlaG9sZGVyfSBSZWFjdCBOb2RlIGFzIGEgY2hpbGQgb2YgeW91ciBEcm9wcGFibGUuXFxuICAgICAgTW9yZSBpbmZvcm1hdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kL2Jsb2IvbWFzdGVyL2RvY3MvYXBpL2Ryb3BwYWJsZS5tZFxcbiAgICBcIikgOiB2b2lkIDA7XG59XTtcbnZhciB2aXJ0dWFsID0gW2Z1bmN0aW9uIGhhc0Nsb25lKF9yZWY1KSB7XG4gIHZhciBwcm9wcyA9IF9yZWY1LnByb3BzO1xuICAhcHJvcHMucmVuZGVyQ2xvbmUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdNdXN0IHByb3ZpZGUgYSBjbG9uZSByZW5kZXIgZnVuY3Rpb24gKHJlbmRlckNsb25lKSBmb3IgdmlydHVhbCBsaXN0cycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn0sIGZ1bmN0aW9uIGhhc05vUGxhY2Vob2xkZXIoX3JlZjYpIHtcbiAgdmFyIGdldFBsYWNlaG9sZGVyUmVmID0gX3JlZjYuZ2V0UGxhY2Vob2xkZXJSZWY7XG4gICEhZ2V0UGxhY2Vob2xkZXJSZWYoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHZpcnR1YWwgbGlzdCB0byBub3QgaGF2ZSBhIHBsYWNlaG9sZGVyJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufV07XG5mdW5jdGlvbiB1c2VWYWxpZGF0aW9uKGFyZ3MpIHtcbiAgdXNlRGV2U2V0dXBXYXJuaW5nKGZ1bmN0aW9uICgpIHtcbiAgICBydW5DaGVja3MoYXJncywgc2hhcmVkKTtcblxuICAgIGlmIChhcmdzLnByb3BzLm1vZGUgPT09ICdzdGFuZGFyZCcpIHtcbiAgICAgIHJ1bkNoZWNrcyhhcmdzLCBzdGFuZGFyZCk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MucHJvcHMubW9kZSA9PT0gJ3ZpcnR1YWwnKSB7XG4gICAgICBydW5DaGVja3MoYXJncywgdmlydHVhbCk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIEFuaW1hdGVJbk91dCA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShBbmltYXRlSW5PdXQsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBbmltYXRlSW5PdXQoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JFB1cmVDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkUHVyZUNvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzVmlzaWJsZTogQm9vbGVhbihfdGhpcy5wcm9wcy5vbiksXG4gICAgICBkYXRhOiBfdGhpcy5wcm9wcy5vbixcbiAgICAgIGFuaW1hdGU6IF90aGlzLnByb3BzLnNob3VsZEFuaW1hdGUgJiYgX3RoaXMucHJvcHMub24gPyAnb3BlbicgOiAnbm9uZSdcbiAgICB9O1xuXG4gICAgX3RoaXMub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5hbmltYXRlICE9PSAnY2xvc2UnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc1Zpc2libGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgQW5pbWF0ZUluT3V0LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICBpZiAoIXByb3BzLnNob3VsZEFuaW1hdGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzVmlzaWJsZTogQm9vbGVhbihwcm9wcy5vbiksXG4gICAgICAgIGRhdGE6IHByb3BzLm9uLFxuICAgICAgICBhbmltYXRlOiAnbm9uZSdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgIGRhdGE6IHByb3BzLm9uLFxuICAgICAgICBhbmltYXRlOiAnb3BlbidcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICBkYXRhOiBzdGF0ZS5kYXRhLFxuICAgICAgICBhbmltYXRlOiAnY2xvc2UnXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpc1Zpc2libGU6IGZhbHNlLFxuICAgICAgYW5pbWF0ZTogJ2Nsb3NlJyxcbiAgICAgIGRhdGE6IG51bGxcbiAgICB9O1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBBbmltYXRlSW5PdXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHByb3ZpZGVkID0ge1xuICAgICAgb25DbG9zZTogdGhpcy5vbkNsb3NlLFxuICAgICAgZGF0YTogdGhpcy5zdGF0ZS5kYXRhLFxuICAgICAgYW5pbWF0ZTogdGhpcy5zdGF0ZS5hbmltYXRlXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbihwcm92aWRlZCk7XG4gIH07XG5cbiAgcmV0dXJuIEFuaW1hdGVJbk91dDtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbnZhciB6SW5kZXhPcHRpb25zID0ge1xuICBkcmFnZ2luZzogNTAwMCxcbiAgZHJvcEFuaW1hdGluZzogNDUwMFxufTtcblxudmFyIGdldERyYWdnaW5nVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIGdldERyYWdnaW5nVHJhbnNpdGlvbihzaG91bGRBbmltYXRlRHJhZ01vdmVtZW50LCBkcm9wcGluZykge1xuICBpZiAoZHJvcHBpbmcpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbnMuZHJvcChkcm9wcGluZy5kdXJhdGlvbik7XG4gIH1cblxuICBpZiAoc2hvdWxkQW5pbWF0ZURyYWdNb3ZlbWVudCkge1xuICAgIHJldHVybiB0cmFuc2l0aW9ucy5zbmFwO1xuICB9XG5cbiAgcmV0dXJuIHRyYW5zaXRpb25zLmZsdWlkO1xufTtcblxudmFyIGdldERyYWdnaW5nT3BhY2l0eSA9IGZ1bmN0aW9uIGdldERyYWdnaW5nT3BhY2l0eShpc0NvbWJpbmluZywgaXNEcm9wQW5pbWF0aW5nKSB7XG4gIGlmICghaXNDb21iaW5pbmcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBpc0Ryb3BBbmltYXRpbmcgPyBjb21iaW5lLm9wYWNpdHkuZHJvcCA6IGNvbWJpbmUub3BhY2l0eS5jb21iaW5pbmc7XG59O1xuXG52YXIgZ2V0U2hvdWxkRHJhZ2dpbmdBbmltYXRlID0gZnVuY3Rpb24gZ2V0U2hvdWxkRHJhZ2dpbmdBbmltYXRlKGRyYWdnaW5nKSB7XG4gIGlmIChkcmFnZ2luZy5mb3JjZVNob3VsZEFuaW1hdGUgIT0gbnVsbCkge1xuICAgIHJldHVybiBkcmFnZ2luZy5mb3JjZVNob3VsZEFuaW1hdGU7XG4gIH1cblxuICByZXR1cm4gZHJhZ2dpbmcubW9kZSA9PT0gJ1NOQVAnO1xufTtcblxuZnVuY3Rpb24gZ2V0RHJhZ2dpbmdTdHlsZShkcmFnZ2luZykge1xuICB2YXIgZGltZW5zaW9uID0gZHJhZ2dpbmcuZGltZW5zaW9uO1xuICB2YXIgYm94ID0gZGltZW5zaW9uLmNsaWVudDtcbiAgdmFyIG9mZnNldCA9IGRyYWdnaW5nLm9mZnNldCxcbiAgICAgIGNvbWJpbmVXaXRoID0gZHJhZ2dpbmcuY29tYmluZVdpdGgsXG4gICAgICBkcm9wcGluZyA9IGRyYWdnaW5nLmRyb3BwaW5nO1xuICB2YXIgaXNDb21iaW5pbmcgPSBCb29sZWFuKGNvbWJpbmVXaXRoKTtcbiAgdmFyIHNob3VsZEFuaW1hdGUgPSBnZXRTaG91bGREcmFnZ2luZ0FuaW1hdGUoZHJhZ2dpbmcpO1xuICB2YXIgaXNEcm9wQW5pbWF0aW5nID0gQm9vbGVhbihkcm9wcGluZyk7XG4gIHZhciB0cmFuc2Zvcm0gPSBpc0Ryb3BBbmltYXRpbmcgPyB0cmFuc2Zvcm1zLmRyb3Aob2Zmc2V0LCBpc0NvbWJpbmluZykgOiB0cmFuc2Zvcm1zLm1vdmVUbyhvZmZzZXQpO1xuICB2YXIgc3R5bGUgPSB7XG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgdG9wOiBib3gubWFyZ2luQm94LnRvcCxcbiAgICBsZWZ0OiBib3gubWFyZ2luQm94LmxlZnQsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgd2lkdGg6IGJveC5ib3JkZXJCb3gud2lkdGgsXG4gICAgaGVpZ2h0OiBib3guYm9yZGVyQm94LmhlaWdodCxcbiAgICB0cmFuc2l0aW9uOiBnZXREcmFnZ2luZ1RyYW5zaXRpb24oc2hvdWxkQW5pbWF0ZSwgZHJvcHBpbmcpLFxuICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgIG9wYWNpdHk6IGdldERyYWdnaW5nT3BhY2l0eShpc0NvbWJpbmluZywgaXNEcm9wQW5pbWF0aW5nKSxcbiAgICB6SW5kZXg6IGlzRHJvcEFuaW1hdGluZyA/IHpJbmRleE9wdGlvbnMuZHJvcEFuaW1hdGluZyA6IHpJbmRleE9wdGlvbnMuZHJhZ2dpbmcsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gIH07XG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gZ2V0U2Vjb25kYXJ5U3R5bGUoc2Vjb25kYXJ5KSB7XG4gIHJldHVybiB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1zLm1vdmVUbyhzZWNvbmRhcnkub2Zmc2V0KSxcbiAgICB0cmFuc2l0aW9uOiBzZWNvbmRhcnkuc2hvdWxkQW5pbWF0ZURpc3BsYWNlbWVudCA/IG51bGwgOiAnbm9uZSdcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGUkMShtYXBwZWQpIHtcbiAgcmV0dXJuIG1hcHBlZC50eXBlID09PSAnRFJBR0dJTkcnID8gZ2V0RHJhZ2dpbmdTdHlsZShtYXBwZWQpIDogZ2V0U2Vjb25kYXJ5U3R5bGUobWFwcGVkKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGltZW5zaW9uJDEoZGVzY3JpcHRvciwgZWwsIHdpbmRvd1Njcm9sbCkge1xuICBpZiAod2luZG93U2Nyb2xsID09PSB2b2lkIDApIHtcbiAgICB3aW5kb3dTY3JvbGwgPSBvcmlnaW47XG4gIH1cblxuICB2YXIgY29tcHV0ZWRTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIHZhciBib3JkZXJCb3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGNsaWVudCA9IGNhbGN1bGF0ZUJveChib3JkZXJCb3gsIGNvbXB1dGVkU3R5bGVzKTtcbiAgdmFyIHBhZ2UgPSB3aXRoU2Nyb2xsKGNsaWVudCwgd2luZG93U2Nyb2xsKTtcbiAgdmFyIHBsYWNlaG9sZGVyID0ge1xuICAgIGNsaWVudDogY2xpZW50LFxuICAgIHRhZ05hbWU6IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSxcbiAgICBkaXNwbGF5OiBjb21wdXRlZFN0eWxlcy5kaXNwbGF5XG4gIH07XG4gIHZhciBkaXNwbGFjZUJ5ID0ge1xuICAgIHg6IGNsaWVudC5tYXJnaW5Cb3gud2lkdGgsXG4gICAgeTogY2xpZW50Lm1hcmdpbkJveC5oZWlnaHRcbiAgfTtcbiAgdmFyIGRpbWVuc2lvbiA9IHtcbiAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICBkaXNwbGFjZUJ5OiBkaXNwbGFjZUJ5LFxuICAgIGNsaWVudDogY2xpZW50LFxuICAgIHBhZ2U6IHBhZ2VcbiAgfTtcbiAgcmV0dXJuIGRpbWVuc2lvbjtcbn1cblxuZnVuY3Rpb24gdXNlRHJhZ2dhYmxlUHVibGlzaGVyKGFyZ3MpIHtcbiAgdmFyIHVuaXF1ZUlkID0gdXNlVW5pcXVlSWQoJ2RyYWdnYWJsZScpO1xuICB2YXIgZGVzY3JpcHRvciA9IGFyZ3MuZGVzY3JpcHRvcixcbiAgICAgIHJlZ2lzdHJ5ID0gYXJncy5yZWdpc3RyeSxcbiAgICAgIGdldERyYWdnYWJsZVJlZiA9IGFyZ3MuZ2V0RHJhZ2dhYmxlUmVmLFxuICAgICAgY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMgPSBhcmdzLmNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzLFxuICAgICAgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MgPSBhcmdzLnNob3VsZFJlc3BlY3RGb3JjZVByZXNzLFxuICAgICAgaXNFbmFibGVkID0gYXJncy5pc0VuYWJsZWQ7XG4gIHZhciBvcHRpb25zID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzOiBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cyxcbiAgICAgIHNob3VsZFJlc3BlY3RGb3JjZVByZXNzOiBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyxcbiAgICAgIGlzRW5hYmxlZDogaXNFbmFibGVkXG4gICAgfTtcbiAgfSwgW2NhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzLCBpc0VuYWJsZWQsIHNob3VsZFJlc3BlY3RGb3JjZVByZXNzXSk7XG4gIHZhciBnZXREaW1lbnNpb24gPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAod2luZG93U2Nyb2xsKSB7XG4gICAgdmFyIGVsID0gZ2V0RHJhZ2dhYmxlUmVmKCk7XG4gICAgIWVsID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGdldCBkaW1lbnNpb24gd2hlbiBubyByZWYgaXMgc2V0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBnZXREaW1lbnNpb24kMShkZXNjcmlwdG9yLCBlbCwgd2luZG93U2Nyb2xsKTtcbiAgfSwgW2Rlc2NyaXB0b3IsIGdldERyYWdnYWJsZVJlZl0pO1xuICB2YXIgZW50cnkgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdW5pcXVlSWQ6IHVuaXF1ZUlkLFxuICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICBnZXREaW1lbnNpb246IGdldERpbWVuc2lvblxuICAgIH07XG4gIH0sIFtkZXNjcmlwdG9yLCBnZXREaW1lbnNpb24sIG9wdGlvbnMsIHVuaXF1ZUlkXSk7XG4gIHZhciBwdWJsaXNoZWRSZWYgPSB1c2VSZWYoZW50cnkpO1xuICB2YXIgaXNGaXJzdFB1Ymxpc2hSZWYgPSB1c2VSZWYodHJ1ZSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlZ2lzdHJ5LmRyYWdnYWJsZS5yZWdpc3RlcihwdWJsaXNoZWRSZWYuY3VycmVudCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWdpc3RyeS5kcmFnZ2FibGUudW5yZWdpc3RlcihwdWJsaXNoZWRSZWYuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW3JlZ2lzdHJ5LmRyYWdnYWJsZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNGaXJzdFB1Ymxpc2hSZWYuY3VycmVudCkge1xuICAgICAgaXNGaXJzdFB1Ymxpc2hSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsYXN0ID0gcHVibGlzaGVkUmVmLmN1cnJlbnQ7XG4gICAgcHVibGlzaGVkUmVmLmN1cnJlbnQgPSBlbnRyeTtcbiAgICByZWdpc3RyeS5kcmFnZ2FibGUudXBkYXRlKGVudHJ5LCBsYXN0KTtcbiAgfSwgW2VudHJ5LCByZWdpc3RyeS5kcmFnZ2FibGVdKTtcbn1cblxuZnVuY3Rpb24gdXNlVmFsaWRhdGlvbiQxKHByb3BzLCBjb250ZXh0SWQsIGdldFJlZikge1xuICB1c2VEZXZTZXR1cFdhcm5pbmcoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHByZWZpeChpZCkge1xuICAgICAgcmV0dXJuIFwiRHJhZ2dhYmxlW2lkOiBcIiArIGlkICsgXCJdOiBcIjtcbiAgICB9XG5cbiAgICB2YXIgaWQgPSBwcm9wcy5kcmFnZ2FibGVJZDtcbiAgICAhaWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEcmFnZ2FibGUgcmVxdWlyZXMgYSBkcmFnZ2FibGVJZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkRyYWdnYWJsZSByZXF1aXJlcyBhIFtzdHJpbmddIGRyYWdnYWJsZUlkLlxcbiAgICAgIFByb3ZpZGVkOiBbdHlwZTogXCIgKyB0eXBlb2YgaWQgKyBcIl0gKHZhbHVlOiBcIiArIGlkICsgXCIpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhaXNJbnRlZ2VyKHByb3BzLmluZGV4KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgcHJlZml4KGlkKSArIFwiIHJlcXVpcmVzIGFuIGludGVnZXIgaW5kZXggcHJvcFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocHJvcHMubWFwcGVkLnR5cGUgPT09ICdEUkFHR0lORycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjaGVja0lzVmFsaWRJbm5lclJlZihnZXRSZWYoKSk7XG5cbiAgICBpZiAocHJvcHMuaXNFbmFibGVkKSB7XG4gICAgICAhZmluZERyYWdIYW5kbGUoY29udGV4dElkLCBpZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIHByZWZpeChpZCkgKyBcIiBVbmFibGUgdG8gZmluZCBkcmFnIGhhbmRsZVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIHVzZUNsb25lUHJvcFZhbGlkYXRpb24oaXNDbG9uZSkge1xuICB1c2VEZXYoZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbml0aWFsUmVmID0gdXNlUmVmKGlzQ2xvbmUpO1xuICAgIHVzZURldlNldHVwV2FybmluZyhmdW5jdGlvbiAoKSB7XG4gICAgICAhKGlzQ2xvbmUgPT09IGluaXRpYWxSZWYuY3VycmVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEcmFnZ2FibGUgaXNDbG9uZSBwcm9wIHZhbHVlIGNoYW5nZWQgZHVyaW5nIGNvbXBvbmVudCBsaWZlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH0sIFtpc0Nsb25lXSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwcmV2ZW50SHRtbDVEbmQoZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbn1cblxuZnVuY3Rpb24gRHJhZ2dhYmxlKHByb3BzKSB7XG4gIHZhciByZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciBzZXRSZWYgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZWwpIHtcbiAgICByZWYuY3VycmVudCA9IGVsO1xuICB9LCBbXSk7XG4gIHZhciBnZXRSZWYgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlZi5jdXJyZW50O1xuICB9LCBbXSk7XG5cbiAgdmFyIF91c2VSZXF1aXJlZENvbnRleHQgPSB1c2VSZXF1aXJlZENvbnRleHQoQXBwQ29udGV4dCksXG4gICAgICBjb250ZXh0SWQgPSBfdXNlUmVxdWlyZWRDb250ZXh0LmNvbnRleHRJZCxcbiAgICAgIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9uc0lkID0gX3VzZVJlcXVpcmVkQ29udGV4dC5kcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNJZCxcbiAgICAgIHJlZ2lzdHJ5ID0gX3VzZVJlcXVpcmVkQ29udGV4dC5yZWdpc3RyeTtcblxuICB2YXIgX3VzZVJlcXVpcmVkQ29udGV4dDIgPSB1c2VSZXF1aXJlZENvbnRleHQoRHJvcHBhYmxlQ29udGV4dCksXG4gICAgICB0eXBlID0gX3VzZVJlcXVpcmVkQ29udGV4dDIudHlwZSxcbiAgICAgIGRyb3BwYWJsZUlkID0gX3VzZVJlcXVpcmVkQ29udGV4dDIuZHJvcHBhYmxlSWQ7XG5cbiAgdmFyIGRlc2NyaXB0b3IgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHByb3BzLmRyYWdnYWJsZUlkLFxuICAgICAgaW5kZXg6IHByb3BzLmluZGV4LFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGRyb3BwYWJsZUlkOiBkcm9wcGFibGVJZFxuICAgIH07XG4gIH0sIFtwcm9wcy5kcmFnZ2FibGVJZCwgcHJvcHMuaW5kZXgsIHR5cGUsIGRyb3BwYWJsZUlkXSk7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgZHJhZ2dhYmxlSWQgPSBwcm9wcy5kcmFnZ2FibGVJZCxcbiAgICAgIGlzRW5hYmxlZCA9IHByb3BzLmlzRW5hYmxlZCxcbiAgICAgIHNob3VsZFJlc3BlY3RGb3JjZVByZXNzID0gcHJvcHMuc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MsXG4gICAgICBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cyA9IHByb3BzLmNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzLFxuICAgICAgaXNDbG9uZSA9IHByb3BzLmlzQ2xvbmUsXG4gICAgICBtYXBwZWQgPSBwcm9wcy5tYXBwZWQsXG4gICAgICBkcm9wQW5pbWF0aW9uRmluaXNoZWRBY3Rpb24gPSBwcm9wcy5kcm9wQW5pbWF0aW9uRmluaXNoZWQ7XG4gIHVzZVZhbGlkYXRpb24kMShwcm9wcywgY29udGV4dElkLCBnZXRSZWYpO1xuICB1c2VDbG9uZVByb3BWYWxpZGF0aW9uKGlzQ2xvbmUpO1xuXG4gIGlmICghaXNDbG9uZSkge1xuICAgIHZhciBmb3JQdWJsaXNoZXIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgICAgIHJlZ2lzdHJ5OiByZWdpc3RyeSxcbiAgICAgICAgZ2V0RHJhZ2dhYmxlUmVmOiBnZXRSZWYsXG4gICAgICAgIGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzOiBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cyxcbiAgICAgICAgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3M6IHNob3VsZFJlc3BlY3RGb3JjZVByZXNzLFxuICAgICAgICBpc0VuYWJsZWQ6IGlzRW5hYmxlZFxuICAgICAgfTtcbiAgICB9LCBbZGVzY3JpcHRvciwgcmVnaXN0cnksIGdldFJlZiwgY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMsIHNob3VsZFJlc3BlY3RGb3JjZVByZXNzLCBpc0VuYWJsZWRdKTtcbiAgICB1c2VEcmFnZ2FibGVQdWJsaXNoZXIoZm9yUHVibGlzaGVyKTtcbiAgfVxuXG4gIHZhciBkcmFnSGFuZGxlUHJvcHMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNFbmFibGVkID8ge1xuICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICByb2xlOiAnYnV0dG9uJyxcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zSWQsXG4gICAgICAnZGF0YS1yYmQtZHJhZy1oYW5kbGUtZHJhZ2dhYmxlLWlkJzogZHJhZ2dhYmxlSWQsXG4gICAgICAnZGF0YS1yYmQtZHJhZy1oYW5kbGUtY29udGV4dC1pZCc6IGNvbnRleHRJZCxcbiAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICBvbkRyYWdTdGFydDogcHJldmVudEh0bWw1RG5kXG4gICAgfSA6IG51bGw7XG4gIH0sIFtjb250ZXh0SWQsIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9uc0lkLCBkcmFnZ2FibGVJZCwgaXNFbmFibGVkXSk7XG4gIHZhciBvbk1vdmVFbmQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAobWFwcGVkLnR5cGUgIT09ICdEUkFHR0lORycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIW1hcHBlZC5kcm9wcGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5wcm9wZXJ0eU5hbWUgIT09ICd0cmFuc2Zvcm0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZHJvcEFuaW1hdGlvbkZpbmlzaGVkQWN0aW9uKCk7XG4gIH0sIFtkcm9wQW5pbWF0aW9uRmluaXNoZWRBY3Rpb24sIG1hcHBlZF0pO1xuICB2YXIgcHJvdmlkZWQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3R5bGUgPSBnZXRTdHlsZSQxKG1hcHBlZCk7XG4gICAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IG1hcHBlZC50eXBlID09PSAnRFJBR0dJTkcnICYmIG1hcHBlZC5kcm9wcGluZyA/IG9uTW92ZUVuZCA6IG51bGw7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIGlubmVyUmVmOiBzZXRSZWYsXG4gICAgICBkcmFnZ2FibGVQcm9wczoge1xuICAgICAgICAnZGF0YS1yYmQtZHJhZ2dhYmxlLWNvbnRleHQtaWQnOiBjb250ZXh0SWQsXG4gICAgICAgICdkYXRhLXJiZC1kcmFnZ2FibGUtaWQnOiBkcmFnZ2FibGVJZCxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBvblRyYW5zaXRpb25FbmQ6IG9uVHJhbnNpdGlvbkVuZFxuICAgICAgfSxcbiAgICAgIGRyYWdIYW5kbGVQcm9wczogZHJhZ0hhbmRsZVByb3BzXG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCBbY29udGV4dElkLCBkcmFnSGFuZGxlUHJvcHMsIGRyYWdnYWJsZUlkLCBtYXBwZWQsIG9uTW92ZUVuZCwgc2V0UmVmXSk7XG4gIHZhciBydWJyaWMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHJhZ2dhYmxlSWQ6IGRlc2NyaXB0b3IuaWQsXG4gICAgICB0eXBlOiBkZXNjcmlwdG9yLnR5cGUsXG4gICAgICBzb3VyY2U6IHtcbiAgICAgICAgaW5kZXg6IGRlc2NyaXB0b3IuaW5kZXgsXG4gICAgICAgIGRyb3BwYWJsZUlkOiBkZXNjcmlwdG9yLmRyb3BwYWJsZUlkXG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2Rlc2NyaXB0b3IuZHJvcHBhYmxlSWQsIGRlc2NyaXB0b3IuaWQsIGRlc2NyaXB0b3IuaW5kZXgsIGRlc2NyaXB0b3IudHlwZV0pO1xuICByZXR1cm4gY2hpbGRyZW4ocHJvdmlkZWQsIG1hcHBlZC5zbmFwc2hvdCwgcnVicmljKTtcbn1cblxudmFyIGlzU3RyaWN0RXF1YWwgPSAoZnVuY3Rpb24gKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59KTtcblxudmFyIHdoYXRJc0RyYWdnZWRPdmVyRnJvbVJlc3VsdCA9IChmdW5jdGlvbiAocmVzdWx0KSB7XG4gIHZhciBjb21iaW5lID0gcmVzdWx0LmNvbWJpbmUsXG4gICAgICBkZXN0aW5hdGlvbiA9IHJlc3VsdC5kZXN0aW5hdGlvbjtcblxuICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICByZXR1cm4gZGVzdGluYXRpb24uZHJvcHBhYmxlSWQ7XG4gIH1cblxuICBpZiAoY29tYmluZSkge1xuICAgIHJldHVybiBjb21iaW5lLmRyb3BwYWJsZUlkO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59KTtcblxudmFyIGdldENvbWJpbmVXaXRoRnJvbVJlc3VsdCA9IGZ1bmN0aW9uIGdldENvbWJpbmVXaXRoRnJvbVJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC5jb21iaW5lID8gcmVzdWx0LmNvbWJpbmUuZHJhZ2dhYmxlSWQgOiBudWxsO1xufTtcblxudmFyIGdldENvbWJpbmVXaXRoRnJvbUltcGFjdCA9IGZ1bmN0aW9uIGdldENvbWJpbmVXaXRoRnJvbUltcGFjdChpbXBhY3QpIHtcbiAgcmV0dXJuIGltcGFjdC5hdCAmJiBpbXBhY3QuYXQudHlwZSA9PT0gJ0NPTUJJTkUnID8gaW1wYWN0LmF0LmNvbWJpbmUuZHJhZ2dhYmxlSWQgOiBudWxsO1xufTtcblxuZnVuY3Rpb24gZ2V0RHJhZ2dhYmxlU2VsZWN0b3IoKSB7XG4gIHZhciBtZW1vaXplZE9mZnNldCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCxcbiAgICAgIHk6IHlcbiAgICB9O1xuICB9KTtcbiAgdmFyIGdldE1lbW9pemVkU25hcHNob3QgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChtb2RlLCBpc0Nsb25lLCBkcmFnZ2luZ092ZXIsIGNvbWJpbmVXaXRoLCBkcm9wcGluZykge1xuICAgIHJldHVybiB7XG4gICAgICBpc0RyYWdnaW5nOiB0cnVlLFxuICAgICAgaXNDbG9uZTogaXNDbG9uZSxcbiAgICAgIGlzRHJvcEFuaW1hdGluZzogQm9vbGVhbihkcm9wcGluZyksXG4gICAgICBkcm9wQW5pbWF0aW9uOiBkcm9wcGluZyxcbiAgICAgIG1vZGU6IG1vZGUsXG4gICAgICBkcmFnZ2luZ092ZXI6IGRyYWdnaW5nT3ZlcixcbiAgICAgIGNvbWJpbmVXaXRoOiBjb21iaW5lV2l0aCxcbiAgICAgIGNvbWJpbmVUYXJnZXRGb3I6IG51bGxcbiAgICB9O1xuICB9KTtcbiAgdmFyIGdldE1lbW9pemVkUHJvcHMgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChvZmZzZXQsIG1vZGUsIGRpbWVuc2lvbiwgaXNDbG9uZSwgZHJhZ2dpbmdPdmVyLCBjb21iaW5lV2l0aCwgZm9yY2VTaG91bGRBbmltYXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1hcHBlZDoge1xuICAgICAgICB0eXBlOiAnRFJBR0dJTkcnLFxuICAgICAgICBkcm9wcGluZzogbnVsbCxcbiAgICAgICAgZHJhZ2dpbmdPdmVyOiBkcmFnZ2luZ092ZXIsXG4gICAgICAgIGNvbWJpbmVXaXRoOiBjb21iaW5lV2l0aCxcbiAgICAgICAgbW9kZTogbW9kZSxcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIGRpbWVuc2lvbjogZGltZW5zaW9uLFxuICAgICAgICBmb3JjZVNob3VsZEFuaW1hdGU6IGZvcmNlU2hvdWxkQW5pbWF0ZSxcbiAgICAgICAgc25hcHNob3Q6IGdldE1lbW9pemVkU25hcHNob3QobW9kZSwgaXNDbG9uZSwgZHJhZ2dpbmdPdmVyLCBjb21iaW5lV2l0aCwgbnVsbClcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxuICB2YXIgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICBpZiAoc3RhdGUuaXNEcmFnZ2luZykge1xuICAgICAgaWYgKHN0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZCAhPT0gb3duUHJvcHMuZHJhZ2dhYmxlSWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBvZmZzZXQgPSBzdGF0ZS5jdXJyZW50LmNsaWVudC5vZmZzZXQ7XG4gICAgICB2YXIgZGltZW5zaW9uID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW293blByb3BzLmRyYWdnYWJsZUlkXTtcbiAgICAgIHZhciBkcmFnZ2luZ092ZXIgPSB3aGF0SXNEcmFnZ2VkT3ZlcihzdGF0ZS5pbXBhY3QpO1xuICAgICAgdmFyIGNvbWJpbmVXaXRoID0gZ2V0Q29tYmluZVdpdGhGcm9tSW1wYWN0KHN0YXRlLmltcGFjdCk7XG4gICAgICB2YXIgZm9yY2VTaG91bGRBbmltYXRlID0gc3RhdGUuZm9yY2VTaG91bGRBbmltYXRlO1xuICAgICAgcmV0dXJuIGdldE1lbW9pemVkUHJvcHMobWVtb2l6ZWRPZmZzZXQob2Zmc2V0LngsIG9mZnNldC55KSwgc3RhdGUubW92ZW1lbnRNb2RlLCBkaW1lbnNpb24sIG93blByb3BzLmlzQ2xvbmUsIGRyYWdnaW5nT3ZlciwgY29tYmluZVdpdGgsIGZvcmNlU2hvdWxkQW5pbWF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICB2YXIgY29tcGxldGVkID0gc3RhdGUuY29tcGxldGVkO1xuXG4gICAgICBpZiAoY29tcGxldGVkLnJlc3VsdC5kcmFnZ2FibGVJZCAhPT0gb3duUHJvcHMuZHJhZ2dhYmxlSWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0Nsb25lID0gb3duUHJvcHMuaXNDbG9uZTtcbiAgICAgIHZhciBfZGltZW5zaW9uID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW293blByb3BzLmRyYWdnYWJsZUlkXTtcbiAgICAgIHZhciByZXN1bHQgPSBjb21wbGV0ZWQucmVzdWx0O1xuICAgICAgdmFyIG1vZGUgPSByZXN1bHQubW9kZTtcblxuICAgICAgdmFyIF9kcmFnZ2luZ092ZXIgPSB3aGF0SXNEcmFnZ2VkT3ZlckZyb21SZXN1bHQocmVzdWx0KTtcblxuICAgICAgdmFyIF9jb21iaW5lV2l0aCA9IGdldENvbWJpbmVXaXRoRnJvbVJlc3VsdChyZXN1bHQpO1xuXG4gICAgICB2YXIgZHVyYXRpb24gPSBzdGF0ZS5kcm9wRHVyYXRpb247XG4gICAgICB2YXIgZHJvcHBpbmcgPSB7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgY3VydmU6IGN1cnZlcy5kcm9wLFxuICAgICAgICBtb3ZlVG86IHN0YXRlLm5ld0hvbWVDbGllbnRPZmZzZXQsXG4gICAgICAgIG9wYWNpdHk6IF9jb21iaW5lV2l0aCA/IGNvbWJpbmUub3BhY2l0eS5kcm9wIDogbnVsbCxcbiAgICAgICAgc2NhbGU6IF9jb21iaW5lV2l0aCA/IGNvbWJpbmUuc2NhbGUuZHJvcCA6IG51bGxcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXBwZWQ6IHtcbiAgICAgICAgICB0eXBlOiAnRFJBR0dJTkcnLFxuICAgICAgICAgIG9mZnNldDogc3RhdGUubmV3SG9tZUNsaWVudE9mZnNldCxcbiAgICAgICAgICBkaW1lbnNpb246IF9kaW1lbnNpb24sXG4gICAgICAgICAgZHJvcHBpbmc6IGRyb3BwaW5nLFxuICAgICAgICAgIGRyYWdnaW5nT3ZlcjogX2RyYWdnaW5nT3ZlcixcbiAgICAgICAgICBjb21iaW5lV2l0aDogX2NvbWJpbmVXaXRoLFxuICAgICAgICAgIG1vZGU6IG1vZGUsXG4gICAgICAgICAgZm9yY2VTaG91bGRBbmltYXRlOiBudWxsLFxuICAgICAgICAgIHNuYXBzaG90OiBnZXRNZW1vaXplZFNuYXBzaG90KG1vZGUsIGlzQ2xvbmUsIF9kcmFnZ2luZ092ZXIsIF9jb21iaW5lV2l0aCwgZHJvcHBpbmcpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBnZXRTZWNvbmRhcnlTbmFwc2hvdChjb21iaW5lVGFyZ2V0Rm9yKSB7XG4gIHJldHVybiB7XG4gICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgaXNEcm9wQW5pbWF0aW5nOiBmYWxzZSxcbiAgICBpc0Nsb25lOiBmYWxzZSxcbiAgICBkcm9wQW5pbWF0aW9uOiBudWxsLFxuICAgIG1vZGU6IG51bGwsXG4gICAgZHJhZ2dpbmdPdmVyOiBudWxsLFxuICAgIGNvbWJpbmVUYXJnZXRGb3I6IGNvbWJpbmVUYXJnZXRGb3IsXG4gICAgY29tYmluZVdpdGg6IG51bGxcbiAgfTtcbn1cblxudmFyIGF0UmVzdCA9IHtcbiAgbWFwcGVkOiB7XG4gICAgdHlwZTogJ1NFQ09OREFSWScsXG4gICAgb2Zmc2V0OiBvcmlnaW4sXG4gICAgY29tYmluZVRhcmdldEZvcjogbnVsbCxcbiAgICBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50OiB0cnVlLFxuICAgIHNuYXBzaG90OiBnZXRTZWNvbmRhcnlTbmFwc2hvdChudWxsKVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRTZWNvbmRhcnlTZWxlY3RvcigpIHtcbiAgdmFyIG1lbW9pemVkT2Zmc2V0ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoeCwgeSkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeVxuICAgIH07XG4gIH0pO1xuICB2YXIgZ2V0TWVtb2l6ZWRTbmFwc2hvdCA9IG1lbW9pemVPbmUoZ2V0U2Vjb25kYXJ5U25hcHNob3QpO1xuICB2YXIgZ2V0TWVtb2l6ZWRQcm9wcyA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKG9mZnNldCwgY29tYmluZVRhcmdldEZvciwgc2hvdWxkQW5pbWF0ZURpc3BsYWNlbWVudCkge1xuICAgIGlmIChjb21iaW5lVGFyZ2V0Rm9yID09PSB2b2lkIDApIHtcbiAgICAgIGNvbWJpbmVUYXJnZXRGb3IgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtYXBwZWQ6IHtcbiAgICAgICAgdHlwZTogJ1NFQ09OREFSWScsXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBjb21iaW5lVGFyZ2V0Rm9yOiBjb21iaW5lVGFyZ2V0Rm9yLFxuICAgICAgICBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50OiBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50LFxuICAgICAgICBzbmFwc2hvdDogZ2V0TWVtb2l6ZWRTbmFwc2hvdChjb21iaW5lVGFyZ2V0Rm9yKVxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG4gIHZhciBnZXRGYWxsYmFjayA9IGZ1bmN0aW9uIGdldEZhbGxiYWNrKGNvbWJpbmVUYXJnZXRGb3IpIHtcbiAgICByZXR1cm4gY29tYmluZVRhcmdldEZvciA/IGdldE1lbW9pemVkUHJvcHMob3JpZ2luLCBjb21iaW5lVGFyZ2V0Rm9yLCB0cnVlKSA6IG51bGw7XG4gIH07XG5cbiAgdmFyIGdldFByb3BzID0gZnVuY3Rpb24gZ2V0UHJvcHMob3duSWQsIGRyYWdnaW5nSWQsIGltcGFjdCwgYWZ0ZXJDcml0aWNhbCkge1xuICAgIHZhciB2aXN1YWxEaXNwbGFjZW1lbnQgPSBpbXBhY3QuZGlzcGxhY2VkLnZpc2libGVbb3duSWRdO1xuICAgIHZhciBpc0FmdGVyQ3JpdGljYWxJblZpcnR1YWxMaXN0ID0gQm9vbGVhbihhZnRlckNyaXRpY2FsLmluVmlydHVhbExpc3QgJiYgYWZ0ZXJDcml0aWNhbC5lZmZlY3RlZFtvd25JZF0pO1xuICAgIHZhciBjb21iaW5lID0gdHJ5R2V0Q29tYmluZShpbXBhY3QpO1xuICAgIHZhciBjb21iaW5lVGFyZ2V0Rm9yID0gY29tYmluZSAmJiBjb21iaW5lLmRyYWdnYWJsZUlkID09PSBvd25JZCA/IGRyYWdnaW5nSWQgOiBudWxsO1xuXG4gICAgaWYgKCF2aXN1YWxEaXNwbGFjZW1lbnQpIHtcbiAgICAgIGlmICghaXNBZnRlckNyaXRpY2FsSW5WaXJ0dWFsTGlzdCkge1xuICAgICAgICByZXR1cm4gZ2V0RmFsbGJhY2soY29tYmluZVRhcmdldEZvcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbXBhY3QuZGlzcGxhY2VkLmludmlzaWJsZVtvd25JZF0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2UgPSBuZWdhdGUoYWZ0ZXJDcml0aWNhbC5kaXNwbGFjZWRCeS5wb2ludCk7XG5cbiAgICAgIHZhciBfb2Zmc2V0ID0gbWVtb2l6ZWRPZmZzZXQoY2hhbmdlLngsIGNoYW5nZS55KTtcblxuICAgICAgcmV0dXJuIGdldE1lbW9pemVkUHJvcHMoX29mZnNldCwgY29tYmluZVRhcmdldEZvciwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzQWZ0ZXJDcml0aWNhbEluVmlydHVhbExpc3QpIHtcbiAgICAgIHJldHVybiBnZXRGYWxsYmFjayhjb21iaW5lVGFyZ2V0Rm9yKTtcbiAgICB9XG5cbiAgICB2YXIgZGlzcGxhY2VCeSA9IGltcGFjdC5kaXNwbGFjZWRCeS5wb2ludDtcbiAgICB2YXIgb2Zmc2V0ID0gbWVtb2l6ZWRPZmZzZXQoZGlzcGxhY2VCeS54LCBkaXNwbGFjZUJ5LnkpO1xuICAgIHJldHVybiBnZXRNZW1vaXplZFByb3BzKG9mZnNldCwgY29tYmluZVRhcmdldEZvciwgdmlzdWFsRGlzcGxhY2VtZW50LnNob3VsZEFuaW1hdGUpO1xuICB9O1xuXG4gIHZhciBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIGlmIChzdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICBpZiAoc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkID09PSBvd25Qcm9wcy5kcmFnZ2FibGVJZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFByb3BzKG93blByb3BzLmRyYWdnYWJsZUlkLCBzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWQsIHN0YXRlLmltcGFjdCwgc3RhdGUuYWZ0ZXJDcml0aWNhbCk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICB2YXIgY29tcGxldGVkID0gc3RhdGUuY29tcGxldGVkO1xuXG4gICAgICBpZiAoY29tcGxldGVkLnJlc3VsdC5kcmFnZ2FibGVJZCA9PT0gb3duUHJvcHMuZHJhZ2dhYmxlSWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRQcm9wcyhvd25Qcm9wcy5kcmFnZ2FibGVJZCwgY29tcGxldGVkLnJlc3VsdC5kcmFnZ2FibGVJZCwgY29tcGxldGVkLmltcGFjdCwgY29tcGxldGVkLmFmdGVyQ3JpdGljYWwpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxudmFyIG1ha2VNYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBtYWtlTWFwU3RhdGVUb1Byb3BzKCkge1xuICB2YXIgZHJhZ2dpbmdTZWxlY3RvciA9IGdldERyYWdnYWJsZVNlbGVjdG9yKCk7XG4gIHZhciBzZWNvbmRhcnlTZWxlY3RvciA9IGdldFNlY29uZGFyeVNlbGVjdG9yKCk7XG5cbiAgdmFyIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIGRyYWdnaW5nU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB8fCBzZWNvbmRhcnlTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHx8IGF0UmVzdDtcbiAgfTtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59O1xudmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgZHJvcEFuaW1hdGlvbkZpbmlzaGVkOiBkcm9wQW5pbWF0aW9uRmluaXNoZWRcbn07XG52YXIgQ29ubmVjdGVkRHJhZ2dhYmxlID0gY29ubmVjdChtYWtlTWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG51bGwsIHtcbiAgY29udGV4dDogU3RvcmVDb250ZXh0LFxuICBwdXJlOiB0cnVlLFxuICBhcmVTdGF0ZVByb3BzRXF1YWw6IGlzU3RyaWN0RXF1YWxcbn0pKERyYWdnYWJsZSk7XG5cbmZ1bmN0aW9uIFByaXZhdGVEcmFnZ2FibGUocHJvcHMpIHtcbiAgdmFyIGRyb3BwYWJsZUNvbnRleHQgPSB1c2VSZXF1aXJlZENvbnRleHQoRHJvcHBhYmxlQ29udGV4dCk7XG4gIHZhciBpc1VzaW5nQ2xvbmVGb3IgPSBkcm9wcGFibGVDb250ZXh0LmlzVXNpbmdDbG9uZUZvcjtcblxuICBpZiAoaXNVc2luZ0Nsb25lRm9yID09PSBwcm9wcy5kcmFnZ2FibGVJZCAmJiAhcHJvcHMuaXNDbG9uZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdGVkRHJhZ2dhYmxlLCBwcm9wcyk7XG59XG5mdW5jdGlvbiBQdWJsaWNEcmFnZ2FibGUocHJvcHMpIHtcbiAgdmFyIGlzRW5hYmxlZCA9IHR5cGVvZiBwcm9wcy5pc0RyYWdEaXNhYmxlZCA9PT0gJ2Jvb2xlYW4nID8gIXByb3BzLmlzRHJhZ0Rpc2FibGVkIDogdHJ1ZTtcbiAgdmFyIGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzID0gQm9vbGVhbihwcm9wcy5kaXNhYmxlSW50ZXJhY3RpdmVFbGVtZW50QmxvY2tpbmcpO1xuICB2YXIgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MgPSBCb29sZWFuKHByb3BzLnNob3VsZFJlc3BlY3RGb3JjZVByZXNzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJpdmF0ZURyYWdnYWJsZSwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgaXNDbG9uZTogZmFsc2UsXG4gICAgaXNFbmFibGVkOiBpc0VuYWJsZWQsXG4gICAgY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHM6IGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzLFxuICAgIHNob3VsZFJlc3BlY3RGb3JjZVByZXNzOiBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzc1xuICB9KSk7XG59XG5cbmZ1bmN0aW9uIERyb3BwYWJsZShwcm9wcykge1xuICB2YXIgYXBwQ29udGV4dCA9IHVzZUNvbnRleHQoQXBwQ29udGV4dCk7XG4gICFhcHBDb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ291bGQgbm90IGZpbmQgYXBwIGNvbnRleHQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBjb250ZXh0SWQgPSBhcHBDb250ZXh0LmNvbnRleHRJZCxcbiAgICAgIGlzTW92ZW1lbnRBbGxvd2VkID0gYXBwQ29udGV4dC5pc01vdmVtZW50QWxsb3dlZDtcbiAgdmFyIGRyb3BwYWJsZVJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIHBsYWNlaG9sZGVyUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGRyb3BwYWJsZUlkID0gcHJvcHMuZHJvcHBhYmxlSWQsXG4gICAgICB0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIG1vZGUgPSBwcm9wcy5tb2RlLFxuICAgICAgZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgaWdub3JlQ29udGFpbmVyQ2xpcHBpbmcgPSBwcm9wcy5pZ25vcmVDb250YWluZXJDbGlwcGluZyxcbiAgICAgIGlzRHJvcERpc2FibGVkID0gcHJvcHMuaXNEcm9wRGlzYWJsZWQsXG4gICAgICBpc0NvbWJpbmVFbmFibGVkID0gcHJvcHMuaXNDb21iaW5lRW5hYmxlZCxcbiAgICAgIHNuYXBzaG90ID0gcHJvcHMuc25hcHNob3QsXG4gICAgICB1c2VDbG9uZSA9IHByb3BzLnVzZUNsb25lLFxuICAgICAgdXBkYXRlVmlld3BvcnRNYXhTY3JvbGwgPSBwcm9wcy51cGRhdGVWaWV3cG9ydE1heFNjcm9sbCxcbiAgICAgIGdldENvbnRhaW5lckZvckNsb25lID0gcHJvcHMuZ2V0Q29udGFpbmVyRm9yQ2xvbmU7XG4gIHZhciBnZXREcm9wcGFibGVSZWYgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRyb3BwYWJsZVJlZi5jdXJyZW50O1xuICB9LCBbXSk7XG4gIHZhciBzZXREcm9wcGFibGVSZWYgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBkcm9wcGFibGVSZWYuY3VycmVudCA9IHZhbHVlO1xuICB9LCBbXSk7XG4gIHZhciBnZXRQbGFjZWhvbGRlclJlZiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcGxhY2Vob2xkZXJSZWYuY3VycmVudDtcbiAgfSwgW10pO1xuICB2YXIgc2V0UGxhY2Vob2xkZXJSZWYgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBwbGFjZWhvbGRlclJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH0sIFtdKTtcbiAgdXNlVmFsaWRhdGlvbih7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIGdldERyb3BwYWJsZVJlZjogZ2V0RHJvcHBhYmxlUmVmLFxuICAgIGdldFBsYWNlaG9sZGVyUmVmOiBnZXRQbGFjZWhvbGRlclJlZlxuICB9KTtcbiAgdmFyIG9uUGxhY2Vob2xkZXJUcmFuc2l0aW9uRW5kID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc01vdmVtZW50QWxsb3dlZCgpKSB7XG4gICAgICB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbCh7XG4gICAgICAgIG1heFNjcm9sbDogZ2V0TWF4V2luZG93U2Nyb2xsKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2lzTW92ZW1lbnRBbGxvd2VkLCB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbF0pO1xuICB1c2VEcm9wcGFibGVQdWJsaXNoZXIoe1xuICAgIGRyb3BwYWJsZUlkOiBkcm9wcGFibGVJZCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIG1vZGU6IG1vZGUsXG4gICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgaXNEcm9wRGlzYWJsZWQ6IGlzRHJvcERpc2FibGVkLFxuICAgIGlzQ29tYmluZUVuYWJsZWQ6IGlzQ29tYmluZUVuYWJsZWQsXG4gICAgaWdub3JlQ29udGFpbmVyQ2xpcHBpbmc6IGlnbm9yZUNvbnRhaW5lckNsaXBwaW5nLFxuICAgIGdldERyb3BwYWJsZVJlZjogZ2V0RHJvcHBhYmxlUmVmXG4gIH0pO1xuICB2YXIgcGxhY2Vob2xkZXIgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEFuaW1hdGVJbk91dCwge1xuICAgIG9uOiBwcm9wcy5wbGFjZWhvbGRlcixcbiAgICBzaG91bGRBbmltYXRlOiBwcm9wcy5zaG91bGRBbmltYXRlUGxhY2Vob2xkZXJcbiAgfSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgb25DbG9zZSA9IF9yZWYub25DbG9zZSxcbiAgICAgICAgZGF0YSA9IF9yZWYuZGF0YSxcbiAgICAgICAgYW5pbWF0ZSA9IF9yZWYuYW5pbWF0ZTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQbGFjZWhvbGRlciQxLCB7XG4gICAgICBwbGFjZWhvbGRlcjogZGF0YSxcbiAgICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgICBpbm5lclJlZjogc2V0UGxhY2Vob2xkZXJSZWYsXG4gICAgICBhbmltYXRlOiBhbmltYXRlLFxuICAgICAgY29udGV4dElkOiBjb250ZXh0SWQsXG4gICAgICBvblRyYW5zaXRpb25FbmQ6IG9uUGxhY2Vob2xkZXJUcmFuc2l0aW9uRW5kXG4gICAgfSk7XG4gIH0pO1xuICB2YXIgcHJvdmlkZWQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5uZXJSZWY6IHNldERyb3BwYWJsZVJlZixcbiAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgIGRyb3BwYWJsZVByb3BzOiB7XG4gICAgICAgICdkYXRhLXJiZC1kcm9wcGFibGUtaWQnOiBkcm9wcGFibGVJZCxcbiAgICAgICAgJ2RhdGEtcmJkLWRyb3BwYWJsZS1jb250ZXh0LWlkJzogY29udGV4dElkXG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2NvbnRleHRJZCwgZHJvcHBhYmxlSWQsIHBsYWNlaG9sZGVyLCBzZXREcm9wcGFibGVSZWZdKTtcbiAgdmFyIGlzVXNpbmdDbG9uZUZvciA9IHVzZUNsb25lID8gdXNlQ2xvbmUuZHJhZ2dpbmcuZHJhZ2dhYmxlSWQgOiBudWxsO1xuICB2YXIgZHJvcHBhYmxlQ29udGV4dCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkcm9wcGFibGVJZDogZHJvcHBhYmxlSWQsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgaXNVc2luZ0Nsb25lRm9yOiBpc1VzaW5nQ2xvbmVGb3JcbiAgICB9O1xuICB9LCBbZHJvcHBhYmxlSWQsIGlzVXNpbmdDbG9uZUZvciwgdHlwZV0pO1xuXG4gIGZ1bmN0aW9uIGdldENsb25lKCkge1xuICAgIGlmICghdXNlQ2xvbmUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBkcmFnZ2luZyA9IHVzZUNsb25lLmRyYWdnaW5nLFxuICAgICAgICByZW5kZXIgPSB1c2VDbG9uZS5yZW5kZXI7XG4gICAgdmFyIG5vZGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFByaXZhdGVEcmFnZ2FibGUsIHtcbiAgICAgIGRyYWdnYWJsZUlkOiBkcmFnZ2luZy5kcmFnZ2FibGVJZCxcbiAgICAgIGluZGV4OiBkcmFnZ2luZy5zb3VyY2UuaW5kZXgsXG4gICAgICBpc0Nsb25lOiB0cnVlLFxuICAgICAgaXNFbmFibGVkOiB0cnVlLFxuICAgICAgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3M6IGZhbHNlLFxuICAgICAgY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHM6IHRydWVcbiAgICB9LCBmdW5jdGlvbiAoZHJhZ2dhYmxlUHJvdmlkZWQsIGRyYWdnYWJsZVNuYXBzaG90KSB7XG4gICAgICByZXR1cm4gcmVuZGVyKGRyYWdnYWJsZVByb3ZpZGVkLCBkcmFnZ2FibGVTbmFwc2hvdCwgZHJhZ2dpbmcpO1xuICAgIH0pO1xuICAgIHJldHVybiBSZWFjdERPTS5jcmVhdGVQb3J0YWwobm9kZSwgZ2V0Q29udGFpbmVyRm9yQ2xvbmUoKSk7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wcGFibGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRyb3BwYWJsZUNvbnRleHRcbiAgfSwgY2hpbGRyZW4ocHJvdmlkZWQsIHNuYXBzaG90KSwgZ2V0Q2xvbmUoKSk7XG59XG5cbnZhciBpc01hdGNoaW5nVHlwZSA9IGZ1bmN0aW9uIGlzTWF0Y2hpbmdUeXBlKHR5cGUsIGNyaXRpY2FsKSB7XG4gIHJldHVybiB0eXBlID09PSBjcml0aWNhbC5kcm9wcGFibGUudHlwZTtcbn07XG5cbnZhciBnZXREcmFnZ2FibGUgPSBmdW5jdGlvbiBnZXREcmFnZ2FibGUoY3JpdGljYWwsIGRpbWVuc2lvbnMpIHtcbiAgcmV0dXJuIGRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tjcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xufTtcblxudmFyIG1ha2VNYXBTdGF0ZVRvUHJvcHMkMSA9IGZ1bmN0aW9uIG1ha2VNYXBTdGF0ZVRvUHJvcHMoKSB7XG4gIHZhciBpZGxlV2l0aEFuaW1hdGlvbiA9IHtcbiAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICBzaG91bGRBbmltYXRlUGxhY2Vob2xkZXI6IHRydWUsXG4gICAgc25hcHNob3Q6IHtcbiAgICAgIGlzRHJhZ2dpbmdPdmVyOiBmYWxzZSxcbiAgICAgIGRyYWdnaW5nT3ZlcldpdGg6IG51bGwsXG4gICAgICBkcmFnZ2luZ0Zyb21UaGlzV2l0aDogbnVsbCxcbiAgICAgIGlzVXNpbmdQbGFjZWhvbGRlcjogZmFsc2VcbiAgICB9LFxuICAgIHVzZUNsb25lOiBudWxsXG4gIH07XG5cbiAgdmFyIGlkbGVXaXRob3V0QW5pbWF0aW9uID0gX2V4dGVuZHMoe30sIGlkbGVXaXRoQW5pbWF0aW9uLCB7XG4gICAgc2hvdWxkQW5pbWF0ZVBsYWNlaG9sZGVyOiBmYWxzZVxuICB9KTtcblxuICB2YXIgZ2V0RHJhZ2dhYmxlUnVicmljID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZGVzY3JpcHRvcikge1xuICAgIHJldHVybiB7XG4gICAgICBkcmFnZ2FibGVJZDogZGVzY3JpcHRvci5pZCxcbiAgICAgIHR5cGU6IGRlc2NyaXB0b3IudHlwZSxcbiAgICAgIHNvdXJjZToge1xuICAgICAgICBpbmRleDogZGVzY3JpcHRvci5pbmRleCxcbiAgICAgICAgZHJvcHBhYmxlSWQ6IGRlc2NyaXB0b3IuZHJvcHBhYmxlSWRcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgdmFyIGdldE1hcFByb3BzID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoaWQsIGlzRW5hYmxlZCwgaXNEcmFnZ2luZ092ZXJGb3JDb25zdW1lciwgaXNEcmFnZ2luZ092ZXJGb3JJbXBhY3QsIGRyYWdnaW5nLCByZW5kZXJDbG9uZSkge1xuICAgIHZhciBkcmFnZ2FibGVJZCA9IGRyYWdnaW5nLmRlc2NyaXB0b3IuaWQ7XG4gICAgdmFyIGlzSG9tZSA9IGRyYWdnaW5nLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWQgPT09IGlkO1xuXG4gICAgaWYgKGlzSG9tZSkge1xuICAgICAgdmFyIHVzZUNsb25lID0gcmVuZGVyQ2xvbmUgPyB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyQ2xvbmUsXG4gICAgICAgIGRyYWdnaW5nOiBnZXREcmFnZ2FibGVSdWJyaWMoZHJhZ2dpbmcuZGVzY3JpcHRvcilcbiAgICAgIH0gOiBudWxsO1xuICAgICAgdmFyIF9zbmFwc2hvdCA9IHtcbiAgICAgICAgaXNEcmFnZ2luZ092ZXI6IGlzRHJhZ2dpbmdPdmVyRm9yQ29uc3VtZXIsXG4gICAgICAgIGRyYWdnaW5nT3ZlcldpdGg6IGlzRHJhZ2dpbmdPdmVyRm9yQ29uc3VtZXIgPyBkcmFnZ2FibGVJZCA6IG51bGwsXG4gICAgICAgIGRyYWdnaW5nRnJvbVRoaXNXaXRoOiBkcmFnZ2FibGVJZCxcbiAgICAgICAgaXNVc2luZ1BsYWNlaG9sZGVyOiB0cnVlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGxhY2Vob2xkZXI6IGRyYWdnaW5nLnBsYWNlaG9sZGVyLFxuICAgICAgICBzaG91bGRBbmltYXRlUGxhY2Vob2xkZXI6IGZhbHNlLFxuICAgICAgICBzbmFwc2hvdDogX3NuYXBzaG90LFxuICAgICAgICB1c2VDbG9uZTogdXNlQ2xvbmVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCFpc0VuYWJsZWQpIHtcbiAgICAgIHJldHVybiBpZGxlV2l0aG91dEFuaW1hdGlvbjtcbiAgICB9XG5cbiAgICBpZiAoIWlzRHJhZ2dpbmdPdmVyRm9ySW1wYWN0KSB7XG4gICAgICByZXR1cm4gaWRsZVdpdGhBbmltYXRpb247XG4gICAgfVxuXG4gICAgdmFyIHNuYXBzaG90ID0ge1xuICAgICAgaXNEcmFnZ2luZ092ZXI6IGlzRHJhZ2dpbmdPdmVyRm9yQ29uc3VtZXIsXG4gICAgICBkcmFnZ2luZ092ZXJXaXRoOiBkcmFnZ2FibGVJZCxcbiAgICAgIGRyYWdnaW5nRnJvbVRoaXNXaXRoOiBudWxsLFxuICAgICAgaXNVc2luZ1BsYWNlaG9sZGVyOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgcGxhY2Vob2xkZXI6IGRyYWdnaW5nLnBsYWNlaG9sZGVyLFxuICAgICAgc2hvdWxkQW5pbWF0ZVBsYWNlaG9sZGVyOiB0cnVlLFxuICAgICAgc25hcHNob3Q6IHNuYXBzaG90LFxuICAgICAgdXNlQ2xvbmU6IG51bGxcbiAgICB9O1xuICB9KTtcblxuICB2YXIgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICB2YXIgaWQgPSBvd25Qcm9wcy5kcm9wcGFibGVJZDtcbiAgICB2YXIgdHlwZSA9IG93blByb3BzLnR5cGU7XG4gICAgdmFyIGlzRW5hYmxlZCA9ICFvd25Qcm9wcy5pc0Ryb3BEaXNhYmxlZDtcbiAgICB2YXIgcmVuZGVyQ2xvbmUgPSBvd25Qcm9wcy5yZW5kZXJDbG9uZTtcblxuICAgIGlmIChzdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICB2YXIgY3JpdGljYWwgPSBzdGF0ZS5jcml0aWNhbDtcblxuICAgICAgaWYgKCFpc01hdGNoaW5nVHlwZSh0eXBlLCBjcml0aWNhbCkpIHtcbiAgICAgICAgcmV0dXJuIGlkbGVXaXRob3V0QW5pbWF0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgZHJhZ2dpbmcgPSBnZXREcmFnZ2FibGUoY3JpdGljYWwsIHN0YXRlLmRpbWVuc2lvbnMpO1xuICAgICAgdmFyIGlzRHJhZ2dpbmdPdmVyID0gd2hhdElzRHJhZ2dlZE92ZXIoc3RhdGUuaW1wYWN0KSA9PT0gaWQ7XG4gICAgICByZXR1cm4gZ2V0TWFwUHJvcHMoaWQsIGlzRW5hYmxlZCwgaXNEcmFnZ2luZ092ZXIsIGlzRHJhZ2dpbmdPdmVyLCBkcmFnZ2luZywgcmVuZGVyQ2xvbmUpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RST1BfQU5JTUFUSU5HJykge1xuICAgICAgdmFyIGNvbXBsZXRlZCA9IHN0YXRlLmNvbXBsZXRlZDtcblxuICAgICAgaWYgKCFpc01hdGNoaW5nVHlwZSh0eXBlLCBjb21wbGV0ZWQuY3JpdGljYWwpKSB7XG4gICAgICAgIHJldHVybiBpZGxlV2l0aG91dEFuaW1hdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIF9kcmFnZ2luZyA9IGdldERyYWdnYWJsZShjb21wbGV0ZWQuY3JpdGljYWwsIHN0YXRlLmRpbWVuc2lvbnMpO1xuXG4gICAgICByZXR1cm4gZ2V0TWFwUHJvcHMoaWQsIGlzRW5hYmxlZCwgd2hhdElzRHJhZ2dlZE92ZXJGcm9tUmVzdWx0KGNvbXBsZXRlZC5yZXN1bHQpID09PSBpZCwgd2hhdElzRHJhZ2dlZE92ZXIoY29tcGxldGVkLmltcGFjdCkgPT09IGlkLCBfZHJhZ2dpbmcsIHJlbmRlckNsb25lKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdJRExFJyAmJiBzdGF0ZS5jb21wbGV0ZWQgJiYgIXN0YXRlLnNob3VsZEZsdXNoKSB7XG4gICAgICB2YXIgX2NvbXBsZXRlZCA9IHN0YXRlLmNvbXBsZXRlZDtcblxuICAgICAgaWYgKCFpc01hdGNoaW5nVHlwZSh0eXBlLCBfY29tcGxldGVkLmNyaXRpY2FsKSkge1xuICAgICAgICByZXR1cm4gaWRsZVdpdGhvdXRBbmltYXRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciB3YXNPdmVyID0gd2hhdElzRHJhZ2dlZE92ZXIoX2NvbXBsZXRlZC5pbXBhY3QpID09PSBpZDtcbiAgICAgIHZhciB3YXNDb21iaW5pbmcgPSBCb29sZWFuKF9jb21wbGV0ZWQuaW1wYWN0LmF0ICYmIF9jb21wbGV0ZWQuaW1wYWN0LmF0LnR5cGUgPT09ICdDT01CSU5FJyk7XG4gICAgICB2YXIgaXNIb21lID0gX2NvbXBsZXRlZC5jcml0aWNhbC5kcm9wcGFibGUuaWQgPT09IGlkO1xuXG4gICAgICBpZiAod2FzT3Zlcikge1xuICAgICAgICByZXR1cm4gd2FzQ29tYmluaW5nID8gaWRsZVdpdGhBbmltYXRpb24gOiBpZGxlV2l0aG91dEFuaW1hdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzSG9tZSkge1xuICAgICAgICByZXR1cm4gaWRsZVdpdGhBbmltYXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpZGxlV2l0aG91dEFuaW1hdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gaWRsZVdpdGhvdXRBbmltYXRpb247XG4gIH07XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufTtcbnZhciBtYXBEaXNwYXRjaFRvUHJvcHMkMSA9IHtcbiAgdXBkYXRlVmlld3BvcnRNYXhTY3JvbGw6IHVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsXG59O1xuXG5mdW5jdGlvbiBnZXRCb2R5KCkge1xuICAhZG9jdW1lbnQuYm9keSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2RvY3VtZW50LmJvZHkgaXMgbm90IHJlYWR5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbn1cblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgbW9kZTogJ3N0YW5kYXJkJyxcbiAgdHlwZTogJ0RFRkFVTFQnLFxuICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gIGlzRHJvcERpc2FibGVkOiBmYWxzZSxcbiAgaXNDb21iaW5lRW5hYmxlZDogZmFsc2UsXG4gIGlnbm9yZUNvbnRhaW5lckNsaXBwaW5nOiBmYWxzZSxcbiAgcmVuZGVyQ2xvbmU6IG51bGwsXG4gIGdldENvbnRhaW5lckZvckNsb25lOiBnZXRCb2R5XG59O1xudmFyIENvbm5lY3RlZERyb3BwYWJsZSA9IGNvbm5lY3QobWFrZU1hcFN0YXRlVG9Qcm9wcyQxLCBtYXBEaXNwYXRjaFRvUHJvcHMkMSwgbnVsbCwge1xuICBjb250ZXh0OiBTdG9yZUNvbnRleHQsXG4gIHB1cmU6IHRydWUsXG4gIGFyZVN0YXRlUHJvcHNFcXVhbDogaXNTdHJpY3RFcXVhbFxufSkoRHJvcHBhYmxlKTtcbkNvbm5lY3RlZERyb3BwYWJsZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCB7IERyYWdEcm9wQ29udGV4dCwgUHVibGljRHJhZ2dhYmxlIGFzIERyYWdnYWJsZSwgQ29ubmVjdGVkRHJvcHBhYmxlIGFzIERyb3BwYWJsZSwgcmVzZXRTZXJ2ZXJDb250ZXh0LCB1c2VLZXlib2FyZFNlbnNvciwgdXNlTW91c2VTZW5zb3IsIHVzZVRvdWNoU2Vuc29yIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNlxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7XG52YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNjtmdW5jdGlvbiB0KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgcjpjYXNlIHE6Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gdihhKXtyZXR1cm4gdChhKT09PW19ZXhwb3J0cy50eXBlT2Y9dDtleHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47XG5leHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXI7ZXhwb3J0cy5NZW1vPXE7ZXhwb3J0cy5Qb3J0YWw9ZDtleHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09cXx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bil9O2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSl8fHQoYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9djtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09a307XG5leHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1yfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXF9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWZ9O1xuZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cH07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImV4cG9ydCB2YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTsiLCJ2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBjYW5Vc2VET00gfSBmcm9tICcuL3V0aWxzJztcblxudmFyIFBvcnRhbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUG9ydGFsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUG9ydGFsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUG9ydGFsLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5kZWZhdWx0Tm9kZSkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuZGVmYXVsdE5vZGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5kZWZhdWx0Tm9kZSA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgaWYgKCFjYW5Vc2VET00pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMucHJvcHMubm9kZSAmJiAhdGhpcy5kZWZhdWx0Tm9kZSkge1xuICAgICAgICB0aGlzLmRlZmF1bHROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5kZWZhdWx0Tm9kZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKHRoaXMucHJvcHMuY2hpbGRyZW4sIHRoaXMucHJvcHMubm9kZSB8fCB0aGlzLmRlZmF1bHROb2RlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9ydGFsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qb3J0YWwucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgbm9kZTogUHJvcFR5cGVzLmFueVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9ydGFsOyIsInZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLy8gVGhpcyBmaWxlIGlzIGEgZmFsbGJhY2sgZm9yIGEgY29uc3VtZXIgd2hvIGlzIG5vdCB5ZXQgb24gUmVhY3QgMTZcbi8vIGFzIGNyZWF0ZVBvcnRhbCB3YXMgaW50cm9kdWNlZCBpbiBSZWFjdCAxNlxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG52YXIgUG9ydGFsID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvcnRhbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9ydGFsKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3J0YWwpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQb3J0YWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3J0YWwpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb3J0YWwsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucmVuZGVyUG9ydGFsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByb3BzKSB7XG4gICAgICB0aGlzLnJlbmRlclBvcnRhbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMuZGVmYXVsdE5vZGUgfHwgdGhpcy5wcm9wcy5ub2RlKTtcbiAgICAgIGlmICh0aGlzLmRlZmF1bHROb2RlKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5kZWZhdWx0Tm9kZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmRlZmF1bHROb2RlID0gbnVsbDtcbiAgICAgIHRoaXMucG9ydGFsID0gbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJQb3J0YWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJQb3J0YWwocHJvcHMpIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5ub2RlICYmICF0aGlzLmRlZmF1bHROb2RlKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmRlZmF1bHROb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2ppbWZiL2Q5OWUwNjc4ZTlkYTcxNWNjZjY0NTQ5NjFlZjA0ZDFiXG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuY2hpbGRyZW4udHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjaGlsZHJlbiA9IFJlYWN0LmNsb25lRWxlbWVudCh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3J0YWwgPSBSZWFjdERPTS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcih0aGlzLCBjaGlsZHJlbiwgdGhpcy5wcm9wcy5ub2RlIHx8IHRoaXMuZGVmYXVsdE5vZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb3J0YWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDtcblxuXG5Qb3J0YWwucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgbm9kZTogUHJvcFR5cGVzLmFueVxufTsiLCJpbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuaW1wb3J0IFBvcnRhbHY0IGZyb20gJy4vUG9ydGFsJztcbmltcG9ydCBMZWdhY3lQb3J0YWwgZnJvbSAnLi9MZWdhY3lQb3J0YWwnO1xuXG52YXIgUG9ydGFsID0gdm9pZCAwO1xuXG5pZiAoUmVhY3RET00uY3JlYXRlUG9ydGFsKSB7XG4gIFBvcnRhbCA9IFBvcnRhbHY0O1xufSBlbHNlIHtcbiAgUG9ydGFsID0gTGVnYWN5UG9ydGFsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7IiwidmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi9Qb3J0YWxDb21wYXQnO1xuXG52YXIgS0VZQ09ERVMgPSB7XG4gIEVTQ0FQRTogMjdcbn07XG5cbnZhciBQb3J0YWxXaXRoU3RhdGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9ydGFsV2l0aFN0YXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3J0YWxXaXRoU3RhdGUocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsV2l0aFN0YXRlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQb3J0YWxXaXRoU3RhdGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3J0YWxXaXRoU3RhdGUpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5wb3J0YWxOb2RlID0gbnVsbDtcbiAgICBfdGhpcy5zdGF0ZSA9IHsgYWN0aXZlOiAhIXByb3BzLmRlZmF1bHRPcGVuIH07XG4gICAgX3RoaXMub3BlblBvcnRhbCA9IF90aGlzLm9wZW5Qb3J0YWwuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuY2xvc2VQb3J0YWwgPSBfdGhpcy5jbG9zZVBvcnRhbC5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy53cmFwV2l0aFBvcnRhbCA9IF90aGlzLndyYXBXaXRoUG9ydGFsLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZU91dHNpZGVNb3VzZUNsaWNrID0gX3RoaXMuaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2suYmluZChfdGhpcyk7XG4gICAgX3RoaXMuaGFuZGxlS2V5ZG93biA9IF90aGlzLmhhbmRsZUtleWRvd24uYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvcnRhbFdpdGhTdGF0ZSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuY2xvc2VPbkVzYykge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlkb3duKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25PdXRzaWRlQ2xpY2spIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVNb3VzZUNsaWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuY2xvc2VPbkVzYykge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlkb3duKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25PdXRzaWRlQ2xpY2spIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVNb3VzZUNsaWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcGVuUG9ydGFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlblBvcnRhbChlKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGUgJiYgZS5uYXRpdmVFdmVudCkge1xuICAgICAgICBlLm5hdGl2ZUV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZTogdHJ1ZSB9LCB0aGlzLnByb3BzLm9uT3Blbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2xvc2VQb3J0YWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZVBvcnRhbCgpIHtcbiAgICAgIGlmICghdGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZTogZmFsc2UgfSwgdGhpcy5wcm9wcy5vbkNsb3NlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd3cmFwV2l0aFBvcnRhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyYXBXaXRoUG9ydGFsKGNoaWxkcmVuKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLnN0YXRlLmFjdGl2ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBQb3J0YWwsXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlOiB0aGlzLnByb3BzLm5vZGUsXG4gICAgICAgICAga2V5OiAncmVhY3QtcG9ydGFsJyxcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihwb3J0YWxOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLnBvcnRhbE5vZGUgPSBwb3J0YWxOb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVPdXRzaWRlTW91c2VDbGljayhlKSB7XG4gICAgICBpZiAoIXRoaXMuc3RhdGUuYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciByb290ID0gdGhpcy5wb3J0YWxOb2RlICYmICh0aGlzLnBvcnRhbE5vZGUucHJvcHMubm9kZSB8fCB0aGlzLnBvcnRhbE5vZGUuZGVmYXVsdE5vZGUpO1xuICAgICAgaWYgKCFyb290IHx8IHJvb3QuY29udGFpbnMoZS50YXJnZXQpIHx8IGUuYnV0dG9uICYmIGUuYnV0dG9uICE9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xvc2VQb3J0YWwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVLZXlkb3duJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlS2V5ZG93bihlKSB7XG4gICAgICBpZiAoZS5rZXlDb2RlID09PSBLRVlDT0RFUy5FU0NBUEUgJiYgdGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgdGhpcy5jbG9zZVBvcnRhbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHtcbiAgICAgICAgb3BlblBvcnRhbDogdGhpcy5vcGVuUG9ydGFsLFxuICAgICAgICBjbG9zZVBvcnRhbDogdGhpcy5jbG9zZVBvcnRhbCxcbiAgICAgICAgcG9ydGFsOiB0aGlzLndyYXBXaXRoUG9ydGFsLFxuICAgICAgICBpc09wZW46IHRoaXMuc3RhdGUuYWN0aXZlXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9ydGFsV2l0aFN0YXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qb3J0YWxXaXRoU3RhdGUucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGVmYXVsdE9wZW46IFByb3BUeXBlcy5ib29sLFxuICBub2RlOiBQcm9wVHlwZXMuYW55LFxuICBjbG9zZU9uRXNjOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2xvc2VPbk91dHNpZGVDbGljazogUHJvcFR5cGVzLmJvb2wsXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jXG59O1xuXG5Qb3J0YWxXaXRoU3RhdGUuZGVmYXVsdFByb3BzID0ge1xuICBvbk9wZW46IGZ1bmN0aW9uIG9uT3BlbigpIHt9LFxuICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKCkge31cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbFdpdGhTdGF0ZTsiXSwibmFtZXMiOlsiYmFzZUZvck93biIsImJhc2VFYWNoIiwiY3JlYXRlQmFzZUVhY2giLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNBcnJheUxpa2UiLCJiYXNlTWFwIiwiY29sbGVjdGlvbiIsIml0ZXJhdGVlIiwiaW5kZXgiLCJyZXN1bHQiLCJBcnJheSIsImxlbmd0aCIsInZhbHVlIiwia2V5IiwiYXJyYXlNYXAiLCJiYXNlR2V0IiwiYmFzZUl0ZXJhdGVlIiwiYmFzZVNvcnRCeSIsImJhc2VVbmFyeSIsImNvbXBhcmVNdWx0aXBsZSIsImlkZW50aXR5IiwiaXNBcnJheSIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwib2JqZWN0Iiwib3RoZXIiLCJhcnJheSIsImNvbXBhcmVyIiwic29ydCIsImlzU3ltYm9sIiwiY29tcGFyZUFzY2VuZGluZyIsInZhbElzRGVmaW5lZCIsInVuZGVmaW5lZCIsInZhbElzTnVsbCIsInZhbElzUmVmbGV4aXZlIiwidmFsSXNTeW1ib2wiLCJvdGhJc0RlZmluZWQiLCJvdGhJc051bGwiLCJvdGhJc1JlZmxleGl2ZSIsIm90aElzU3ltYm9sIiwib2JqQ3JpdGVyaWEiLCJjcml0ZXJpYSIsIm90aENyaXRlcmlhIiwib3JkZXJzTGVuZ3RoIiwiZWFjaEZ1bmMiLCJmcm9tUmlnaHQiLCJpdGVyYWJsZSIsIk9iamVjdCIsImlzT2JqZWN0Iiwibm93IiwidG9OdW1iZXIiLCJuYXRpdmVNYXgiLCJNYXRoIiwibWF4IiwibmF0aXZlTWluIiwibWluIiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsIm9wdGlvbnMiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJ0cmFpbGluZyIsIlR5cGVFcnJvciIsImludm9rZUZ1bmMiLCJ0aW1lIiwiYXJncyIsInRoaXNBcmciLCJhcHBseSIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZXJFeHBpcmVkIiwidHJhaWxpbmdFZGdlIiwic2V0VGltZW91dCIsInJlbWFpbmluZ1dhaXQiLCJ0aW1lV2FpdGluZyIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJhcmd1bWVudHMiLCJ0aGlzIiwibGVhZGluZ0VkZ2UiLCJjbGVhclRpbWVvdXQiLCJjYW5jZWwiLCJmbHVzaCIsInJvb3QiLCJEYXRlIiwib3JkZXJCeSIsImd1YXJkIiwiX3NldFByb3RvdHlwZU9mIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiY29kZSIsIiQkb2JzZXJ2YWJsZSIsIlN5bWJvbCIsIm9ic2VydmFibGUiLCJyYW5kb21TdHJpbmciLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsInNwbGl0Iiwiam9pbiIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJvYmoiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiRXJyb3IiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJzbGljZSIsImdldFN0YXRlIiwic3Vic2NyaWJlIiwibGlzdGVuZXIiLCJpc1N1YnNjcmliZWQiLCJwdXNoIiwidW5zdWJzY3JpYmUiLCJpbmRleE9mIiwic3BsaWNlIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJ0eXBlIiwibGlzdGVuZXJzIiwiaSIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsIm5leHQiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJjb21wb3NlIiwiX2xlbiIsImZ1bmNzIiwiX2tleSIsImFyZyIsInJlZHVjZSIsImEiLCJiIiwiYmF0Y2giLCJkZWZhdWx0Tm9vcEJhdGNoIiwiY2FsbGJhY2siLCJnZXRCYXRjaCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJnZXQiLCJzdG9yZSIsInBhcmVudFN1YiIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJzdWJzY3JpcHRpb24iLCJvblN0YXRlQ2hhbmdlIiwidHJ5U3Vic2NyaWJlIiwiYWRkTmVzdGVkU3ViIiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwiZmlyc3QiLCJsYXN0IiwiY2xlYXIiLCJwcmV2Iiwibm90aWZ5TmVzdGVkU3VicyIsIkJvb2xlYW4iLCJ0cnlVbnN1YnNjcmliZSIsImdldExpc3RlbmVycyIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInVzZUxheW91dEVmZmVjdCIsInVzZUVmZmVjdCIsIlByb3ZpZGVyIiwiY29udGV4dCIsImNoaWxkcmVuIiwiY29udGV4dFZhbHVlIiwidXNlTWVtbyIsInByZXZpb3VzU3RhdGUiLCJDb250ZXh0IiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsIkVNUFRZX0FSUkFZIiwiTk9fU1VCU0NSSVBUSU9OX0FSUkFZIiwic3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyIiwic3RhdGUiLCJ1cGRhdGVDb3VudCIsInBheWxvYWQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MiLCJlZmZlY3RGdW5jIiwiZWZmZWN0QXJncyIsImRlcGVuZGVuY2llcyIsImNhcHR1cmVXcmFwcGVyUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwibGFzdENoaWxkUHJvcHMiLCJyZW5kZXJJc1NjaGVkdWxlZCIsIndyYXBwZXJQcm9wcyIsImFjdHVhbENoaWxkUHJvcHMiLCJjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlIiwiY3VycmVudCIsInN1YnNjcmliZVVwZGF0ZXMiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJjaGlsZFByb3BzU2VsZWN0b3IiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwiZGlkVW5zdWJzY3JpYmUiLCJsYXN0VGhyb3duRXJyb3IiLCJjaGVja0ZvclVwZGF0ZXMiLCJuZXdDaGlsZFByb3BzIiwiZXJyb3IiLCJsYXRlc3RTdG9yZVN0YXRlIiwiZSIsInVuc3Vic2NyaWJlV3JhcHBlciIsImluaXRTdGF0ZVVwZGF0ZXMiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwibmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJGZvcndhcmRSZWYiLCJ3aXRoUmVmIiwiZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIndyYXBXaXRoQ29ubmVjdCIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsImRpc3BsYXlOYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsInB1cmUiLCJ1c2VQdXJlT25seU1lbW8iLCJDb25uZWN0RnVuY3Rpb24iLCJwcm9wcyIsIl91c2VNZW1vIiwicmVhY3RSZWR1eEZvcndhcmRlZFJlZiIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsIkNvbnN1bWVyIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJ1c2VDb250ZXh0IiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsImJpbmQiLCJvdmVycmlkZGVuQ29udGV4dFZhbHVlIiwiX3VzZVJlZHVjZXIiLCJ1c2VSZWR1Y2VyIiwicHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCIsInVzZVJlZiIsInJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCIsInJlZiIsIkNvbm5lY3QiLCJmb3J3YXJkZWQiLCJmb3J3YXJkQ29ubmVjdFJlZiIsImlzIiwieCIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5cyIsImtleXNCIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50IiwiaW5pdENvbnN0YW50U2VsZWN0b3IiLCJjb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsImluaXRQcm94eVNlbGVjdG9yIiwicHJveHkiLCJtYXBUb1Byb3BzUHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImRldGVjdEZhY3RvcnlBbmRWZXJpZnkiLCJ3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIndoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmciLCJ3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QiLCJfbG9vcCIsIndoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIiwibWFwU3RhdGVUb1Byb3BzIiwid2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJ3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24iLCJtZXJnZVByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW5pdE1lcmdlUHJvcHNQcm94eSIsIm1lcmdlZFByb3BzIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJtZXJnZVByb3BzUHJveHkiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZCIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3IiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dFN0YXRlIiwibmV4dE93blByb3BzIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSIsImhhbmRsZU5ld1Byb3BzIiwiaGFuZGxlTmV3U3RhdGUiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvciIsImhhbmRsZUZpcnN0Q2FsbCIsImZpcnN0U3RhdGUiLCJmaXJzdE93blByb3BzIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJtYXRjaCIsImZhY3RvcmllcyIsInN0cmljdEVxdWFsIiwiY3JlYXRlQ29ubmVjdCIsIl90ZW1wIiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsImNvbm5lY3QiLCJfcmVmMyIsIl9yZWYzJHB1cmUiLCJfcmVmMyRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYzJGFyZU93blByb3BzRXF1YSIsIl9yZWYzJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYzJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsInVzZU1lbW9PbmUiLCJnZXRSZXN1bHQiLCJpbnB1dHMiLCJpbml0aWFsIiwidXNlU3RhdGUiLCJpc0ZpcnN0UnVuIiwiY29tbWl0dGVkIiwiY2FjaGUiLCJhcmVJbnB1dHNFcXVhbCIsIm5ld0lucHV0cyIsImxhc3RJbnB1dHMiLCJzZXRCYXRjaCIsIm5ld0JhdGNoIiwidXNlQ2FsbGJhY2siLCJ1c2VDYWxsYmFja09uZSIsImludmFyaWFudCIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJnZXRSZWN0IiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJjZW50ZXIiLCJleHBhbmQiLCJ0YXJnZXQiLCJleHBhbmRCeSIsInNocmluayIsInNocmlua0J5Iiwibm9TcGFjaW5nIiwiY3JlYXRlQm94IiwiYm9yZGVyQm94IiwiX3JlZjIkbWFyZ2luIiwibWFyZ2luIiwiX3JlZjIkYm9yZGVyIiwiYm9yZGVyIiwiX3JlZjIkcGFkZGluZyIsInBhZGRpbmciLCJtYXJnaW5Cb3giLCJwYWRkaW5nQm94IiwiY29udGVudEJveCIsInBhcnNlIiwicmF3IiwiTnVtYmVyIiwiaXNOYU4iLCJvZmZzZXQiLCJvcmlnaW5hbCIsImNoYW5nZSIsInNoaWZ0ZWQiLCJzaGlmdCIsInNoaWZ0QnkiLCJ3aXRoU2Nyb2xsIiwic2Nyb2xsIiwiZ2V0V2luZG93U2Nyb2xsIiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsImNhbGN1bGF0ZUJveCIsInN0eWxlcyIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsImdldEJveCIsImVsIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm1lbW9pemVPbmUiLCJyZXN1bHRGbiIsImlzRXF1YWwiLCJsYXN0UmVzdWx0IiwiY2FsbGVkT25jZSIsIm1lbW9pemVkIiwibmV3QXJncyIsIl9pIiwicmFmU2NoZCIsImZuIiwiZnJhbWVJZCIsIndyYXBwZXJGbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwibG9nIiwibm9vcCIsImJpbmRFdmVudHMiLCJiaW5kaW5ncyIsInNoYXJlZE9wdGlvbnMiLCJ1bmJpbmRpbmdzIiwibWFwIiwiYmluZGluZyIsImdldE9wdGlvbnMiLCJzaGFyZWQiLCJmcm9tQmluZGluZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudE5hbWUiLCJ1bmJpbmQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidW5iaW5kQWxsIiwiZm9yRWFjaCIsImlzUHJvZHVjdGlvbiQxIiwiUmJkSW52YXJpYW50IiwiRXJyb3JCb3VuZGFyeSIsIl9SZWFjdCRDb21wb25lbnQiLCJfdGhpcyIsImNvbmNhdCIsImNhbGxiYWNrcyIsIm9uV2luZG93RXJyb3IiLCJldmVudCIsImdldENhbGxiYWNrcyIsImlzRHJhZ2dpbmciLCJ0cnlBYm9ydCIsInByZXZlbnREZWZhdWx0Iiwic2V0Q2FsbGJhY2tzIiwiX3Byb3RvIiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnREaWRDYXRjaCIsImVyciIsInNldFN0YXRlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW5kZXIiLCJwb3NpdGlvbiIsIndpdGhMb2NhdGlvbiIsInNvdXJjZSIsImRlc3RpbmF0aW9uIiwiaXNJbkhvbWVMaXN0IiwiZHJvcHBhYmxlSWQiLCJzdGFydFBvc2l0aW9uIiwiZW5kUG9zaXRpb24iLCJ3aXRoQ29tYmluZSIsImlkIiwiY29tYmluZSIsImRyYWdnYWJsZUlkIiwicmV0dXJuZWRUb1N0YXJ0IiwicHJlc2V0IiwiZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zIiwib25EcmFnU3RhcnQiLCJzdGFydCIsIm9uRHJhZ1VwZGF0ZSIsInVwZGF0ZSIsImxvY2F0aW9uIiwib25EcmFnRW5kIiwicmVhc29uIiwib3JpZ2luIiwiYWRkIiwicG9pbnQxIiwicG9pbnQyIiwic3VidHJhY3QiLCJuZWdhdGUiLCJwb2ludCIsInBhdGNoIiwibGluZSIsIm90aGVyVmFsdWUiLCJkaXN0YW5jZSIsInNxcnQiLCJwb3ciLCJjbG9zZXN0IiwicG9pbnRzIiwib2Zmc2V0QnlQb3NpdGlvbiIsInNwYWNpbmciLCJnZXRDb3JuZXJzIiwiY2xpcCIsImZyYW1lIiwic2hvdWxkQ2xpcFN1YmplY3QiLCJzdWJqZWN0IiwiZXhlY3V0ZUNsaXAiLCJwYWdlTWFyZ2luQm94IiwiZ2V0U3ViamVjdCIsInBhZ2UiLCJ3aXRoUGxhY2Vob2xkZXIiLCJheGlzIiwic2Nyb2xsZWQiLCJkaWZmIiwiZGlzcGxhY2VtZW50IiwiaW5jcmVhc2VkIiwiaW5jcmVhc2UiLCJfZXh0ZW5kczIiLCJpbmNyZWFzZWRCeSIsImVuZCIsImFjdGl2ZSIsInNjcm9sbERyb3BwYWJsZSIsImRyb3BwYWJsZSIsIm5ld1Njcm9sbCIsInNjcm9sbGFibGUiLCJzY3JvbGxEaWZmIiwic2Nyb2xsRGlzcGxhY2VtZW50IiwidmFsdWVzIiwiZmluZEluZGV4IiwibGlzdCIsInByZWRpY2F0ZSIsImZpbmQiLCJ0b0FycmF5IiwidG9Ecm9wcGFibGVNYXAiLCJkcm9wcGFibGVzIiwicHJldmlvdXMiLCJkZXNjcmlwdG9yIiwidG9EcmFnZ2FibGVNYXAiLCJkcmFnZ2FibGVzIiwidG9Ecm9wcGFibGVMaXN0IiwidG9EcmFnZ2FibGVMaXN0IiwiZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZSIsImZpbHRlciIsImRyYWdnYWJsZSIsInRyeUdldERlc3RpbmF0aW9uIiwiaW1wYWN0IiwiYXQiLCJ0cnlHZXRDb21iaW5lIiwicmVtb3ZlRHJhZ2dhYmxlRnJvbUxpc3QiLCJyZW1vdmUiLCJpdGVtIiwiaXNIb21lT2YiLCJub0Rpc3BsYWNlZEJ5IiwiZW1wdHlHcm91cHMiLCJpbnZpc2libGUiLCJ2aXNpYmxlIiwiYWxsIiwibm9JbXBhY3QiLCJkaXNwbGFjZWQiLCJkaXNwbGFjZWRCeSIsImlzV2l0aGluIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJpc1BhcnRpYWxseVZpc2libGVUaHJvdWdoRnJhbWUiLCJpc1dpdGhpblZlcnRpY2FsIiwiaXNXaXRoaW5Ib3Jpem9udGFsIiwiaXNQYXJ0aWFsbHlWaXNpYmxlVmVydGljYWxseSIsImlzUGFydGlhbGx5VmlzaWJsZUhvcml6b250YWxseSIsImlzQmlnZ2VyVmVydGljYWxseSIsImlzQmlnZ2VySG9yaXpvbnRhbGx5IiwiaXNUb3RhbGx5VmlzaWJsZVRocm91Z2hGcmFtZSIsInZlcnRpY2FsIiwiZGlyZWN0aW9uIiwiY3Jvc3NBeGlzTGluZSIsInNpemUiLCJjcm9zc0F4aXNTdGFydCIsImNyb3NzQXhpc0VuZCIsImNyb3NzQXhpc1NpemUiLCJob3Jpem9udGFsIiwiaXNWaXNpYmxlIiwidG9CZURpc3BsYWNlZCIsInZpZXdwb3J0Iiwid2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCIsImlzVmlzaWJsZVRocm91Z2hGcmFtZUZuIiwiZGlzcGxhY2VkVGFyZ2V0IiwiZ2V0RHJvcHBhYmxlRGlzcGxhY2VkIiwiaXNWaXNpYmxlSW5Ecm9wcGFibGUiLCJpc1Zpc2libGVJblZpZXdwb3J0IiwiaXNQYXJ0aWFsbHlWaXNpYmxlIiwiaXNUb3RhbGx5VmlzaWJsZSIsImdldFNob3VsZEFuaW1hdGUiLCJmb3JjZVNob3VsZEFuaW1hdGUiLCJzaG91bGRBbmltYXRlIiwiZ2V0RGlzcGxhY2VtZW50R3JvdXBzIiwiYWZ0ZXJEcmFnZ2luZyIsInByb2Nlc3MiLCJncm91cHMiLCJnZXRUYXJnZXQiLCJnb0F0RW5kIiwiaW5zaWRlRGVzdGluYXRpb24iLCJpbkhvbWVMaXN0IiwibmV3SW5kZXgiLCJnZXRJbmRleE9mTGFzdEl0ZW0iLCJpbmRleE9mTGFzdEl0ZW0iLCJjYWxjdWxhdGVSZW9yZGVySW1wYWN0Iiwid2l0aG91dERyYWdnaW5nIiwic2xpY2VGcm9tIiwiZGlkU3RhcnRBZnRlckNyaXRpY2FsIiwiYWZ0ZXJDcml0aWNhbCIsImVmZmVjdGVkIiwibW92ZVRvTmV4dEluZGV4IiwiaXNNb3ZpbmdGb3J3YXJkIiwicHJldmlvdXNJbXBhY3QiLCJ3YXNBdCIsIl9uZXdJbmRleCIsImN1cnJlbnRJbmRleCIsInByb3Bvc2VkSW5kZXgiLCJmaXJzdEluZGV4IiwibGFzdEluZGV4IiwiZnJvbVJlb3JkZXIiLCJpc0NvbWJpbmVFbmFibGVkIiwiY29tYmluZUlkIiwiY29tYmluZVdpdGhJbmRleCIsImZyb21Db21iaW5lIiwid2hlbkNvbWJpbmluZyIsImNvbWJpbmVXaXRoIiwiZGlzcGxhY2VCeSIsImlzRGlzcGxhY2VkIiwiZ2V0Q29tYmluZWRJdGVtRGlzcGxhY2VtZW50IiwiZGlzdGFuY2VGcm9tU3RhcnRUb0JvcmRlckJveENlbnRlciIsImJveCIsImdldENyb3NzQXhpc0JvcmRlckJveENlbnRlciIsImlzTW92aW5nIiwiZ29BZnRlciIsIm1vdmVSZWxhdGl2ZVRvIiwiZ29CZWZvcmUiLCJkaXN0YW5jZUZyb21FbmRUb0JvcmRlckJveENlbnRlciIsIndoZW5SZW9yZGVyaW5nIiwiZHJhZ2dhYmxlUGFnZSIsImdvSW50b1N0YXJ0IiwibW92ZUludG8iLCJjbG9zZXN0QWZ0ZXIiLCJ3aXRoRGlzcGxhY2VtZW50IiwiZ2V0UGFnZUJvcmRlckJveENlbnRlckZyb21JbXBhY3QiLCJ3aXRob3V0RGlzcGxhY2VtZW50IiwiZ2V0UmVzdWx0V2l0aG91dERyb3BwYWJsZURpc3BsYWNlbWVudCIsInNjcm9sbFZpZXdwb3J0IiwiZ2V0RHJhZ2dhYmxlcyIsImlkcyIsImdldENsaWVudEZyb21QYWdlQm9yZGVyQm94Q2VudGVyIiwicGFnZUJvcmRlckJveENlbnRlciIsIndpdGhvdXRQYWdlU2Nyb2xsQ2hhbmdlIiwid2l0aFZpZXdwb3J0RGlzcGxhY2VtZW50IiwiY2xpZW50IiwiaXNUb3RhbGx5VmlzaWJsZUluTmV3TG9jYXRpb24iLCJuZXdQYWdlQm9yZGVyQm94Q2VudGVyIiwiX3JlZiRvbmx5T25NYWluQXhpcyIsIm9ubHlPbk1haW5BeGlzIiwiY2hhbmdlTmVlZGVkIiwiaXNUb3RhbGx5VmlzaWJsZU9uQXhpcyIsIm1vdmVUb05leHRQbGFjZSIsInByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlciIsInByZXZpb3VzQ2xpZW50U2VsZWN0aW9uIiwiaXNFbmFibGVkIiwiZ2V0SW1wYWN0IiwiY2xvc2VzdElkIiwid2l0aG91dERyYWdnYWJsZSIsImluZGV4T2ZDbG9zZXN0IiwiZCIsIm1vdmVUb05leHRDb21iaW5lIiwiY2xpZW50U2VsZWN0aW9uIiwic2Nyb2xsSnVtcFJlcXVlc3QiLCJjYXV0aW91cyIsIm1heFNjcm9sbENoYW5nZSIsInNjcm9sbGVkVmlld3BvcnQiLCJzY3JvbGxlZERyb3BwYWJsZSIsIndpdGhWaWV3cG9ydFNjcm9sbCIsIndpdGhEcm9wcGFibGVTY3JvbGwiLCJ0cnlHZXRWaXNpYmxlIiwic3BlY3VsYXRpdmVseUluY3JlYXNlIiwiZ2V0S25vd25BY3RpdmUiLCJyZWN0IiwiZ2V0Q3VycmVudFBhZ2VCb3JkZXJCb3hDZW50ZXIiLCJnZXRDdXJyZW50UGFnZUJvcmRlckJveCIsImdldERpc3BsYWNlZEJ5Iiwid2l0aE1heFNjcm9sbCIsImFkZFBsYWNlaG9sZGVyIiwicGxhY2Vob2xkZXJTaXplIiwicmVxdWlyZWRHcm93dGgiLCJnZXRSZXF1aXJlZEdyb3d0aEZvclBsYWNlaG9sZGVyIiwibW9kZSIsImF2YWlsYWJsZVNwYWNlIiwibmVlZHNUb0dyb3dCeSIsInN1bSIsImRpbWVuc2lvbiIsImFkZGVkIiwib2xkRnJhbWVNYXhTY3JvbGwiLCJfc3ViamVjdCIsIm1heFNjcm9sbCIsIm5ld0ZyYW1lIiwibW92ZUNyb3NzQXhpcyIsImlzT3ZlciIsImlzQmV0d2VlblNvdXJjZUNsaXBwZWQiLCJjYW5kaWRhdGVzIiwiYWN0aXZlT2ZUYXJnZXQiLCJpc0JldHdlZW5EZXN0aW5hdGlvbkNsaXBwZWQiLCJzZWNvbmQiLCJjb250YWlucyIsImlzV2l0aGluRHJvcHBhYmxlIiwiZ2V0QmVzdENyb3NzQXhpc0Ryb3BwYWJsZSIsInNvcnRlZCIsImRpc3RhbmNlVG9BIiwiZGlzdGFuY2VUb0IiLCJnZXRDbG9zZXN0RHJhZ2dhYmxlIiwicHJvcG9zZWQiLCJwcm9wb3NlZFBhZ2VCb3JkZXJCb3hDZW50ZXIiLCJyZWxhdGl2ZVRvIiwiaXNHb2luZ0JlZm9yZVRhcmdldCIsIm1vdmVUb05ld0Ryb3BwYWJsZSIsIndoYXRJc0RyYWdnZWRPdmVyIiwibW92ZUluRGlyZWN0aW9uIiwiaXNBY3R1YWxseU92ZXIiLCJnZXREcm9wcGFibGVPdmVyIiwiZGltZW5zaW9ucyIsImlzTWFpbkF4aXNNb3ZlbWVudEFsbG93ZWQiLCJob21lIiwiY3JpdGljYWwiLCJpc01vdmluZ09uTWFpbkF4aXMiLCJib3JkZXJCb3hDZW50ZXIiLCJfc3RhdGUkZGltZW5zaW9ucyIsInNlbGVjdGlvbiIsImlzTW92ZW1lbnRBbGxvd2VkIiwicGhhc2UiLCJpc1Bvc2l0aW9uSW5GcmFtZSIsInJ1biIsImdldERyb3BwYWJsZU92ZXIkMSIsInBhZ2VCb3JkZXJCb3giLCJnZXRIYXNPdmVybGFwIiwiY2hpbGRDZW50ZXIiLCJpc0NvbnRhaW5lZCIsImlzU3RhcnRDb250YWluZWQiLCJpc0VuZENvbnRhaW5lZCIsImdldEZ1cnRoZXN0QXdheSIsInN0YXJ0Q2VudGVyIiwiY2FuZGlkYXRlIiwib2Zmc2V0UmVjdEJ5UG9zaXRpb24iLCJnZXRJc0Rpc3BsYWNlZCIsImdldERyYWdJbXBhY3QiLCJwYWdlT2Zmc2V0IiwiZGVzdGluYXRpb25JZCIsInBhZ2VCb3JkZXJCb3hXaXRoRHJvcHBhYmxlU2Nyb2xsIiwiYXJlYSIsInRhcmdldFJlY3QiLCJ0YXJnZXRTdGFydCIsInRhcmdldEVuZCIsImNoaWxkIiwiY2hpbGRSZWN0IiwidGhyZXNob2xkIiwiZGlkU3RhcnRBZnRlckNyaXRpY2FsJDEiLCJnZXRDb21iaW5lSW1wYWN0IiwiYXRJbmRleCIsImdldFJlb3JkZXJJbXBhY3QiLCJwYXRjaERyb3BwYWJsZU1hcCIsInVwZGF0ZWQiLCJjbGVhclVudXNlZFBsYWNlaG9sZGVyIiwibGFzdERyb3BwYWJsZSIsInJlbW92ZVBsYWNlaG9sZGVyIiwiX3N1YmplY3QyIiwib2xkTWF4U2Nyb2xsIiwiZm9yY2VkQ2xpZW50U2VsZWN0aW9uIiwiZm9yY2VkRGltZW5zaW9ucyIsImZvcmNlZFZpZXdwb3J0IiwiZm9yY2VkSW1wYWN0IiwibmV3SW1wYWN0Iiwid2l0aFVwZGF0ZWRQbGFjZWhvbGRlcnMiLCJjbGVhbmVkIiwicGF0Y2hlZCIsInJlY29tcHV0ZVBsYWNlaG9sZGVycyIsInJlY29tcHV0ZSIsImdldERyYWdnYWJsZXMkMSIsImdldENsaWVudEJvcmRlckJveENlbnRlciIsInJlZnJlc2hTbmFwIiwibW92ZW1lbnRNb2RlIiwibmVlZHNWaXNpYmlsaXR5Q2hlY2siLCJnZXRMaWZ0RWZmZWN0IiwiaW5zaWRlSG9tZSIsInJhd0luZGV4IiwiaW5WaXJ0dWFsTGlzdCIsImZpbmlzaCIsImFkanVzdEFkZGl0aW9uc0ZvclNjcm9sbENoYW5nZXMiLCJhZGRpdGlvbnMiLCJ1cGRhdGVkRHJvcHBhYmxlcyIsIndpbmRvd1Njcm9sbENoYW5nZSIsImdldEZyYW1lIiwiZHJvcHBhYmxlU2Nyb2xsQ2hhbmdlIiwibW92ZWQiLCJvZmZzZXQkMSIsImluaXRpYWxXaW5kb3dTY3JvbGwiLCJwbGFjZWhvbGRlciIsIm9mZnNldERyYWdnYWJsZSIsImlzU25hcHBpbmciLCJwb3N0RHJvcHBhYmxlQ2hhbmdlIiwiaXNFbmFibGVkQ2hhbmdpbmciLCJwYXRjaERpbWVuc2lvbk1hcCIsInJlbW92ZVNjcm9sbEp1bXBSZXF1ZXN0IiwiaWRsZSIsImNvbXBsZXRlZCIsInNob3VsZEZsdXNoIiwiX2FjdGlvbiRwYXlsb2FkIiwiaXNXaW5kb3dTY3JvbGxBbGxvd2VkIiwiZXZlcnkiLCJpc0ZpeGVkT25QYWdlIiwiX2dldExpZnRFZmZlY3QiLCJvbkxpZnRJbXBhY3QiLCJwdWJsaXNoZWQiLCJ3aXRoU2Nyb2xsQ2hhbmdlIiwibW9kaWZpZWQiLCJleGlzdGluZyIsInVwZGF0ZWRBZGRpdGlvbnMiLCJyZW1vdmFscyIsIndhc092ZXJJZCIsIndhc092ZXIiLCJkcmFnZ2luZ1N0YXRlIiwiaXNXYWl0aW5nIiwicHVibGlzaFdoaWxlRHJhZ2dpbmdJblZpcnR1YWwiLCJfY2xpZW50U2VsZWN0aW9uIiwiX2FjdGlvbiRwYXlsb2FkMiIsIl9hY3Rpb24kcGF5bG9hZDMiLCJfaWQiLCJfdGFyZ2V0IiwiX2FjdGlvbiRwYXlsb2FkNCIsIl9pZDIiLCJfdGFyZ2V0MiIsIl91cGRhdGVkIiwiX25ld1Njcm9sbCIsIl92aWV3cG9ydCIsIl9yZXN1bHQyIiwiX2FjdGlvbiRwYXlsb2FkNSIsImRyb3BEdXJhdGlvbiIsIm5ld0hvbWVDbGllbnRPZmZzZXQiLCJsaWZ0IiwicHVibGlzaFdoaWxlRHJhZ2dpbmciLCJjb2xsZWN0aW9uU3RhcnRpbmciLCJ1cGRhdGVEcm9wcGFibGVTY3JvbGwiLCJ1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQiLCJ1cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkIiwibW92ZSIsIm1vdmVVcCIsIm1vdmVEb3duIiwibW92ZVJpZ2h0IiwibW92ZUxlZnQiLCJjb21wbGV0ZURyb3AiLCJkcm9wIiwiZHJvcEFuaW1hdGlvbkZpbmlzaGVkIiwiY3VydmVzIiwiY29tYmluaW5nIiwib3V0T2ZUaGVXYXlUaW1pbmciLCJ0cmFuc2l0aW9ucyIsImZsdWlkIiwic25hcCIsImR1cmF0aW9uIiwidGltaW5nIiwib3V0T2ZUaGVXYXkiLCJtb3ZlVG8iLCJ0cmFuc2Zvcm1zIiwiaXNDb21iaW5pbmciLCJ0cmFuc2xhdGUiLCJtaW5Ecm9wVGltZSIsIm1heERyb3BUaW1lIiwiZHJvcFRpbWVSYW5nZSIsImRyb3AkMSIsIl9nZXREcm9wSW1wYWN0IiwibGFzdEltcGFjdCIsImRpZERyb3BJbnNpZGVEcm9wcGFibGUiLCJnZXREcm9wSW1wYWN0IiwibmV3Q2xpZW50Q2VudGVyIiwiZ2V0TmV3SG9tZUNsaWVudE9mZnNldCIsImRpc3RhbmNlJDEiLCJ0b0ZpeGVkIiwiZ2V0RHJvcER1cmF0aW9uIiwiYW5pbWF0ZURyb3AiLCJkcm9wUGVuZGluZyIsImdldFNjcm9sbExpc3RlbmVyIiwib25XaW5kb3dTY3JvbGwiLCJzY2hlZHVsZWQiLCJ1cGRhdGVTY3JvbGwiLCJnZXRXaW5kb3dTY3JvbGxCaW5kaW5nIiwicGFzc2l2ZSIsImNhcHR1cmUiLCJpc0FjdGl2ZSIsInN0b3AiLCJzY3JvbGxMaXN0ZW5lciIsIm1vdmVCeVdpbmRvd1Njcm9sbCIsInNob3VsZEVuZCIsImdldEFzeW5jTWFyc2hhbCIsImVudHJpZXMiLCJleGVjdXRlIiwiZW50cnkiLCJzaGFsbG93Iiwid2l0aFRpbWluZ3MiLCJnZXREcmFnU3RhcnQiLCJyZXNwb25kZXIiLCJkYXRhIiwiYW5ub3VuY2UiLCJnZXREZWZhdWx0TWVzc2FnZSIsIndpbGxFeHBpcmUiLCJ3YXNDYWxsZWQiLCJpc0V4cGlyZWQiLCJ0aW1lb3V0SWQiLCJnZXRFeHBpcmluZ0Fubm91bmNlIiwicmVzcG9uZGVycyIsImdldFJlc3BvbmRlcnMiLCJwdWJsaXNoZXIiLCJhc3luY01hcnNoYWwiLCJkcmFnZ2luZyIsImJlZm9yZUNhcHR1cmUiLCJvbkJlZm9yZUNhcHR1cmUiLCJiZWZvcmVTdGFydCIsIm9uQmVmb3JlRHJhZ1N0YXJ0IiwibGFzdENyaXRpY2FsIiwibGFzdExvY2F0aW9uIiwibGFzdENvbWJpbmUiLCJoYXNDcml0aWNhbENoYW5nZWQiLCJpc0NyaXRpY2FsRXF1YWwiLCJpc0RyYWdnYWJsZUVxdWFsIiwiaXNEcm9wcGFibGVFcXVhbCIsImhhc0xvY2F0aW9uQ2hhbmdlZCIsImFyZUxvY2F0aW9uc0VxdWFsIiwiaGFzR3JvdXBpbmdDaGFuZ2VkIiwiaXNDb21iaW5lRXF1YWwiLCJhYm9ydCIsImdldFB1Ymxpc2hlciIsImRyb3BBbmltYXRpb25GaW5pc2giLCJkcm9wQW5pbWF0aW9uRmx1c2hPblNjcm9sbCIsIm9uY2UiLCJmbHVzaERyb3BBbmltYXRpb24iLCJwZW5kaW5nRHJvcCIsInBvc3RBY3Rpb25TdGF0ZSIsImNvbXBvc2VFbmhhbmNlcnMiLCJtYXJzaGFsIiwiZGltZW5zaW9uTWFyc2hhbCIsImZvY3VzTWFyc2hhbCIsInN0eWxlTWFyc2hhbCIsImF1dG9TY3JvbGxlciIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImNoYWluIiwibWlkZGxld2FyZSIsImRyb3BwaW5nIiwicmVzdGluZyIsInN0b3BQdWJsaXNoaW5nIiwiZGltZW5zaW9uTWFyc2hhbFN0b3BwZXIiLCJiZWZvcmVJbml0aWFsQ2FwdHVyZSIsInJlcXVlc3QiLCJzY3JvbGxPcHRpb25zIiwic2hvdWxkUHVibGlzaEltbWVkaWF0ZWx5IiwiX21hcnNoYWwkc3RhcnRQdWJsaXNoIiwic3RhcnRQdWJsaXNoaW5nIiwiaW5pdGlhbFB1Ymxpc2giLCJsaWZ0JDEiLCJzaG91bGRTdG9wIiwiYXV0b1Njcm9sbCIsImlzV2F0Y2hpbmciLCJ0cnlSZWNvcmRGb2N1cyIsInRyeVJlc3RvcmVGb2N1c1JlY29yZGVkIiwidHJ5U2hpZnRSZWNvcmQiLCJnZXRNYXhTY3JvbGwiLCJzY3JvbGxIZWlnaHQiLCJzY3JvbGxXaWR0aCIsImdldERvY3VtZW50RWxlbWVudCIsImRvYyIsImRvY3VtZW50RWxlbWVudCIsImdldE1heFdpbmRvd1Njcm9sbCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZ2V0SW5pdGlhbFB1Ymxpc2giLCJyZWdpc3RyeSIsIndpbmRvd1Njcm9sbCIsImdldEFsbEJ5VHlwZSIsImdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsIiwiZ2V0RGltZW5zaW9uIiwic2hvdWxkUHVibGlzaFVwZGF0ZSIsImdldEJ5SWQiLCJnZXRSZW1haW5kZXIiLCJiYXNlIiwiY3JlYXRlRGltZW5zaW9uTWFyc2hhbCIsImNyZWF0ZVB1Ymxpc2hlciIsInN0YWdpbmciLCJjb2xsZWN0IiwiX3N0YWdpbmciLCJnZXRTY3JvbGxXaGlsZURyYWdnaW5nIiwicHVibGlzaCIsInN1YnNjcmliZXIiLCJleGlzdHMiLCJkcmFnU3RvcHBlZCIsImNhblN0YXJ0RHJhZyIsInNjcm9sbFdpbmRvdyIsInNjcm9sbEJ5IiwiZ2V0U2Nyb2xsYWJsZURyb3BwYWJsZXMiLCJnZXRCZXN0U2Nyb2xsYWJsZURyb3BwYWJsZSIsIl9kaW1lbnNpb24iLCJnZXRTY3JvbGxhYmxlRHJvcHBhYmxlT3ZlciIsIm1heWJlIiwiY29uZmlnIiwiZWFzZSIsInBlcmNlbnRhZ2UiLCJzdG9wRGFtcGVuaW5nQXQiLCJhY2NlbGVyYXRlQXQiLCJnZXRQZXJjZW50YWdlIiwic3RhcnRPZlJhbmdlIiwiZW5kT2ZSYW5nZSIsInJhbmdlIiwic3RvcEF0IiwiZ2V0VmFsdWUiLCJkaXN0YW5jZVRvRWRnZSIsInRocmVzaG9sZHMiLCJkcmFnU3RhcnRUaW1lIiwic2hvdWxkVXNlVGltZURhbXBlbmluZyIsInN0YXJ0U2Nyb2xsaW5nRnJvbSIsIm1heFNjcm9sbFZhbHVlQXQiLCJwZXJjZW50YWdlRnJvbU1heFNjcm9sbFZhbHVlQXQiLCJjZWlsIiwiZ2V0VmFsdWVGcm9tRGlzdGFuY2UiLCJwcm9wb3NlZFNjcm9sbCIsInJ1blRpbWUiLCJiZXR3ZWVuQWNjZWxlcmF0ZUF0QW5kU3RvcEF0UGVyY2VudGFnZSIsImRhbXBlblZhbHVlQnlUaW1lIiwiZ2V0U2Nyb2xsT25BeGlzIiwiY29udGFpbmVyIiwiZGlzdGFuY2VUb0VkZ2VzIiwiZ2V0RGlzdGFuY2VUaHJlc2hvbGRzIiwiY2xlYW4kMiIsImdldFNjcm9sbCIsInJlcXVpcmVkIiwibGltaXRlZCIsImlzVG9vQmlnVmVydGljYWxseSIsImlzVG9vQmlnSG9yaXpvbnRhbGx5IiwiYWRqdXN0Rm9yU2l6ZUxpbWl0cyIsInNtYWxsZXN0U2lnbmVkIiwiZ2V0T3ZlcmxhcCIsInRhcmdldFNjcm9sbCIsIm92ZXJsYXAiLCJjYW5QYXJ0aWFsbHlTY3JvbGwiLCJyYXdNYXgiLCJzbWFsbGVzdENoYW5nZSIsImNhblNjcm9sbFdpbmRvdyIsImNhblNjcm9sbERyb3BwYWJsZSIsInNjcm9sbCQxIiwiX2NoYW5nZSIsImdldFdpbmRvd1Njcm9sbENoYW5nZSIsImdldERyb3BwYWJsZVNjcm9sbENoYW5nZSIsImNyZWF0ZUp1bXBTY3JvbGxlciIsInNjcm9sbERyb3BwYWJsZUFzTXVjaEFzSXRDYW4iLCJnZXREcm9wcGFibGVPdmVybGFwIiwid2hhdFRoZURyb3BwYWJsZUNhblNjcm9sbCIsInNjcm9sbFdpbmRvd0FzTXVjaEFzSXRDYW4iLCJnZXRXaW5kb3dPdmVybGFwIiwid2hhdFRoZVdpbmRvd0NhblNjcm9sbCIsImp1bXBTY3JvbGxlciIsImRyb3BwYWJsZVJlbWFpbmRlciIsIndpbmRvd1JlbWFpbmRlciIsIm1vdmVCeU9mZnNldCIsImNyZWF0ZUF1dG9TY3JvbGxlciIsImZsdWlkU2Nyb2xsZXIiLCJzY2hlZHVsZVdpbmRvd1Njcm9sbCIsInNjaGVkdWxlRHJvcHBhYmxlU2Nyb2xsIiwidHJ5U2Nyb2xsIiwiX2RyYWdnaW5nIiwic3RhcnQkMSIsIndhc1Njcm9sbE5lZWRlZCIsImZha2VTY3JvbGxDYWxsYmFjayIsImNyZWF0ZUZsdWlkU2Nyb2xsZXIiLCJqdW1wU2Nyb2xsIiwicHJlZml4JDEiLCJkcmFnSGFuZGxlIiwiY29udGV4dElkIiwic2Nyb2xsQ29udGFpbmVyIiwiZ2V0U3R5bGVzIiwicnVsZXMiLCJwcm9wZXJ0eSIsInJ1bGUiLCJzZWxlY3RvciIsImdldFN0eWxlcyQxIiwiZ3JhYkN1cnNvciIsInRyYW5zaXRpb24iLCJnZXRTZWxlY3RvciIsIm1ha2VHZXRTZWxlY3RvciIsImF0dHJpYnV0ZSIsImRyYWdIYW5kbGUkMSIsImFsd2F5cyIsImRyb3BBbmltYXRpbmciLCJ1c2VyQ2FuY2VsIiwiZ2V0SGVhZCIsImhlYWQiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlU3R5bGVFbCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiZ2V0V2luZG93RnJvbUVsIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiaXNIdG1sRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiZmluZERyYWdIYW5kbGUiLCJwb3NzaWJsZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoYW5kbGUiLCJnZXRBdHRyaWJ1dGUiLCJjcmVhdGVSZWdpc3RyeSIsInN1YnNjcmliZXJzIiwiY2IiLCJmaW5kRHJhZ2dhYmxlQnlJZCIsImZpbmREcm9wcGFibGVCeUlkIiwicmVnaXN0ZXIiLCJ1bmlxdWVJZCIsInVucmVnaXN0ZXIiLCJnZXREcmFnZ2FibGVCeUlkIiwiZmluZEJ5SWQiLCJnZXREcm9wcGFibGVCeUlkIiwiY2xlYW4iLCJTdG9yZUNvbnRleHQiLCJnZXRCb2R5RWxlbWVudCIsImJvZHkiLCJ2aXN1YWxseUhpZGRlbiIsIm92ZXJmbG93IiwiZ2V0SWQiLCJjb3VudCIsImRlZmF1bHRzIiwic2VwYXJhdG9yIiwidXNlVW5pcXVlSWQiLCJwcmVmaXgiLCJBcHBDb250ZXh0IiwidXNlRGV2IiwidXNlSG9vayIsInVzZURldlNldHVwV2FybmluZyIsInVzZVByZXZpb3VzIiwiX3ByZXZlbnRlZEtleXMiLCJzcGFjZSIsImFycm93TGVmdCIsImFycm93VXAiLCJhcnJvd1JpZ2h0IiwiYXJyb3dEb3duIiwicHJldmVudGVkS2V5cyIsInByZXZlbnRTdGFuZGFyZEtleUV2ZW50cyIsImtleUNvZGUiLCJzdXBwb3J0ZWRFdmVudE5hbWUiLCJwcmltYXJ5QnV0dG9uIiwic2xvcHB5Q2xpY2tUaHJlc2hvbGQiLCJfc2Nyb2xsSnVtcEtleXMiLCJpZGxlJDEiLCJnZXRDYXB0dXJlQmluZGluZ3MiLCJnZXRQaGFzZSIsInNldFBoYXNlIiwiYnV0dG9uIiwiY2xpZW50WCIsImNsaWVudFkiLCJhY3Rpb25zIiwiaXNTbG9wcHlDbGlja1RocmVzaG9sZEV4Y2VlZGVkIiwiYWJzIiwiZmx1aWRMaWZ0Iiwic2hvdWxkQmxvY2tOZXh0Q2xpY2siLCJzaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyIsInVzZU1vdXNlU2Vuc29yIiwiYXBpIiwicGhhc2VSZWYiLCJ1bmJpbmRFdmVudHNSZWYiLCJzdGFydENhcHR1cmVCaW5kaW5nIiwib25Nb3VzZURvd24iLCJkZWZhdWx0UHJldmVudGVkIiwiY3RybEtleSIsIm1ldGFLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsImZpbmRDbG9zZXN0RHJhZ2dhYmxlSWQiLCJ0cnlHZXRMb2NrIiwic291cmNlRXZlbnQiLCJzdGFydFBlbmRpbmdEcmFnIiwicHJldmVudEZvcmNlUHJlc3NCaW5kaW5nIiwiZmluZE9wdGlvbnNGb3JEcmFnZ2FibGUiLCJjYW5HZXRMb2NrIiwibGlzdGVuRm9yQ2FwdHVyZSIsImJpbmRDYXB0dXJpbmdFdmVudHMiLCJtb3VudCIsInVubW91bnQiLCJub29wJDEiLCJzY3JvbGxKdW1wS2V5cyIsImdldERyYWdnaW5nQmluZGluZ3MiLCJ1c2VLZXlib2FyZFNlbnNvciIsIm9uS2V5RG93biIsInByZURyYWciLCJpc0NhcHR1cmluZyIsInNuYXBMaWZ0IiwidHJ5U3RhcnRDYXB0dXJlIiwiaWRsZSQyIiwidGltZUZvckxvbmdQcmVzcyIsImZvcmNlUHJlc3NUaHJlc2hvbGQiLCJ1c2VUb3VjaFNlbnNvciIsIm9uVG91Y2hTdGFydCIsInRvdWNoIiwidG91Y2hlcyIsImxvbmdQcmVzc1RpbWVySWQiLCJ1bmJpbmRUYXJnZXQiLCJnZXRIYW5kbGVCaW5kaW5ncyIsImhhc01vdmVkIiwiX2V2ZW50JHRvdWNoZXMkIiwiZm9yY2UiLCJzaG91bGRSZXNwZWN0IiwidW5iaW5kV2luZG93IiwiZ2V0V2luZG93QmluZGluZ3MiLCJzdGFydERyYWdnaW5nIiwid2Via2l0SGFjayIsImludGVyYWN0aXZlVGFnTmFtZXMiLCJpbnB1dCIsInRleHRhcmVhIiwic2VsZWN0Iiwib3B0aW9uIiwib3B0Z3JvdXAiLCJ2aWRlbyIsImF1ZGlvIiwiaXNBbkludGVyYWN0aXZlRWxlbWVudCIsInBhcmVudCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsInBhcmVudEVsZW1lbnQiLCJpc0V2ZW50SW5JbnRlcmFjdGl2ZUVsZW1lbnQiLCJnZXRCb3JkZXJCb3hDZW50ZXJQb3NpdGlvbiIsInN1cHBvcnRlZE1hdGNoZXNOYW1lIiwiRWxlbWVudCIsImNsb3Nlc3RQb255ZmlsbCIsImNsb3Nlc3QkMSIsImZpbmRDbG9zZXN0RHJhZ0hhbmRsZUZyb21FdmVudCIsImlzRWxlbWVudCIsIl9pc0FjdGl2ZSIsImV4cGVjdGVkIiwiaXNMb2NrQWN0aXZlIiwic2hvdWxkV2FybiIsImNhblN0YXJ0IiwibG9ja0FQSSIsImlzQ2xhaW1lZCIsInRyeVN0YXJ0IiwiZm9yY2VTZW5zb3JTdG9wIiwiZmluZERyYWdnYWJsZSIsImRyYWdnYWJsZSQxIiwiY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMiLCJsb2NrIiwiY2xhaW0iLCJnZXRTaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyIsInRyeURpc3BhdGNoV2hlbkRyYWdnaW5nIiwidHJ5RGlzcGF0Y2giLCJnZXRBY3Rpb24iLCJyZWxlYXNlIiwiY2xlYW51cCIsImxpZnRBY3Rpb25BcmdzIiwibW92ZSQxIiwibW92ZVVwJDEiLCJtb3ZlUmlnaHQkMSIsIm1vdmVEb3duJDEiLCJtb3ZlTGVmdCQxIiwiYWJvcnRQcmVEcmFnIiwiZGVmYXVsdFNlbnNvcnMiLCJ1c2VTZW5zb3JNYXJzaGFsIiwiX3JlZjQiLCJjdXN0b21TZW5zb3JzIiwiZW5hYmxlRGVmYXVsdFNlbnNvcnMiLCJ1c2VTZW5zb3JzIiwiYWJhbmRvbiIsIm5ld0xvY2siLCJ0cnlBYmFuZG9uIiwidHJ5QWJhbmRvbkxvY2siLCJsaXN0ZW5Ub1N0b3JlIiwiZm9yY2VTdG9wIiwidHJ5R2V0Q2xvc2VzdERyYWdnYWJsZUlkRnJvbUV2ZW50IiwidHJ5UmVsZWFzZUxvY2siLCJpc0xvY2tDbGFpbWVkIiwidXNlVmFsaWRhdGVTZW5zb3JIb29rcyIsInNlbnNvckhvb2tzIiwiY3JlYXRlUmVzcG9uZGVycyIsImdldFN0b3JlIiwibGF6eVJlZiIsIkFwcCIsInNlbnNvcnMiLCJsYXp5U3RvcmVSZWYiLCJ1c2VTdGFydHVwVmFsaWRhdGlvbiIsImxhc3RQcm9wc1JlZiIsInVzZUFubm91bmNlciIsInNldHVwIiwic3R5bGUiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwidGV4dENvbnRlbnQiLCJkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNJZCIsInVzZUhpZGRlblRleHRFbGVtZW50IiwidGV4dCIsImdldEVsZW1lbnRJZCIsImRpc3BsYXkiLCJ1c2VTdHlsZU1hcnNoYWwiLCJhbHdheXNSZWYiLCJkeW5hbWljUmVmIiwic2V0RHluYW1pY1N0eWxlIiwic2V0QWx3YXlzU3R5bGUiLCJkeW5hbWljIiwibGF6eURpc3BhdGNoIiwibWFyc2hhbENhbGxiYWNrcyIsInVzZVJlZ2lzdHJ5IiwidXNlRm9jdXNNYXJzaGFsIiwiZW50cmllc1JlZiIsInJlY29yZFJlZiIsInJlc3RvcmVGb2N1c0ZyYW1lUmVmIiwiaXNNb3VudGVkUmVmIiwiZm9jdXMiLCJ0cnlHaXZlRm9jdXMiLCJ0cnlHaXZlRm9jdXNUbyIsImFjdGl2ZUVsZW1lbnQiLCJyZWRpcmVjdFRvIiwicmVjb3JkIiwiZm9jdXNlZCIsImNsZWFyRnJhbWVPblVubW91bnQiLCJ0cnlSZXNldFN0b3JlIiwiZ2V0Q2FuTGlmdCIsImdldElzTW92ZW1lbnRBbGxvd2VkIiwiYXBwQ29udGV4dCIsImNhbkxpZnQiLCJjb3VudCQxIiwicmVzZXRTZXJ2ZXJDb250ZXh0IiwicmVzZXQkMSIsIkRyYWdEcm9wQ29udGV4dCIsInVzZUluc3RhbmNlQ291bnQiLCJpc0VxdWFsJDEiLCJpc1Njcm9sbCIsImlzQXV0byIsImlzRWl0aGVyIiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiaXNFbGVtZW50U2Nyb2xsYWJsZSIsImdldENsb3Nlc3RTY3JvbGxhYmxlIiwiZ2V0U2Nyb2xsJDEiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiZ2V0SXNGaXhlZCIsImdldEVudiIsImNsb3Nlc3RTY3JvbGxhYmxlIiwiZW52IiwiaXNEcm9wRGlzYWJsZWQiLCJnZXRDbGllbnQiLCJ0YXJnZXRSZWYiLCJmcmFtZUNsaWVudCIsInNjcm9sbFNpemUiLCJnZXREcm9wcGFibGVEaW1lbnNpb24iLCJpbW1lZGlhdGUiLCJkZWxheWVkIiwiZ2V0TGlzdGVuZXJPcHRpb25zIiwidXNlUmVxdWlyZWRDb250ZXh0IiwiZ2V0Q2xvc2VzdFNjcm9sbGFibGVGcm9tRHJhZyIsIm5vb3AkMiIsImVtcHR5IiwiZ2V0U3R5bGUiLCJpc0FuaW1hdGluZ09wZW5Pbk1vdW50IiwiYW5pbWF0ZSIsImdldFNpemUiLCJib3hTaXppbmciLCJmbGV4U2hyaW5rIiwiZmxleEdyb3ciLCJwb2ludGVyRXZlbnRzIiwiUGxhY2Vob2xkZXIkMSIsIlBsYWNlaG9sZGVyIiwiYW5pbWF0ZU9wZW5UaW1lclJlZiIsInRyeUNsZWFyQW5pbWF0ZU9wZW5UaW1lciIsIm9uVHJhbnNpdGlvbkVuZCIsIm9uQ2xvc2UiLCJfdXNlU3RhdGUiLCJzZXRJc0FuaW1hdGluZ09wZW5Pbk1vdW50Iiwib25TaXplQ2hhbmdlRW5kIiwicHJvcGVydHlOYW1lIiwiaW5uZXJSZWYiLCJEcm9wcGFibGVDb250ZXh0IiwiQW5pbWF0ZUluT3V0IiwiX1JlYWN0JFB1cmVDb21wb25lbnQiLCJvbiIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsInByb3ZpZGVkIiwiekluZGV4T3B0aW9ucyIsImdldERyYWdnaW5nVHJhbnNpdGlvbiIsInNob3VsZEFuaW1hdGVEcmFnTW92ZW1lbnQiLCJnZXREcmFnZ2luZ09wYWNpdHkiLCJpc0Ryb3BBbmltYXRpbmciLCJnZXRTaG91bGREcmFnZ2luZ0FuaW1hdGUiLCJnZXRTdHlsZSQxIiwibWFwcGVkIiwiZ2V0RHJhZ2dpbmdTdHlsZSIsInRyYW5zZm9ybSIsIm9wYWNpdHkiLCJ6SW5kZXgiLCJnZXRTZWNvbmRhcnlTdHlsZSIsInNlY29uZGFyeSIsInNob3VsZEFuaW1hdGVEaXNwbGFjZW1lbnQiLCJ1c2VEcmFnZ2FibGVQdWJsaXNoZXIiLCJnZXREcmFnZ2FibGVSZWYiLCJnZXREaW1lbnNpb24kMSIsImNvbXB1dGVkU3R5bGVzIiwicHVibGlzaGVkUmVmIiwiaXNGaXJzdFB1Ymxpc2hSZWYiLCJ1c2VWYWxpZGF0aW9uJDEiLCJnZXRSZWYiLCJwcmV2ZW50SHRtbDVEbmQiLCJpc1N0cmljdEVxdWFsIiwid2hhdElzRHJhZ2dlZE92ZXJGcm9tUmVzdWx0IiwiZ2V0U2Vjb25kYXJ5U25hcHNob3QiLCJjb21iaW5lVGFyZ2V0Rm9yIiwiaXNDbG9uZSIsImRyb3BBbmltYXRpb24iLCJkcmFnZ2luZ092ZXIiLCJhdFJlc3QiLCJzbmFwc2hvdCIsIkNvbm5lY3RlZERyYWdnYWJsZSIsIm1ha2VNYXBTdGF0ZVRvUHJvcHMiLCJkcmFnZ2luZ1NlbGVjdG9yIiwiZ2V0RHJhZ2dhYmxlU2VsZWN0b3IiLCJtZW1vaXplZE9mZnNldCIsImdldE1lbW9pemVkU25hcHNob3QiLCJnZXRNZW1vaXplZFByb3BzIiwiZ2V0Q29tYmluZVdpdGhGcm9tSW1wYWN0IiwiX2RyYWdnaW5nT3ZlciIsIl9jb21iaW5lV2l0aCIsImdldENvbWJpbmVXaXRoRnJvbVJlc3VsdCIsImN1cnZlIiwic2NhbGUiLCJzZWNvbmRhcnlTZWxlY3RvciIsImdldFNlY29uZGFyeVNlbGVjdG9yIiwiZ2V0RmFsbGJhY2siLCJnZXRQcm9wcyIsIm93bklkIiwiZHJhZ2dpbmdJZCIsInZpc3VhbERpc3BsYWNlbWVudCIsImlzQWZ0ZXJDcml0aWNhbEluVmlydHVhbExpc3QiLCJfb2Zmc2V0IiwiRHJhZ2dhYmxlIiwic2V0UmVmIiwiX3VzZVJlcXVpcmVkQ29udGV4dCIsIl91c2VSZXF1aXJlZENvbnRleHQyIiwiZHJvcEFuaW1hdGlvbkZpbmlzaGVkQWN0aW9uIiwidXNlQ2xvbmVQcm9wVmFsaWRhdGlvbiIsImRyYWdIYW5kbGVQcm9wcyIsInRhYkluZGV4Iiwicm9sZSIsIm9uTW92ZUVuZCIsImRyYWdnYWJsZVByb3BzIiwicnVicmljIiwiUHJpdmF0ZURyYWdnYWJsZSIsImlzVXNpbmdDbG9uZUZvciIsIlB1YmxpY0RyYWdnYWJsZSIsImlzRHJhZ0Rpc2FibGVkIiwiZGlzYWJsZUludGVyYWN0aXZlRWxlbWVudEJsb2NraW5nIiwiaXNNYXRjaGluZ1R5cGUiLCJnZXREcmFnZ2FibGUiLCJkZWZhdWx0UHJvcHMiLCJpZ25vcmVDb250YWluZXJDbGlwcGluZyIsInJlbmRlckNsb25lIiwiZ2V0Q29udGFpbmVyRm9yQ2xvbmUiLCJnZXRCb2R5IiwiQ29ubmVjdGVkRHJvcHBhYmxlIiwiaWRsZVdpdGhBbmltYXRpb24iLCJzaG91bGRBbmltYXRlUGxhY2Vob2xkZXIiLCJpc0RyYWdnaW5nT3ZlciIsImRyYWdnaW5nT3ZlcldpdGgiLCJkcmFnZ2luZ0Zyb21UaGlzV2l0aCIsImlzVXNpbmdQbGFjZWhvbGRlciIsInVzZUNsb25lIiwiaWRsZVdpdGhvdXRBbmltYXRpb24iLCJnZXREcmFnZ2FibGVSdWJyaWMiLCJnZXRNYXBQcm9wcyIsImlzRHJhZ2dpbmdPdmVyRm9yQ29uc3VtZXIiLCJpc0RyYWdnaW5nT3ZlckZvckltcGFjdCIsIl9zbmFwc2hvdCIsIl9jb21wbGV0ZWQiLCJ3YXNDb21iaW5pbmciLCJpc0hvbWUiLCJ1cGRhdGVWaWV3cG9ydE1heFNjcm9sbCIsIkRyb3BwYWJsZSIsImRyb3BwYWJsZVJlZiIsInBsYWNlaG9sZGVyUmVmIiwiZ2V0RHJvcHBhYmxlUmVmIiwic2V0RHJvcHBhYmxlUmVmIiwic2V0UGxhY2Vob2xkZXJSZWYiLCJ1c2VWYWxpZGF0aW9uIiwib25QbGFjZWhvbGRlclRyYW5zaXRpb25FbmQiLCJ1c2VEcm9wcGFibGVQdWJsaXNoZXIiLCJ3aGlsZURyYWdnaW5nUmVmIiwicHJldmlvdXNSZWYiLCJwdWJsaXNoZWREZXNjcmlwdG9yUmVmIiwibWVtb2l6ZWRVcGRhdGVTY3JvbGwiLCJnZXRDbG9zZXN0U2Nyb2xsIiwic2NoZWR1bGVTY3JvbGxVcGRhdGUiLCJvbkNsb3Nlc3RTY3JvbGwiLCJyZW1vdmVBdHRyaWJ1dGUiLCJkcm9wcGFibGVQcm9wcyIsImRyb3BwYWJsZUNvbnRleHQiLCJnZXRDbG9uZSIsIm5vZGUiLCJkcmFnZ2FibGVQcm92aWRlZCIsImRyYWdnYWJsZVNuYXBzaG90IiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwiTWVtbyIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJudW1iZXIiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJmb3IiLCJjIiwiZiIsImciLCJoIiwiayIsImwiLCJtIiwibiIsInEiLCJyIiwidCIsInYiLCJ3IiwieiIsInUiLCIkJHR5cGVvZiIsIkEiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImNhblVzZURPTSIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJkZWZhdWx0Tm9kZSIsInJlbmRlclBvcnRhbCIsImNvbXBvbmVudERpZFVwZGF0ZSIsInBvcnRhbCIsIkxlZ2FjeVBvcnRhbCIsIktFWUNPREVTIiwiUG9ydGFsV2l0aFN0YXRlIiwicG9ydGFsTm9kZSIsImRlZmF1bHRPcGVuIiwib3BlblBvcnRhbCIsImNsb3NlUG9ydGFsIiwid3JhcFdpdGhQb3J0YWwiLCJoYW5kbGVPdXRzaWRlTW91c2VDbGljayIsImhhbmRsZUtleWRvd24iLCJjbG9zZU9uRXNjIiwiY2xvc2VPbk91dHNpZGVDbGljayIsIm5hdGl2ZUV2ZW50Iiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwib25PcGVuIiwiX3RoaXMyIiwiaXNPcGVuIl0sInNvdXJjZVJvb3QiOiIifQ==