/*! For license information please see 9081.cfa4a964.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[9081],{"./node_modules/@amplitude/analytics-browser/lib/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Identify:()=>Identify,Revenue:()=>Revenue,Types:()=>esm_namespaceObject,add:()=>add,createInstance:()=>createInstance,flush:()=>flush,getDeviceId:()=>getDeviceId,getSessionId:()=>getSessionId,getUserId:()=>getUserId,groupIdentify:()=>groupIdentify,identify:()=>identify,init:()=>init,logEvent:()=>logEvent,remove:()=>remove,reset:()=>esm_reset,revenue:()=>revenue,runQueuedFunctions:()=>runQueuedFunctions,setDeviceId:()=>setDeviceId,setGroup:()=>setGroup,setOptOut:()=>setOptOut,setSessionId:()=>setSessionId,setTransport:()=>setTransport,setUserId:()=>setUserId,track:()=>track});var esm_namespaceObject={};__webpack_require__.r(esm_namespaceObject),__webpack_require__.d(esm_namespaceObject,{IdentifyOperation:()=>IdentifyOperation,LogLevel:()=>LogLevel,PluginType:()=>PluginType,RevenueProperty:()=>RevenueProperty,ServerZone:()=>ServerZone,SpecialEventType:()=>SpecialEventType,Status:()=>Status,TransportType:()=>TransportType});var extendStatics=function(d,b){return extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)Object.prototype.hasOwnProperty.call(b,p)&&(d[p]=b[p])},extendStatics(d,b)};function __extends(d,b){if("function"!=typeof b&&null!==b)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}var __assign=function(){return __assign=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)};function __rest(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t}function __awaiter(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))}function __generator(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}}Object.create;function __values(o){var s="function"==typeof Symbol&&Symbol.iterator,m=s&&o[s],i=0;if(m)return m.call(o);if(o&&"number"==typeof o.length)return{next:function(){return o&&i>=o.length&&(o=void 0),{value:o&&o[i++],done:!o}}};throw new TypeError(s?"Object is not iterable.":"Symbol.iterator is not defined.")}function __read(o,n){var m="function"==typeof Symbol&&o[Symbol.iterator];if(!m)return o;var r,e,i=m.call(o),ar=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)ar.push(r.value)}catch(error){e={error}}finally{try{r&&!r.done&&(m=i.return)&&m.call(i)}finally{if(e)throw e.error}}return ar}function __spreadArray(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))}var PluginType,Status;Object.create;!function(PluginType){PluginType.BEFORE="before",PluginType.ENRICHMENT="enrichment",PluginType.DESTINATION="destination"}(PluginType||(PluginType={})),function(Status){Status.Unknown="unknown",Status.Skipped="skipped",Status.Success="success",Status.RateLimit="rate_limit",Status.PayloadTooLarge="payload_too_large",Status.Invalid="invalid",Status.Failed="failed",Status.Timeout="Timeout",Status.SystemError="SystemError"}(Status||(Status={}));var LogLevel,ServerZone,AMPLITUDE_PREFIX="AMP",STORAGE_PREFIX="".concat(AMPLITUDE_PREFIX,"_unsent"),buildResult=function(event,code,message){return void 0===code&&(code=0),void 0===message&&(message=Status.Unknown),{event,code,message}};!function(LogLevel){LogLevel[LogLevel.None=0]="None",LogLevel[LogLevel.Error=1]="Error",LogLevel[LogLevel.Warn=2]="Warn",LogLevel[LogLevel.Verbose=3]="Verbose"}(LogLevel||(LogLevel={})),function(ServerZone){ServerZone.US="US",ServerZone.EU="EU"}(ServerZone||(ServerZone={}));var IdentifyOperation,RevenueProperty,SpecialEventType,PREFIX="Amplitude Logger ",Logger=function(){function Logger(){this.logLevel=LogLevel.None}return Logger.prototype.disable=function(){this.logLevel=LogLevel.None},Logger.prototype.enable=function(logLevel){void 0===logLevel&&(logLevel=LogLevel.Warn),this.logLevel=logLevel},Logger.prototype.log=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this.logLevel<LogLevel.Verbose||console.log("".concat(PREFIX,"[Log]: ").concat(args.join(" ")))},Logger.prototype.warn=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this.logLevel<LogLevel.Warn||console.warn("".concat(PREFIX,"[Warn]: ").concat(args.join(" ")))},Logger.prototype.error=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this.logLevel<LogLevel.Error||console.error("".concat(PREFIX,"[Error]: ").concat(args.join(" ")))},Logger}(),getDefaultConfig=function(){return{flushMaxRetries:12,flushQueueSize:200,flushIntervalMillis:1e4,logLevel:LogLevel.Warn,loggerProvider:new Logger,optOut:!1,serverUrl:"https://api2.amplitude.com/2/httpapi",serverZone:ServerZone.US,useBatch:!1}},Config=function(){function Config(options){var _a,_b,_c;this._optOut=!1;var defaultConfig=getDefaultConfig();this.apiKey=options.apiKey,this.flushIntervalMillis=options.flushIntervalMillis||defaultConfig.flushIntervalMillis,this.flushMaxRetries=options.flushMaxRetries||defaultConfig.flushMaxRetries,this.flushQueueSize=options.flushQueueSize||defaultConfig.flushQueueSize,this.loggerProvider=options.loggerProvider||defaultConfig.loggerProvider,this.logLevel=null!==(_a=options.logLevel)&&void 0!==_a?_a:defaultConfig.logLevel,this.minIdLength=options.minIdLength,this.plan=options.plan,this.ingestionMetadata=options.ingestionMetadata,this.optOut=null!==(_b=options.optOut)&&void 0!==_b?_b:defaultConfig.optOut,this.serverUrl=options.serverUrl,this.serverZone=options.serverZone||defaultConfig.serverZone,this.storageProvider=options.storageProvider,this.transportProvider=options.transportProvider,this.useBatch=null!==(_c=options.useBatch)&&void 0!==_c?_c:defaultConfig.useBatch,this.loggerProvider.enable(this.logLevel);var serverConfig=createServerConfig(options.serverUrl,options.serverZone,options.useBatch);this.serverZone=serverConfig.serverZone,this.serverUrl=serverConfig.serverUrl}return Object.defineProperty(Config.prototype,"optOut",{get:function(){return this._optOut},set:function(optOut){this._optOut=optOut},enumerable:!1,configurable:!0}),Config}(),getServerUrl=function(serverZone,useBatch){return serverZone===ServerZone.EU?useBatch?"https://api.eu.amplitude.com/batch":"https://api.eu.amplitude.com/2/httpapi":useBatch?"https://api2.amplitude.com/batch":"https://api2.amplitude.com/2/httpapi"},createServerConfig=function(serverUrl,serverZone,useBatch){if(void 0===serverUrl&&(serverUrl=""),void 0===serverZone&&(serverZone=getDefaultConfig().serverZone),void 0===useBatch&&(useBatch=getDefaultConfig().useBatch),serverUrl)return{serverUrl,serverZone:void 0};var _serverZone=[ServerZone.US,ServerZone.EU].includes(serverZone)?serverZone:getDefaultConfig().serverZone;return{serverZone:_serverZone,serverUrl:getServerUrl(_serverZone,useBatch)}},Destination=function(){function Destination(){this.name="amplitude",this.type=PluginType.DESTINATION,this.retryTimeout=1e3,this.throttleTimeout=3e4,this.storageKey="",this.scheduled=!1,this.queue=[]}return Destination.prototype.setup=function(config){var _a;return __awaiter(this,void 0,void 0,(function(){var unsent,_this=this;return __generator(this,(function(_b){switch(_b.label){case 0:return this.config=config,this.storageKey="".concat(STORAGE_PREFIX,"_").concat(this.config.apiKey.substring(0,10)),[4,null===(_a=this.config.storageProvider)||void 0===_a?void 0:_a.get(this.storageKey)];case 1:return unsent=_b.sent(),this.saveEvents(),unsent&&unsent.length>0&&Promise.all(unsent.map((function(event){return _this.execute(event)}))).catch(),[2,Promise.resolve(void 0)]}}))}))},Destination.prototype.execute=function(event){var _this=this;return new Promise((function(resolve){var context={event,attempts:0,callback:function(result){return resolve(result)},timeout:0};_this.addToQueue(context)}))},Destination.prototype.addToQueue=function(){for(var _this=this,list=[],_i=0;_i<arguments.length;_i++)list[_i]=arguments[_i];list.filter((function(context){return context.attempts<_this.config.flushMaxRetries?(context.attempts+=1,!0):(_this.fulfillRequest([context],500,"Event rejected due to exceeded retry count"),!1)})).forEach((function(context){_this.queue=_this.queue.concat(context),0!==context.timeout?setTimeout((function(){context.timeout=0,_this.schedule(0)}),context.timeout):_this.schedule(_this.config.flushIntervalMillis)})),this.saveEvents()},Destination.prototype.schedule=function(timeout){var _this=this;this.scheduled||(this.scheduled=!0,setTimeout((function(){_this.flush(!0).then((function(){_this.scheduled=!1,_this.queue.length>0&&_this.schedule(timeout)}))}),timeout))},Destination.prototype.flush=function(useRetry){return void 0===useRetry&&(useRetry=!1),__awaiter(this,void 0,void 0,(function(){var list,later,batches,_this=this;return __generator(this,(function(_a){switch(_a.label){case 0:return list=[],later=[],this.queue.forEach((function(context){return 0===context.timeout?list.push(context):later.push(context)})),this.queue=later,arr=list,size=this.config.flushQueueSize,chunkSize=Math.max(size,1),batches=arr.reduce((function(chunks,element,index){var chunkIndex=Math.floor(index/chunkSize);return chunks[chunkIndex]||(chunks[chunkIndex]=[]),chunks[chunkIndex].push(element),chunks}),[]),[4,Promise.all(batches.map((function(batch){return _this.send(batch,useRetry)})))];case 1:return _a.sent(),[2]}var arr,size,chunkSize}))}))},Destination.prototype.send=function(list,useRetry){return void 0===useRetry&&(useRetry=!0),__awaiter(this,void 0,void 0,(function(){var payload,serverUrl,res,e_1;return __generator(this,(function(_a){switch(_a.label){case 0:if(!this.config.apiKey)return[2,this.fulfillRequest(list,400,"Event rejected due to missing API key")];payload={api_key:this.config.apiKey,events:list.map((function(context){var _a=context.event;_a.extra;return __rest(_a,["extra"])})),options:{min_id_length:this.config.minIdLength}},_a.label=1;case 1:return _a.trys.push([1,3,,4]),serverUrl=createServerConfig(this.config.serverUrl,this.config.serverZone,this.config.useBatch).serverUrl,[4,this.config.transportProvider.send(serverUrl,payload)];case 2:return null===(res=_a.sent())?(this.fulfillRequest(list,0,"Unexpected error occurred"),[2]):useRetry?(this.handleReponse(res,list),[3,4]):(this.fulfillRequest(list,res.statusCode,res.status),[2]);case 3:return e_1=_a.sent(),this.fulfillRequest(list,0,String(e_1)),[3,4];case 4:return[2]}}))}))},Destination.prototype.handleReponse=function(res,list){switch(res.status){case Status.Success:this.handleSuccessResponse(res,list);break;case Status.Invalid:this.handleInvalidResponse(res,list);break;case Status.PayloadTooLarge:this.handlePayloadTooLargeResponse(res,list);break;case Status.RateLimit:this.handleRateLimitResponse(res,list);break;default:this.handleOtherReponse(list)}},Destination.prototype.handleSuccessResponse=function(res,list){this.fulfillRequest(list,res.statusCode,"Event tracked successfully")},Destination.prototype.handleInvalidResponse=function(res,list){var _this=this;if(res.body.missingField||res.body.error.startsWith("Invalid API key"))this.fulfillRequest(list,res.statusCode,res.body.error);else{var dropIndex=__spreadArray(__spreadArray(__spreadArray(__spreadArray([],__read(Object.values(res.body.eventsWithInvalidFields)),!1),__read(Object.values(res.body.eventsWithMissingFields)),!1),__read(Object.values(res.body.eventsWithInvalidIdLengths)),!1),__read(res.body.silencedEvents),!1).flat(),dropIndexSet=new Set(dropIndex),retry=list.filter((function(context,index){if(!dropIndexSet.has(index))return!0;_this.fulfillRequest([context],res.statusCode,res.body.error)}));this.addToQueue.apply(this,__spreadArray([],__read(retry),!1))}},Destination.prototype.handlePayloadTooLargeResponse=function(res,list){1!==list.length?(this.config.flushQueueSize/=2,this.addToQueue.apply(this,__spreadArray([],__read(list),!1))):this.fulfillRequest(list,res.statusCode,res.body.error)},Destination.prototype.handleRateLimitResponse=function(res,list){var _this=this,dropUserIds=Object.keys(res.body.exceededDailyQuotaUsers),dropDeviceIds=Object.keys(res.body.exceededDailyQuotaDevices),throttledIndex=res.body.throttledEvents,dropUserIdsSet=new Set(dropUserIds),dropDeviceIdsSet=new Set(dropDeviceIds),throttledIndexSet=new Set(throttledIndex),retry=list.filter((function(context,index){if(!(context.event.user_id&&dropUserIdsSet.has(context.event.user_id)||context.event.device_id&&dropDeviceIdsSet.has(context.event.device_id)))return throttledIndexSet.has(index)&&(context.timeout=_this.throttleTimeout),!0;_this.fulfillRequest([context],res.statusCode,res.body.error)}));this.addToQueue.apply(this,__spreadArray([],__read(retry),!1))},Destination.prototype.handleOtherReponse=function(list){var _this=this;this.addToQueue.apply(this,__spreadArray([],__read(list.map((function(context){return context.timeout=context.attempts*_this.retryTimeout,context}))),!1))},Destination.prototype.fulfillRequest=function(list,code,message){this.saveEvents(),list.forEach((function(context){return context.callback(buildResult(context.event,code,message))}))},Destination.prototype.saveEvents=function(){if(this.config.storageProvider){var events=Array.from(this.queue.map((function(context){return context.event})));this.config.storageProvider.set(this.storageKey,events)}},Destination}(),UUID=function(a){return a?(a^16*Math.random()>>a/4).toString(16):(String(1e7)+String(-1e3)+String(-4e3)+String(-8e3)+String(-1e11)).replace(/[018]/g,UUID)};!function(IdentifyOperation){IdentifyOperation.SET="$set",IdentifyOperation.SET_ONCE="$setOnce",IdentifyOperation.ADD="$add",IdentifyOperation.APPEND="$append",IdentifyOperation.PREPEND="$prepend",IdentifyOperation.REMOVE="$remove",IdentifyOperation.PREINSERT="$preInsert",IdentifyOperation.POSTINSERT="$postInsert",IdentifyOperation.UNSET="$unset",IdentifyOperation.CLEAR_ALL="$clearAll"}(IdentifyOperation||(IdentifyOperation={})),function(RevenueProperty){RevenueProperty.REVENUE_PRODUCT_ID="$productId",RevenueProperty.REVENUE_QUANTITY="$quantity",RevenueProperty.REVENUE_PRICE="$price",RevenueProperty.REVENUE_TYPE="$revenueType",RevenueProperty.REVENUE="$revenue"}(RevenueProperty||(RevenueProperty={})),function(SpecialEventType){SpecialEventType.IDENTIFY="$identify",SpecialEventType.GROUP_IDENTIFY="$groupidentify",SpecialEventType.REVENUE="revenue_amount"}(SpecialEventType||(SpecialEventType={}));var isValidObject=function(properties){if(Object.keys(properties).length>1e3)return!1;for(var key in properties){var value=properties[key];if(!isValidProperties(key,value))return!1}return!0},isValidProperties=function(property,value){var e_1,_a;if("string"!=typeof property)return!1;if(Array.isArray(value)){var isValid=!0;try{for(var value_1=__values(value),value_1_1=value_1.next();!value_1_1.done;value_1_1=value_1.next()){var valueElement=value_1_1.value;if(Array.isArray(valueElement))return!1;if("object"==typeof valueElement)isValid=isValid&&isValidObject(valueElement);else if(!["number","string"].includes(typeof valueElement))return!1;if(!isValid)return!1}}catch(e_1_1){e_1={error:e_1_1}}finally{try{value_1_1&&!value_1_1.done&&(_a=value_1.return)&&_a.call(value_1)}finally{if(e_1)throw e_1.error}}}else{if(null==value)return!1;if("object"==typeof value)return isValidObject(value);if(!["number","string","boolean"].includes(typeof value))return!1}return!0},Identify=function(){function Identify(){this._propertySet=new Set,this._properties={}}return Identify.prototype.getUserProperties=function(){return __assign({},this._properties)},Identify.prototype.set=function(property,value){return this._safeSet(IdentifyOperation.SET,property,value),this},Identify.prototype.setOnce=function(property,value){return this._safeSet(IdentifyOperation.SET_ONCE,property,value),this},Identify.prototype.append=function(property,value){return this._safeSet(IdentifyOperation.APPEND,property,value),this},Identify.prototype.prepend=function(property,value){return this._safeSet(IdentifyOperation.PREPEND,property,value),this},Identify.prototype.postInsert=function(property,value){return this._safeSet(IdentifyOperation.POSTINSERT,property,value),this},Identify.prototype.preInsert=function(property,value){return this._safeSet(IdentifyOperation.PREINSERT,property,value),this},Identify.prototype.remove=function(property,value){return this._safeSet(IdentifyOperation.REMOVE,property,value),this},Identify.prototype.add=function(property,value){return this._safeSet(IdentifyOperation.ADD,property,value),this},Identify.prototype.unset=function(property){return this._safeSet(IdentifyOperation.UNSET,property,"-"),this},Identify.prototype.clearAll=function(){return this._properties={},this._properties[IdentifyOperation.CLEAR_ALL]="-",this},Identify.prototype._safeSet=function(operation,property,value){if(this._validate(operation,property,value)){var userPropertyMap=this._properties[operation];return void 0===userPropertyMap&&(userPropertyMap={},this._properties[operation]=userPropertyMap),userPropertyMap[property]=value,this._propertySet.add(property),!0}return!1},Identify.prototype._validate=function(operation,property,value){return void 0===this._properties[IdentifyOperation.CLEAR_ALL]&&(!this._propertySet.has(property)&&(operation===IdentifyOperation.ADD?"number"==typeof value:operation===IdentifyOperation.UNSET||operation===IdentifyOperation.REMOVE||isValidProperties(property,value)))},Identify}(),Revenue=function(){function Revenue(){this.productId="",this.quantity=1,this.price=0}return Revenue.prototype.setProductId=function(productId){return this.productId=productId,this},Revenue.prototype.setQuantity=function(quantity){return quantity>0&&(this.quantity=quantity),this},Revenue.prototype.setPrice=function(price){return this.price=price,this},Revenue.prototype.setRevenueType=function(revenueType){return this.revenueType=revenueType,this},Revenue.prototype.setRevenue=function(revenue){return this.revenue=revenue,this},Revenue.prototype.setEventProperties=function(properties){return isValidObject(properties)&&(this.properties=properties),this},Revenue.prototype.getEventProperties=function(){var eventProperties=this.properties?__assign({},this.properties):{};return eventProperties[RevenueProperty.REVENUE_PRODUCT_ID]=this.productId,eventProperties[RevenueProperty.REVENUE_QUANTITY]=this.quantity,eventProperties[RevenueProperty.REVENUE_PRICE]=this.price,eventProperties[RevenueProperty.REVENUE_TYPE]=this.revenueType,eventProperties[RevenueProperty.REVENUE]=this.revenue,eventProperties},Revenue}(),createIdentifyEvent=function(identify,eventOptions){return __assign(__assign({},eventOptions),{event_type:SpecialEventType.IDENTIFY,user_properties:identify.getUserProperties()})},Timeline=function(){function Timeline(){this.queue=[],this.applying=!1,this.isReady=!1,this.plugins=[]}return Timeline.prototype.register=function(plugin,config){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){switch(_a.label){case 0:return[4,plugin.setup(config)];case 1:return _a.sent(),this.plugins.push(plugin),[2]}}))}))},Timeline.prototype.deregister=function(pluginName){return this.plugins.splice(this.plugins.findIndex((function(plugin){return plugin.name===pluginName})),1),Promise.resolve()},Timeline.prototype.reset=function(){this.applying=!1,this.isReady=!1,this.plugins=[]},Timeline.prototype.push=function(event){var _this=this;return new Promise((function(resolve){_this.queue.push([event,resolve]),_this.scheduleApply(0)}))},Timeline.prototype.scheduleApply=function(timeout){var _this=this;this.isReady&&!this.applying&&(this.applying=!0,setTimeout((function(){_this.apply(_this.queue.shift()).then((function(){_this.applying=!1,_this.queue.length>0&&_this.scheduleApply(0)}))}),timeout))},Timeline.prototype.apply=function(item){return __awaiter(this,void 0,void 0,(function(){var _a,event,_b,resolve,before,before_1,before_1_1,e_1_1,enrichment,enrichment_1,enrichment_1_1,e_2_1,destination,executeDestinations,e_1,_c,e_2,_d;return __generator(this,(function(_e){switch(_e.label){case 0:if(!item)return[2];_a=__read(item,1),event=_a[0],_b=__read(item,2),resolve=_b[1],before=this.plugins.filter((function(plugin){return plugin.type===PluginType.BEFORE})),_e.label=1;case 1:_e.trys.push([1,6,7,8]),before_1=__values(before),before_1_1=before_1.next(),_e.label=2;case 2:return before_1_1.done?[3,5]:[4,before_1_1.value.execute(__assign({},event))];case 3:event=_e.sent(),_e.label=4;case 4:return before_1_1=before_1.next(),[3,2];case 5:return[3,8];case 6:return e_1_1=_e.sent(),e_1={error:e_1_1},[3,8];case 7:try{before_1_1&&!before_1_1.done&&(_c=before_1.return)&&_c.call(before_1)}finally{if(e_1)throw e_1.error}return[7];case 8:enrichment=this.plugins.filter((function(plugin){return plugin.type===PluginType.ENRICHMENT})),_e.label=9;case 9:_e.trys.push([9,14,15,16]),enrichment_1=__values(enrichment),enrichment_1_1=enrichment_1.next(),_e.label=10;case 10:return enrichment_1_1.done?[3,13]:[4,enrichment_1_1.value.execute(__assign({},event))];case 11:event=_e.sent(),_e.label=12;case 12:return enrichment_1_1=enrichment_1.next(),[3,10];case 13:return[3,16];case 14:return e_2_1=_e.sent(),e_2={error:e_2_1},[3,16];case 15:try{enrichment_1_1&&!enrichment_1_1.done&&(_d=enrichment_1.return)&&_d.call(enrichment_1)}finally{if(e_2)throw e_2.error}return[7];case 16:return destination=this.plugins.filter((function(plugin){return plugin.type===PluginType.DESTINATION})),executeDestinations=destination.map((function(plugin){var eventClone=__assign({},event);return plugin.execute(eventClone).catch((function(e){return buildResult(eventClone,0,String(e))}))})),Promise.all(executeDestinations).then((function(_a){var result=__read(_a,1)[0];resolve(result)})),[2]}}))}))},Timeline.prototype.flush=function(){return __awaiter(this,void 0,void 0,(function(){var queue,destination,executeDestinations,_this=this;return __generator(this,(function(_a){switch(_a.label){case 0:return queue=this.queue,this.queue=[],[4,Promise.all(queue.map((function(item){return _this.apply(item)})))];case 1:return _a.sent(),destination=this.plugins.filter((function(plugin){return plugin.type===PluginType.DESTINATION})),executeDestinations=destination.map((function(plugin){return plugin.flush&&plugin.flush()})),[4,Promise.all(executeDestinations)];case 2:return _a.sent(),[2]}}))}))},Timeline}(),AmplitudeCore=function(){function AmplitudeCore(name){void 0===name&&(name="$default"),this.initializing=!1,this.q=[],this.logEvent=this.track.bind(this),this.timeline=new Timeline,this.name=name}return AmplitudeCore.prototype._init=function(config){return __awaiter(this,void 0,void 0,(function(){var queuedFunctions,queuedFunctions_1,queuedFunctions_1_1,e_1_1,e_1,_a;return __generator(this,(function(_b){switch(_b.label){case 0:this.config=config,this.timeline.reset(),queuedFunctions=this.q,this.q=[],_b.label=1;case 1:_b.trys.push([1,6,7,8]),queuedFunctions_1=__values(queuedFunctions),queuedFunctions_1_1=queuedFunctions_1.next(),_b.label=2;case 2:return queuedFunctions_1_1.done?[3,5]:[4,(0,queuedFunctions_1_1.value)()];case 3:_b.sent(),_b.label=4;case 4:return queuedFunctions_1_1=queuedFunctions_1.next(),[3,2];case 5:return[3,8];case 6:return e_1_1=_b.sent(),e_1={error:e_1_1},[3,8];case 7:try{queuedFunctions_1_1&&!queuedFunctions_1_1.done&&(_a=queuedFunctions_1.return)&&_a.call(queuedFunctions_1)}finally{if(e_1)throw e_1.error}return[7];case 8:return[2]}}))}))},AmplitudeCore.prototype.track=function(eventInput,eventProperties,eventOptions){var event=function(eventInput,eventProperties,eventOptions){return __assign(__assign(__assign({},"string"==typeof eventInput?{event_type:eventInput}:eventInput),eventOptions),eventProperties&&{event_properties:eventProperties})}(eventInput,eventProperties,eventOptions);return this.dispatch(event)},AmplitudeCore.prototype.identify=function(identify,eventOptions){var event=createIdentifyEvent(identify,eventOptions);return this.dispatch(event)},AmplitudeCore.prototype.groupIdentify=function(groupType,groupName,identify,eventOptions){var event=function(groupType,groupName,identify,eventOptions){var _a;return __assign(__assign({},eventOptions),{event_type:SpecialEventType.GROUP_IDENTIFY,group_properties:identify.getUserProperties(),groups:(_a={},_a[groupType]=groupName,_a)})}(groupType,groupName,identify,eventOptions);return this.dispatch(event)},AmplitudeCore.prototype.setGroup=function(groupType,groupName,eventOptions){var event=function(groupType,groupName,eventOptions){var _a,identify=new Identify;return identify.set(groupType,groupName),__assign(__assign({},eventOptions),{event_type:SpecialEventType.IDENTIFY,user_properties:identify.getUserProperties(),groups:(_a={},_a[groupType]=groupName,_a)})}(groupType,groupName,eventOptions);return this.dispatch(event)},AmplitudeCore.prototype.revenue=function(revenue,eventOptions){var event=function(revenue,eventOptions){return __assign(__assign({},eventOptions),{event_type:SpecialEventType.REVENUE,event_properties:revenue.getEventProperties()})}(revenue,eventOptions);return this.dispatch(event)},AmplitudeCore.prototype.add=function(plugin){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){return this.config?[2,this.timeline.register(plugin,this.config)]:(this.q.push(this.add.bind(this,plugin)),[2])}))}))},AmplitudeCore.prototype.remove=function(pluginName){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){return this.config?[2,this.timeline.deregister(pluginName)]:(this.q.push(this.remove.bind(this,pluginName)),[2])}))}))},AmplitudeCore.prototype.dispatch=function(event){var _a;return __awaiter(this,void 0,void 0,(function(){var result,e_2,message;return __generator(this,(function(_b){switch(_b.label){case 0:return _b.trys.push([0,2,,3]),(null===(_a=this.config)||void 0===_a?void 0:_a.optOut)?[2,buildResult(event,0,"Event skipped due to optOut config")]:[4,this.timeline.push(event)];case 1:return 200===(result=_b.sent()).code?this.config.loggerProvider.log(result.message):this.config.loggerProvider.error(result.message),[2,result];case 2:return e_2=_b.sent(),message=String(e_2),this.config.loggerProvider.error(message),[2,buildResult(event,0,message)];case 3:return[2]}}))}))},AmplitudeCore.prototype.setOptOut=function(optOut){this.config?this.config.optOut=Boolean(optOut):this.q.push(this.setOptOut.bind(this,Boolean(optOut)))},AmplitudeCore.prototype.flush=function(){return this.timeline.flush()},AmplitudeCore}(),returnWrapper=function(fn){return function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];return{promise:fn.apply(void 0,__spreadArray([],__read(args),!1))}}},ua_parser=__webpack_require__("./node_modules/@amplitude/ua-parser-js/src/ua-parser.js"),ua_parser_default=__webpack_require__.n(ua_parser),ApplicationContextProviderImpl=function(){function ApplicationContextProviderImpl(){this.ua=new ua_parser.UAParser("undefined"!=typeof navigator?navigator.userAgent:null).getResult()}return ApplicationContextProviderImpl.prototype.getApplicationContext=function(){return{versionName:this.versionName,language:getLanguage(),platform:"Web",os:getOs(this.ua),deviceModel:getDeviceModel(this.ua)}},ApplicationContextProviderImpl}(),getOs=function(ua){var _a,_b;return[null===(_a=ua.browser)||void 0===_a?void 0:_a.name,null===(_b=ua.browser)||void 0===_b?void 0:_b.major].filter((function(e){return null!=e})).join(" ")},getDeviceModel=function(ua){var _a;return null===(_a=ua.os)||void 0===_a?void 0:_a.name},getLanguage=function(){return"undefined"!=typeof navigator&&(navigator.languages&&navigator.languages[0]||navigator.language)||""},EventBridgeImpl=function(){function EventBridgeImpl(){this.queue=[]}return EventBridgeImpl.prototype.logEvent=function(event){this.receiver?this.receiver(event):this.queue.length<512&&this.queue.push(event)},EventBridgeImpl.prototype.setEventReceiver=function(receiver){this.receiver=receiver,this.queue.length>0&&(this.queue.forEach((function(event){receiver(event)})),this.queue=[])},EventBridgeImpl}(),analyticsConnector_esm_assign=function(){return analyticsConnector_esm_assign=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},analyticsConnector_esm_assign.apply(this,arguments)};Object.entries||(Object.entries=function(obj){for(var ownProps=Object.keys(obj),i=ownProps.length,resArray=new Array(i);i--;)resArray[i]=[ownProps[i],obj[ownProps[i]]];return resArray});var TransportType,IdentityStoreImpl=function(){function IdentityStoreImpl(){this.identity={userProperties:{}},this.listeners=new Set}return IdentityStoreImpl.prototype.editIdentity=function(){var self=this,actingUserProperties=analyticsConnector_esm_assign({},this.identity.userProperties),actingIdentity=analyticsConnector_esm_assign(analyticsConnector_esm_assign({},this.identity),{userProperties:actingUserProperties});return{setUserId:function(userId){return actingIdentity.userId=userId,this},setDeviceId:function(deviceId){return actingIdentity.deviceId=deviceId,this},setUserProperties:function(userProperties){return actingIdentity.userProperties=userProperties,this},updateUserProperties:function(actions){for(var actingProperties=actingIdentity.userProperties||{},_i=0,_a=Object.entries(actions);_i<_a.length;_i++){var _b=_a[_i],action=_b[0],properties=_b[1];switch(action){case"$set":for(var _c=0,_d=Object.entries(properties);_c<_d.length;_c++){var _e=_d[_c],key=_e[0],value=_e[1];actingProperties[key]=value}break;case"$unset":for(var _f=0,_g=Object.keys(properties);_f<_g.length;_f++){delete actingProperties[key=_g[_f]]}break;case"$clearAll":actingProperties={}}}return actingIdentity.userProperties=actingProperties,this},commit:function(){return self.setIdentity(actingIdentity),this}}},IdentityStoreImpl.prototype.getIdentity=function(){return analyticsConnector_esm_assign({},this.identity)},IdentityStoreImpl.prototype.setIdentity=function(identity){var originalIdentity=analyticsConnector_esm_assign({},this.identity);this.identity=analyticsConnector_esm_assign({},identity),isEqual(originalIdentity,this.identity)||this.listeners.forEach((function(listener){listener(identity)}))},IdentityStoreImpl.prototype.addIdentityListener=function(listener){this.listeners.add(listener)},IdentityStoreImpl.prototype.removeIdentityListener=function(listener){this.listeners.delete(listener)},IdentityStoreImpl}(),isEqual=function(obj1,obj2){var typeA=typeof obj1;if(typeA!==typeof obj2)return!1;for(var _i=0,primitive_1=["string","number","boolean","undefined"];_i<primitive_1.length;_i++){if(primitive_1[_i]===typeA)return obj1===obj2}if(obj1.length!==obj2.length)return!1;var isArrayA=Array.isArray(obj1),isArrayB=Array.isArray(obj2);if(isArrayA!==isArrayB)return!1;if(!isArrayA||!isArrayB){var sorted1=Object.keys(obj1).sort(),sorted2=Object.keys(obj2).sort();if(!isEqual(sorted1,sorted2))return!1;var result_1=!0;return Object.keys(obj1).forEach((function(key){isEqual(obj1[key],obj2[key])||(result_1=!1)})),result_1}for(var i=0;i<obj1.length;i++)if(!isEqual(obj1[i],obj2[i]))return!1;return!0},safeGlobal="undefined"!=typeof globalThis?globalThis:__webpack_require__.g||self,AnalyticsConnector=function(){function AnalyticsConnector(){this.identityStore=new IdentityStoreImpl,this.eventBridge=new EventBridgeImpl,this.applicationContextProvider=new ApplicationContextProviderImpl}return AnalyticsConnector.getInstance=function(instanceName){return safeGlobal.analyticsConnectorInstances||(safeGlobal.analyticsConnectorInstances={}),safeGlobal.analyticsConnectorInstances[instanceName]||(safeGlobal.analyticsConnectorInstances[instanceName]=new AnalyticsConnector),safeGlobal.analyticsConnectorInstances[instanceName]},AnalyticsConnector}(),getAnalyticsConnector=function(){return AnalyticsConnector.getInstance("$default_instance")},IdentityEventSender=function(){function IdentityEventSender(){this.name="identity",this.type=PluginType.BEFORE,this.identityStore=getAnalyticsConnector().identityStore}return IdentityEventSender.prototype.execute=function(context){return __awaiter(this,void 0,void 0,(function(){var userProperties;return __generator(this,(function(_a){return(userProperties=context.user_properties)&&this.identityStore.editIdentity().updateUserProperties(userProperties).commit(),[2,context]}))}))},IdentityEventSender.prototype.setup=function(_){return Promise.resolve(void 0)},IdentityEventSender}(),getCookieName=function(apiKey,postKey,limit){return void 0===postKey&&(postKey=""),void 0===limit&&(limit=10),[AMPLITUDE_PREFIX,postKey,apiKey.substring(0,limit)].filter(Boolean).join("_")},getQueryParams=function(){return"undefined"!=typeof window&&window.location&&window.location.search?window.location.search.substring(1).split("&").filter(Boolean).reduce((function(acc,curr){var query=curr.split("=",2),key=tryDecodeURIComponent(query[0]),value=tryDecodeURIComponent(query[1]);return value?(acc[key]=value,acc):acc}),{}):{}},tryDecodeURIComponent=function(value){void 0===value&&(value="");try{return decodeURIComponent(value)}catch(_a){return""}},BASE_CAMPAIGN={utm_source:void 0,utm_medium:void 0,utm_campaign:void 0,utm_term:void 0,utm_content:void 0,referrer:void 0,referring_domain:void 0,dclid:void 0,gbraid:void 0,gclid:void 0,fbclid:void 0,ko_click_id:void 0,msclkid:void 0,ttclid:void 0,twclid:void 0,wbraid:void 0},CampaignParser=function(){function CampaignParser(){}return CampaignParser.prototype.parse=function(){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,__assign(__assign(__assign(__assign({},BASE_CAMPAIGN),this.getUtmParam()),this.getReferrer()),this.getClickIds())]}))}))},CampaignParser.prototype.getUtmParam=function(){var params=getQueryParams();return{utm_source:params.utm_source,utm_medium:params.utm_medium,utm_campaign:params.utm_campaign,utm_term:params.utm_term,utm_content:params.utm_content}},CampaignParser.prototype.getReferrer=function(){var _a,_b,data={referrer:void 0,referring_domain:void 0};try{data.referrer=document.referrer||void 0,data.referring_domain=null!==(_b=null===(_a=data.referrer)||void 0===_a?void 0:_a.split("/")[2])&&void 0!==_b?_b:void 0}catch(_c){}return data},CampaignParser.prototype.getClickIds=function(){var _a,params=getQueryParams();return(_a={}).dclid=params.dclid,_a.fbclid=params.fbclid,_a.gbraid=params.gbraid,_a.gclid=params.gclid,_a.ko_click_id=params.ko_click_id,_a.msclkid=params.msclkid,_a.ttclid=params.ttclid,_a.twclid=params.twclid,_a.wbraid=params.wbraid,_a},CampaignParser}(),CampaignTracker=function(){function CampaignTracker(apiKey,options){var _a,_b;this.storage=options.storage,this.storageKey=getCookieName(apiKey,"MKTG"),this.parser=new CampaignParser,this.track=options.track,this.onNewCampaign=options.onNewCampaign,this.disabled=Boolean(options.disabled),this.trackNewCampaigns=Boolean(options.trackNewCampaigns),this.trackPageViews=Boolean(options.trackPageViews),this.excludeReferrers=null!==(_a=options.excludeReferrers)&&void 0!==_a?_a:[],"undefined"!=typeof location&&this.excludeReferrers.unshift(location.hostname),this.initialEmptyValue=null!==(_b=options.initialEmptyValue)&&void 0!==_b?_b:"EMPTY"}return CampaignTracker.prototype.isNewCampaign=function(current,previous){current.referrer;var currentCampaign=__rest(current,["referrer"]),_a=previous||{},previousCampaign=(_a.referrer,__rest(_a,["referrer"])),isReferrerExcluded=Boolean(currentCampaign.referring_domain&&this.excludeReferrers.includes(currentCampaign.referring_domain)),hasNewCampaign=JSON.stringify(currentCampaign)!==JSON.stringify(previousCampaign);return!isReferrerExcluded&&(!previous||hasNewCampaign)},CampaignTracker.prototype.saveCampaignToStorage=function(campaign){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){switch(_a.label){case 0:return[4,this.storage.set(this.storageKey,campaign)];case 1:return _a.sent(),[2]}}))}))},CampaignTracker.prototype.getCampaignFromStorage=function(){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){switch(_a.label){case 0:return[4,this.storage.get(this.storageKey)];case 1:return[2,_a.sent()]}}))}))},CampaignTracker.prototype.createCampaignEvent=function(campaign){var _this=this,campaignParameters=__assign(__assign({},BASE_CAMPAIGN),campaign),identifyEvent=Object.entries(campaignParameters).reduce((function(identify,_a){var _b=__read(_a,2),key=_b[0],value=_b[1];return identify.setOnce("initial_".concat(key),value||_this.initialEmptyValue),value?identify.set(key,value):identify.unset(key)}),new Identify),pageViewEvent={event_type:"Page View",event_properties:{page_title:"undefined"!=typeof document&&document.title||"",page_location:"undefined"!=typeof location&&location.href||"",page_path:"undefined"!=typeof location&&location.pathname||""}};return __assign(__assign({},createIdentifyEvent(identifyEvent)),this.trackPageViews&&pageViewEvent)},CampaignTracker.prototype.send=function(isNewSession){return __awaiter(this,void 0,void 0,(function(){var currentCampaign,previousCampaign;return __generator(this,(function(_a){switch(_a.label){case 0:return this.disabled?[2]:[4,this.parser.parse()];case 1:return currentCampaign=_a.sent(),[4,this.getCampaignFromStorage()];case 2:if(previousCampaign=_a.sent(),!isNewSession){if(!this.trackNewCampaigns||!this.isNewCampaign(currentCampaign,previousCampaign))return[2];this.onNewCampaign(currentCampaign)}return[4,this.track(this.createCampaignEvent(currentCampaign))];case 3:return _a.sent(),[4,this.saveCampaignToStorage(currentCampaign)];case 4:return _a.sent(),[2]}}))}))},CampaignTracker}(),runQueuedFunctions=function(instance,queue){convertProxyObjectToRealObject(instance,queue)},convertProxyObjectToRealObject=function(instance,queue){for(var i=0;i<queue.length;i++){var _a=queue[i],name_1=_a.name,args=_a.args,resolve=_a.resolve,fn=instance&&instance[name_1];if("function"==typeof fn){var result=fn.apply(instance,args);"function"==typeof resolve&&resolve(null==result?void 0:result.promise)}}return instance},isInstanceProxy=function(instance){return instance&&void 0!==instance._q},language_getLanguage=function(){var _a,_b,_c,_d;if("undefined"==typeof navigator)return"";var userLanguage=navigator.userLanguage;return null!==(_d=null!==(_c=null!==(_b=null===(_a=navigator.languages)||void 0===_a?void 0:_a[0])&&void 0!==_b?_b:navigator.language)&&void 0!==_c?_c:userLanguage)&&void 0!==_d?_d:""},Context=function(){function Context(){var agent;this.name="context",this.type=PluginType.BEFORE,this.eventId=0,this.library="amplitude-ts/".concat("1.5.4"),"undefined"!=typeof navigator&&(agent=navigator.userAgent),this.uaResult=new(ua_parser_default())(agent).getResult()}return Context.prototype.setup=function(config){return this.config=config,Promise.resolve(void 0)},Context.prototype.execute=function(context){return __awaiter(this,void 0,void 0,(function(){var time,osName,osVersion,deviceModel,deviceVendor;return __generator(this,(function(_a){return this.isSessionValid()||(this.config.sessionId=Date.now()),this.config.lastEventTime=Date.now(),time=(new Date).getTime(),osName=this.uaResult.browser.name,osVersion=this.uaResult.browser.version,deviceModel=this.uaResult.device.model||this.uaResult.os.name,deviceVendor=this.uaResult.device.vendor,[2,__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({user_id:this.config.userId,device_id:this.config.deviceId,session_id:this.config.sessionId,time},this.config.appVersion&&{app_version:this.config.appVersion}),this.config.trackingOptions.platform&&{platform:"Web"}),this.config.trackingOptions.osName&&{os_name:osName}),this.config.trackingOptions.osVersion&&{os_version:osVersion}),this.config.trackingOptions.deviceManufacturer&&{device_manufacturer:deviceVendor}),this.config.trackingOptions.deviceModel&&{device_model:deviceModel}),this.config.trackingOptions.language&&{language:language_getLanguage()}),this.config.trackingOptions.ipAddress&&{ip:"$remote"}),{insert_id:UUID(),partner_id:this.config.partnerId,plan:this.config.plan}),this.config.ingestionMetadata&&{ingestion_metadata:{source_name:this.config.ingestionMetadata.sourceName,source_version:this.config.ingestionMetadata.sourceVersion}}),context),{event_id:this.eventId++,library:this.library})]}))}))},Context.prototype.isSessionValid=function(){var lastEventTime=this.config.lastEventTime||Date.now();return Date.now()-lastEventTime<this.config.sessionTimeout},Context}();!function(TransportType){TransportType.XHR="xhr",TransportType.SendBeacon="beacon",TransportType.Fetch="fetch"}(TransportType||(TransportType={}));var MemoryStorage=function(){function MemoryStorage(){this.memoryStorage=new Map}return MemoryStorage.prototype.isEnabled=function(){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,!0]}))}))},MemoryStorage.prototype.get=function(key){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,this.memoryStorage.get(key)]}))}))},MemoryStorage.prototype.getRaw=function(key){return __awaiter(this,void 0,void 0,(function(){var value;return __generator(this,(function(_a){switch(_a.label){case 0:return[4,this.get(key)];case 1:return[2,(value=_a.sent())?JSON.stringify(value):void 0]}}))}))},MemoryStorage.prototype.set=function(key,value){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){return this.memoryStorage.set(key,value),[2]}))}))},MemoryStorage.prototype.remove=function(key){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){return this.memoryStorage.delete(key),[2]}))}))},MemoryStorage.prototype.reset=function(){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){return this.memoryStorage.clear(),[2]}))}))},MemoryStorage}(),SessionManager=function(){function SessionManager(storage,apiKey){this.storage=storage,this.isSessionCacheValid=!0,this.storageKey=getCookieName(apiKey),this.cache={optOut:!1}}return SessionManager.prototype.load=function(){var _a;return __awaiter(this,void 0,void 0,(function(){var _b;return __generator(this,(function(_c){switch(_c.label){case 0:return _b=this,[4,this.storage.get(this.storageKey)];case 1:return _b.cache=null!==(_a=_c.sent())&&void 0!==_a?_a:{optOut:!1},[2,this]}}))}))},SessionManager.prototype.setSession=function(session){this.cache=__assign(__assign({},this.cache),session),this.storage.set(this.storageKey,this.cache)},SessionManager.prototype.getSessionId=function(){var _this=this;return this.isSessionCacheValid=!0,this.storage.get(this.storageKey).then((function(userSession){_this.isSessionCacheValid&&(_this.cache.sessionId=null==userSession?void 0:userSession.sessionId)})),this.cache.sessionId},SessionManager.prototype.setSessionId=function(sessionId){this.isSessionCacheValid=!1,this.setSession({sessionId})},SessionManager.prototype.getDeviceId=function(){return this.cache.deviceId},SessionManager.prototype.setDeviceId=function(deviceId){this.setSession({deviceId})},SessionManager.prototype.getUserId=function(){return this.cache.userId},SessionManager.prototype.setUserId=function(userId){this.setSession({userId})},SessionManager.prototype.getLastEventTime=function(){return this.cache.lastEventTime},SessionManager.prototype.setLastEventTime=function(lastEventTime){this.setSession({lastEventTime})},SessionManager.prototype.getOptOut=function(){return this.cache.optOut},SessionManager.prototype.setOptOut=function(optOut){this.setSession({optOut})},SessionManager}(),BaseTransport=function(){function BaseTransport(){}return BaseTransport.prototype.send=function(_serverUrl,_payload){return Promise.resolve(null)},BaseTransport.prototype.buildResponse=function(responseJSON){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x;if("object"!=typeof responseJSON)return null;var statusCode=responseJSON.code||0,status=this.buildStatus(statusCode);switch(status){case Status.Success:return{status,statusCode,body:{eventsIngested:null!==(_a=responseJSON.events_ingested)&&void 0!==_a?_a:0,payloadSizeBytes:null!==(_b=responseJSON.payload_size_bytes)&&void 0!==_b?_b:0,serverUploadTime:null!==(_c=responseJSON.server_upload_time)&&void 0!==_c?_c:0}};case Status.Invalid:return{status,statusCode,body:{error:null!==(_d=responseJSON.error)&&void 0!==_d?_d:"",missingField:null!==(_e=responseJSON.missing_field)&&void 0!==_e?_e:"",eventsWithInvalidFields:null!==(_f=responseJSON.events_with_invalid_fields)&&void 0!==_f?_f:{},eventsWithMissingFields:null!==(_g=responseJSON.events_with_missing_fields)&&void 0!==_g?_g:{},eventsWithInvalidIdLengths:null!==(_h=responseJSON.events_with_invalid_id_lengths)&&void 0!==_h?_h:{},epsThreshold:null!==(_j=responseJSON.eps_threshold)&&void 0!==_j?_j:0,exceededDailyQuotaDevices:null!==(_k=responseJSON.exceeded_daily_quota_devices)&&void 0!==_k?_k:{},silencedDevices:null!==(_l=responseJSON.silenced_devices)&&void 0!==_l?_l:[],silencedEvents:null!==(_m=responseJSON.silenced_events)&&void 0!==_m?_m:[],throttledDevices:null!==(_o=responseJSON.throttled_devices)&&void 0!==_o?_o:{},throttledEvents:null!==(_p=responseJSON.throttled_events)&&void 0!==_p?_p:[]}};case Status.PayloadTooLarge:return{status,statusCode,body:{error:null!==(_q=responseJSON.error)&&void 0!==_q?_q:""}};case Status.RateLimit:return{status,statusCode,body:{error:null!==(_r=responseJSON.error)&&void 0!==_r?_r:"",epsThreshold:null!==(_s=responseJSON.eps_threshold)&&void 0!==_s?_s:0,throttledDevices:null!==(_t=responseJSON.throttled_devices)&&void 0!==_t?_t:{},throttledUsers:null!==(_u=responseJSON.throttled_users)&&void 0!==_u?_u:{},exceededDailyQuotaDevices:null!==(_v=responseJSON.exceeded_daily_quota_devices)&&void 0!==_v?_v:{},exceededDailyQuotaUsers:null!==(_w=responseJSON.exceeded_daily_quota_users)&&void 0!==_w?_w:{},throttledEvents:null!==(_x=responseJSON.throttled_events)&&void 0!==_x?_x:[]}};case Status.Timeout:default:return{status,statusCode}}},BaseTransport.prototype.buildStatus=function(code){return code>=200&&code<300?Status.Success:429===code?Status.RateLimit:413===code?Status.PayloadTooLarge:408===code?Status.Timeout:code>=400&&code<500?Status.Invalid:code>=500?Status.Failed:Status.Unknown},BaseTransport}(),FetchTransport=function(_super){function FetchTransport(){return null!==_super&&_super.apply(this,arguments)||this}return __extends(FetchTransport,_super),FetchTransport.prototype.send=function(serverUrl,payload){return __awaiter(this,void 0,void 0,(function(){var options,responsePayload;return __generator(this,(function(_a){switch(_a.label){case 0:if("undefined"==typeof fetch)throw new Error("FetchTransport is not supported");return options={headers:{"Content-Type":"application/json",Accept:"*/*"},body:JSON.stringify(payload),method:"POST"},[4,fetch(serverUrl,options)];case 1:return[4,_a.sent().json()];case 2:return responsePayload=_a.sent(),[2,this.buildResponse(responsePayload)]}}))}))},FetchTransport}(BaseTransport),CookieStorage=function(){function CookieStorage(options){this.options=__assign({},options)}return CookieStorage.prototype.isEnabled=function(){return __awaiter(this,void 0,void 0,(function(){var random,testStrorage,testKey;return __generator(this,(function(_b){switch(_b.label){case 0:if("undefined"==typeof window)return[2,!1];random=String(Date.now()),testStrorage=new CookieStorage(this.options),testKey="AMP_TEST",_b.label=1;case 1:return _b.trys.push([1,4,5,7]),[4,testStrorage.set(testKey,random)];case 2:return _b.sent(),[4,testStrorage.get(testKey)];case 3:return[2,_b.sent()===random];case 4:return _b.sent(),[2,!1];case 5:return[4,testStrorage.remove(testKey)];case 6:return _b.sent(),[7];case 7:return[2]}}))}))},CookieStorage.prototype.get=function(key){return __awaiter(this,void 0,void 0,(function(){var value;return __generator(this,(function(_a){switch(_a.label){case 0:return[4,this.getRaw(key)];case 1:if(!(value=_a.sent()))return[2,void 0];try{try{value=decodeURIComponent(atob(value))}catch(_b){}return[2,JSON.parse(value)]}catch(_c){return[2,void 0]}return[2]}}))}))},CookieStorage.prototype.getRaw=function(key){return __awaiter(this,void 0,void 0,(function(){var cookie,match;return __generator(this,(function(_a){return cookie=window.document.cookie.split("; "),(match=cookie.find((function(c){return 0===c.indexOf(key+"=")})))?[2,match.substring(key.length+1)]:[2,void 0]}))}))},CookieStorage.prototype.set=function(key,value){var _a;return __awaiter(this,void 0,void 0,(function(){var expirationDays,expires,expireDate,date,str;return __generator(this,(function(_b){try{expirationDays=null!==(_a=this.options.expirationDays)&&void 0!==_a?_a:0,expireDate=void 0,(expires=null!==value?expirationDays:-1)&&((date=new Date).setTime(date.getTime()+24*expires*60*60*1e3),expireDate=date),str="".concat(key,"=").concat(btoa(encodeURIComponent(JSON.stringify(value)))),expireDate&&(str+="; expires=".concat(expireDate.toUTCString())),str+="; path=/",this.options.domain&&(str+="; domain=".concat(this.options.domain)),this.options.secure&&(str+="; Secure"),this.options.sameSite&&(str+="; SameSite=".concat(this.options.sameSite)),window.document.cookie=str}catch(_c){}return[2]}))}))},CookieStorage.prototype.remove=function(key){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){switch(_a.label){case 0:return[4,this.set(key,null)];case 1:return _a.sent(),[2]}}))}))},CookieStorage.prototype.reset=function(){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){return[2]}))}))},CookieStorage}(),LocalStorage=function(){function LocalStorage(){}return LocalStorage.prototype.isEnabled=function(){return __awaiter(this,void 0,void 0,(function(){var random,testStorage,testKey;return __generator(this,(function(_b){switch(_b.label){case 0:if("undefined"==typeof window)return[2,!1];random=String(Date.now()),testStorage=new LocalStorage,testKey="AMP_TEST",_b.label=1;case 1:return _b.trys.push([1,4,5,7]),[4,testStorage.set(testKey,random)];case 2:return _b.sent(),[4,testStorage.get(testKey)];case 3:return[2,_b.sent()===random];case 4:return _b.sent(),[2,!1];case 5:return[4,testStorage.remove(testKey)];case 6:return _b.sent(),[7];case 7:return[2]}}))}))},LocalStorage.prototype.get=function(key){return __awaiter(this,void 0,void 0,(function(){var value;return __generator(this,(function(_b){switch(_b.label){case 0:return _b.trys.push([0,2,,3]),[4,this.getRaw(key)];case 1:return(value=_b.sent())?[2,JSON.parse(value)]:[2,void 0];case 2:return _b.sent(),[2,void 0];case 3:return[2]}}))}))},LocalStorage.prototype.getRaw=function(key){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,window.localStorage.getItem(key)||void 0]}))}))},LocalStorage.prototype.set=function(key,value){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){try{window.localStorage.setItem(key,JSON.stringify(value))}catch(_b){}return[2]}))}))},LocalStorage.prototype.remove=function(key){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){try{window.localStorage.removeItem(key)}catch(_b){}return[2]}))}))},LocalStorage.prototype.reset=function(){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){try{window.localStorage.clear()}catch(_b){}return[2]}))}))},LocalStorage}(),XHRTransport=function(_super){function XHRTransport(){var _this=null!==_super&&_super.apply(this,arguments)||this;return _this.state={done:4},_this}return __extends(XHRTransport,_super),XHRTransport.prototype.send=function(serverUrl,payload){return __awaiter(this,void 0,void 0,(function(){var _this=this;return __generator(this,(function(_a){return[2,new Promise((function(resolve,reject){"undefined"==typeof XMLHttpRequest&&reject(new Error("XHRTransport is not supported."));var xhr=new XMLHttpRequest;xhr.open("POST",serverUrl,!0),xhr.onreadystatechange=function(){if(xhr.readyState===_this.state.done)try{var responsePayload=xhr.responseText,parsedResponsePayload=JSON.parse(responsePayload),result=_this.buildResponse(parsedResponsePayload);resolve(result)}catch(e){reject(e)}},xhr.setRequestHeader("Content-Type","application/json"),xhr.setRequestHeader("Accept","*/*"),xhr.send(JSON.stringify(payload))}))]}))}))},XHRTransport}(BaseTransport),SendBeaconTransport=function(_super){function SendBeaconTransport(){return null!==_super&&_super.apply(this,arguments)||this}return __extends(SendBeaconTransport,_super),SendBeaconTransport.prototype.send=function(serverUrl,payload){return __awaiter(this,void 0,void 0,(function(){var _this=this;return __generator(this,(function(_a){return[2,new Promise((function(resolve,reject){if("undefined"==typeof window||void 0===window.navigator||void 0===window.navigator.sendBeacon)throw new Error("SendBeaconTransport is not supported");try{var data=JSON.stringify(payload);return resolve(window.navigator.sendBeacon(serverUrl,JSON.stringify(payload))?_this.buildResponse({code:200,events_ingested:payload.events.length,payload_size_bytes:data.length,server_upload_time:Date.now()}):_this.buildResponse({code:500}))}catch(e){reject(e)}}))]}))}))},SendBeaconTransport}(BaseTransport),config_getDefaultConfig=function(){var cookieStorage=new MemoryStorage;return{cookieExpiration:365,cookieSameSite:"Lax",cookieSecure:!1,cookieStorage,disableCookies:!1,domain:"",sessionManager:new SessionManager(cookieStorage,""),sessionTimeout:18e5,storageProvider:new MemoryStorage,trackingOptions:{deviceManufacturer:!0,deviceModel:!0,ipAddress:!0,language:!0,osName:!0,osVersion:!0,platform:!0},transportProvider:new FetchTransport}},BrowserConfig=function(_super){function BrowserConfig(apiKey,userId,options){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_this=this,defaultConfig=config_getDefaultConfig();return(_this=_super.call(this,__assign(__assign({flushIntervalMillis:1e3,flushMaxRetries:5,flushQueueSize:30},options),{apiKey,storageProvider:null!==(_a=null==options?void 0:options.storageProvider)&&void 0!==_a?_a:defaultConfig.storageProvider,transportProvider:null!==(_b=null==options?void 0:options.transportProvider)&&void 0!==_b?_b:defaultConfig.transportProvider}))||this).cookieStorage=null!==(_c=null==options?void 0:options.cookieStorage)&&void 0!==_c?_c:defaultConfig.cookieStorage,_this.sessionManager=null!==(_d=null==options?void 0:options.sessionManager)&&void 0!==_d?_d:defaultConfig.sessionManager,_this.sessionTimeout=null!==(_e=null==options?void 0:options.sessionTimeout)&&void 0!==_e?_e:defaultConfig.sessionTimeout,_this.appVersion=null==options?void 0:options.appVersion,_this.attribution=null==options?void 0:options.attribution,_this.cookieExpiration=null!==(_f=null==options?void 0:options.cookieExpiration)&&void 0!==_f?_f:defaultConfig.cookieExpiration,_this.cookieSameSite=null!==(_g=null==options?void 0:options.cookieSameSite)&&void 0!==_g?_g:defaultConfig.cookieSameSite,_this.cookieSecure=null!==(_h=null==options?void 0:options.cookieSecure)&&void 0!==_h?_h:defaultConfig.cookieSecure,_this.deviceId=null==options?void 0:options.deviceId,_this.disableCookies=null!==(_j=null==options?void 0:options.disableCookies)&&void 0!==_j?_j:defaultConfig.disableCookies,_this.domain=null!==(_k=null==options?void 0:options.domain)&&void 0!==_k?_k:defaultConfig.domain,_this.lastEventTime=null!==(_l=_this.lastEventTime)&&void 0!==_l?_l:null==options?void 0:options.lastEventTime,_this.optOut=Boolean(null==options?void 0:options.optOut),_this.partnerId=null==options?void 0:options.partnerId,_this.sessionId=null==options?void 0:options.sessionId,_this.trackingOptions=null!==(_m=null==options?void 0:options.trackingOptions)&&void 0!==_m?_m:defaultConfig.trackingOptions,_this.userId=userId,_this}return __extends(BrowserConfig,_super),Object.defineProperty(BrowserConfig.prototype,"deviceId",{get:function(){return this.sessionManager.getDeviceId()},set:function(deviceId){this.sessionManager.setDeviceId(deviceId)},enumerable:!1,configurable:!0}),Object.defineProperty(BrowserConfig.prototype,"userId",{get:function(){return this.sessionManager.getUserId()},set:function(userId){this.sessionManager.setUserId(userId)},enumerable:!1,configurable:!0}),Object.defineProperty(BrowserConfig.prototype,"sessionId",{get:function(){return this.sessionManager.getSessionId()},set:function(sessionId){this.sessionManager.setSessionId(sessionId)},enumerable:!1,configurable:!0}),Object.defineProperty(BrowserConfig.prototype,"optOut",{get:function(){return this.sessionManager.getOptOut()},set:function(optOut){var _a;null===(_a=this.sessionManager)||void 0===_a||_a.setOptOut(Boolean(optOut))},enumerable:!1,configurable:!0}),Object.defineProperty(BrowserConfig.prototype,"lastEventTime",{get:function(){return this.sessionManager.getLastEventTime()},set:function(lastEventTime){this.sessionManager.setLastEventTime(lastEventTime)},enumerable:!1,configurable:!0}),BrowserConfig}(Config),useBrowserConfig=function(apiKey,userId,options){return __awaiter(void 0,void 0,void 0,(function(){var defaultConfig,domain,_a,cookieStorage,cookieName,cookies,queryParams,sessionManager,_b,_c,_d,_e,_f,_g,_h,_j,_k;return __generator(this,(function(_l){switch(_l.label){case 0:return defaultConfig=config_getDefaultConfig(),null===(_f=null==options?void 0:options.domain)||void 0===_f?[3,1]:(_a=_f,[3,3]);case 1:return[4,getTopLevelDomain()];case 2:_a=_l.sent(),_l.label=3;case 3:return domain=_a,[4,createCookieStorage(__assign(__assign({},options),{domain}))];case 4:return cookieStorage=_l.sent(),cookieName=getCookieName(apiKey),[4,cookieStorage.get(cookieName)];case 5:return cookies=_l.sent(),queryParams=getQueryParams(),[4,new SessionManager(cookieStorage,apiKey).load()];case 6:return sessionManager=_l.sent(),_b=BrowserConfig.bind,_c=[void 0,apiKey,null!=userId?userId:null==cookies?void 0:cookies.userId],_d=[__assign({},options)],_e={cookieStorage,sessionManager,deviceId:createDeviceId(null==cookies?void 0:cookies.deviceId,null==options?void 0:options.deviceId,queryParams.deviceId),domain,optOut:null!==(_g=null==options?void 0:options.optOut)&&void 0!==_g?_g:Boolean(null==cookies?void 0:cookies.optOut)},[4,cookieStorage.get(cookieName)];case 7:return _e.sessionId=null!==(_j=null===(_h=_l.sent())||void 0===_h?void 0:_h.sessionId)&&void 0!==_j?_j:null==options?void 0:options.sessionId,[4,createEventsStorage(options)];case 8:return[2,new(_b.apply(BrowserConfig,_c.concat([__assign.apply(void 0,_d.concat([(_e.storageProvider=_l.sent(),_e.trackingOptions=__assign(__assign({},defaultConfig.trackingOptions),null==options?void 0:options.trackingOptions),_e.transportProvider=null!==(_k=null==options?void 0:options.transportProvider)&&void 0!==_k?_k:createTransport(null==options?void 0:options.transport),_e)]))])))]}}))}))},createCookieStorage=function(overrides,baseConfig){return void 0===baseConfig&&(baseConfig=config_getDefaultConfig()),__awaiter(void 0,void 0,void 0,(function(){var options,cookieStorage,_a;return __generator(this,(function(_b){switch(_b.label){case 0:return options=__assign(__assign({},baseConfig),overrides),cookieStorage=null==overrides?void 0:overrides.cookieStorage,(_a=!cookieStorage)?[3,2]:[4,cookieStorage.isEnabled()];case 1:_a=!_b.sent(),_b.label=2;case 2:return _a?[2,createFlexibleStorage(options)]:[2,cookieStorage]}}))}))},createFlexibleStorage=function(options){return __awaiter(void 0,void 0,void 0,(function(){var storage,_a;return __generator(this,(function(_b){switch(_b.label){case 0:return storage=new CookieStorage({domain:options.domain,expirationDays:options.cookieExpiration,sameSite:options.cookieSameSite,secure:options.cookieSecure}),(_a=options.disableCookies)?[3,2]:[4,storage.isEnabled()];case 1:_a=!_b.sent(),_b.label=2;case 2:return _a?[4,(storage=new LocalStorage).isEnabled()]:[3,4];case 3:_b.sent()||(storage=new MemoryStorage),_b.label=4;case 4:return[2,storage]}}))}))},createEventsStorage=function(overrides){return __awaiter(void 0,void 0,void 0,(function(){var _a,_b,storage,_c,e_1_1,e_1,_d;return __generator(this,(function(_e){switch(_e.label){case 0:if(overrides&&Object.prototype.hasOwnProperty.call(overrides,"storageProvider")&&!overrides.storageProvider)return[3,9];_e.label=1;case 1:_e.trys.push([1,7,8,9]),_a=__values([null==overrides?void 0:overrides.storageProvider,new LocalStorage]),_b=_a.next(),_e.label=2;case 2:return _b.done?[3,6]:(storage=_b.value,(_c=storage)?[4,storage.isEnabled()]:[3,4]);case 3:_c=_e.sent(),_e.label=4;case 4:if(_c)return[2,storage];_e.label=5;case 5:return _b=_a.next(),[3,2];case 6:return[3,9];case 7:return e_1_1=_e.sent(),e_1={error:e_1_1},[3,9];case 8:try{_b&&!_b.done&&(_d=_a.return)&&_d.call(_a)}finally{if(e_1)throw e_1.error}return[7];case 9:return[2,void 0]}}))}))},createDeviceId=function(idFromCookies,idFromOptions,idFromQueryParams){return idFromOptions||idFromQueryParams||idFromCookies||UUID()},createTransport=function(transport){return transport===TransportType.XHR?new XHRTransport:transport===TransportType.SendBeacon?new SendBeaconTransport:config_getDefaultConfig().transportProvider},getTopLevelDomain=function(url){return __awaiter(void 0,void 0,void 0,(function(){var host,parts,levels,storageKey,i,domain,storage;return __generator(this,(function(_a){switch(_a.label){case 0:return[4,(new CookieStorage).isEnabled()];case 1:if(!_a.sent()||!url&&"undefined"==typeof location)return[2,""];for(host=null!=url?url:location.hostname,parts=host.split("."),levels=[],storageKey="AMP_TLDTEST",i=parts.length-2;i>=0;--i)levels.push(parts.slice(i).join("."));i=0,_a.label=2;case 2:return i<levels.length?(domain=levels[i],[4,(storage=new CookieStorage({domain:"."+domain})).set(storageKey,1)]):[3,7];case 3:return _a.sent(),[4,storage.get(storageKey)];case 4:return _a.sent()?[4,storage.remove(storageKey)]:[3,6];case 5:return _a.sent(),[2,"."+domain];case 6:return i++,[3,2];case 7:return[2,""]}}))}))},parseOldCookies=function(apiKey,options){return __awaiter(void 0,void 0,void 0,(function(){var storage,oldCookieName,cookies,_a,deviceId,userId,optOut,sessionId,lastEventTime;return __generator(this,(function(_b){switch(_b.label){case 0:return[4,(storage=new CookieStorage).isEnabled()];case 1:return _b.sent()&&!(null==options?void 0:options.disableCookies)||(storage=new LocalStorage),[4,storage.isEnabled()];case 2:return _b.sent()?(oldCookieName=function(apiKey){return"".concat(AMPLITUDE_PREFIX.toLowerCase(),"_").concat(apiKey.substring(0,6))}(apiKey),[4,storage.getRaw(oldCookieName)]):[2,{optOut:!1}];case 3:return(cookies=_b.sent())?[4,storage.remove(oldCookieName)]:[2,{optOut:!1}];case 4:return _b.sent(),_a=__read(cookies.split("."),5),deviceId=_a[0],userId=_a[1],optOut=_a[2],sessionId=_a[3],lastEventTime=_a[4],[2,{deviceId,userId:decode(userId),sessionId:parseTime(sessionId),lastEventTime:parseTime(lastEventTime),optOut:Boolean(optOut)}]}}))}))},parseTime=function(num){var integer=parseInt(num,32);if(!isNaN(integer))return integer},decode=function(value){if(atob&&escape&&value)try{return decodeURIComponent(escape(atob(value)))}catch(_a){return}},AmplitudeBrowser=function(_super){function AmplitudeBrowser(){return null!==_super&&_super.apply(this,arguments)||this}return __extends(AmplitudeBrowser,_super),AmplitudeBrowser.prototype.init=function(apiKey,userId,options){var _a,_b,_c;return void 0===apiKey&&(apiKey=""),__awaiter(this,void 0,void 0,(function(){var oldCookies,browserOptions,isNewSession,connector,_this=this;return __generator(this,(function(_d){switch(_d.label){case 0:return this.initializing?[2]:(this.initializing=!0,[4,parseOldCookies(apiKey,options)]);case 1:return oldCookies=_d.sent(),[4,useBrowserConfig(apiKey,userId||oldCookies.userId,__assign(__assign({},options),{deviceId:null!==(_a=oldCookies.deviceId)&&void 0!==_a?_a:null==options?void 0:options.deviceId,sessionId:null!==(_b=oldCookies.sessionId)&&void 0!==_b?_b:null==options?void 0:options.sessionId,optOut:null!==(_c=null==options?void 0:options.optOut)&&void 0!==_c?_c:oldCookies.optOut,lastEventTime:oldCookies.lastEventTime}))];case 2:return browserOptions=_d.sent(),[4,_super.prototype._init.call(this,browserOptions)];case 3:return _d.sent(),isNewSession=!this.config.lastEventTime,(!this.config.sessionId||this.config.lastEventTime&&Date.now()-this.config.lastEventTime>this.config.sessionTimeout)&&(this.setSessionId(Date.now()),isNewSession=!0),(connector=getAnalyticsConnector()).eventBridge.setEventReceiver((function(event){_this.track(event.eventType,event.eventProperties)})),connector.identityStore.setIdentity({userId:this.config.userId,deviceId:this.config.deviceId}),[4,this.add(new Context)];case 4:return _d.sent(),[4,this.add(new IdentityEventSender)];case 5:return _d.sent(),[4,this.add(new Destination)];case 6:return _d.sent(),this.initializing=!1,this.timeline.isReady=!0,this.config.optOut||this.timeline.scheduleApply(0),[4,this.runAttributionStrategy(browserOptions.attribution,isNewSession)];case 7:return _d.sent(),[2]}}))}))},AmplitudeBrowser.prototype.runAttributionStrategy=function(attributionConfig,isNewSession){return void 0===isNewSession&&(isNewSession=!1),__awaiter(this,void 0,void 0,(function(){var track,onNewCampaign,storage;return __generator(this,(function(_a){switch(_a.label){case 0:return track=this.track.bind(this),onNewCampaign=this.setSessionId.bind(this,Date.now()),[4,createFlexibleStorage(this.config)];case 1:return storage=_a.sent(),[4,new CampaignTracker(this.config.apiKey,__assign(__assign({},attributionConfig),{storage,track,onNewCampaign})).send(isNewSession)];case 2:return _a.sent(),[2]}}))}))},AmplitudeBrowser.prototype.getUserId=function(){var _a;return null===(_a=this.config)||void 0===_a?void 0:_a.userId},AmplitudeBrowser.prototype.setUserId=function(userId){this.config?this.config.userId=userId:this.q.push(this.setUserId.bind(this,userId))},AmplitudeBrowser.prototype.getDeviceId=function(){var _a;return null===(_a=this.config)||void 0===_a?void 0:_a.deviceId},AmplitudeBrowser.prototype.setDeviceId=function(deviceId){this.config?this.config.deviceId=deviceId:this.q.push(this.setDeviceId.bind(this,deviceId))},AmplitudeBrowser.prototype.reset=function(){this.setUserId(void 0),this.setDeviceId(UUID())},AmplitudeBrowser.prototype.getSessionId=function(){var _a;return null===(_a=this.config)||void 0===_a?void 0:_a.sessionId},AmplitudeBrowser.prototype.setSessionId=function(sessionId){this.config?(this.config.sessionId=sessionId,this.config.lastEventTime=void 0):this.q.push(this.setSessionId.bind(this,sessionId))},AmplitudeBrowser.prototype.setTransport=function(transport){this.config?this.config.transportProvider=createTransport(transport):this.q.push(this.setTransport.bind(this,transport))},AmplitudeBrowser.prototype.identify=function(identify,eventOptions){if(isInstanceProxy(identify)){var queue=identify._q;identify._q=[],identify=convertProxyObjectToRealObject(new Identify,queue)}return _super.prototype.identify.call(this,identify,eventOptions)},AmplitudeBrowser.prototype.groupIdentify=function(groupType,groupName,identify,eventOptions){if(isInstanceProxy(identify)){var queue=identify._q;identify._q=[],identify=convertProxyObjectToRealObject(new Identify,queue)}return _super.prototype.groupIdentify.call(this,groupType,groupName,identify,eventOptions)},AmplitudeBrowser.prototype.revenue=function(revenue,eventOptions){if(isInstanceProxy(revenue)){var queue=revenue._q;revenue._q=[],revenue=convertProxyObjectToRealObject(new Revenue,queue)}return _super.prototype.revenue.call(this,revenue,eventOptions)},AmplitudeBrowser}(AmplitudeCore),createInstance=function(){var client=new AmplitudeBrowser;return{init:returnWrapper(client.init.bind(client)),add:returnWrapper(client.add.bind(client)),remove:returnWrapper(client.remove.bind(client)),track:returnWrapper(client.track.bind(client)),logEvent:returnWrapper(client.logEvent.bind(client)),identify:returnWrapper(client.identify.bind(client)),groupIdentify:returnWrapper(client.groupIdentify.bind(client)),setGroup:returnWrapper(client.setGroup.bind(client)),revenue:returnWrapper(client.revenue.bind(client)),flush:returnWrapper(client.flush.bind(client)),getUserId:client.getUserId.bind(client),setUserId:client.setUserId.bind(client),getDeviceId:client.getDeviceId.bind(client),setDeviceId:client.setDeviceId.bind(client),reset:client.reset.bind(client),getSessionId:client.getSessionId.bind(client),setSessionId:client.setSessionId.bind(client),setOptOut:client.setOptOut.bind(client),setTransport:client.setTransport.bind(client)}};const browser_client=createInstance();var add=browser_client.add,flush=browser_client.flush,getDeviceId=browser_client.getDeviceId,getSessionId=browser_client.getSessionId,getUserId=browser_client.getUserId,groupIdentify=browser_client.groupIdentify,identify=browser_client.identify,init=browser_client.init,logEvent=browser_client.logEvent,remove=browser_client.remove,esm_reset=browser_client.reset,revenue=browser_client.revenue,setDeviceId=browser_client.setDeviceId,setGroup=browser_client.setGroup,setOptOut=browser_client.setOptOut,setSessionId=browser_client.setSessionId,setTransport=browser_client.setTransport,setUserId=browser_client.setUserId,track=browser_client.track},"./node_modules/@amplitude/ua-parser-js/src/ua-parser.js":function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;!function(window,undefined){"use strict";var MODEL="model",NAME="name",TYPE="type",VENDOR="vendor",VERSION="version",MOBILE="mobile",TABLET="tablet",SMARTTV="smarttv",enumerize=function(arr){for(var enums={},i=0;i<arr.length;i++)enums[arr[i].toUpperCase()]=arr[i];return enums},has=function(str1,str2){return"string"==typeof str1&&-1!==lowerize(str2).indexOf(lowerize(str1))},lowerize=function(str){return str.toLowerCase()},trim=function(str,len){if("string"==typeof str)return str=str.replace(/^\s\s*/,"").replace(/\s\s*$/,""),void 0===len?str:str.substring(0,275)},rgxMapper=function(ua,arrays){for(var j,k,p,q,matches,match,i=0;i<arrays.length&&!matches;){var regex=arrays[i],props=arrays[i+1];for(j=k=0;j<regex.length&&!matches;)if(matches=regex[j++].exec(ua))for(p=0;p<props.length;p++)match=matches[++k],"object"==typeof(q=props[p])&&q.length>0?2===q.length?"function"==typeof q[1]?this[q[0]]=q[1].call(this,match):this[q[0]]=q[1]:3===q.length?"function"!=typeof q[1]||q[1].exec&&q[1].test?this[q[0]]=match?match.replace(q[1],q[2]):undefined:this[q[0]]=match?q[1].call(this,match,q[2]):undefined:4===q.length&&(this[q[0]]=match?q[3].call(this,match.replace(q[1],q[2])):undefined):this[q]=match||undefined;i+=2}},strMapper=function(str,map){for(var i in map)if("object"==typeof map[i]&&map[i].length>0){for(var j=0;j<map[i].length;j++)if(has(map[i][j],str))return"?"===i?undefined:i}else if(has(map[i],str))return"?"===i?undefined:i;return str},windowsVersionMap={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},regexes={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[VERSION,[NAME,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[VERSION,[NAME,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[NAME,VERSION],[/opios[\/ ]+([\w\.]+)/i],[VERSION,[NAME,"Opera Mini"]],[/\bopr\/([\w\.]+)/i],[VERSION,[NAME,"Opera"]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,/(ba?idubrowser)[\/ ]?([\w\.]+)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq)\/([-\w\.]+)/i,/(weibo)__([\d\.]+)/i],[NAME,VERSION],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[VERSION,[NAME,"UCBrowser"]],[/\bqbcore\/([\w\.]+)/i],[VERSION,[NAME,"WeChat(Win) Desktop"]],[/micromessenger\/([\w\.]+)/i],[VERSION,[NAME,"WeChat"]],[/konqueror\/([\w\.]+)/i],[VERSION,[NAME,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[VERSION,[NAME,"IE"]],[/yabrowser\/([\w\.]+)/i],[VERSION,[NAME,"Yandex"]],[/(avast|avg)\/([\w\.]+)/i],[[NAME,/(.+)/,"$1 Secure Browser"],VERSION],[/\bfocus\/([\w\.]+)/i],[VERSION,[NAME,"Firefox Focus"]],[/\bopt\/([\w\.]+)/i],[VERSION,[NAME,"Opera Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[VERSION,[NAME,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[VERSION,[NAME,"Dolphin"]],[/coast\/([\w\.]+)/i],[VERSION,[NAME,"Opera Coast"]],[/miuibrowser\/([\w\.]+)/i],[VERSION,[NAME,"MIUI Browser"]],[/fxios\/([-\w\.]+)/i],[VERSION,[NAME,"Firefox"]],[/\bqihu|(qi?ho?o?|360)browser/i],[[NAME,"360 Browser"]],[/(oculus|samsung|sailfish)browser\/([\w\.]+)/i],[[NAME,/(.+)/,"$1 Browser"],VERSION],[/(comodo_dragon)\/([\w\.]+)/i],[[NAME,/_/g," "],VERSION],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i],[NAME,VERSION],[/(metasr)[\/ ]?([\w\.]+)/i,/(lbbrowser)/i],[NAME],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[NAME,"Facebook"],VERSION],[/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(chromium|instagram)[\/ ]([-\w\.]+)/i],[NAME,VERSION],[/\bgsa\/([\w\.]+) .*safari\//i],[VERSION,[NAME,"GSA"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[VERSION,[NAME,"Chrome Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[NAME,"Chrome WebView"],VERSION],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[VERSION,[NAME,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[NAME,VERSION],[/version\/([\w\.]+) .*mobile\/\w+ (safari)/i],[VERSION,[NAME,"Mobile Safari"]],[/version\/([\w\.]+) .*(mobile ?safari|safari)/i],[VERSION,NAME],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[NAME,[VERSION,strMapper,{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(webkit|khtml)\/([\w\.]+)/i],[NAME,VERSION],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[NAME,"Netscape"],VERSION],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[VERSION,[NAME,"Firefox Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i],[NAME,VERSION]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[["architecture","amd64"]],[/(ia32(?=;))/i],[["architecture",lowerize]],[/((?:i[346]|x)86)[;\)]/i],[["architecture","ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[["architecture","arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[["architecture","armhf"]],[/windows (ce|mobile); ppc;/i],[["architecture","arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[["architecture",/ower/,"",lowerize]],[/(sun4\w)[;\)]/i],[["architecture","sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[["architecture",lowerize]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[pt]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[MODEL,[VENDOR,"Samsung"],[TYPE,TABLET]],[/\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[MODEL,[VENDOR,"Samsung"],[TYPE,MOBILE]],[/((ipod|iphone)\d+,\d+)/i],[MODEL,[VENDOR,"Apple"],[TYPE,MOBILE]],[/(ipad\d+,\d+)/i],[MODEL,[VENDOR,"Apple"],[TYPE,TABLET]],[/\((ip(?:hone|od)[\w ]*);/i],[MODEL,[VENDOR,"Apple"],[TYPE,MOBILE]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[MODEL,[VENDOR,"Apple"],[TYPE,TABLET]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[MODEL,[VENDOR,"Huawei"],[TYPE,TABLET]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i],[MODEL,[VENDOR,"Huawei"],[TYPE,MOBILE]],[/\b(poco[\w ]+)(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[MODEL,/_/g," "],[VENDOR,"Xiaomi"],[TYPE,MOBILE]],[/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[MODEL,/_/g," "],[VENDOR,"Xiaomi"],[TYPE,TABLET]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[MODEL,[VENDOR,"OPPO"],[TYPE,MOBILE]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[MODEL,[VENDOR,"Vivo"],[TYPE,MOBILE]],[/\b(rmx[12]\d{3})(?: bui|;|\))/i],[MODEL,[VENDOR,"Realme"],[TYPE,MOBILE]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[MODEL,[VENDOR,"Motorola"],[TYPE,MOBILE]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[MODEL,[VENDOR,"Motorola"],[TYPE,TABLET]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[MODEL,[VENDOR,"LG"],[TYPE,TABLET]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[MODEL,[VENDOR,"LG"],[TYPE,MOBILE]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[MODEL,[VENDOR,"Lenovo"],[TYPE,TABLET]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[MODEL,/_/g," "],[VENDOR,"Nokia"],[TYPE,MOBILE]],[/(pixel c)\b/i],[MODEL,[VENDOR,"Google"],[TYPE,TABLET]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[MODEL,[VENDOR,"Google"],[TYPE,MOBILE]],[/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[MODEL,[VENDOR,"Sony"],[TYPE,MOBILE]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[MODEL,"Xperia Tablet"],[VENDOR,"Sony"],[TYPE,TABLET]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[MODEL,[VENDOR,"OnePlus"],[TYPE,MOBILE]],[/(alexa)webm/i,/(kf[a-z]{2}wi)( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[MODEL,[VENDOR,"Amazon"],[TYPE,TABLET]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[MODEL,/(.+)/g,"Fire Phone $1"],[VENDOR,"Amazon"],[TYPE,MOBILE]],[/(playbook);[-\w\),; ]+(rim)/i],[MODEL,VENDOR,[TYPE,TABLET]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[MODEL,[VENDOR,"BlackBerry"],[TYPE,MOBILE]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[MODEL,[VENDOR,"ASUS"],[TYPE,TABLET]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[MODEL,[VENDOR,"ASUS"],[TYPE,MOBILE]],[/(nexus 9)/i],[MODEL,[VENDOR,"HTC"],[TYPE,TABLET]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic|sony(?!-bra))[-_ ]?([-\w]*)/i],[VENDOR,[MODEL,/_/g," "],[TYPE,MOBILE]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[MODEL,[VENDOR,"Acer"],[TYPE,TABLET]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[MODEL,[VENDOR,"Meizu"],[TYPE,MOBILE]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[MODEL,[VENDOR,"Sharp"],[TYPE,MOBILE]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[VENDOR,MODEL,[TYPE,MOBILE]],[/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[VENDOR,MODEL,[TYPE,TABLET]],[/(surface duo)/i],[MODEL,[VENDOR,"Microsoft"],[TYPE,TABLET]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[MODEL,[VENDOR,"Fairphone"],[TYPE,MOBILE]],[/(u304aa)/i],[MODEL,[VENDOR,"AT&T"],[TYPE,MOBILE]],[/\bsie-(\w*)/i],[MODEL,[VENDOR,"Siemens"],[TYPE,MOBILE]],[/\b(rct\w+) b/i],[MODEL,[VENDOR,"RCA"],[TYPE,TABLET]],[/\b(venue[\d ]{2,7}) b/i],[MODEL,[VENDOR,"Dell"],[TYPE,TABLET]],[/\b(q(?:mv|ta)\w+) b/i],[MODEL,[VENDOR,"Verizon"],[TYPE,TABLET]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[MODEL,[VENDOR,"Barnes & Noble"],[TYPE,TABLET]],[/\b(tm\d{3}\w+) b/i],[MODEL,[VENDOR,"NuVision"],[TYPE,TABLET]],[/\b(k88) b/i],[MODEL,[VENDOR,"ZTE"],[TYPE,TABLET]],[/\b(nx\d{3}j) b/i],[MODEL,[VENDOR,"ZTE"],[TYPE,MOBILE]],[/\b(gen\d{3}) b.+49h/i],[MODEL,[VENDOR,"Swiss"],[TYPE,MOBILE]],[/\b(zur\d{3}) b/i],[MODEL,[VENDOR,"Swiss"],[TYPE,TABLET]],[/\b((zeki)?tb.*\b) b/i],[MODEL,[VENDOR,"Zeki"],[TYPE,TABLET]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[VENDOR,"Dragon Touch"],MODEL,[TYPE,TABLET]],[/\b(ns-?\w{0,9}) b/i],[MODEL,[VENDOR,"Insignia"],[TYPE,TABLET]],[/\b((nxa|next)-?\w{0,9}) b/i],[MODEL,[VENDOR,"NextBook"],[TYPE,TABLET]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[VENDOR,"Voice"],MODEL,[TYPE,MOBILE]],[/\b(lvtel\-)?(v1[12]) b/i],[[VENDOR,"LvTel"],MODEL,[TYPE,MOBILE]],[/\b(ph-1) /i],[MODEL,[VENDOR,"Essential"],[TYPE,MOBILE]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[MODEL,[VENDOR,"Envizen"],[TYPE,TABLET]],[/\b(trio[-\w\. ]+) b/i],[MODEL,[VENDOR,"MachSpeed"],[TYPE,TABLET]],[/\btu_(1491) b/i],[MODEL,[VENDOR,"Rotor"],[TYPE,TABLET]],[/(shield[\w ]+) b/i],[MODEL,[VENDOR,"Nvidia"],[TYPE,TABLET]],[/(sprint) (\w+)/i],[VENDOR,MODEL,[TYPE,MOBILE]],[/(kin\.[onetw]{3})/i],[[MODEL,/\./g," "],[VENDOR,"Microsoft"],[TYPE,MOBILE]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[MODEL,[VENDOR,"Zebra"],[TYPE,TABLET]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[MODEL,[VENDOR,"Zebra"],[TYPE,MOBILE]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[VENDOR,MODEL,[TYPE,"console"]],[/droid.+; (shield) bui/i],[MODEL,[VENDOR,"Nvidia"],[TYPE,"console"]],[/(playstation [345portablevi]+)/i],[MODEL,[VENDOR,"Sony"],[TYPE,"console"]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[MODEL,[VENDOR,"Microsoft"],[TYPE,"console"]],[/smart-tv.+(samsung)/i],[VENDOR,[TYPE,SMARTTV]],[/hbbtv.+maple;(\d+)/i],[[MODEL,/^/,"SmartTV"],[VENDOR,"Samsung"],[TYPE,SMARTTV]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[VENDOR,"LG"],[TYPE,SMARTTV]],[/(apple) ?tv/i],[VENDOR,[MODEL,"Apple TV"],[TYPE,SMARTTV]],[/crkey/i],[[MODEL,"Chromecast"],[VENDOR,"Google"],[TYPE,SMARTTV]],[/droid.+aft(\w)( bui|\))/i],[MODEL,[VENDOR,"Amazon"],[TYPE,SMARTTV]],[/\(dtv[\);].+(aquos)/i],[MODEL,[VENDOR,"Sharp"],[TYPE,SMARTTV]],[/(bravia[\w- ]+) bui/i],[MODEL,[VENDOR,"Sony"],[TYPE,SMARTTV]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w ]*; *(\w[^;]*);([^;]*)/i],[[VENDOR,trim],[MODEL,trim],[TYPE,SMARTTV]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[TYPE,SMARTTV]],[/((pebble))app/i],[VENDOR,MODEL,[TYPE,"wearable"]],[/droid.+; (glass) \d/i],[MODEL,[VENDOR,"Google"],[TYPE,"wearable"]],[/droid.+; (wt63?0{2,3})\)/i],[MODEL,[VENDOR,"Zebra"],[TYPE,"wearable"]],[/(quest( 2)?)/i],[MODEL,[VENDOR,"Facebook"],[TYPE,"wearable"]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[VENDOR,[TYPE,"embedded"]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i],[MODEL,[TYPE,MOBILE]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[MODEL,[TYPE,TABLET]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[TYPE,TABLET]],[/(phone|mobile(?:[;\/]| safari)|pda(?=.+windows ce))/i],[[TYPE,MOBILE]],[/(android[-\w\. ]{0,9});.+buil/i],[MODEL,[VENDOR,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[VERSION,[NAME,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[VERSION,[NAME,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i],[NAME,VERSION],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[VERSION,NAME]],os:[[/microsoft (windows) (vista|xp)/i],[NAME,VERSION],[/(windows) nt 6\.2; (arm)/i,/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,/(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i],[NAME,[VERSION,strMapper,windowsVersionMap]],[/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[NAME,"Windows"],[VERSION,strMapper,windowsVersionMap]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i],[[VERSION,/_/g,"."],[NAME,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[NAME,"Mac OS"],[VERSION,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86)/i],[VERSION,NAME],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[NAME,VERSION],[/\(bb(10);/i],[VERSION,[NAME,"BlackBerry"]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[VERSION,[NAME,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[VERSION,[NAME,"Firefox OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[VERSION,[NAME,"webOS"]],[/crkey\/([\d\.]+)/i],[VERSION,[NAME,"Chromecast"]],[/(cros) [\w]+ ([\w\.]+\w)/i],[[NAME,"Chromium OS"],VERSION],[/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[NAME,VERSION],[/(sunos) ?([\w\.\d]*)/i],[[NAME,"Solaris"],VERSION],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,/(unix) ?([\w\.]*)/i],[NAME,VERSION]]},UAParser=function(ua,extensions){if("object"==typeof ua&&(extensions=ua,ua=undefined),!(this instanceof UAParser))return new UAParser(ua,extensions).getResult();var _ua=ua||(void 0!==window&&window.navigator&&window.navigator.userAgent?window.navigator.userAgent:""),_rgxmap=extensions?function(regexes,extensions){var mergedRegexes={};for(var i in regexes)extensions[i]&&extensions[i].length%2==0?mergedRegexes[i]=extensions[i].concat(regexes[i]):mergedRegexes[i]=regexes[i];return mergedRegexes}(regexes,extensions):regexes;return this.getBrowser=function(){var version,_browser={};return _browser[NAME]=undefined,_browser[VERSION]=undefined,rgxMapper.call(_browser,_ua,_rgxmap.browser),_browser.major="string"==typeof(version=_browser.version)?version.replace(/[^\d\.]/g,"").split(".")[0]:void 0,_browser},this.getCPU=function(){var _cpu={architecture:undefined};return rgxMapper.call(_cpu,_ua,_rgxmap.cpu),_cpu},this.getDevice=function(){var _device={};return _device[VENDOR]=undefined,_device[MODEL]=undefined,_device[TYPE]=undefined,rgxMapper.call(_device,_ua,_rgxmap.device),_device},this.getEngine=function(){var _engine={};return _engine[NAME]=undefined,_engine[VERSION]=undefined,rgxMapper.call(_engine,_ua,_rgxmap.engine),_engine},this.getOS=function(){var _os={};return _os[NAME]=undefined,_os[VERSION]=undefined,rgxMapper.call(_os,_ua,_rgxmap.os),_os},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return _ua},this.setUA=function(ua){return _ua="string"==typeof ua&&ua.length>275?trim(ua,275):ua,this},this.setUA(_ua),this};UAParser.VERSION="0.7.31",UAParser.BROWSER=enumerize([NAME,VERSION,"major"]),UAParser.CPU=enumerize(["architecture"]),UAParser.DEVICE=enumerize([MODEL,VENDOR,TYPE,"console",MOBILE,SMARTTV,TABLET,"wearable","embedded"]),UAParser.ENGINE=UAParser.OS=enumerize([NAME,VERSION]),void 0!==exports?(module.exports&&(exports=module.exports=UAParser),exports.UAParser=UAParser):__webpack_require__.amdO?undefined===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return UAParser}.call(exports,__webpack_require__,exports,module))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__):void 0!==window&&(window.UAParser=UAParser);var $=void 0!==window&&(window.jQuery||window.Zepto);if($&&!$.ua){var parser=new UAParser;$.ua=parser.getResult(),$.ua.get=function(){return parser.getUA()},$.ua.set=function(ua){parser.setUA(ua);var result=parser.getResult();for(var prop in result)$.ua[prop]=result[prop]}}}("object"==typeof window?window:this)},"./node_modules/js-sha256/src/sha256.js":(module,exports,__webpack_require__)=>{var __WEBPACK_AMD_DEFINE_RESULT__,process=__webpack_require__("./node_modules/process/browser.js");!function(){"use strict";var ERROR="input is invalid type",WINDOW="object"==typeof window,root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&"object"==typeof self,NODE_JS=!root.JS_SHA256_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node;NODE_JS?root=__webpack_require__.g:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&module.exports,AMD=__webpack_require__.amdO,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];!root.JS_SHA256_NO_NODE_JS&&Array.isArray||(Array.isArray=function(obj){return"[object Array]"===Object.prototype.toString.call(obj)}),!ARRAY_BUFFER||!root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(obj){return"object"==typeof obj&&obj.buffer&&obj.buffer.constructor===ArrayBuffer});var createOutputMethod=function(outputType,is224){return function(message){return new Sha256(is224,!0).update(message)[outputType]()}},createMethod=function(is224){var method=createOutputMethod("hex",is224);NODE_JS&&(method=nodeWrap(method,is224)),method.create=function(){return new Sha256(is224)},method.update=function(message){return method.create().update(message)};for(var i=0;i<OUTPUT_TYPES.length;++i){var type=OUTPUT_TYPES[i];method[type]=createOutputMethod(type,is224)}return method},nodeWrap=function(method,is224){var bufferFrom,crypto=__webpack_require__("?abf2"),Buffer=__webpack_require__("?69d9").Buffer,algorithm=is224?"sha224":"sha256";bufferFrom=Buffer.from&&!root.JS_SHA256_NO_BUFFER_FROM?Buffer.from:function(message){return new Buffer(message)};return function(message){if("string"==typeof message)return crypto.createHash(algorithm).update(message,"utf8").digest("hex");if(null==message)throw new Error(ERROR);return message.constructor===ArrayBuffer&&(message=new Uint8Array(message)),Array.isArray(message)||ArrayBuffer.isView(message)||message.constructor===Buffer?crypto.createHash(algorithm).update(bufferFrom(message)).digest("hex"):method(message)}},createHmacOutputMethod=function(outputType,is224){return function(key,message){return new HmacSha256(key,is224,!0).update(message)[outputType]()}},createHmacMethod=function(is224){var method=createHmacOutputMethod("hex",is224);method.create=function(key){return new HmacSha256(key,is224)},method.update=function(key,message){return method.create(key).update(message)};for(var i=0;i<OUTPUT_TYPES.length;++i){var type=OUTPUT_TYPES[i];method[type]=createHmacOutputMethod(type,is224)}return method};function Sha256(is224,sharedMemory){sharedMemory?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],is224?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=is224}function HmacSha256(key,is224,sharedMemory){var i,type=typeof key;if("string"===type){var code,bytes=[],length=key.length,index=0;for(i=0;i<length;++i)(code=key.charCodeAt(i))<128?bytes[index++]=code:code<2048?(bytes[index++]=192|code>>>6,bytes[index++]=128|63&code):code<55296||code>=57344?(bytes[index++]=224|code>>>12,bytes[index++]=128|code>>>6&63,bytes[index++]=128|63&code):(code=65536+((1023&code)<<10|1023&key.charCodeAt(++i)),bytes[index++]=240|code>>>18,bytes[index++]=128|code>>>12&63,bytes[index++]=128|code>>>6&63,bytes[index++]=128|63&code);key=bytes}else{if("object"!==type)throw new Error(ERROR);if(null===key)throw new Error(ERROR);if(ARRAY_BUFFER&&key.constructor===ArrayBuffer)key=new Uint8Array(key);else if(!(Array.isArray(key)||ARRAY_BUFFER&&ArrayBuffer.isView(key)))throw new Error(ERROR)}key.length>64&&(key=new Sha256(is224,!0).update(key).array());var oKeyPad=[],iKeyPad=[];for(i=0;i<64;++i){var b=key[i]||0;oKeyPad[i]=92^b,iKeyPad[i]=54^b}Sha256.call(this,is224,sharedMemory),this.update(iKeyPad),this.oKeyPad=oKeyPad,this.inner=!0,this.sharedMemory=sharedMemory}Sha256.prototype.update=function(message){if(!this.finalized){var notString,type=typeof message;if("string"!==type){if("object"!==type)throw new Error(ERROR);if(null===message)throw new Error(ERROR);if(ARRAY_BUFFER&&message.constructor===ArrayBuffer)message=new Uint8Array(message);else if(!(Array.isArray(message)||ARRAY_BUFFER&&ArrayBuffer.isView(message)))throw new Error(ERROR);notString=!0}for(var code,i,index=0,length=message.length,blocks=this.blocks;index<length;){if(this.hashed&&(this.hashed=!1,blocks[0]=this.block,this.block=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0),notString)for(i=this.start;index<length&&i<64;++index)blocks[i>>>2]|=message[index]<<SHIFT[3&i++];else for(i=this.start;index<length&&i<64;++index)(code=message.charCodeAt(index))<128?blocks[i>>>2]|=code<<SHIFT[3&i++]:code<2048?(blocks[i>>>2]|=(192|code>>>6)<<SHIFT[3&i++],blocks[i>>>2]|=(128|63&code)<<SHIFT[3&i++]):code<55296||code>=57344?(blocks[i>>>2]|=(224|code>>>12)<<SHIFT[3&i++],blocks[i>>>2]|=(128|code>>>6&63)<<SHIFT[3&i++],blocks[i>>>2]|=(128|63&code)<<SHIFT[3&i++]):(code=65536+((1023&code)<<10|1023&message.charCodeAt(++index)),blocks[i>>>2]|=(240|code>>>18)<<SHIFT[3&i++],blocks[i>>>2]|=(128|code>>>12&63)<<SHIFT[3&i++],blocks[i>>>2]|=(128|code>>>6&63)<<SHIFT[3&i++],blocks[i>>>2]|=(128|63&code)<<SHIFT[3&i++]);this.lastByteIndex=i,this.bytes+=i-this.start,i>=64?(this.block=blocks[16],this.start=i-64,this.hash(),this.hashed=!0):this.start=i}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296|0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var blocks=this.blocks,i=this.lastByteIndex;blocks[16]=this.block,blocks[i>>>2]|=EXTRA[3&i],this.block=blocks[16],i>=56&&(this.hashed||this.hash(),blocks[0]=this.block,blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0),blocks[14]=this.hBytes<<3|this.bytes>>>29,blocks[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var j,s0,s1,maj,t1,ab,da,cd,bc,a=this.h0,b=this.h1,c=this.h2,d=this.h3,e=this.h4,f=this.h5,g=this.h6,h=this.h7,blocks=this.blocks;for(j=16;j<64;++j)s0=((t1=blocks[j-15])>>>7|t1<<25)^(t1>>>18|t1<<14)^t1>>>3,s1=((t1=blocks[j-2])>>>17|t1<<15)^(t1>>>19|t1<<13)^t1>>>10,blocks[j]=blocks[j-16]+s0+blocks[j-7]+s1|0;for(bc=b&c,j=0;j<64;j+=4)this.first?(this.is224?(ab=300032,h=(t1=blocks[0]-1413257819)-150054599|0,d=t1+24177077|0):(ab=704751109,h=(t1=blocks[0]-210244248)-1521486534|0,d=t1+143694565|0),this.first=!1):(s0=(a>>>2|a<<30)^(a>>>13|a<<19)^(a>>>22|a<<10),maj=(ab=a&b)^a&c^bc,h=d+(t1=h+(s1=(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7))+(e&f^~e&g)+K[j]+blocks[j])|0,d=t1+(s0+maj)|0),s0=(d>>>2|d<<30)^(d>>>13|d<<19)^(d>>>22|d<<10),maj=(da=d&a)^d&b^ab,g=c+(t1=g+(s1=(h>>>6|h<<26)^(h>>>11|h<<21)^(h>>>25|h<<7))+(h&e^~h&f)+K[j+1]+blocks[j+1])|0,s0=((c=t1+(s0+maj)|0)>>>2|c<<30)^(c>>>13|c<<19)^(c>>>22|c<<10),maj=(cd=c&d)^c&a^da,f=b+(t1=f+(s1=(g>>>6|g<<26)^(g>>>11|g<<21)^(g>>>25|g<<7))+(g&h^~g&e)+K[j+2]+blocks[j+2])|0,s0=((b=t1+(s0+maj)|0)>>>2|b<<30)^(b>>>13|b<<19)^(b>>>22|b<<10),maj=(bc=b&c)^b&d^cd,e=a+(t1=e+(s1=(f>>>6|f<<26)^(f>>>11|f<<21)^(f>>>25|f<<7))+(f&g^~f&h)+K[j+3]+blocks[j+3])|0,a=t1+(s0+maj)|0,this.chromeBugWorkAround=!0;this.h0=this.h0+a|0,this.h1=this.h1+b|0,this.h2=this.h2+c|0,this.h3=this.h3+d|0,this.h4=this.h4+e|0,this.h5=this.h5+f|0,this.h6=this.h6+g|0,this.h7=this.h7+h|0},Sha256.prototype.hex=function(){this.finalize();var h0=this.h0,h1=this.h1,h2=this.h2,h3=this.h3,h4=this.h4,h5=this.h5,h6=this.h6,h7=this.h7,hex=HEX_CHARS[h0>>>28&15]+HEX_CHARS[h0>>>24&15]+HEX_CHARS[h0>>>20&15]+HEX_CHARS[h0>>>16&15]+HEX_CHARS[h0>>>12&15]+HEX_CHARS[h0>>>8&15]+HEX_CHARS[h0>>>4&15]+HEX_CHARS[15&h0]+HEX_CHARS[h1>>>28&15]+HEX_CHARS[h1>>>24&15]+HEX_CHARS[h1>>>20&15]+HEX_CHARS[h1>>>16&15]+HEX_CHARS[h1>>>12&15]+HEX_CHARS[h1>>>8&15]+HEX_CHARS[h1>>>4&15]+HEX_CHARS[15&h1]+HEX_CHARS[h2>>>28&15]+HEX_CHARS[h2>>>24&15]+HEX_CHARS[h2>>>20&15]+HEX_CHARS[h2>>>16&15]+HEX_CHARS[h2>>>12&15]+HEX_CHARS[h2>>>8&15]+HEX_CHARS[h2>>>4&15]+HEX_CHARS[15&h2]+HEX_CHARS[h3>>>28&15]+HEX_CHARS[h3>>>24&15]+HEX_CHARS[h3>>>20&15]+HEX_CHARS[h3>>>16&15]+HEX_CHARS[h3>>>12&15]+HEX_CHARS[h3>>>8&15]+HEX_CHARS[h3>>>4&15]+HEX_CHARS[15&h3]+HEX_CHARS[h4>>>28&15]+HEX_CHARS[h4>>>24&15]+HEX_CHARS[h4>>>20&15]+HEX_CHARS[h4>>>16&15]+HEX_CHARS[h4>>>12&15]+HEX_CHARS[h4>>>8&15]+HEX_CHARS[h4>>>4&15]+HEX_CHARS[15&h4]+HEX_CHARS[h5>>>28&15]+HEX_CHARS[h5>>>24&15]+HEX_CHARS[h5>>>20&15]+HEX_CHARS[h5>>>16&15]+HEX_CHARS[h5>>>12&15]+HEX_CHARS[h5>>>8&15]+HEX_CHARS[h5>>>4&15]+HEX_CHARS[15&h5]+HEX_CHARS[h6>>>28&15]+HEX_CHARS[h6>>>24&15]+HEX_CHARS[h6>>>20&15]+HEX_CHARS[h6>>>16&15]+HEX_CHARS[h6>>>12&15]+HEX_CHARS[h6>>>8&15]+HEX_CHARS[h6>>>4&15]+HEX_CHARS[15&h6];return this.is224||(hex+=HEX_CHARS[h7>>>28&15]+HEX_CHARS[h7>>>24&15]+HEX_CHARS[h7>>>20&15]+HEX_CHARS[h7>>>16&15]+HEX_CHARS[h7>>>12&15]+HEX_CHARS[h7>>>8&15]+HEX_CHARS[h7>>>4&15]+HEX_CHARS[15&h7]),hex},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var h0=this.h0,h1=this.h1,h2=this.h2,h3=this.h3,h4=this.h4,h5=this.h5,h6=this.h6,h7=this.h7,arr=[h0>>>24&255,h0>>>16&255,h0>>>8&255,255&h0,h1>>>24&255,h1>>>16&255,h1>>>8&255,255&h1,h2>>>24&255,h2>>>16&255,h2>>>8&255,255&h2,h3>>>24&255,h3>>>16&255,h3>>>8&255,255&h3,h4>>>24&255,h4>>>16&255,h4>>>8&255,255&h4,h5>>>24&255,h5>>>16&255,h5>>>8&255,255&h5,h6>>>24&255,h6>>>16&255,h6>>>8&255,255&h6];return this.is224||arr.push(h7>>>24&255,h7>>>16&255,h7>>>8&255,255&h7),arr},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var buffer=new ArrayBuffer(this.is224?28:32),dataView=new DataView(buffer);return dataView.setUint32(0,this.h0),dataView.setUint32(4,this.h1),dataView.setUint32(8,this.h2),dataView.setUint32(12,this.h3),dataView.setUint32(16,this.h4),dataView.setUint32(20,this.h5),dataView.setUint32(24,this.h6),this.is224||dataView.setUint32(28,this.h7),buffer},HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var innerHash=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(innerHash),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&(void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return exports}.call(exports,__webpack_require__,exports,module))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)))}()},"./node_modules/statsig-js/dist/DynamicConfig.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var DynamicConfig=function(){function DynamicConfig(configName,configValue,ruleID,evaluationDetails,secondaryExposures,allocatedExperimentName,onDefaultValueFallback,groupName,idType,isExperimentActive){void 0===secondaryExposures&&(secondaryExposures=[]),void 0===allocatedExperimentName&&(allocatedExperimentName=""),void 0===onDefaultValueFallback&&(onDefaultValueFallback=null),void 0===groupName&&(groupName=null),void 0===idType&&(idType=null),void 0===isExperimentActive&&(isExperimentActive=null),this.onDefaultValueFallback=null,this.name=configName,this.value=JSON.parse(JSON.stringify(null!=configValue?configValue:{})),this.ruleID=null!=ruleID?ruleID:"",this.secondaryExposures=secondaryExposures,this.allocatedExperimentName=allocatedExperimentName,this.evaluationDetails=evaluationDetails,this.onDefaultValueFallback=onDefaultValueFallback,this.groupName=groupName,this.idType=idType,this.isExperimentActive=isExperimentActive}return DynamicConfig.prototype.get=function(key,defaultValue,typeGuard){var _a,_b,val=this.getValue(key,defaultValue);if(null==val)return defaultValue;var expectedType=Array.isArray(defaultValue)?"array":typeof defaultValue,actualType=Array.isArray(val)?"array":typeof val;return typeGuard?typeGuard(val)?val:(null===(_a=this.onDefaultValueFallback)||void 0===_a||_a.call(this,this,key,expectedType,actualType),defaultValue):null==defaultValue||expectedType===actualType?val:(null===(_b=this.onDefaultValueFallback)||void 0===_b||_b.call(this,this,key,expectedType,actualType),defaultValue)},DynamicConfig.prototype.getValue=function(key,defaultValue){return null==key?this.value:(null==defaultValue&&(defaultValue=null),null==this.value[key]?defaultValue:this.value[key])},DynamicConfig.prototype.getRuleID=function(){return this.ruleID},DynamicConfig.prototype.getGroupName=function(){return this.groupName},DynamicConfig.prototype.getIDType=function(){return this.idType},DynamicConfig.prototype.getName=function(){return this.name},DynamicConfig.prototype.getEvaluationDetails=function(){return this.evaluationDetails},DynamicConfig.prototype._getSecondaryExposures=function(){return this.secondaryExposures},DynamicConfig.prototype._getAllocatedExperimentName=function(){return this.allocatedExperimentName},DynamicConfig.prototype.getIsExperimentActive=function(){return this.isExperimentActive},DynamicConfig}();exports.default=DynamicConfig},"./node_modules/statsig-js/dist/ErrorBoundary.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=this&&this.__generator||function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.ExceptionEndpoint=void 0;var uuid_1=__webpack_require__("./node_modules/uuid/dist/esm-browser/index.js"),Errors_1=__webpack_require__("./node_modules/statsig-js/dist/Errors.js"),Diagnostics_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/Diagnostics.js")),parseError_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/parseError.js"));exports.ExceptionEndpoint="https://statsigapi.net/v1/sdk_exception";var ErrorBoundary=function(){function ErrorBoundary(sdkKey,sdkOptions){this.sdkKey=sdkKey,this.sdkOptions=sdkOptions,this.seen=new Set;var sampling=Math.floor(1e4*Math.random());this.setupDiagnostics(0===sampling?30:0)}return ErrorBoundary.prototype.setStatsigMetadata=function(statsigMetadata){this.statsigMetadata=statsigMetadata},ErrorBoundary.prototype.swallow=function(tag,task,options){void 0===options&&(options={}),this.capture(tag,task,(function(){}),options)},ErrorBoundary.prototype.capture=function(tag,task,recover,captureOptions){var _this=this;void 0===captureOptions&&(captureOptions={});var markerID=null;try{markerID=this.beginMarker(tag);var result=task(),wasSuccessful_1=!0;return result instanceof Promise?result.catch((function(e){return wasSuccessful_1=!1,_this.onCaught(tag,e,recover,captureOptions)})).then((function(possiblyRecoveredResult){return _this.endMarker(tag,wasSuccessful_1,markerID),possiblyRecoveredResult})):(this.endMarker(tag,!0,markerID,captureOptions.configName),result)}catch(error){return this.endMarker(tag,!1,markerID,captureOptions.configName),this.onCaught(tag,error,recover,captureOptions)}},ErrorBoundary.prototype.logError=function(tag,error,_a){var _this=this,_b=void 0===_a?{}:_a,getExtraData=_b.getExtraData,configName=_b.configName;this.sdkOptions.isAllLoggingDisabled()||__awaiter(_this,void 0,void 0,(function(){var extra,_a,_b,name_1,info,metadata,body,_c;return __generator(this,(function(_d){switch(_d.label){case 0:return _d.trys.push([0,4,,5]),"function"!=typeof getExtraData?[3,2]:[4,getExtraData()];case 1:return _a=_d.sent(),[3,3];case 2:_a={},_d.label=3;case 3:return extra=_a,_b=(0,parseError_1.default)(error),name_1=_b.name,info=_b.trace,extra.configName=configName,this.seen.has(name_1)?[2]:(this.seen.add(name_1),null==(metadata=null!==(_c=this.statsigMetadata)&&void 0!==_c?_c:{}).sessionID&&(metadata.sessionID=(0,uuid_1.v4)()),body=JSON.stringify({tag,exception:name_1,info,statsigMetadata:metadata,statsigOptions:this.sdkOptions.getLoggingCopy(),extra}),[2,fetch(exports.ExceptionEndpoint,{method:"POST",headers:{"STATSIG-API-KEY":this.sdkKey,"STATSIG-SDK-TYPE":String(metadata.sdkType),"STATSIG-SDK-VERSION":String(metadata.sdkVersion),"Content-Type":"application/json; charset=UTF-8"},body})]);case 4:return _d.sent(),[3,5];case 5:return[2]}}))})).catch((function(){}))},ErrorBoundary.prototype.setupDiagnostics=function(maxMarkers){Diagnostics_1.default.setMaxMarkers("api_call",maxMarkers)},ErrorBoundary.prototype.beginMarker=function(tag){var diagnostics=Diagnostics_1.default.mark.api_call(tag);if(!diagnostics)return null;var markerID=tag+"_"+Diagnostics_1.default.getMarkerCount("api_call");return diagnostics.start({markerID},"api_call")?markerID:null},ErrorBoundary.prototype.endMarker=function(tag,wasSuccessful,markerID,configName){var diagnostics=Diagnostics_1.default.mark.api_call(tag);markerID&&diagnostics&&diagnostics.end({markerID,success:wasSuccessful,configName},"api_call")},ErrorBoundary.prototype.onCaught=function(tag,error,recover,captureOptions){if(void 0===captureOptions&&(captureOptions={}),error instanceof Errors_1.StatsigUninitializedError||error instanceof Errors_1.StatsigInvalidArgumentError)throw error;return error instanceof Errors_1.StatsigInitializationTimeoutError?(console.error("[Statsig] Timeout occured.",error),recover()):(console.error("[Statsig] An unexpected exception occurred.",error),this.logError(tag,error,captureOptions),recover())},ErrorBoundary}();exports.default=ErrorBoundary},"./node_modules/statsig-js/dist/Errors.js":function(__unused_webpack_module,exports){"use strict";var extendStatics,__extends=this&&this.__extends||(extendStatics=function(d,b){return extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)Object.prototype.hasOwnProperty.call(b,p)&&(d[p]=b[p])},extendStatics(d,b)},function(d,b){if("function"!=typeof b&&null!==b)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)});Object.defineProperty(exports,"__esModule",{value:!0}),exports.StatsigInitializationTimeoutError=exports.StatsigSDKKeyMismatchError=exports.StatsigInvalidArgumentError=exports.StatsigUninitializedError=void 0;var StatsigUninitializedError=function(_super){function StatsigUninitializedError(message){var _this=_super.call(this,null!=message?message:"Call and wait for initialize() to finish first.")||this;return Object.setPrototypeOf(_this,StatsigUninitializedError.prototype),_this}return __extends(StatsigUninitializedError,_super),StatsigUninitializedError}(Error);exports.StatsigUninitializedError=StatsigUninitializedError;var StatsigInvalidArgumentError=function(_super){function StatsigInvalidArgumentError(message){var _this=_super.call(this,message)||this;return Object.setPrototypeOf(_this,StatsigInvalidArgumentError.prototype),_this}return __extends(StatsigInvalidArgumentError,_super),StatsigInvalidArgumentError}(Error);exports.StatsigInvalidArgumentError=StatsigInvalidArgumentError;var StatsigSDKKeyMismatchError=function(_super){function StatsigSDKKeyMismatchError(message){var _this=_super.call(this,message)||this;return Object.setPrototypeOf(_this,StatsigSDKKeyMismatchError.prototype),_this}return __extends(StatsigSDKKeyMismatchError,_super),StatsigSDKKeyMismatchError}(Error);exports.StatsigSDKKeyMismatchError=StatsigSDKKeyMismatchError;var StatsigInitializationTimeoutError=function(_super){function StatsigInitializationTimeoutError(timeoutMs){var _this=_super.call(this,"The initialization timeout of "+timeoutMs+"ms has been hit before the network request has completed.")||this;return Object.setPrototypeOf(_this,StatsigInitializationTimeoutError.prototype),_this}return __extends(StatsigInitializationTimeoutError,_super),StatsigInitializationTimeoutError}(Error);exports.StatsigInitializationTimeoutError=StatsigInitializationTimeoutError},"./node_modules/statsig-js/dist/FeatureGate.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var FeatureGate=function(){function FeatureGate(gateName,value,ruleID,evaluationDetails,groupName,idType,secondaryExposures){void 0===groupName&&(groupName=null),void 0===idType&&(idType=null),void 0===secondaryExposures&&(secondaryExposures=[]),this.name=gateName,this.value=value,this.ruleID=null!=ruleID?ruleID:"",this.evaluationDetails=evaluationDetails,this.groupName=groupName,this.idType=idType,this.secondaryExposures=secondaryExposures}return FeatureGate.prototype.getRuleID=function(){return this.ruleID},FeatureGate.prototype.getGroupName=function(){return this.groupName},FeatureGate.prototype.getIDType=function(){return this.idType},FeatureGate.prototype.getName=function(){return this.name},FeatureGate.prototype.getValue=function(){return this.value},FeatureGate.prototype.getEvaluationDetails=function(){return this.evaluationDetails},FeatureGate.prototype.getSecondaryExposures=function(){return this.secondaryExposures},FeatureGate}();exports.default=FeatureGate},"./node_modules/statsig-js/dist/Layer.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var Layer=function(){function Layer(name,layerValue,ruleID,evaluationDetails,logParameterFunction,secondaryExposures,undelegatedSecondaryExposures,allocatedExperimentName,explicitParameters,groupName){void 0===logParameterFunction&&(logParameterFunction=null),void 0===secondaryExposures&&(secondaryExposures=[]),void 0===undelegatedSecondaryExposures&&(undelegatedSecondaryExposures=[]),void 0===allocatedExperimentName&&(allocatedExperimentName=""),void 0===explicitParameters&&(explicitParameters=[]),void 0===groupName&&(groupName=null),this.logParameterFunction=logParameterFunction,this.name=name,this.value=JSON.parse(JSON.stringify(null!=layerValue?layerValue:{})),this.ruleID=null!=ruleID?ruleID:"",this.evaluationDetails=evaluationDetails,this.secondaryExposures=secondaryExposures,this.undelegatedSecondaryExposures=undelegatedSecondaryExposures,this.allocatedExperimentName=allocatedExperimentName,this.explicitParameters=explicitParameters,this.groupName=groupName}return Layer._create=function(name,value,ruleID,evaluationDetails,logParameterFunction,secondaryExposures,undelegatedSecondaryExposures,allocatedExperimentName,explicitParameters,groupName){return void 0===logParameterFunction&&(logParameterFunction=null),void 0===secondaryExposures&&(secondaryExposures=[]),void 0===undelegatedSecondaryExposures&&(undelegatedSecondaryExposures=[]),void 0===allocatedExperimentName&&(allocatedExperimentName=""),void 0===explicitParameters&&(explicitParameters=[]),void 0===groupName&&(groupName=null),new Layer(name,value,ruleID,evaluationDetails,logParameterFunction,secondaryExposures,undelegatedSecondaryExposures,allocatedExperimentName,explicitParameters,groupName)},Layer.prototype.get=function(key,defaultValue,typeGuard){var _this=this,val=this.value[key];if(null==val)return defaultValue;var logAndReturn=function(){return _this.logLayerParameterExposure(key),val};return typeGuard?typeGuard(val)?logAndReturn():defaultValue:null==defaultValue||typeof val==typeof defaultValue&&Array.isArray(defaultValue)===Array.isArray(val)?logAndReturn():defaultValue},Layer.prototype.getValue=function(key,defaultValue){null==defaultValue&&(defaultValue=null);var val=this.value[key];return null!=val&&this.logLayerParameterExposure(key),null!=val?val:defaultValue},Layer.prototype.getRuleID=function(){return this.ruleID},Layer.prototype.getGroupName=function(){return this.groupName},Layer.prototype.getName=function(){return this.name},Layer.prototype.getEvaluationDetails=function(){return this.evaluationDetails},Layer.prototype._getSecondaryExposures=function(){return this.secondaryExposures},Layer.prototype._getUndelegatedSecondaryExposures=function(){return this.undelegatedSecondaryExposures},Layer.prototype._getAllocatedExperimentName=function(){return this.allocatedExperimentName},Layer.prototype._getExplicitParameters=function(){return this.explicitParameters},Layer.prototype._getEvaluationDetails=function(){return this.evaluationDetails},Layer.prototype.logLayerParameterExposure=function(parameterName){var _a;null===(_a=this.logParameterFunction)||void 0===_a||_a.call(this,this,parameterName)},Layer}();exports.default=Layer},"./node_modules/statsig-js/dist/LogEvent.js":function(__unused_webpack_module,exports){"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0});var LogEvent=function(){function LogEvent(eventName){this.user=null,this.value=null,this.metadata=null,this.eventName=eventName,this.statsigMetadata={},this.time=Date.now()}return LogEvent.prototype.getName=function(){return this.eventName},LogEvent.prototype.setValue=function(value){this.value=value},LogEvent.prototype.setMetadata=function(metadata){this.metadata=metadata},LogEvent.prototype.addStatsigMetadata=function(key,value){this.statsigMetadata[key]=value},LogEvent.prototype.setUser=function(newUser){this.user=__assign({},newUser),delete this.user.privateAttributes},LogEvent.prototype.setSecondaryExposures=function(exposures){void 0===exposures&&(exposures=[]),this.secondaryExposures=exposures},LogEvent.prototype.toJsonObject=function(){var _a;return{eventName:this.eventName,user:this.user,value:this.value,metadata:this.metadata,time:this.time,statsigMetadata:this.statsigMetadata,secondaryExposures:null!==(_a=this.secondaryExposures)&&void 0!==_a?_a:void 0}},LogEvent}();exports.default=LogEvent},"./node_modules/statsig-js/dist/SDKVersion.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.version=void 0,exports.version="4.50.0"},"./node_modules/statsig-js/dist/StatsigClient.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=this&&this.__generator||function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var DynamicConfig_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/DynamicConfig.js")),ErrorBoundary_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/ErrorBoundary.js")),Errors_1=__webpack_require__("./node_modules/statsig-js/dist/Errors.js"),Layer_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/Layer.js")),LogEvent_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/LogEvent.js")),StatsigIdentity_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/StatsigIdentity.js")),StatsigLogger_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/StatsigLogger.js")),StatsigNetwork_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/StatsigNetwork.js")),StatsigSDKOptions_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/StatsigSDKOptions.js")),StatsigStore_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/StatsigStore.js")),EvaluationReason_1=__webpack_require__("./node_modules/statsig-js/dist/utils/EvaluationReason.js"),Hashing_1=__webpack_require__("./node_modules/statsig-js/dist/utils/Hashing.js"),StatsigAsyncStorage_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js")),StatsigLocalStorage_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js")),Diagnostics_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/Diagnostics.js")),ConsoleLogger_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/ConsoleLogger.js")),Timing_1=__webpack_require__("./node_modules/statsig-js/dist/utils/Timing.js"),ResponseVerification_1=__webpack_require__("./node_modules/statsig-js/dist/utils/ResponseVerification.js"),FeatureGate_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/FeatureGate.js")),StatsigClient=function(){function StatsigClient(sdkKey,user,options){var _this=this;if(this.appState=null,this.currentAppState=null,this.appStateChangeSubscription=null,this.onCacheLoadedForReact=null,this.initCalled=!1,this.pendingInitPromise=null,this.optionalLoggingSetup=!1,this.prefetchedUsersByCacheKey={},this.logLayerParameterExposureForLayer=function(layer,parameterName,isManualExposure){void 0===isManualExposure&&(isManualExposure=!1);var allocatedExperiment="",exposures=layer._getUndelegatedSecondaryExposures(),isExplicit=layer._getExplicitParameters().includes(parameterName);isExplicit&&(allocatedExperiment=layer._getAllocatedExperimentName(),exposures=layer._getSecondaryExposures()),_this.logger.logLayerExposure(_this.getCurrentUser(),layer.getName(),layer.getRuleID(),exposures,allocatedExperiment,parameterName,isExplicit,layer._getEvaluationDetails(),isManualExposure)},!0!==(null==options?void 0:options.localMode)&&("string"!=typeof sdkKey||!sdkKey.startsWith("client-")))throw new Errors_1.StatsigInvalidArgumentError("Invalid key provided.  You must use a Client SDK Key from the Statsig console to initialize the sdk");if(this.startTime=(0,Timing_1.now)(),this.options=new StatsigSDKOptions_1.default(options),this.logger=new StatsigLogger_1.default(this),Diagnostics_1.default.initialize({options:this.options}),this.errorBoundary=new ErrorBoundary_1.default(sdkKey,this.options),this.ready=!1,this.sdkKey=sdkKey,this.consoleLogger=new ConsoleLogger_1.default(this.options.getLogLevel()),StatsigLocalStorage_1.default.disabled=this.options.getDisableLocalStorage(),this.identity=new StatsigIdentity_1.default(this.normalizeUser(null!=user?user:null),this.options.getOverrideStableID(),StatsigClient.reactNativeUUID),this.errorBoundary.setStatsigMetadata(this.getStatsigMetadata()),this.network=new StatsigNetwork_1.default(this),this.store=new StatsigStore_1.default(this,this.options.getInitializeValues()),null!=this.options.getInitializeValues()){var cb=this.options.getInitCompletionCallback();this.ready=!0,this.initCalled=!0,setTimeout((function(){return _this.delayedSetup()}),20),this.handleOptionalLogging(),cb&&cb((0,Timing_1.now)()-this.startTime,!0,null)}}return StatsigClient.prototype.getErrorBoundary=function(){return this.errorBoundary},StatsigClient.prototype.getNetwork=function(){return this.network},StatsigClient.prototype.getStore=function(){return this.store},StatsigClient.prototype.getLogger=function(){return this.logger},StatsigClient.prototype.getOptions=function(){return this.options},StatsigClient.prototype.getSDKKey=function(){var _this=this;return this.errorBoundary.capture("getSDKKey",(function(){var _a;return null!==(_a=_this.sdkKey)&&void 0!==_a?_a:""}),(function(){return""}))},StatsigClient.prototype.getCurrentUser=function(){var _this=this;return this.errorBoundary.capture("getCurrentUser",(function(){return _this.identity.getUser()}),(function(){return null}))},StatsigClient.prototype.getCurrentUserCacheKey=function(){var _this=this;return this.errorBoundary.capture("getCurrentUserCacheKey",(function(){return(0,Hashing_1.getUserCacheKey)(_this.getStableID(),_this.getCurrentUser(),_this.getSDKKey())}),(function(){return{v1:"",v2:"",v3:""}}))},StatsigClient.prototype.getCurrentUserUnitID=function(idType){var _this=this;return this.errorBoundary.capture("getCurrentUserUnitID",(function(){return _this.getUnitID(_this.getCurrentUser(),idType)}),(function(){return""}))},StatsigClient.prototype.getCurrentUserID=function(){var _this=this;return this.errorBoundary.capture("getCurrentUserID",(function(){return _this.getUnitID(_this.getCurrentUser(),"userid")}),(function(){return""}))},StatsigClient.prototype.getUnitID=function(user,idType){var _a,_b,_c;return user?"userid"===idType.toLowerCase()?null!==(_b=null===(_a=user.userID)||void 0===_a?void 0:_a.toString())&&void 0!==_b?_b:null:user.customIDs?null!==(_c=user.customIDs[idType])&&void 0!==_c?_c:user.customIDs[idType.toLowerCase()]:null:null},StatsigClient.prototype.getStatsigMetadata=function(){var _this=this;return this.errorBoundary.capture("getStatsigMetadata",(function(){return _this.identity.getStatsigMetadata()}),(function(){return{}}))},StatsigClient.prototype.getSDKType=function(){var _this=this;return this.errorBoundary.capture("getSDKType",(function(){return _this.identity.getSDKType()}),(function(){return""}))},StatsigClient.prototype.getSDKVersion=function(){var _this=this;return this.errorBoundary.capture("getSDKVersion",(function(){return _this.identity.getSDKVersion()}),(function(){return""}))},StatsigClient.prototype.getConsoleLogger=function(){return this.consoleLogger},StatsigClient.prototype.delayedSetup=function(){var _this=this;this.errorBoundary.swallow("delayedSetup",(function(){null!=_this.options.getInitializeValues()&&_this.fireAndForgetPrefechUsers(),_this.identity.saveStableID(),_this.logger.sendSavedRequests().catch((function(reason){return _this.errorBoundary.logError("sendSavedRequests:delayedSetup",reason)}))}))},StatsigClient.prototype.setInitializeValues=function(initializeValues){var _this=this;this.errorBoundary.capture("setInitializeValues",(function(){_this.store.bootstrap(initializeValues);var cb=null;_this.ready||(_this.ready=!0,_this.initCalled=!0,cb=_this.options.getInitCompletionCallback()),_this.handleOptionalLogging(),_this.logger.sendSavedRequests().catch((function(reason){return _this.errorBoundary.logError("sendSavedRequests:setInitializeValues",reason)})),cb&&cb((0,Timing_1.now)()-_this.startTime,!0,null)}),(function(){_this.ready=!0,_this.initCalled=!0;var cb=_this.options.getInitCompletionCallback();cb&&cb((0,Timing_1.now)()-_this.startTime,!1,"Caught an exception during setInitializeValues")}))},StatsigClient.prototype.initializeAsync=function(){return __awaiter(this,void 0,void 0,(function(){var _this=this;return __generator(this,(function(_a){return[2,this.errorBoundary.capture("initializeAsync",(function(){return __awaiter(_this,void 0,void 0,(function(){var handler,listener,user,_a,_this=this;return __generator(this,(function(_b){switch(_b.label){case 0:return null!=this.pendingInitPromise?[2,this.pendingInitPromise]:this.ready?[2,Promise.resolve()]:(Diagnostics_1.default.mark.overall.start({}),this.initCalled=!0,StatsigAsyncStorage_1.default.asyncStorage?[4,this.identity.initAsync()]:[3,3]);case 1:return _b.sent(),[4,this.store.loadAsync()];case 2:_b.sent(),_b.label=3;case 3:return null===(_a=this.onCacheLoadedForReact)||void 0===_a||_a.call(this),null!=this.appState&&(handler=this.appState).addEventListener&&"function"==typeof handler.addEventListener&&(this.currentAppState=handler.currentState,listener=handler.addEventListener("change",this.handleAppStateChange.bind(this)),this.appStateChangeSubscription=listener),this.options.getLocalModeEnabled()?[2,Promise.resolve()]:(user=this.identity.getUser(),this.pendingInitPromise=this.fetchAndSaveValues({user,prefetchUsers:this.options.getPrefetchUsers(),timeout:this.options.getInitTimeoutMs()}).then((function(){return Diagnostics_1.default.mark.overall.end({success:!0,evaluationDetails:_this.store.getGlobalEvaluationDetails()}),{success:!0,message:null}})).catch((function(e){var _a;return _this.errorBoundary.logError("initializeAsync:fetchAndSaveValues",e),Diagnostics_1.default.mark.overall.end({success:!1,error:Diagnostics_1.default.formatError(e),evaluationDetails:_this.store.getGlobalEvaluationDetails()}),{success:!1,message:null!==(_a=e.message)&&void 0!==_a?_a:null}})).then((function(_a){var success=_a.success,message=_a.message,cb=_this.options.getInitCompletionCallback();cb&&cb((0,Timing_1.now)()-_this.startTime,success,message)})).finally((function(){return __awaiter(_this,void 0,void 0,(function(){return __generator(this,(function(_a){return this.pendingInitPromise=null,this.ready=!0,this.delayedSetup(),this.logger.logDiagnostics(user,"initialize"),[2]}))}))})),this.handleOptionalLogging(),[2,this.pendingInitPromise])}}))}))}),(function(){return _this.ready=!0,_this.initCalled=!0,Promise.resolve()}))]}))}))},StatsigClient.prototype.prefetchUsers=function(users){return __awaiter(this,void 0,void 0,(function(){var _this=this;return __generator(this,(function(_a){return[2,this.errorBoundary.capture("prefetchUsers",(function(){if(users&&0!=users.length)return _this.fetchAndSaveValues({user:null,prefetchUsers:users,timeout:0})}),(function(){return Promise.resolve()}))]}))}))},StatsigClient.prototype.getEvaluationDetails=function(){var _this=this;return this.errorBoundary.capture("getEvaluationDetails",(function(){return _this.store.getGlobalEvaluationDetails()}),(function(){return{time:Date.now(),reason:EvaluationReason_1.EvaluationReason.Error}}))},StatsigClient.prototype.checkGate=function(gateName,ignoreOverrides){var _this=this;return void 0===ignoreOverrides&&(ignoreOverrides=!1),this.errorBoundary.capture("checkGate",(function(){var _a,_b,_c,result=_this.checkGateImpl(gateName,ignoreOverrides);_this.logGateExposureImpl(gateName,result);var cb=_this.options.getGateEvaluationCallback();cb&&cb(gateName,result.gate.value,{withExposureLoggingDisabled:!1});var ecb=_this.options.getEvaluationCallback();ecb&&ecb({type:"gate",gate:new FeatureGate_1.default(gateName,result.gate.value,result.gate.rule_id,result.evaluationDetails,null!==(_a=result.gate.group_name)&&void 0!==_a?_a:null,null!==(_b=result.gate.id_type)&&void 0!==_b?_b:null,null!==(_c=result.gate.secondary_exposures)&&void 0!==_c?_c:[])});return!0===result.gate.value}),(function(){return!1}),{configName:gateName})},StatsigClient.prototype.getFeatureGate=function(gateName,options){var _this=this;return void 0===options&&(options=null),this.errorBoundary.capture("getFeatureGate",(function(){var _a,_b,_c,_d,_e,result=_this.checkGateImpl(gateName,null!==(_a=null==options?void 0:options.ignoreOverrides)&&void 0!==_a&&_a);(null==options?void 0:options.disableExposureLogging)||_this.logGateExposureImpl(gateName,result);var cb=_this.options.getGateEvaluationCallback();cb&&cb(gateName,result.gate.value,{withExposureLoggingDisabled:null!==(_b=null==options?void 0:options.disableExposureLogging)&&void 0!==_b&&_b});var gate=new FeatureGate_1.default(gateName,result.gate.value,result.gate.rule_id,result.evaluationDetails,null!==(_c=result.gate.group_name)&&void 0!==_c?_c:null,null!==(_d=result.gate.id_type)&&void 0!==_d?_d:null,null!==(_e=result.gate.secondary_exposures)&&void 0!==_e?_e:[]),ecb=_this.options.getEvaluationCallback();return ecb&&ecb({type:"gate",gate}),gate}),(function(){return new FeatureGate_1.default(gateName,!1,"",{reason:EvaluationReason_1.EvaluationReason.Error,time:Date.now()})}),{configName:gateName})},StatsigClient.prototype.checkGateWithExposureLoggingDisabled=function(gateName,ignoreOverrides){var _this=this;return void 0===ignoreOverrides&&(ignoreOverrides=!1),this.errorBoundary.capture("checkGateWithExposureLoggingDisabled",(function(){var _a,_b,_c;_this.logger.addNonExposedCheck(gateName);var result=_this.checkGateImpl(gateName,ignoreOverrides),cb=_this.options.getGateEvaluationCallback();cb&&cb(gateName,result.gate.value,{withExposureLoggingDisabled:!0});var ecb=_this.options.getEvaluationCallback();ecb&&ecb({type:"gate",gate:new FeatureGate_1.default(gateName,result.gate.value,result.gate.rule_id,result.evaluationDetails,null!==(_a=result.gate.group_name)&&void 0!==_a?_a:null,null!==(_b=result.gate.id_type)&&void 0!==_b?_b:null,null!==(_c=result.gate.secondary_exposures)&&void 0!==_c?_c:[])});return!0===result.gate.value}),(function(){return!1}))},StatsigClient.prototype.logGateExposure=function(gateName){var _this=this;this.errorBoundary.swallow("logGateExposure",(function(){_this.logGateExposureImpl(gateName)}))},StatsigClient.prototype.getConfig=function(configName,ignoreOverrides){var _this=this;return void 0===ignoreOverrides&&(ignoreOverrides=!1),this.errorBoundary.capture("getConfig",(function(){var result=_this.getConfigImpl(configName,ignoreOverrides);_this.logConfigExposureImpl(configName,result);var ecb=_this.options.getEvaluationCallback();return ecb&&ecb({type:"config",config:result}),result}),(function(){return _this.getEmptyConfig(configName)}),{configName})},StatsigClient.prototype.getConfigWithExposureLoggingDisabled=function(configName,ignoreOverrides){var _this=this;return void 0===ignoreOverrides&&(ignoreOverrides=!1),this.errorBoundary.capture("getConfig",(function(){_this.logger.addNonExposedCheck(configName);var result=_this.getConfigImpl(configName,ignoreOverrides),ecb=_this.options.getEvaluationCallback();return ecb&&ecb({type:"config",config:result}),result}),(function(){return _this.getEmptyConfig(configName)}))},StatsigClient.prototype.logConfigExposure=function(configName){var _this=this;this.errorBoundary.swallow("logConfigExposure",(function(){_this.logConfigExposureImpl(configName)}))},StatsigClient.prototype.getExperiment=function(experimentName,keepDeviceValue,ignoreOverrides){var _this=this;return void 0===keepDeviceValue&&(keepDeviceValue=!1),void 0===ignoreOverrides&&(ignoreOverrides=!1),this.errorBoundary.capture("getExperiment",(function(){var result=_this.getExperimentImpl(experimentName,keepDeviceValue,ignoreOverrides);_this.logExperimentExposureImpl(experimentName,keepDeviceValue,result);var ecb=_this.options.getEvaluationCallback();return ecb&&ecb({type:"experiment",config:result}),result}),(function(){return _this.getEmptyConfig(experimentName)}),{configName:experimentName})},StatsigClient.prototype.getExperimentWithExposureLoggingDisabled=function(experimentName,keepDeviceValue,ignoreOverrides){var _this=this;return void 0===keepDeviceValue&&(keepDeviceValue=!1),void 0===ignoreOverrides&&(ignoreOverrides=!1),this.errorBoundary.capture("getExperimentWithExposureLoggingDisabled",(function(){_this.logger.addNonExposedCheck(experimentName);var result=_this.getExperimentImpl(experimentName,keepDeviceValue,ignoreOverrides),ecb=_this.options.getEvaluationCallback();return ecb&&ecb({type:"experiment",config:result}),result}),(function(){return _this.getEmptyConfig(experimentName)}))},StatsigClient.prototype.logExperimentExposure=function(experimentName,keepDeviceValue){var _this=this;this.errorBoundary.swallow("logExperimentExposure",(function(){_this.logExperimentExposureImpl(experimentName,keepDeviceValue)}))},StatsigClient.prototype.getLayer=function(layerName,keepDeviceValue){var _this=this;return void 0===keepDeviceValue&&(keepDeviceValue=!1),this.errorBoundary.capture("getLayer",(function(){var result=_this.getLayerImpl(_this.logLayerParameterExposureForLayer,layerName,keepDeviceValue),ecb=_this.options.getEvaluationCallback();return ecb&&ecb({type:"layer",layer:result}),result}),(function(){return Layer_1.default._create(layerName,{},"",_this.getEvalutionDetailsForError())}),{configName:layerName})},StatsigClient.prototype.getLayerWithExposureLoggingDisabled=function(layerName,keepDeviceValue){var _this=this;return void 0===keepDeviceValue&&(keepDeviceValue=!1),this.errorBoundary.capture("getLayerWithExposureLoggingDisabled",(function(){_this.logger.addNonExposedCheck(layerName);var result=_this.getLayerImpl(null,layerName,keepDeviceValue),ecb=_this.options.getEvaluationCallback();return ecb&&ecb({type:"layer",layer:result}),result}),(function(){return Layer_1.default._create(layerName,{},"",_this.getEvalutionDetailsForError())}))},StatsigClient.prototype.logLayerParameterExposure=function(layerName,parameterName,keepDeviceValue){var _this=this;void 0===keepDeviceValue&&(keepDeviceValue=!1),this.errorBoundary.swallow("logLayerParameterExposure",(function(){var layer=_this.getLayerImpl(null,layerName,keepDeviceValue);_this.logLayerParameterExposureForLayer(layer,parameterName,!0)}))},StatsigClient.prototype.logEvent=function(eventName,value,metadata){var _this=this;void 0===value&&(value=null),void 0===metadata&&(metadata=null),this.errorBoundary.swallow("logEvent",(function(){if(!_this.logger||!_this.sdkKey)throw new Errors_1.StatsigUninitializedError("Must initialize() before logging events.");if("string"==typeof eventName&&0!==eventName.length){_this.shouldTrimParam(eventName,64)&&(_this.consoleLogger.info("eventName is too long, trimming to 64 characters."),eventName=eventName.substring(0,64)),"string"==typeof value&&_this.shouldTrimParam(value,64)&&(_this.consoleLogger.info("value is too long, trimming to 64."),value=value.substring(0,64)),_this.shouldTrimParam(metadata,2048)&&(_this.consoleLogger.info("metadata is too big. Dropping the metadata."),metadata={error:"not logged due to size too large"});var event=new LogEvent_1.default(eventName);event.setValue(value),event.setMetadata(metadata),event.setUser(_this.getCurrentUser()),_this.logger.log(event)}else _this.consoleLogger.error("Event not logged. No valid eventName passed.")}))},StatsigClient.prototype.updateUserWithValues=function(user,values){var fireCompletionCallback,_this=this;return this.errorBoundary.capture("updateUserWithValues",(function(){var updateStartTime=Date.now();if(!_this.initializeCalled())throw new Errors_1.StatsigUninitializedError("Call initialize() first.");return fireCompletionCallback=function(success,error){var cb=_this.options.getUpdateUserCompletionCallback();null==cb||cb(Date.now()-updateStartTime,success,error)},_this.identity.updateUser(_this.normalizeUser(user)),_this.store.bootstrap(values),fireCompletionCallback(!0,null),!0}),(function(){return null==fireCompletionCallback||fireCompletionCallback(!1,"Failed to update user. An unexpected error occured."),!1}))},StatsigClient.prototype.updateUser=function(user){return __awaiter(this,void 0,void 0,(function(){var fireCompletionCallback,_this=this;return __generator(this,(function(_a){return[2,this.errorBoundary.capture("updateUser",(function(){return __awaiter(_this,void 0,void 0,(function(){var updateStartTime,userCacheKey,isUserPrefetched,cachedTime,currentUser,_a,_this=this;return __generator(this,(function(_b){switch(_b.label){case 0:if(updateStartTime=Date.now(),!this.initializeCalled())throw new Errors_1.StatsigUninitializedError("Call initialize() first.");return fireCompletionCallback=function(success,error){var cb=_this.options.getUpdateUserCompletionCallback();null==cb||cb(Date.now()-updateStartTime,success,error)},StatsigAsyncStorage_1.default.asyncStorage&&""==(null!==(_a=this.identity.getStatsigMetadata().stableID)&&void 0!==_a?_a:"")?[4,this.identity.initAsync()]:[3,2];case 1:_b.sent(),_b.label=2;case 2:return this.identity.updateUser(this.normalizeUser(user)),userCacheKey=this.getCurrentUserCacheKey(),isUserPrefetched=Boolean(this.prefetchedUsersByCacheKey[userCacheKey.v3]),cachedTime=this.store.updateUser(isUserPrefetched),Diagnostics_1.default.clearContext("api_call"),this.logger.resetDedupeKeys(),null!=cachedTime&&(isUserPrefetched||this.isCacheValidForFetchMode(cachedTime))?(fireCompletionCallback(!0,null),[2,Promise.resolve(!0)]):null==this.pendingInitPromise?[3,4]:[4,this.pendingInitPromise];case 3:_b.sent(),_b.label=4;case 4:return this.options.getLocalModeEnabled()?(fireCompletionCallback(!0,null),[2,Promise.resolve(!0)]):(currentUser=this.identity.getUser(),this.pendingInitPromise=this.fetchAndSaveValues({user:currentUser,prefetchUsers:[],timeout:void 0}).finally((function(){_this.pendingInitPromise=null})),[2,this.pendingInitPromise.then((function(){return fireCompletionCallback(!0,null),Promise.resolve(!0)})).catch((function(error){return fireCompletionCallback(!1,"Failed to update user: "+error),Promise.resolve(!1)}))])}}))}))}),(function(){return null==fireCompletionCallback||fireCompletionCallback(!1,"Failed to update user. An unexpected error occured."),Promise.resolve(!1)}))]}))}))},StatsigClient.prototype.shutdown=function(){var _this=this;this.errorBoundary.swallow("shutdown",(function(){if(_this.logger.shutdown(),null!=_this.appStateChangeSubscription){var sub=_this.appStateChangeSubscription;"function"==typeof sub.remove&&sub.remove()}StatsigLocalStorage_1.default.cleanup()}))},StatsigClient.prototype.getInitializeResponseJson=function(){var _this=this;return this.errorBoundary.capture("getInitializeResponseJson",(function(){var _a;return{values:_this.store.getInitializeResponseJson(),evaluationDetails:null!==(_a=_this.getEvaluationDetails())&&void 0!==_a?_a:{reason:EvaluationReason_1.EvaluationReason.Uninitialized,time:0}}}),(function(){var _a;return{values:"",evaluationDetails:null!==(_a=_this.getEvaluationDetails())&&void 0!==_a?_a:{reason:EvaluationReason_1.EvaluationReason.Uninitialized,time:0}}}))},StatsigClient.prototype.overrideGate=function(gateName,value){var _this=this;this.errorBoundary.swallow("overrideGate",(function(){_this.ensureStoreLoaded(),_this.store.overrideGate(gateName,value)}))},StatsigClient.prototype.overrideConfig=function(configName,value){var _this=this;this.errorBoundary.swallow("overrideConfig",(function(){_this.ensureStoreLoaded(),_this.store.overrideConfig(configName,value)}))},StatsigClient.prototype.overrideLayer=function(layerName,value){var _this=this;this.errorBoundary.swallow("overrideLayer",(function(){_this.ensureStoreLoaded(),_this.store.overrideLayer(layerName,value)}))},StatsigClient.prototype.removeGateOverride=function(gateName){var _this=this;this.errorBoundary.swallow("removeGateOverride",(function(){_this.ensureStoreLoaded(),_this.store.removeGateOverride(gateName)}))},StatsigClient.prototype.removeConfigOverride=function(configName){var _this=this;this.errorBoundary.swallow("removeConfigOverride",(function(){_this.ensureStoreLoaded(),_this.store.removeConfigOverride(configName)}))},StatsigClient.prototype.removeLayerOverride=function(layerName){var _this=this;this.errorBoundary.swallow("removeLayerOverride",(function(){_this.ensureStoreLoaded(),_this.store.removeLayerOverride(layerName)}))},StatsigClient.prototype.removeOverride=function(gateName){var _this=this;this.errorBoundary.swallow("removeOverride",(function(){_this.ensureStoreLoaded(),_this.store.removeGateOverride(gateName)}))},StatsigClient.prototype.getOverrides=function(){var _this=this;return this.errorBoundary.capture("getOverrides",(function(){return _this.ensureStoreLoaded(),_this.store.getAllOverrides().gates}),(function(){return{}}))},StatsigClient.prototype.getAllOverrides=function(){var _this=this;return this.errorBoundary.capture("getAllOverrides",(function(){return _this.ensureStoreLoaded(),_this.store.getAllOverrides()}),(function(){return{gates:{},configs:{},layers:{}}}))},StatsigClient.prototype.getStableID=function(){var _this=this;return this.errorBoundary.capture("getStableID",(function(){return _this.identity.getStatsigMetadata().stableID}),(function(){return""}))},StatsigClient.prototype.initializeCalled=function(){return this.initCalled},StatsigClient.prototype.setSDKPackageInfo=function(sdkPackageInfo){null!=sdkPackageInfo&&(this.identity.setSDKPackageInfo(sdkPackageInfo),this.errorBoundary.setStatsigMetadata(this.getStatsigMetadata()))},StatsigClient.prototype.setDebugInfo=function(debugInfo){var _this=this;this.errorBoundary.capture("setDebuggingInfo",(function(){if(!_this.initializeCalled())throw new Errors_1.StatsigUninitializedError("Call initialize() first.");_this.logger.setDebugInfo(debugInfo)}),(function(){}))},StatsigClient.setAsyncStorage=function(asyncStorage){null!=asyncStorage&&(StatsigAsyncStorage_1.default.asyncStorage=asyncStorage)},StatsigClient.prototype.setOnCacheLoadedReactCallback=function(fn){this.onCacheLoadedForReact=null!=fn?fn:null},StatsigClient.setReactNativeUUID=function(uuid){null!=uuid&&(StatsigClient.reactNativeUUID=uuid)},StatsigClient.prototype.setAppState=function(appState){null!=appState&&(this.appState=appState)},StatsigClient.prototype.setNativeModules=function(nativeModules){null!=nativeModules&&this.identity.setNativeModules(nativeModules)},StatsigClient.prototype.setPlatform=function(platform){null!=platform&&this.identity.setPlatform(platform)},StatsigClient.prototype.setRNDeviceInfo=function(deviceInfo){null!=deviceInfo&&this.identity.setRNDeviceInfo(deviceInfo)},StatsigClient.prototype.setExpoConstants=function(expoConstants){null!=expoConstants&&this.identity.setExpoConstants(expoConstants)},StatsigClient.prototype.setExpoDevice=function(expoDevice){null!=expoDevice&&this.identity.setExpoDevice(expoDevice)},StatsigClient.prototype.flushEvents=function(){this.logger.flush()},StatsigClient.prototype.reenableAllLogging=function(){this.getOptions().reenableAllLogging()},StatsigClient.prototype.isCacheValidForFetchMode=function(cachedTime){return"cache-or-network"===this.options.getFetchMode()&&cachedTime>this.startTime},StatsigClient.prototype.handleOptionalLogging=function(){var _this=this,isErrorLoggingDisabled=this.options.getDisableErrorLogging(),isAutoMetricsLoggingDisabled=this.options.getDisableAutoMetricsLogging();if((!isErrorLoggingDisabled||!isAutoMetricsLoggingDisabled)&&!this.optionalLoggingSetup&&"undefined"!=typeof window&&window&&window.addEventListener){var user=this.identity.getUser();if(isErrorLoggingDisabled||window.addEventListener("error",(function(e){var _a,errorObj=e.error;if(null!=errorObj&&"object"==typeof errorObj)try{errorObj=JSON.stringify(errorObj)}catch(e){errorObj="Failed to stringify Error"}_this.logger.logAppError(user,null!==(_a=e.message)&&void 0!==_a?_a:"",{filename:e.filename,lineno:e.lineno,colno:e.colno,error_obj:errorObj})})),!isAutoMetricsLoggingDisabled){if("undefined"==typeof document||!document||"undefined"==typeof setTimeout||!setTimeout)return;var work_1=function(){setTimeout((function(){_this.logger.logAppMetrics(user)}),1e3)};"complete"===document.readyState?work_1():window.addEventListener("load",(function(){return work_1()}))}this.optionalLoggingSetup=!0}},StatsigClient.prototype.handleAppStateChange=function(nextAppState){var _this=this;"active"===this.currentAppState&&nextAppState.match(/inactive|background/)?this.logger.flush(!0):null!=this.currentAppState&&this.currentAppState.match(/inactive|background/)&&"active"===nextAppState&&this.logger.sendSavedRequests().catch((function(reason){return _this.errorBoundary.logError("sendSavedRequests:handleAppStateChange",reason)})),this.currentAppState=nextAppState},StatsigClient.prototype.shouldTrimParam=function(entity,size){return null!=entity&&("string"==typeof entity?entity.length>size:"object"==typeof entity?JSON.stringify(entity).length>size:"number"==typeof entity&&entity.toString().length>size)},StatsigClient.prototype.normalizePrefetchUsers=function(users){var _this=this;return null==users?[]:users.map((function(user){return _this.normalizeUser(user)}))},StatsigClient.prototype.normalizeUser=function(user){var userCopy={};try{userCopy=JSON.parse(JSON.stringify(user))}catch(error){throw new Errors_1.StatsigInvalidArgumentError("User object must be convertable to JSON string.")}return userCopy=this.trimUserObjIfNeeded(userCopy),null!=this.options.getEnvironment()&&(userCopy.statsigEnvironment=this.options.getEnvironment()),userCopy},StatsigClient.prototype.trimUserObjIfNeeded=function(user){var _a,_b;return null==user?{}:(this.shouldTrimParam(null!==(_a=user.userID)&&void 0!==_a?_a:null,64)&&(this.consoleLogger.info("User ID is too large, trimming to 64characters"),user.userID=null===(_b=user.userID)||void 0===_b?void 0:_b.toString().substring(0,64)),this.shouldTrimParam(user,2048)&&(user.custom={},this.shouldTrimParam(user,2048)?(this.consoleLogger.info("User object is too large, only keeping the user ID."),user={userID:user.userID}):this.consoleLogger.info("User object is too large, dropping the custom property.")),user)},StatsigClient.prototype.ensureStoreLoaded=function(){if(!this.store.isLoaded())throw new Errors_1.StatsigUninitializedError("Call and wait for initialize() to finish first.")},StatsigClient.prototype.getEvalutionDetailsForError=function(){return{time:Date.now(),reason:EvaluationReason_1.EvaluationReason.Error}},StatsigClient.prototype.fetchAndSaveValues=function(args){var _a,_b,_c,_d;return __awaiter(this,void 0,void 0,(function(){var user,prefetchUsers,timeout,keyedPrefetchUsers,stableID,sinceTime,previousDerivedFields,_this=this;return __generator(this,(function(_e){return user=args.user,prefetchUsers=null!==(_a=args.prefetchUsers)&&void 0!==_a?_a:[],timeout=null!==(_b=args.timeout)&&void 0!==_b?_b:this.options.getInitTimeoutMs(),prefetchUsers.length>5&&this.consoleLogger.info("Cannot prefetch more than 5 users."),keyedPrefetchUsers=this.normalizePrefetchUsers(prefetchUsers).slice(0,5).reduce((function(acc,curr){return acc[(0,Hashing_1.getUserCacheKey)(_this.getStableID(),curr,_this.getSDKKey()).v3]=curr,acc}),{}),stableID=String(null!==(_d=null===(_c=this.getStatsigMetadata())||void 0===_c?void 0:_c.stableID)&&void 0!==_d?_d:""),sinceTime=null,0===prefetchUsers.length&&(sinceTime=this.store.getLastUpdateTime(user,stableID)),previousDerivedFields=this.store.getPreviousDerivedFields(user,stableID),[2,this.network.fetchValues({user,sinceTime,timeout,useDeltas:null!=sinceTime,prefetchUsers:prefetchUsers.length>0?keyedPrefetchUsers:void 0,previousDerivedFields}).eventually((function(json){var _a;(0,ResponseVerification_1.verifySDKKeyUsed)(json,null!==(_a=_this.sdkKey)&&void 0!==_a?_a:"",_this.errorBoundary)&&(null==json?void 0:json.has_updates)&&_this.store.saveWithoutUpdatingClientState(user,json,stableID,prefetchUsers.length>0?keyedPrefetchUsers:void 0).catch((function(reason){return _this.errorBoundary.logError("fetchAndSaveValues:eventually",reason)}))})).then((function(json){return __awaiter(_this,void 0,void 0,(function(){var _this=this;return __generator(this,(function(_a){return[2,this.errorBoundary.swallow("fetchAndSaveValues",(function(){return __awaiter(_this,void 0,void 0,(function(){var _a;return __generator(this,(function(_b){switch(_b.label){case 0:return Diagnostics_1.default.mark.initialize.process.start({}),(0,ResponseVerification_1.verifySDKKeyUsed)(json,null!==(_a=this.sdkKey)&&void 0!==_a?_a:"",this.errorBoundary)?(null==json?void 0:json.has_updates)?[4,this.store.save(user,json,stableID,prefetchUsers.length>0?keyedPrefetchUsers:void 0)]:[3,2]:(Diagnostics_1.default.mark.initialize.process.end({success:!1}),[2]);case 1:return _b.sent(),[3,3];case 2:(null==json?void 0:json.is_no_content)&&this.store.setEvaluationReason(EvaluationReason_1.EvaluationReason.NetworkNotModified),_b.label=3;case 3:return this.prefetchedUsersByCacheKey=__assign(__assign({},this.prefetchedUsersByCacheKey),keyedPrefetchUsers),Diagnostics_1.default.mark.initialize.process.end({success:!0}),[2]}}))}))}))]}))}))}))]}))}))},StatsigClient.prototype.checkGateImpl=function(gateName,ignoreOverrides){if(this.ensureStoreLoaded(),"string"!=typeof gateName||0===gateName.length)throw new Errors_1.StatsigInvalidArgumentError("Must pass a valid string as the gateName.");return this.store.checkGate(gateName,ignoreOverrides)},StatsigClient.prototype.logGateExposureImpl=function(gateName,fetchResult){var isManualExposure=!fetchResult,result=null!=fetchResult?fetchResult:this.checkGateImpl(gateName,!1),gate=result.gate;this.logger.logGateExposure(this.getCurrentUser(),gateName,gate.value,gate.rule_id,gate.secondary_exposures,result.evaluationDetails,isManualExposure)},StatsigClient.prototype.getConfigImpl=function(configName,ignoreOverrides){if(this.ensureStoreLoaded(),"string"!=typeof configName||0===configName.length)throw new Errors_1.StatsigInvalidArgumentError("Must pass a valid string as the configName.");return this.store.getConfig(configName,ignoreOverrides)},StatsigClient.prototype.logConfigExposureImpl=function(configName,config){var isManualExposure=!config,localConfig=null!=config?config:this.getConfigImpl(configName,!1);this.logger.logConfigExposure(this.getCurrentUser(),configName,localConfig.getRuleID(),localConfig._getSecondaryExposures(),localConfig.getEvaluationDetails(),isManualExposure)},StatsigClient.prototype.getExperimentImpl=function(experimentName,keepDeviceValue,ignoreOverrides){if(this.ensureStoreLoaded(),"string"!=typeof experimentName||0===experimentName.length)throw new Errors_1.StatsigInvalidArgumentError("Must pass a valid string as the experimentName.");return this.store.getExperiment(experimentName,keepDeviceValue,ignoreOverrides)},StatsigClient.prototype.logExperimentExposureImpl=function(experimentName,keepDeviceValue,config){var isManualExposure=!config,localConfig=null!=config?config:this.getExperimentImpl(experimentName,keepDeviceValue,!1);this.logger.logConfigExposure(this.getCurrentUser(),experimentName,localConfig.getRuleID(),localConfig._getSecondaryExposures(),localConfig.getEvaluationDetails(),isManualExposure)},StatsigClient.prototype.getLayerImpl=function(logParameterFunction,layerName,keepDeviceValue){if(this.ensureStoreLoaded(),"string"!=typeof layerName||0===layerName.length)throw new Errors_1.StatsigInvalidArgumentError("Must pass a valid string as the layerName.");return this.store.getLayer(logParameterFunction,layerName,keepDeviceValue)},StatsigClient.prototype.getEmptyConfig=function(configName){return new DynamicConfig_1.default(configName,{},"",this.getEvalutionDetailsForError())},StatsigClient.prototype.fireAndForgetPrefechUsers=function(){this.prefetchUsers(this.options.getPrefetchUsers()).catch((function(){}))},StatsigClient}();exports.default=StatsigClient},"./node_modules/statsig-js/dist/StatsigIdentity.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=this&&this.__generator||function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var uuid_1=__webpack_require__("./node_modules/uuid/dist/esm-browser/index.js"),Constants_1=__webpack_require__("./node_modules/statsig-js/dist/utils/Constants.js"),StatsigAsyncStorage_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js")),StatsigLocalStorage_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js")),SDKVersion_1=__webpack_require__("./node_modules/statsig-js/dist/SDKVersion.js"),Identity=function(){function Identity(user,overrideStableID,reactNativeUUID){var _a;this.platform=null,this.nativeModules=null,this.sdkType="js-client",this.reactNativeUUID=reactNativeUUID,this.user=user,this.sdkVersion=SDKVersion_1.version,this.statsigMetadata={sdkType:this.sdkType,sdkVersion:this.sdkVersion};var stableID=overrideStableID;StatsigAsyncStorage_1.default.asyncStorage||(stableID=null!==(_a=null!=stableID?stableID:StatsigLocalStorage_1.default.getItem(Constants_1.STATSIG_STABLE_ID_KEY))&&void 0!==_a?_a:this.getUUID()),stableID&&(this.statsigMetadata.stableID=stableID)}return Identity.prototype.saveStableID=function(){null!=this.statsigMetadata.stableID&&StatsigLocalStorage_1.default.setItem(Constants_1.STATSIG_STABLE_ID_KEY,this.statsigMetadata.stableID)},Identity.prototype.initAsync=function(){return __awaiter(this,void 0,void 0,(function(){var stableID;return __generator(this,(function(_a){switch(_a.label){case 0:return(stableID=this.statsigMetadata.stableID)?[3,2]:[4,StatsigAsyncStorage_1.default.getItemAsync(Constants_1.STATSIG_STABLE_ID_KEY)];case 1:stableID=null!=(stableID=_a.sent())?stableID:this.getUUID(),_a.label=2;case 2:return this.statsigMetadata.stableID=stableID,StatsigAsyncStorage_1.default.setItemAsync(Constants_1.STATSIG_STABLE_ID_KEY,stableID).catch((function(){})),[2,this]}}))}))},Identity.prototype.getSDKType=function(){return this.sdkType},Identity.prototype.getSDKVersion=function(){return this.sdkVersion},Identity.prototype.getStatsigMetadata=function(){return this.statsigMetadata.sdkType=this.sdkType,this.statsigMetadata.sdkVersion=this.sdkVersion,this.statsigMetadata},Identity.prototype.getUser=function(){return this.user},Identity.prototype.updateUser=function(user){this.user=user},Identity.prototype.setSDKPackageInfo=function(SDKPackageInfo){this.sdkType=SDKPackageInfo.sdkType,this.sdkVersion=SDKPackageInfo.sdkVersion},Identity.prototype.setPlatform=function(platform){this.platform=platform,this.updateMetadataFromNativeModules()},Identity.prototype.setNativeModules=function(nativeModules){this.nativeModules=nativeModules,this.updateMetadataFromNativeModules()},Identity.prototype.updateMetadataFromNativeModules=function(){var _a,_b,_c,_d,_e,_f,_g;null!=this.platform&&null!=this.nativeModules&&("android"===(null===(_a=this.platform.OS)||void 0===_a?void 0:_a.toLocaleLowerCase())?this.statsigMetadata.locale=null===(_b=this.nativeModules.I18nManager)||void 0===_b?void 0:_b.localeIdentifier:"ios"===(null===(_c=this.platform.OS)||void 0===_c?void 0:_c.toLocaleLowerCase())&&(this.statsigMetadata.locale=(null===(_e=null===(_d=this.nativeModules.SettingsManager)||void 0===_d?void 0:_d.settings)||void 0===_e?void 0:_e.AppleLocale)||(null===(_g=null===(_f=this.nativeModules.SettingsManager)||void 0===_f?void 0:_f.settings)||void 0===_g?void 0:_g.AppleLanguages[0])))},Identity.prototype.getUUID=function(){var _a,_b;return null!==(_b=null===(_a=this.reactNativeUUID)||void 0===_a?void 0:_a.v4())&&void 0!==_b?_b:(0,uuid_1.v4)()},Identity.prototype.setRNDeviceInfo=function(deviceInfo){var _a,_b,_c,_d,_e;this.statsigMetadata.appVersion=null!==(_a=deviceInfo.getVersion())&&void 0!==_a?_a:"",this.statsigMetadata.systemVersion=null!==(_b=deviceInfo.getSystemVersion())&&void 0!==_b?_b:"",this.statsigMetadata.systemName=null!==(_c=deviceInfo.getSystemName())&&void 0!==_c?_c:"",this.statsigMetadata.deviceModelName=null!==(_d=deviceInfo.getModel())&&void 0!==_d?_d:"",this.statsigMetadata.deviceModel=null!==(_e=deviceInfo.getDeviceId())&&void 0!==_e?_e:""},Identity.prototype.setExpoConstants=function(expoConstants){var _a,_b;this.statsigMetadata.appVersion=null!==(_b=null!==(_a=expoConstants.nativeAppVersion)&&void 0!==_a?_a:expoConstants.nativeBuildVersion)&&void 0!==_b?_b:""},Identity.prototype.setExpoDevice=function(expoDevice){var _a,_b,_c,_d;this.statsigMetadata.systemVersion=null!==(_a=expoDevice.osVersion)&&void 0!==_a?_a:"",this.statsigMetadata.systemName=null!==(_b=expoDevice.osName)&&void 0!==_b?_b:"",this.statsigMetadata.deviceModelName=null!==(_c=expoDevice.modelName)&&void 0!==_c?_c:"",this.statsigMetadata.deviceModel=null!==(_d=expoDevice.modelId)&&void 0!==_d?_d:""},Identity}();exports.default=Identity},"./node_modules/statsig-js/dist/StatsigLogger.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=this&&this.__generator||function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var uuid_1=__webpack_require__("./node_modules/uuid/dist/esm-browser/index.js"),LogEvent_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/LogEvent.js")),StatsigNetwork_1=__webpack_require__("./node_modules/statsig-js/dist/StatsigNetwork.js"),Constants_1=__webpack_require__("./node_modules/statsig-js/dist/utils/Constants.js"),Diagnostics_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/Diagnostics.js")),StatsigAsyncStorage_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js")),StatsigLocalStorage_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js")),StatsigLogger=function(){function StatsigLogger(sdkInternal){this.failedLogEventCount=0,this.debugInfo=void 0,this.sdkInternal=sdkInternal,this.queue=[],this.nonExposedChecks={},this.flushInterval=null,this.loggedErrors=new Set,this.failedLogEvents=[],this.exposureDedupeKeys={},this.failedLogEventCount=0,this.init()}return StatsigLogger.prototype.init=function(){var _this=this;"undefined"!=typeof window&&"function"==typeof window.addEventListener&&(window.addEventListener("blur",(function(){return _this.flush(!0)})),window.addEventListener("beforeunload",(function(){return _this.flush(!0)})),window.addEventListener("load",(function(){setTimeout((function(){return _this.flush()}),100),setTimeout((function(){return _this.flush()}),1e3)}))),"undefined"!=typeof document&&"function"==typeof document.addEventListener&&document.addEventListener("visibilitychange",(function(){_this.flush("visible"!==document.visibilityState)})),(this.sdkInternal.getOptions().getIgnoreWindowUndefined()||"undefined"!=typeof window&&null!=window)&&(this.sdkInternal.getOptions().getLocalModeEnabled()||(this.flushInterval=setInterval((function(){_this.flush()}),this.sdkInternal.getOptions().getLoggingIntervalMillis()),setTimeout((function(){return _this.flush()}),100),setTimeout((function(){return _this.flush()}),1e3)))},StatsigLogger.prototype.log=function(event){if(!this.sdkInternal.getOptions().isAllLoggingDisabled()){try{if(!this.sdkInternal.getOptions().getDisableCurrentPageLogging()&&"undefined"!=typeof window&&null!=window&&"object"==typeof window.location&&"string"==typeof window.location.href){var parts=window.location.href.split(/[?#]/);(null==parts?void 0:parts.length)>0&&event.addStatsigMetadata("currentPage",parts[0])}}catch(_a){}this.queue.push(event.toJsonObject()),this.queue.length>=this.sdkInternal.getOptions().getLoggingBufferMaxSize()&&this.flush()}},StatsigLogger.prototype.resetDedupeKeys=function(){this.exposureDedupeKeys={}},StatsigLogger.prototype.setDebugInfo=function(debugInfo){this.debugInfo=debugInfo},StatsigLogger.prototype.shouldLogExposure=function(key){var lastTime=this.exposureDedupeKeys[key],now=Date.now();return!(null!=lastTime&&lastTime>=now-6e5||(this.exposureDedupeKeys[key]=now,0))},StatsigLogger.prototype.addNonExposedCheck=function(configName){null==this.nonExposedChecks[configName]?this.nonExposedChecks[configName]=1:this.nonExposedChecks[configName]++},StatsigLogger.prototype.logGateExposure=function(user,gateName,gateValue,ruleID,secondaryExposures,details,isManualExposure){var dedupeKey=gateName+String(gateValue)+ruleID+details.reason;if(this.shouldLogExposure(dedupeKey)){var metadata={gate:gateName,gateValue:String(gateValue),ruleID,reason:details.reason,time:details.time,debugInfo:this.debugInfo};isManualExposure&&(metadata.isManualExposure="true");var gateExposure=new LogEvent_1.default("statsig::gate_exposure");gateExposure.setUser(user),gateExposure.setMetadata(metadata),gateExposure.setSecondaryExposures(secondaryExposures),this.log(gateExposure)}},StatsigLogger.prototype.logConfigExposure=function(user,configName,ruleID,secondaryExposures,details,isManualExposure){var dedupeKey=configName+ruleID+details.reason;if(this.shouldLogExposure(dedupeKey)){var metadata={config:configName,ruleID,reason:details.reason,time:details.time,debugInfo:this.debugInfo};isManualExposure&&(metadata.isManualExposure="true");var configExposure=new LogEvent_1.default("statsig::config_exposure");configExposure.setUser(user),configExposure.setMetadata(metadata),configExposure.setSecondaryExposures(secondaryExposures),this.log(configExposure)}},StatsigLogger.prototype.logLayerExposure=function(user,configName,ruleID,secondaryExposures,allocatedExperiment,parameterName,isExplicitParameter,details,isManualExposure){var dedupeKey=[configName,ruleID,allocatedExperiment,parameterName,String(isExplicitParameter),details.reason].join("|");if(this.shouldLogExposure(dedupeKey)){var metadata={config:configName,ruleID,allocatedExperiment,parameterName,isExplicitParameter:String(isExplicitParameter),reason:details.reason,time:details.time,debugInfo:this.debugInfo};isManualExposure&&(metadata.isManualExposure="true");var configExposure=new LogEvent_1.default("statsig::layer_exposure");configExposure.setUser(user),configExposure.setMetadata(metadata),configExposure.setSecondaryExposures(secondaryExposures),this.log(configExposure)}},StatsigLogger.prototype.logConfigDefaultValueFallback=function(user,message,metadata){this.logGenericEvent("statsig::default_value_type_mismatch",user,message,metadata),this.loggedErrors.add(message),this.sdkInternal.getConsoleLogger().error(message)},StatsigLogger.prototype.logAppError=function(user,message,metadata){var trimmedMessage=message.substring(0,128);this.loggedErrors.has(trimmedMessage)||this.loggedErrors.size>10||(this.logGenericEvent("statsig::app_error",user,trimmedMessage,metadata),this.loggedErrors.add(trimmedMessage))},StatsigLogger.prototype.logDiagnostics=function(user,context){var markers=Diagnostics_1.default.getMarkers(context);if(!(markers.length<=0)){Diagnostics_1.default.clearContext(context);var event=this.makeDiagnosticsEvent(user,{markers,context,statsigOptions:this.sdkInternal.getOptions().getLoggingCopy()});this.log(event)}},StatsigLogger.prototype.logAppMetrics=function(user){var _a,_this=this;if("function"==typeof(null===(_a=null===window||void 0===window?void 0:window.performance)||void 0===_a?void 0:_a.getEntriesByType)){var entries=window.performance.getEntriesByType("navigation");if(entries&&!(entries.length<1)){var navEntry=entries[0],metadata={url:navEntry.name};if(navEntry instanceof PerformanceNavigationTiming&&(this.logGenericEvent("statsig::app_metrics::page_load_time",user,navEntry.duration,metadata),this.logGenericEvent("statsig::app_metrics::dom_interactive_time",user,navEntry.domInteractive-navEntry.startTime,metadata)),"function"==typeof(null===window||void 0===window?void 0:window.addEventListener)&&(null===document||void 0===document?void 0:document.body)){var deepestScroll_1=0;window.addEventListener("scroll",(function(){var scrollHeight=document.body.scrollHeight||1,scrollDepth=Math.min(100,Math.round((window.scrollY+window.innerHeight)/scrollHeight*100));scrollDepth>deepestScroll_1&&(deepestScroll_1=scrollDepth)})),window.addEventListener("beforeunload",(function(){_this.logGenericEvent("statsig::app_metrics::scroll_depth",user,deepestScroll_1,metadata),_this.logGenericEvent("statsig::app_metrics::time_on_page_ms",user,window.performance.now(),metadata)}))}}}},StatsigLogger.prototype.logGenericEvent=function(eventName,user,value,metadata){var evt=new LogEvent_1.default(eventName);return evt.setUser(user),evt.setValue(value),evt.setMetadata(metadata),this.log(evt),evt},StatsigLogger.prototype.shutdown=function(){this.flushInterval&&(clearInterval(this.flushInterval),this.flushInterval=null),this.flush(!0)},StatsigLogger.prototype.flush=function(isClosing){var _this=this;if(void 0===isClosing&&(isClosing=!1),this.addErrorBoundaryDiagnostics(),this.addNonExposedChecksEvent(),0!==this.queue.length){var statsigMetadata=this.sdkInternal.getStatsigMetadata();null==statsigMetadata.sessionID&&(statsigMetadata.sessionID=(0,uuid_1.v4)());var oldQueue=this.queue;if(this.queue=[],!isClosing||this.sdkInternal.getNetwork().supportsKeepalive()||"undefined"==typeof navigator||null==(null===navigator||void 0===navigator?void 0:navigator.sendBeacon))this.sdkInternal.getNetwork().postToEndpoint(StatsigNetwork_1.StatsigEndpoint.Rgstr,{events:oldQueue,statsigMetadata:this.sdkInternal.getStatsigMetadata()},{retryOptions:{retryLimit:3,backoff:1e3},useKeepalive:isClosing}).then((function(response){if(!response.ok)throw response})).catch((function(error){"function"==typeof error.text?error.text().then((function(errorText){_this.sdkInternal.getErrorBoundary().logError("statsig::log_event_failed",error,{getExtraData:function(){return __awaiter(_this,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,{eventCount:oldQueue.length,error:errorText}]}))}))}})})):_this.sdkInternal.getErrorBoundary().logError("statsig::log_event_failed",error,{getExtraData:function(){return __awaiter(_this,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,{eventCount:oldQueue.length,error:error.message}]}))}))}}),_this.newFailedRequest("statsig::log_event_failed",oldQueue)})).finally((function(){return __awaiter(_this,void 0,void 0,(function(){return __generator(this,(function(_a){return isClosing&&(this.queue.length>0&&(this.addFailedRequest({events:this.queue,statsigMetadata:this.sdkInternal.getStatsigMetadata(),time:Date.now()}),this.queue=[]),this.saveFailedRequests()),[2]}))}))}));else this.sdkInternal.getNetwork().sendLogBeacon({events:oldQueue,statsigMetadata:this.sdkInternal.getStatsigMetadata()})||(this.queue=oldQueue.concat(this.queue),this.queue.length>0&&(this.addFailedRequest({events:this.queue,statsigMetadata:this.sdkInternal.getStatsigMetadata(),time:Date.now()}),this.queue=[]),this.saveFailedRequests())}},StatsigLogger.prototype.saveFailedRequests=function(){var _this=this;if(this.failedLogEvents.length>0){var requestsCopy=JSON.stringify(this.failedLogEvents);if(requestsCopy.length>1024e3)return void this.clearLocalStorageRequests();if(StatsigAsyncStorage_1.default.asyncStorage)return void StatsigAsyncStorage_1.default.setItemAsync(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY,requestsCopy).catch((function(reason){return _this.sdkInternal.getErrorBoundary().logError("saveFailedRequests",reason)}));StatsigLocalStorage_1.default.setItem(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY,requestsCopy)}},StatsigLogger.prototype.sendSavedRequests=function(){return __awaiter(this,void 0,void 0,(function(){var failedRequests,fireAndForget,requestBodies,_loop_1,this_1,_i,requestBodies_1,requestBody,_this=this;return __generator(this,(function(_a){switch(_a.label){case 0:return fireAndForget=!1,StatsigAsyncStorage_1.default.asyncStorage?[4,StatsigAsyncStorage_1.default.getItemAsync(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY)]:[3,2];case 1:return failedRequests=_a.sent(),[3,3];case 2:failedRequests=StatsigLocalStorage_1.default.getItem(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY),_a.label=3;case 3:if(null==failedRequests)return this.clearLocalStorageRequests(),[2];failedRequests.length>1024e3&&(fireAndForget=!0),requestBodies=[];try{for(requestBodies=JSON.parse(failedRequests),_loop_1=function(requestBody){null!=requestBody&&requestBody.events&&Array.isArray(requestBody.events)&&this_1.sdkInternal.getNetwork().postToEndpoint(StatsigNetwork_1.StatsigEndpoint.Rgstr,requestBody).then((function(response){if(!response.ok)throw Error(response.status+"")})).catch((function(){fireAndForget||_this.addFailedRequest(requestBody)}))},this_1=this,_i=0,requestBodies_1=requestBodies;_i<requestBodies_1.length;_i++)requestBody=requestBodies_1[_i],_loop_1(requestBody)}catch(e){this.sdkInternal.getErrorBoundary().logError("sendSavedRequests",e)}finally{this.clearLocalStorageRequests()}return[2]}}))}))},StatsigLogger.prototype.addFailedRequest=function(requestBody){if(!(requestBody.time<Date.now()-432e6||this.failedLogEvents.length>100)){var additionalEvents=requestBody.events.length;this.failedLogEventCount+additionalEvents>1e3||(this.failedLogEvents.push(requestBody),this.failedLogEventCount+=additionalEvents)}},StatsigLogger.prototype.clearLocalStorageRequests=function(){var _this=this;StatsigAsyncStorage_1.default.asyncStorage?StatsigAsyncStorage_1.default.removeItemAsync(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY).catch((function(reason){return _this.sdkInternal.getErrorBoundary().logError("clearLocalStorageRequests",reason)})):StatsigLocalStorage_1.default.removeItem(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY)},StatsigLogger.prototype.newFailedRequest=function(name,queue){this.loggedErrors.has(name)||(this.loggedErrors.add(name),this.failedLogEvents.push({events:queue,statsigMetadata:this.sdkInternal.getStatsigMetadata(),time:Date.now()}),this.saveFailedRequests())},StatsigLogger.prototype.makeDiagnosticsEvent=function(user,data){var latencyEvent=new LogEvent_1.default("statsig::diagnostics");return latencyEvent.setUser(user),latencyEvent.setMetadata(data),latencyEvent},StatsigLogger.prototype.addErrorBoundaryDiagnostics=function(){if(0!==Diagnostics_1.default.getMarkerCount("api_call")){var diagEvent=this.makeDiagnosticsEvent(this.sdkInternal.getCurrentUser(),{context:"api_call",markers:Diagnostics_1.default.getMarkers("api_call")});this.queue.push(diagEvent),Diagnostics_1.default.clearContext("api_call")}},StatsigLogger.prototype.addNonExposedChecksEvent=function(){if(0!==Object.keys(this.nonExposedChecks).length){var event=new LogEvent_1.default("statsig::non_exposed_checks");event.setMetadata({checks:__assign({},this.nonExposedChecks)}),this.queue.push(event),this.nonExposedChecks={}}},StatsigLogger}();exports.default=StatsigLogger},"./node_modules/statsig-js/dist/StatsigNetwork.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=this&&this.__generator||function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.StatsigEndpoint=void 0;var StatsigEndpoint,Errors_1=__webpack_require__("./node_modules/statsig-js/dist/Errors.js"),StatsigRuntime_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/StatsigRuntime.js")),Diagnostics_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/Diagnostics.js"));!function(StatsigEndpoint){StatsigEndpoint.Initialize="initialize",StatsigEndpoint.Rgstr="rgstr",StatsigEndpoint.LogEventBeacon="log_event_beacon"}(StatsigEndpoint=exports.StatsigEndpoint||(exports.StatsigEndpoint={}));var StatsigNetwork=function(){function StatsigNetwork(sdkInternal){this.retryCodes={408:!0,500:!0,502:!0,503:!0,504:!0,522:!0,524:!0,599:!0},this.canUseKeepalive=!1,this.sdkInternal=sdkInternal,this.leakyBucket={},this.init()}return StatsigNetwork.prototype.init=function(){if(!this.sdkInternal.getOptions().getDisableNetworkKeepalive())try{this.canUseKeepalive="keepalive"in new Request("")}catch(_e){this.canUseKeepalive=!1}},StatsigNetwork.prototype.fetchValues=function(args){var user=args.user,sinceTime=args.sinceTime,timeout=args.timeout,useDeltas=args.useDeltas,prefetchUsers=args.prefetchUsers,previousDerivedFields=args.previousDerivedFields,hadBadDeltaChecksum=args.hadBadDeltaChecksum,badChecksum=args.badChecksum,badMergedConfigs=args.badMergedConfigs,badFullResponse=args.badFullResponse,input={user,prefetchUsers,statsigMetadata:this.sdkInternal.getStatsigMetadata(),sinceTime:null!=sinceTime?sinceTime:void 0,deltasResponseRequested:useDeltas,hash:this.sdkInternal.getOptions().getDisableHashing()?"none":"djb2",previousDerivedFields,hadBadDeltaChecksum,badChecksum,badMergedConfigs,badFullResponse};return this.postWithTimeout(StatsigEndpoint.Initialize,input,{timeout,retries:3,diagnostics:Diagnostics_1.default.mark.initialize.networkRequest})},StatsigNetwork.prototype.postWithTimeout=function(endpointName,body,options){var res,_this=this,_a=null!=options?options:{},_b=_a.timeout,timeout=void 0===_b?0:_b,_c=_a.retries,retries=void 0===_c?0:_c,_d=_a.backoff,backoff=void 0===_d?1e3:_d,_f=_a.diagnostics,diagnostics=void 0===_f?null:_f,hasTimedOut=!1,timer=null,cachedReturnValue=null,eventuals=[];0!=timeout&&(timer=new Promise((function(_,reject){setTimeout((function(){hasTimedOut=!0,reject(new Errors_1.StatsigInitializationTimeoutError(timeout))}),timeout)})));var boundScope,fetchPromise=this.postToEndpoint(endpointName,body,{retryOptions:{retryLimit:retries,backoff},diagnostics}).then((function(localRes){if(!(res=localRes).ok)return Promise.reject(new Error("Request to "+endpointName+" failed with status "+res.status));if("object"!=typeof res.data){var error=new Error("Request to "+endpointName+" received invalid response type. Expected 'object' but got '"+typeof res.data+"'");return _this.sdkInternal.getErrorBoundary().logError("postWithTimeoutInvalidRes",error,{getExtraData:function(){return __awaiter(_this,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,this.getErrorData(endpointName,body,retries,backoff,res)]}))}))}}),Promise.reject(error)}var json=res.data;return _this.sdkInternal.getErrorBoundary().capture("postWithTimeout",(function(){return __awaiter(_this,void 0,void 0,(function(){return __generator(this,(function(_a){return cachedReturnValue=json,hasTimedOut&&(eventuals.forEach((function(fn){return fn(json)})),eventuals=[]),[2,Promise.resolve(json)]}))}))}),(function(){return Promise.resolve({})}),{getExtraData:function(){return __awaiter(_this,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,this.getErrorData(endpointName,body,retries,backoff,res)]}))}))}})})).catch((function(e){return Promise.reject(e)})),racingPromise=timer?Promise.race([fetchPromise,timer]):fetchPromise;return racingPromise.eventually=(boundScope=racingPromise,function(fn){return hasTimedOut&&cachedReturnValue?fn(cachedReturnValue):eventuals.push(fn),boundScope}),racingPromise},StatsigNetwork.prototype.sendLogBeacon=function(payload){var statsigOpts=this.sdkInternal.getOptions();if(statsigOpts.getLocalModeEnabled())return!0;var url=new URL(statsigOpts.getEventLoggingApi()+StatsigEndpoint.LogEventBeacon);url.searchParams.append("k",this.sdkInternal.getSDKKey()),payload.clientTime=Date.now()+"";var stringPayload=null;try{stringPayload=JSON.stringify(payload)}catch(_e){return!1}return navigator.sendBeacon(url.toString(),stringPayload)},StatsigNetwork.prototype.postToEndpoint=function(endpointName,body,options){var _a;return __awaiter(this,void 0,void 0,(function(){var _b,_c,useKeepalive,_d,diagnostics,_f,_g,retryLimit,_h,attempt,_j,backoff,statsigOpts,api,url,counter,shouldEncode,postBody,encoded,params,res,isRetryCode,_this=this;return __generator(this,(function(_k){if(_c=(_b=null!=options?options:{}).useKeepalive,useKeepalive=void 0!==_c&&_c,_d=_b.diagnostics,diagnostics=void 0===_d?null:_d,_f=null!==(_a=null==options?void 0:options.retryOptions)&&void 0!==_a?_a:{},_g=_f.retryLimit,retryLimit=void 0===_g?0:_g,_h=_f.attempt,attempt=void 0===_h?1:_h,_j=_f.backoff,backoff=void 0===_j?1e3:_j,(statsigOpts=this.sdkInternal.getOptions()).getLocalModeEnabled())return[2,Promise.reject("no network requests in localMode")];if("function"!=typeof fetch)return[2,Promise.reject("fetch is not defined")];if("undefined"==typeof window&&!statsigOpts.getIgnoreWindowUndefined())return[2,Promise.reject("window is not defined")];if(api=[StatsigEndpoint.Initialize].includes(endpointName)?statsigOpts.getApi():statsigOpts.getEventLoggingApi(),url=api+endpointName,null!=(counter=this.leakyBucket[url])&&counter>=30)return[2,Promise.reject(new Error("Request failed because you are making the same request too frequently."))];if(this.leakyBucket[url]=null==counter?1:counter+1,shouldEncode=endpointName===StatsigEndpoint.Initialize&&StatsigRuntime_1.default.encodeInitializeCall&&"undefined"!=typeof window&&"function"==typeof(null===window||void 0===window?void 0:window.btoa),postBody=JSON.stringify(body),shouldEncode)try{encoded=window.btoa(postBody).split("").reverse().join(""),postBody=encoded}catch(_e){shouldEncode=!1}return params={method:"POST",body:postBody,headers:{"Content-type":"application/json; charset=UTF-8","STATSIG-API-KEY":this.sdkInternal.getSDKKey(),"STATSIG-CLIENT-TIME":Date.now()+"","STATSIG-SDK-TYPE":this.sdkInternal.getSDKType(),"STATSIG-SDK-VERSION":this.sdkInternal.getSDKVersion(),"STATSIG-ENCODED":shouldEncode?"1":"0"}},this.canUseKeepalive&&useKeepalive&&(params.keepalive=!0),null==diagnostics||diagnostics.start({attempt}),isRetryCode=!0,[2,fetch(url,params).then((function(localRes){return __awaiter(_this,void 0,void 0,(function(){var networkResponse,text,errorText;return __generator(this,(function(_a){switch(_a.label){case 0:return(res=localRes).ok?(networkResponse=res,204!==res.status?[3,1]:(networkResponse.data={has_updates:!1,is_no_content:!0},[3,3])):[3,4];case 1:return[4,res.text()];case 2:text=_a.sent(),networkResponse.data=JSON.parse(text),_a.label=3;case 3:return null==diagnostics||diagnostics.end(this.getDiagnosticsData(res,attempt)),[2,Promise.resolve(networkResponse)];case 4:return this.retryCodes[res.status]||(isRetryCode=!1),[4,res.text()];case 5:return errorText=_a.sent(),[2,Promise.reject(new Error(res.status+": "+errorText))]}}))}))})).catch((function(e){return null==diagnostics||diagnostics.end(_this.getDiagnosticsData(res,attempt,e)),attempt<retryLimit&&isRetryCode?new Promise((function(resolve,reject){setTimeout((function(){_this.leakyBucket[url]=Math.max(_this.leakyBucket[url]-1,0),_this.postToEndpoint(endpointName,body,{retryOptions:{retryLimit,attempt:attempt+1,backoff:2*backoff},useKeepalive,diagnostics}).then(resolve).catch(reject)}),backoff)})):Promise.reject(e)})).finally((function(){_this.leakyBucket[url]=Math.max(_this.leakyBucket[url]-1,0)}))]}))}))},StatsigNetwork.prototype.supportsKeepalive=function(){return this.canUseKeepalive},StatsigNetwork.prototype.getDiagnosticsData=function(res,attempt,e){var _a,_b;return{success:!0===(null==res?void 0:res.ok),statusCode:null==res?void 0:res.status,sdkRegion:null===(_a=null==res?void 0:res.headers)||void 0===_a?void 0:_a.get("x-statsig-region"),isDelta:!0===(null===(_b=null==res?void 0:res.data)||void 0===_b?void 0:_b.is_delta),attempt,error:Diagnostics_1.default.formatError(e)}},StatsigNetwork.prototype.getErrorData=function(endpointName,body,retries,backoff,res){var _a;return __awaiter(this,void 0,void 0,(function(){var headers_1;return __generator(this,(function(_b){try{return headers_1={},(null!==(_a=res.headers)&&void 0!==_a?_a:[]).forEach((function(value,key){headers_1[key]=value})),[2,{responseInfo:{headers:headers_1,status:res.status,statusText:res.statusText,type:res.type,url:res.url,redirected:res.redirected,bodySnippet:res.data?JSON.stringify(res.data).slice(0,500):null},requestInfo:{endpointName,bodySnippet:JSON.stringify(body).slice(0,500),retries,backoff}}]}catch(_e){return[2,{statusText:"statsig::failed to extract extra data"}]}return[2]}))}))},StatsigNetwork}();exports.default=StatsigNetwork},"./node_modules/statsig-js/dist/StatsigRuntime.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var StatsigRuntime=function(){function StatsigRuntime(){}return StatsigRuntime.encodeInitializeCall=!0,StatsigRuntime}();exports.default=StatsigRuntime},"./node_modules/statsig-js/dist/StatsigSDKOptions.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.LogLevel=exports.INIT_TIMEOUT_DEFAULT_MS=void 0;var LogLevel;exports.INIT_TIMEOUT_DEFAULT_MS=3e3,function(LogLevel){LogLevel[LogLevel.NONE=0]="NONE",LogLevel[LogLevel.INFO=1]="INFO",LogLevel[LogLevel.DEBUG=2]="DEBUG"}(LogLevel=exports.LogLevel||(exports.LogLevel={}));var StatsigSDKOptions=function(){function StatsigSDKOptions(options){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x,_y,_z,_0;null==options&&(options={});var api=null!==(_a=options.api)&&void 0!==_a?_a:"https://featuregates.org/v1/";this.api=api.endsWith("/")?api:api+"/",this.disableCurrentPageLogging=null!==(_b=options.disableCurrentPageLogging)&&void 0!==_b&&_b,this.environment=null!==(_c=options.environment)&&void 0!==_c?_c:null,this.loggingIntervalMillis=this.normalizeNumberInput(options.loggingIntervalMillis,{default:1e4,min:1e3,max:6e4}),this.loggingBufferMaxSize=this.normalizeNumberInput(options.loggingBufferMaxSize,{default:100,min:2,max:500}),this.disableNetworkKeepalive=null!==(_d=options.disableNetworkKeepalive)&&void 0!==_d&&_d,this.overrideStableID=null!==(_e=options.overrideStableID)&&void 0!==_e?_e:null,this.localMode=null!==(_f=options.localMode)&&void 0!==_f&&_f,this.initTimeoutMs=options.initTimeoutMs&&options.initTimeoutMs>=0?options.initTimeoutMs:exports.INIT_TIMEOUT_DEFAULT_MS,this.disableErrorLogging=null!==(_g=options.disableErrorLogging)&&void 0!==_g&&_g,this.disableAutoMetricsLogging=null!==(_h=options.disableAutoMetricsLogging)&&void 0!==_h&&_h,this.initializeValues=null!==(_j=options.initializeValues)&&void 0!==_j?_j:null;var eventLoggingApi=null!==(_l=null!==(_k=options.eventLoggingApi)&&void 0!==_k?_k:options.api)&&void 0!==_l?_l:"https://events.statsigapi.net/v1/";this.eventLoggingApi=eventLoggingApi.endsWith("/")?eventLoggingApi:eventLoggingApi+"/",this.prefetchUsers=null!==(_m=options.prefetchUsers)&&void 0!==_m?_m:[],this.disableLocalStorage=null!==(_o=options.disableLocalStorage)&&void 0!==_o&&_o,this.initCompletionCallback=null!==(_p=options.initCompletionCallback)&&void 0!==_p?_p:null,this.updateCompletionCallback=null!==(_q=options.updateUserCompletionCallback)&&void 0!==_q?_q:null,this.disableDiagnosticsLogging=null!==(_r=options.disableDiagnosticsLogging)&&void 0!==_r&&_r,this.logLevel=null!==(_s=null==options?void 0:options.logLevel)&&void 0!==_s?_s:LogLevel.NONE,this.ignoreWindowUndefined=null!==(_t=null==options?void 0:options.ignoreWindowUndefined)&&void 0!==_t&&_t,this.fetchMode=null!==(_u=options.fetchMode)&&void 0!==_u?_u:"network-only",this.disableLocalOverrides=null!==(_v=null==options?void 0:options.disableLocalOverrides)&&void 0!==_v&&_v,this.gateEvaluationCallback=null!==(_w=null==options?void 0:options.gateEvaluationCallback)&&void 0!==_w?_w:null,this.userPersistentStorage=null!==(_x=null==options?void 0:options.userPersistentStorage)&&void 0!==_x?_x:null,this.disableAllLogging=null!==(_y=options.disableAllLogging)&&void 0!==_y&&_y,this.setLoggingCopy(options),this.disableHashing=null!==(_z=options.disableHashing)&&void 0!==_z&&_z,this.evaluationCallback=null!==(_0=options.evaluationCallback)&&void 0!==_0?_0:null}return StatsigSDKOptions.prototype.setLoggingCopy=function(options){if(null!=options&&null==this.loggingCopy){var loggingCopy={};Object.entries(options).forEach((function(_a){var _b,_c,option=_a[0],value=_a[1];switch(typeof value){case"number":case"bigint":case"boolean":loggingCopy[String(option)]=value;break;case"string":value.length<50?loggingCopy[String(option)]=value:loggingCopy[String(option)]="set";break;case"object":"environment"===option?loggingCopy.environment=value:"prefetchUsers"===option?loggingCopy.prefetchUsers=(null!==(_c=null===(_b=options.prefetchUsers)||void 0===_b?void 0:_b.length)&&void 0!==_c?_c:0)>0:loggingCopy[String(option)]=null!=value?"set":"unset";break;case"function":"userPersistentStorage"===option&&(loggingCopy.userPersistentStorage=null!=value?"set":"unset")}})),this.loggingCopy=loggingCopy}},StatsigSDKOptions.prototype.getLoggingCopy=function(){return this.loggingCopy},StatsigSDKOptions.prototype.getApi=function(){return this.api},StatsigSDKOptions.prototype.getEnvironment=function(){return this.environment},StatsigSDKOptions.prototype.getDisableCurrentPageLogging=function(){return this.disableCurrentPageLogging},StatsigSDKOptions.prototype.getLoggingIntervalMillis=function(){return this.loggingIntervalMillis},StatsigSDKOptions.prototype.getLoggingBufferMaxSize=function(){return this.loggingBufferMaxSize},StatsigSDKOptions.prototype.getDisableNetworkKeepalive=function(){return this.disableNetworkKeepalive},StatsigSDKOptions.prototype.getOverrideStableID=function(){return this.overrideStableID},StatsigSDKOptions.prototype.getLocalModeEnabled=function(){return this.localMode},StatsigSDKOptions.prototype.getInitTimeoutMs=function(){return this.initTimeoutMs},StatsigSDKOptions.prototype.getDisableErrorLogging=function(){return this.disableErrorLogging},StatsigSDKOptions.prototype.getDisableAutoMetricsLogging=function(){return this.disableAutoMetricsLogging},StatsigSDKOptions.prototype.getInitializeValues=function(){return this.initializeValues},StatsigSDKOptions.prototype.getEventLoggingApi=function(){return this.eventLoggingApi},StatsigSDKOptions.prototype.getPrefetchUsers=function(){return this.prefetchUsers},StatsigSDKOptions.prototype.getDisableLocalStorage=function(){return this.disableLocalStorage},StatsigSDKOptions.prototype.getInitCompletionCallback=function(){return this.initCompletionCallback},StatsigSDKOptions.prototype.getUpdateUserCompletionCallback=function(){return this.updateCompletionCallback},StatsigSDKOptions.prototype.getDisableDiagnosticsLogging=function(){return this.disableDiagnosticsLogging},StatsigSDKOptions.prototype.getLogLevel=function(){return this.logLevel},StatsigSDKOptions.prototype.getIgnoreWindowUndefined=function(){return this.ignoreWindowUndefined},StatsigSDKOptions.prototype.getFetchMode=function(){return this.fetchMode},StatsigSDKOptions.prototype.getDisableLocalOverrides=function(){return this.disableLocalOverrides},StatsigSDKOptions.prototype.getGateEvaluationCallback=function(){return this.gateEvaluationCallback},StatsigSDKOptions.prototype.getUserPersistentStorage=function(){return this.userPersistentStorage},StatsigSDKOptions.prototype.getDisableHashing=function(){return this.disableHashing},StatsigSDKOptions.prototype.isAllLoggingDisabled=function(){return this.disableAllLogging},StatsigSDKOptions.prototype.reenableAllLogging=function(){this.disableAllLogging=!1},StatsigSDKOptions.prototype.getEvaluationCallback=function(){return this.evaluationCallback},StatsigSDKOptions.prototype.normalizeNumberInput=function(input,bounds){return null==input?bounds.default:Math.max(Math.min(input,bounds.max),bounds.min)},StatsigSDKOptions}();exports.default=StatsigSDKOptions},"./node_modules/statsig-js/dist/StatsigStore.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=this&&this.__generator||function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var DynamicConfig_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/DynamicConfig.js")),Layer_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/Layer.js")),BootstrapValidator_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/BootstrapValidator.js")),Constants_1=__webpack_require__("./node_modules/statsig-js/dist/utils/Constants.js"),Hashing_1=__webpack_require__("./node_modules/statsig-js/dist/utils/Hashing.js"),StatsigAsyncStorage_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js")),StatsigLocalStorage_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js")),EvaluationReason_1=__webpack_require__("./node_modules/statsig-js/dist/utils/EvaluationReason.js"),ResponseVerification_1=__webpack_require__("./node_modules/statsig-js/dist/utils/ResponseVerification.js"),StatsigStore=function(){function StatsigStore(sdkInternal,initializeValues){this.overrides={gates:{},configs:{},layers:{}},this.sdkInternal=sdkInternal,this.userCacheKey=this.sdkInternal.getCurrentUserCacheKey(),this.values={},this.userValues={feature_gates:{},dynamic_configs:{},sticky_experiments:{},layer_configs:{},has_updates:!1,time:0,evaluation_time:0,derived_fields:{}},this.stickyDeviceExperiments={},this.loaded=!1,this.reason=EvaluationReason_1.EvaluationReason.Uninitialized,this.userPersistentStorageAdapter=this.sdkInternal.getOptions().getUserPersistentStorage(),this.userPersistentStorageData={experiments:{}},initializeValues?this.bootstrap(initializeValues):this.load()}return StatsigStore.prototype.load=function(){this.loadFromLocalStorage(),this.partialLoadFromPersistentStorageAdapter()},StatsigStore.prototype.loadAsync=function(){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){switch(_a.label){case 0:return[4,this.loadFromAsyncStorage()];case 1:return _a.sent(),this.partialLoadFromPersistentStorageAdapter(),[2]}}))}))},StatsigStore.prototype.updateUser=function(isUserPrefetched){this.userCacheKey=this.sdkInternal.getCurrentUserCacheKey();var evaluationTime=this.setUserValueFromCache(isUserPrefetched);return this.partialLoadFromPersistentStorageAdapter(),evaluationTime},StatsigStore.prototype.getInitializeResponseJson=function(){return JSON.stringify(this.userValues)},StatsigStore.prototype.loadFromAsyncStorage=function(){return __awaiter(this,void 0,void 0,(function(){var _a,_b;return __generator(this,(function(_c){switch(_c.label){case 0:return _a=this.parseCachedValues,[4,StatsigAsyncStorage_1.default.getItemAsync(Constants_1.INTERNAL_STORE_KEY)];case 1:return _b=[_c.sent()],[4,StatsigAsyncStorage_1.default.getItemAsync(Constants_1.STICKY_DEVICE_EXPERIMENTS_KEY)];case 2:return _a.apply(this,_b.concat([_c.sent()])),this.userCacheKey=this.sdkInternal.getCurrentUserCacheKey(),this.loaded=!0,[2]}}))}))},StatsigStore.prototype.bootstrap=function(initializeValues){var _a,_b,_c,_d,_f,_g,key=this.sdkInternal.getCurrentUserCacheKey(),user=this.sdkInternal.getCurrentUser(),stableID=null!==(_c=null!==(_b=null===(_a=null==user?void 0:user.customIDs)||void 0===_a?void 0:_a.stableID)&&void 0!==_b?_b:this.sdkInternal.getStatsigMetadata().stableID)&&void 0!==_c?_c:null,reason=BootstrapValidator_1.default.getEvaluationReasonForBootstrap(user,initializeValues,stableID);this.loaded=!0;try{var values=initializeValues;this.userValues.feature_gates=null!==(_d=values.feature_gates)&&void 0!==_d?_d:{},this.userValues.dynamic_configs=null!==(_f=values.dynamic_configs)&&void 0!==_f?_f:{},this.userValues.layer_configs=null!==(_g=values.layer_configs)&&void 0!==_g?_g:{},this.userValues.evaluation_time=Date.now(),this.userValues.time=Date.now(),this.userValues.hash_used=values.hash_used,this.values[key.v3]=this.userValues,this.reason=reason,this.loadOverrides()}catch(_e){return}},StatsigStore.prototype.loadFromLocalStorage=function(){StatsigAsyncStorage_1.default.asyncStorage||(this.parseCachedValues(StatsigLocalStorage_1.default.getItem(Constants_1.INTERNAL_STORE_KEY),StatsigLocalStorage_1.default.getItem(Constants_1.STICKY_DEVICE_EXPERIMENTS_KEY)),this.loaded=!0)},StatsigStore.prototype.partialLoadFromPersistentStorageAdapter=function(){var _a;if(this.userPersistentStorageAdapter){var idType=null!==(_a=this.userPersistentStorageAdapter.userIDType)&&void 0!==_a?_a:"userID",unitID=this.sdkInternal.getCurrentUserUnitID(idType);if(unitID){try{this.userPersistentStorageData=JSON.parse(this.userPersistentStorageAdapter.load(unitID+":"+idType))}catch(e){console.warn("Failed to load from user persistent storage.",e)}this.userValues.sticky_experiments=this.userPersistentStorageData.experiments}}},StatsigStore.prototype.saveStickyExperimentsToPersistentStorageAdapter=function(){var _a;if(this.userPersistentStorageAdapter){var idType=null!==(_a=this.userPersistentStorageAdapter.userIDType)&&void 0!==_a?_a:"userID",unitID=this.sdkInternal.getCurrentUserUnitID(idType);if(unitID){var data=__assign(__assign({},this.userPersistentStorageData),{experiments:this.userValues.sticky_experiments});try{this.userPersistentStorageAdapter.save(unitID+":"+idType,JSON.stringify(data))}catch(e){console.warn("Failed to save user experiment values to persistent storage.",e)}}}},StatsigStore.prototype.isLoaded=function(){return this.loaded},StatsigStore.prototype.getLastUpdateTime=function(user,stableID){var requestedUserCacheKey=(0,Hashing_1.getUserCacheKey)(stableID,user,this.sdkInternal.getSDKKey()),userValues=this.getUserValues(requestedUserCacheKey),userHash=(0,Hashing_1.djb2HashForObject)(__assign(__assign({},user),{stableID}));return(null==userValues?void 0:userValues.user_hash)==userHash?this.userValues.time:null},StatsigStore.prototype.getPreviousDerivedFields=function(user,stableID){var requestedUserCacheKey=(0,Hashing_1.getUserCacheKey)(stableID,user,this.sdkInternal.getSDKKey()),userValues=this.getUserValues(requestedUserCacheKey),userHash=(0,Hashing_1.djb2HashForObject)(__assign(__assign({},user),{stableID}));if((null==userValues?void 0:userValues.user_hash)==userHash)return this.userValues.derived_fields},StatsigStore.prototype.parseCachedValues=function(allValues,deviceExperiments){try{this.values=allValues?JSON.parse(allValues):this.values,this.setUserValueFromCache()}catch(e){this.removeFromStorage(Constants_1.INTERNAL_STORE_KEY)}try{var deviceExpParsed=deviceExperiments?JSON.parse(deviceExperiments):null;deviceExpParsed&&(this.stickyDeviceExperiments=deviceExpParsed)}catch(e){this.removeFromStorage(Constants_1.STICKY_DEVICE_EXPERIMENTS_KEY)}this.loadOverrides()},StatsigStore.prototype.getUserValues=function(key){var _a,_b;return null!==(_b=null!==(_a=this.values[key.v3])&&void 0!==_a?_a:this.values[key.v2])&&void 0!==_b?_b:this.values[key.v1]},StatsigStore.prototype.setUserValueFromCache=function(isUserPrefetched){var _a;void 0===isUserPrefetched&&(isUserPrefetched=!1);var cachedValues=this.getUserValues(this.userCacheKey);return null==cachedValues?(this.resetUserValues(),this.reason=EvaluationReason_1.EvaluationReason.Uninitialized,null):(null!=cachedValues.stableIDUsed&&cachedValues.stableIDUsed!==this.getStableID()&&this.sdkInternal.getErrorBoundary().logError("stableIDChanged",new Error("StableID changed from "+cachedValues.stableIDUsed+" to "+this.getStableID()+",\n            override stableID "+this.sdkInternal.getOptions().getOverrideStableID())),this.userValues=cachedValues,this.reason=isUserPrefetched?EvaluationReason_1.EvaluationReason.Prefetch:EvaluationReason_1.EvaluationReason.Cache,null!==(_a=cachedValues.evaluation_time)&&void 0!==_a?_a:0)},StatsigStore.prototype.removeFromStorage=function(key){var _this=this;StatsigAsyncStorage_1.default.removeItemAsync(key).catch((function(reason){return _this.sdkInternal.getErrorBoundary().logError("removeFromStorage",reason)})),StatsigLocalStorage_1.default.removeItem(key)},StatsigStore.prototype.loadOverrides=function(){if(!this.sdkInternal.getOptions().getDisableLocalOverrides()){var overrides=StatsigLocalStorage_1.default.getItem(Constants_1.OVERRIDES_STORE_KEY);if(null!=overrides)try{this.overrides=JSON.parse(overrides)}catch(e){StatsigLocalStorage_1.default.removeItem(Constants_1.OVERRIDES_STORE_KEY)}}},StatsigStore.prototype.setEvaluationReason=function(evalReason){this.reason=evalReason},StatsigStore.prototype.save=function(user,response,stableID,prefetchUsers){return __awaiter(this,void 0,void 0,(function(){var requestedUserCacheKey,initResponse,userValues,_a;return __generator(this,(function(_b){switch(_b.label){case 0:return requestedUserCacheKey=(0,Hashing_1.getUserCacheKey)(stableID,user,this.sdkInternal.getSDKKey()),(initResponse=response).is_delta?[2,this.saveInitDeltas(user,response,!0,stableID,prefetchUsers)]:(this.mergeInitializeResponseIntoUserMap(initResponse,this.values,requestedUserCacheKey,user,(function(userValues){return userValues}),stableID,prefetchUsers),(userValues=this.getUserValues(requestedUserCacheKey))&&requestedUserCacheKey&&requestedUserCacheKey.v3===this.userCacheKey.v3&&(this.userValues=userValues,this.reason=EvaluationReason_1.EvaluationReason.Network),_a=this,[4,this.writeValuesToStorage(this.values)]);case 1:return _a.values=_b.sent(),[2]}}))}))},StatsigStore.prototype.saveWithoutUpdatingClientState=function(user,response,stableID,prefetchUsers){return __awaiter(this,void 0,void 0,(function(){var requestedUserCacheKey,initResponse,copiedValues;return __generator(this,(function(_a){switch(_a.label){case 0:return requestedUserCacheKey=(0,Hashing_1.getUserCacheKey)(stableID,user,this.sdkInternal.getSDKKey()),(initResponse=response).is_delta?[2,this.saveInitDeltas(user,response,!1,stableID,prefetchUsers)]:(copiedValues=JSON.parse(JSON.stringify(this.values)),this.mergeInitializeResponseIntoUserMap(initResponse,copiedValues,requestedUserCacheKey,user,(function(userValues){return userValues}),stableID,prefetchUsers),[4,this.writeValuesToStorage(copiedValues)]);case 1:return _a.sent(),[2]}}))}))},StatsigStore.prototype.getDeltasMergeFunction=function(mergedValues){var _this=this;return function(deltas,key){var _a,_b,_c,baseValues=null!==(_c=null!==(_b=null!==(_a=mergedValues[key.v3])&&void 0!==_a?_a:mergedValues[key.v2])&&void 0!==_b?_b:mergedValues[key.v1])&&void 0!==_c?_c:_this.getDefaultUserCacheValues();return _this.mergeUserCacheValues(baseValues,deltas)}},StatsigStore.prototype.saveInitDeltas=function(user,response,updateState,stableID,prefetchUsers){var _a,_b,_c;return __awaiter(this,void 0,void 0,(function(){var requestedUserCacheKey,initResponse,mergedValues,hasBadHash,badChecksum,hashChanged,userValues,expectedFullHash,mergedConfigs,currentFullHash,_d,_this=this;return __generator(this,(function(_f){switch(_f.label){case 0:return requestedUserCacheKey=(0,Hashing_1.getUserCacheKey)(stableID,user,this.sdkInternal.getSDKKey()),initResponse=response,mergedValues=JSON.parse(JSON.stringify(this.values)),this.mergeInitializeResponseIntoUserMap(initResponse,mergedValues,requestedUserCacheKey,user,this.getDeltasMergeFunction(mergedValues),stableID,prefetchUsers),hasBadHash=!1,badChecksum=void 0,hashChanged=!1,Object.keys(null!==(_a=initResponse.prefetched_user_values)&&void 0!==_a?_a:{}).forEach((function(userKey){var _a,user=mergedValues[userKey],reponseForUser=null===(_a=initResponse.prefetched_user_values)||void 0===_a?void 0:_a[userKey];if(user&&reponseForUser){removeDeletedKeysFromUserValues(reponseForUser,user);var expectedFullHash_1=reponseForUser.checksum,currentFullHash_1=(0,Hashing_1.djb2HashForObject)({feature_gates:mergedValues[userKey].feature_gates,dynamic_configs:mergedValues[userKey].dynamic_configs,layer_configs:mergedValues[userKey].layer_configs});expectedFullHash_1&&expectedFullHash_1!==currentFullHash_1&&(hasBadHash=!0,badChecksum=currentFullHash_1),userValues.hash_used!==initResponse.hash_used&&(hashChanged=!0)}})),userValues=null!==(_c=null!==(_b=mergedValues[requestedUserCacheKey.v3])&&void 0!==_b?_b:mergedValues[requestedUserCacheKey.v2])&&void 0!==_c?_c:mergedValues[requestedUserCacheKey.v1],removeDeletedKeysFromUserValues(initResponse,userValues),expectedFullHash=initResponse.checksum,mergedConfigs={feature_gates:userValues.feature_gates,dynamic_configs:userValues.dynamic_configs,layer_configs:userValues.layer_configs},currentFullHash=(0,Hashing_1.djb2HashForObject)(mergedConfigs),expectedFullHash&&expectedFullHash!==currentFullHash&&(hasBadHash=!0,badChecksum=currentFullHash),userValues.hash_used!==initResponse.hash_used&&(hashChanged=!0),hasBadHash||hashChanged?null!=initResponse.deltas_full_response?(this.refetchAndSaveValues(user,stableID,prefetchUsers,void 0,badChecksum,hasBadHash,mergedConfigs,initResponse.deltas_full_response).catch((function(reason){return _this.sdkInternal.getErrorBoundary().logError("refetchAndSaveValues",reason)})),[2]):(this.refetchAndSaveValues(user,stableID,prefetchUsers,void 0,badChecksum,hasBadHash).catch((function(reason){return _this.sdkInternal.getErrorBoundary().logError("refetchAndSaveValues",reason)})),[2]):updateState?(userValues&&requestedUserCacheKey.v3===this.userCacheKey.v3&&(this.userValues=userValues,this.reason=EvaluationReason_1.EvaluationReason.Network),_d=this,[4,this.writeValuesToStorage(mergedValues)]):[3,2];case 1:return _d.values=_f.sent(),[3,4];case 2:return[4,this.writeValuesToStorage(mergedValues)];case 3:_f.sent(),_f.label=4;case 4:return[2]}}))}))},StatsigStore.prototype.refetchAndSaveValues=function(user,stableID,prefetchUsers,timeout,badChecksum,hadBadChecksum,badMergedConfigs,badFullResponse){return void 0===timeout&&(timeout=this.sdkInternal.getOptions().getInitTimeoutMs()),__awaiter(this,void 0,void 0,(function(){var sinceTime,previousDerivedFields,_this=this;return __generator(this,(function(_a){return sinceTime=this.getLastUpdateTime(user,stableID),previousDerivedFields=this.getPreviousDerivedFields(user,stableID),[2,this.sdkInternal.getNetwork().fetchValues({user,sinceTime,timeout,useDeltas:!1,prefetchUsers,previousDerivedFields,hadBadDeltaChecksum:hadBadChecksum,badChecksum,badMergedConfigs,badFullResponse}).then((function(json){(0,ResponseVerification_1.verifySDKKeyUsed)(json,_this.sdkInternal.getSDKKey(),_this.sdkInternal.getErrorBoundary())&&(null==json?void 0:json.has_updates)&&_this.saveWithoutUpdatingClientState(user,json,stableID,prefetchUsers).catch((function(reason){return _this.sdkInternal.getErrorBoundary().logError("refetchAndSaveValues:then",reason)}))})).catch((function(reason){return _this.sdkInternal.getErrorBoundary().logError("refetchAndSaveValues",reason)}))]}))}))},StatsigStore.prototype.getStableID=function(){return this.sdkInternal.getStableID()},StatsigStore.prototype.mergeInitializeResponseIntoUserMap=function(data,configMap,requestedUserCacheKey,user,mergeFn,stableID,prefetchUsers){if(data.prefetched_user_values)for(var _i=0,cacheKeys_1=Object.keys(data.prefetched_user_values);_i<cacheKeys_1.length;_i++){var key=cacheKeys_1[_i],prefetched=data.prefetched_user_values[key],values=mergeFn(this.convertAPIDataToCacheValues(prefetched,key),{v1:key,v2:key,v3:key});if(prefetchUsers){var userHash=(0,Hashing_1.djb2HashForObject)(prefetchUsers[key]);values.user_hash=userHash,values.stableIDUsed=stableID}configMap[key]=values}if(requestedUserCacheKey){var requestedUserValues=this.convertAPIDataToCacheValues(data,requestedUserCacheKey.v3);userHash=(0,Hashing_1.djb2HashForObject)(__assign(__assign({},user),{stableID}));requestedUserValues.user_hash=userHash,requestedUserValues.stableIDUsed=stableID,configMap[requestedUserCacheKey.v3]=mergeFn(requestedUserValues,requestedUserCacheKey)}},StatsigStore.prototype.getDefaultUserCacheValues=function(){return{feature_gates:{},layer_configs:{},dynamic_configs:{},sticky_experiments:{},time:0,evaluation_time:0,derived_fields:{}}},StatsigStore.prototype.mergeUserCacheValues=function(baseValues,valuesToMerge){return{feature_gates:__assign(__assign({},baseValues.feature_gates),valuesToMerge.feature_gates),layer_configs:__assign(__assign({},baseValues.layer_configs),valuesToMerge.layer_configs),dynamic_configs:__assign(__assign({},baseValues.dynamic_configs),valuesToMerge.dynamic_configs),sticky_experiments:baseValues.sticky_experiments,time:valuesToMerge.time,evaluation_time:valuesToMerge.evaluation_time,derived_fields:valuesToMerge.derived_fields,hash_used:valuesToMerge.hash_used,user_hash:valuesToMerge.user_hash,stableIDUsed:valuesToMerge.stableIDUsed}},StatsigStore.prototype.writeValuesToStorage=function(valuesToWrite){return __awaiter(this,void 0,void 0,(function(){var filteredValues;return __generator(this,(function(_a){switch(_a.label){case 0:return valuesToWrite[this.userCacheKey.v3]?(delete valuesToWrite[this.userCacheKey.v2],delete valuesToWrite[this.userCacheKey.v1]):valuesToWrite[this.userCacheKey.v2]&&delete valuesToWrite[this.userCacheKey.v1],filteredValues=Object.entries(valuesToWrite).sort((function(_a,_b){var _c,_d,a=_a[1],b=_b[1];return null==a?1:null==b?-1:(null!==(_c=null==b?void 0:b.evaluation_time)&&void 0!==_c?_c:null==b?void 0:b.time)-(null!==(_d=null==a?void 0:a.evaluation_time)&&void 0!==_d?_d:null==a?void 0:a.time)})).slice(0,10),valuesToWrite=Object.fromEntries(filteredValues),StatsigAsyncStorage_1.default.asyncStorage?[4,StatsigAsyncStorage_1.default.setItemAsync(Constants_1.INTERNAL_STORE_KEY,JSON.stringify(valuesToWrite))]:[3,2];case 1:return _a.sent(),[3,3];case 2:StatsigLocalStorage_1.default.setItem(Constants_1.INTERNAL_STORE_KEY,JSON.stringify(valuesToWrite)),_a.label=3;case 3:return[2,valuesToWrite]}}))}))},StatsigStore.prototype.checkGate=function(gateName,ignoreOverrides){var _a;void 0===ignoreOverrides&&(ignoreOverrides=!1);var details,gateNameHash=this.getHashedSpecName(gateName),gateValue={name:gateName,value:!1,rule_id:"",secondary_exposures:[]};if(ignoreOverrides||null==this.overrides.gates[gateName]){var value=null===(_a=this.userValues)||void 0===_a?void 0:_a.feature_gates[gateNameHash];value&&(gateValue=value),details=this.getEvaluationDetails(null!=value)}else gateValue={name:gateName,value:this.overrides.gates[gateName],rule_id:"override",secondary_exposures:[]},details=this.getEvaluationDetails(!1,EvaluationReason_1.EvaluationReason.LocalOverride);return{evaluationDetails:details,gate:gateValue}},StatsigStore.prototype.getConfig=function(configName,ignoreOverrides){var _a,_b;void 0===ignoreOverrides&&(ignoreOverrides=!1);var configValue,details,configNameHash=this.getHashedSpecName(configName);if(ignoreOverrides||null==this.overrides.configs[configName])if(null!=(null===(_a=this.userValues)||void 0===_a?void 0:_a.dynamic_configs[configNameHash])){var rawConfigValue=null===(_b=this.userValues)||void 0===_b?void 0:_b.dynamic_configs[configNameHash];details=this.getEvaluationDetails(!0),configValue=this.createDynamicConfig(configName,rawConfigValue,details)}else details=this.getEvaluationDetails(!1),configValue=new DynamicConfig_1.default(configName,{},"",details);else details=this.getEvaluationDetails(!1,EvaluationReason_1.EvaluationReason.LocalOverride),configValue=new DynamicConfig_1.default(configName,this.overrides.configs[configName],"override",details,[],"",this.makeOnConfigDefaultValueFallback(this.sdkInternal.getCurrentUser()));return configValue},StatsigStore.prototype.getExperiment=function(expName,keepDeviceValue,ignoreOverrides){var exp,details;if(void 0===keepDeviceValue&&(keepDeviceValue=!1),void 0===ignoreOverrides&&(ignoreOverrides=!1),ignoreOverrides||null==this.overrides.configs[expName]){var latestValue=this.getLatestValue(expName,"dynamic_configs");details=this.getEvaluationDetails(null!=latestValue);var finalValue=this.getPossiblyStickyValue(expName,latestValue,keepDeviceValue,!1,details);exp=this.createDynamicConfig(expName,finalValue,details)}else details=this.getEvaluationDetails(!1,EvaluationReason_1.EvaluationReason.LocalOverride),exp=new DynamicConfig_1.default(expName,this.overrides.configs[expName],"override",details);return exp},StatsigStore.prototype.getLayer=function(logParameterFunction,layerName,keepDeviceValue){var _a,_b,_c,_d;if(null!=this.overrides.layers[layerName]){var details_1=this.getEvaluationDetails(!1,EvaluationReason_1.EvaluationReason.LocalOverride);return Layer_1.default._create(layerName,null!==(_a=this.overrides.layers[layerName])&&void 0!==_a?_a:{},"override",details_1,logParameterFunction)}var latestValue=this.getLatestValue(layerName,"layer_configs"),details=this.getEvaluationDetails(null!=latestValue),finalValue=this.getPossiblyStickyValue(layerName,latestValue,keepDeviceValue,!0,details);return Layer_1.default._create(layerName,null!==(_b=null==finalValue?void 0:finalValue.value)&&void 0!==_b?_b:{},null!==(_c=null==finalValue?void 0:finalValue.rule_id)&&void 0!==_c?_c:"",details,logParameterFunction,null==finalValue?void 0:finalValue.secondary_exposures,null==finalValue?void 0:finalValue.undelegated_secondary_exposures,null!==(_d=null==finalValue?void 0:finalValue.allocated_experiment_name)&&void 0!==_d?_d:"",null==finalValue?void 0:finalValue.explicit_parameters,null==finalValue?void 0:finalValue.group_name)},StatsigStore.prototype.overrideConfig=function(configName,value){try{JSON.stringify(value)}catch(e){return void console.warn("Failed to stringify given config override.  Dropping",e)}this.overrides.configs[configName]=value,this.saveOverrides()},StatsigStore.prototype.overrideLayer=function(layerName,value){try{JSON.stringify(value)}catch(e){return void console.warn("Failed to stringify given layer override.  Dropping",e)}this.overrides.layers[layerName]=value,this.saveOverrides()},StatsigStore.prototype.overrideGate=function(gateName,value){this.overrides.gates[gateName]=value,this.saveOverrides()},StatsigStore.prototype.removeGateOverride=function(gateName){null==gateName?this.overrides.gates={}:delete this.overrides.gates[gateName],this.saveOverrides()},StatsigStore.prototype.removeConfigOverride=function(configName){null==configName?this.overrides.configs={}:delete this.overrides.configs[configName],this.saveOverrides()},StatsigStore.prototype.removeLayerOverride=function(layerName){null==layerName?this.overrides.layers={}:delete this.overrides.layers[layerName],this.saveOverrides()},StatsigStore.prototype.getAllOverrides=function(){return this.overrides},StatsigStore.prototype.saveOverrides=function(){try{StatsigLocalStorage_1.default.setItem(Constants_1.OVERRIDES_STORE_KEY,JSON.stringify(this.overrides))}catch(e){console.warn("Failed to persist gate/config overrides")}},StatsigStore.prototype.getLatestValue=function(name,topLevelKey){var _a,_b,_c,_d,_f,hash=this.getHashedSpecName(name);return null!==(_c=null===(_b=null===(_a=this.userValues)||void 0===_a?void 0:_a[topLevelKey])||void 0===_b?void 0:_b[hash])&&void 0!==_c?_c:null===(_f=null===(_d=this.userValues)||void 0===_d?void 0:_d[topLevelKey])||void 0===_f?void 0:_f[name]},StatsigStore.prototype.getPossiblyStickyValue=function(name,latestValue,keepDeviceValue,isLayer,details){var _a,key=this.getHashedSpecName(name);if(!keepDeviceValue)return this.removeStickyValue(key),latestValue;var stickyValue=this.getStickyValue(key);if(!stickyValue)return this.attemptToSaveStickyValue(key,latestValue),latestValue;var latestExperimentValue=null;return 1==(null==(latestExperimentValue=isLayer?this.getLatestValue(null!==(_a=null==stickyValue?void 0:stickyValue.allocated_experiment_name)&&void 0!==_a?_a:"","dynamic_configs"):latestValue)?void 0:latestExperimentValue.is_experiment_active)?(details.reason=EvaluationReason_1.EvaluationReason.Sticky,stickyValue):(1==(null==latestValue?void 0:latestValue.is_experiment_active)?this.attemptToSaveStickyValue(key,latestValue):this.removeStickyValue(key),latestValue)},StatsigStore.prototype.createDynamicConfig=function(name,apiConfig,details){var _a,_b,_c;return new DynamicConfig_1.default(name,null!==(_a=null==apiConfig?void 0:apiConfig.value)&&void 0!==_a?_a:{},null!==(_b=null==apiConfig?void 0:apiConfig.rule_id)&&void 0!==_b?_b:"",details,null==apiConfig?void 0:apiConfig.secondary_exposures,null!==(_c=null==apiConfig?void 0:apiConfig.allocated_experiment_name)&&void 0!==_c?_c:"",this.makeOnConfigDefaultValueFallback(this.sdkInternal.getCurrentUser()),null==apiConfig?void 0:apiConfig.group_name,null==apiConfig?void 0:apiConfig.id_type,null==apiConfig?void 0:apiConfig.is_experiment_active)},StatsigStore.prototype.getStickyValue=function(key){var _a,_b;return null!==(_b=null===(_a=this.userValues)||void 0===_a?void 0:_a.sticky_experiments[key])&&void 0!==_b?_b:this.stickyDeviceExperiments[key]},StatsigStore.prototype.attemptToSaveStickyValue=function(key,config){var _a;config&&config.is_user_in_experiment&&config.is_experiment_active&&(!0===config.is_device_based?this.stickyDeviceExperiments[key]=config:(null===(_a=this.userValues)||void 0===_a?void 0:_a.sticky_experiments)&&(this.userValues.sticky_experiments[key]=config),this.saveStickyValuesToStorage())},StatsigStore.prototype.removeStickyValue=function(key){var _a,_b,_c,_d;0===Object.keys(null!==(_b=null===(_a=this.userValues)||void 0===_a?void 0:_a.sticky_experiments)&&void 0!==_b?_b:{}).length&&0===Object.keys(null!==(_c=this.stickyDeviceExperiments)&&void 0!==_c?_c:{}).length||(null===(_d=this.userValues)||void 0===_d||delete _d.sticky_experiments[key],delete this.stickyDeviceExperiments[key],this.saveStickyValuesToStorage())},StatsigStore.prototype.saveStickyValuesToStorage=function(){this.userPersistentStorageAdapter?this.saveStickyExperimentsToPersistentStorageAdapter():(this.values[this.userCacheKey.v3]=this.userValues,this.setItemToStorage(Constants_1.INTERNAL_STORE_KEY,JSON.stringify(this.values)),this.setItemToStorage(Constants_1.STICKY_DEVICE_EXPERIMENTS_KEY,JSON.stringify(this.stickyDeviceExperiments)))},StatsigStore.prototype.getGlobalEvaluationDetails=function(){var _a,_b;return{reason:null!==(_a=this.reason)&&void 0!==_a?_a:EvaluationReason_1.EvaluationReason.Uninitialized,time:null!==(_b=this.userValues.evaluation_time)&&void 0!==_b?_b:0}},StatsigStore.prototype.getEvaluationDetails=function(valueExists,reasonOverride){var _a;return valueExists?{reason:this.reason,time:null!==(_a=this.userValues.evaluation_time)&&void 0!==_a?_a:Date.now()}:{reason:null!=reasonOverride?reasonOverride:this.reason==EvaluationReason_1.EvaluationReason.Uninitialized?EvaluationReason_1.EvaluationReason.Uninitialized:EvaluationReason_1.EvaluationReason.Unrecognized,time:Date.now()}},StatsigStore.prototype.resetUserValues=function(){this.userValues={feature_gates:{},dynamic_configs:{},sticky_experiments:{},layer_configs:{},time:0,evaluation_time:0,derived_fields:{}}},StatsigStore.prototype.getHashedSpecName=function(input){switch(this.userValues.hash_used){case"djb2":return(0,Hashing_1.djb2Hash)(input);case"none":return input;default:return(0,Hashing_1.sha256Hash)(input)}},StatsigStore.prototype.convertAPIDataToCacheValues=function(data,cacheKey){var _a,_b;return{feature_gates:data.feature_gates,layer_configs:data.layer_configs,dynamic_configs:data.dynamic_configs,sticky_experiments:null!==(_b=null===(_a=this.values[cacheKey])||void 0===_a?void 0:_a.sticky_experiments)&&void 0!==_b?_b:{},time:null==data.time||isNaN(data.time)?0:data.time,evaluation_time:Date.now(),hash_used:data.hash_used,derived_fields:data.derived_fields}},StatsigStore.prototype.setItemToStorage=function(key,value){var _this=this;StatsigAsyncStorage_1.default.asyncStorage?StatsigAsyncStorage_1.default.setItemAsync(key,value).catch((function(reason){_this.sdkInternal.getErrorBoundary().logError("setItemToStorage",reason)})):StatsigLocalStorage_1.default.setItem(key,value)},StatsigStore.prototype.makeOnConfigDefaultValueFallback=function(user){var _this=this;return function(config,parameter,defaultValueType,valueType){_this.isLoaded()&&_this.sdkInternal.getLogger().logConfigDefaultValueFallback(user,"Parameter "+parameter+" is a value of type "+valueType+".\n          Returning requested defaultValue type "+defaultValueType,{name:config.getName(),ruleID:config.getRuleID(),parameter,defaultValueType,valueType})}},StatsigStore}();function removeDeletedKeysFromUserValues(initResponse,userValues){var _a,_b,_c;(null!==(_a=initResponse.deleted_configs)&&void 0!==_a?_a:[]).forEach((function(key){delete userValues.dynamic_configs[key]})),(null!==(_b=initResponse.deleted_gates)&&void 0!==_b?_b:[]).forEach((function(key){delete userValues.feature_gates[key]})),(null!==(_c=initResponse.deleted_layers)&&void 0!==_c?_c:[]).forEach((function(key){delete userValues.layer_configs[key]}))}exports.default=StatsigStore},"./node_modules/statsig-js/dist/StatsigUser.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__rest=this&&this.__rest||function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getUserHashWithoutStableID=void 0;var Hashing_1=__webpack_require__("./node_modules/statsig-js/dist/utils/Hashing.js");exports.getUserHashWithoutStableID=function getUserHashWithoutStableID(user){var customIDs=user.customIDs,rest=__rest(user,["customIDs"]),copyCustomIDs=__assign({},customIDs);return delete copyCustomIDs.stableID,(0,Hashing_1.djb2HashForObject)(__assign(__assign({},rest),{customIDs:copyCustomIDs}))}},"./node_modules/statsig-js/dist/index.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=this&&this.__generator||function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.StatsigAsyncStorage=exports.EvaluationReason=exports.StatsigClient=exports.Layer=exports.DynamicConfig=exports.FeatureGate=void 0;var Errors_1=__webpack_require__("./node_modules/statsig-js/dist/Errors.js"),StatsigClient_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/StatsigClient.js")),StatsigRuntime_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/StatsigRuntime.js")),Object_entries_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/Object.entries.js")),Object_fromEntries_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/Object.fromEntries.js")),Promise_finally_1=__importDefault(__webpack_require__("./node_modules/statsig-js/dist/utils/Promise.finally.js")),EvaluationReason_1=__webpack_require__("./node_modules/statsig-js/dist/utils/EvaluationReason.js"),FeatureGate_1=__webpack_require__("./node_modules/statsig-js/dist/FeatureGate.js");Object.defineProperty(exports,"FeatureGate",{enumerable:!0,get:function(){return __importDefault(FeatureGate_1).default}});var DynamicConfig_1=__webpack_require__("./node_modules/statsig-js/dist/DynamicConfig.js");Object.defineProperty(exports,"DynamicConfig",{enumerable:!0,get:function(){return __importDefault(DynamicConfig_1).default}});var Layer_1=__webpack_require__("./node_modules/statsig-js/dist/Layer.js");Object.defineProperty(exports,"Layer",{enumerable:!0,get:function(){return __importDefault(Layer_1).default}});var StatsigClient_2=__webpack_require__("./node_modules/statsig-js/dist/StatsigClient.js");Object.defineProperty(exports,"StatsigClient",{enumerable:!0,get:function(){return __importDefault(StatsigClient_2).default}});var EvaluationReason_2=__webpack_require__("./node_modules/statsig-js/dist/utils/EvaluationReason.js");Object.defineProperty(exports,"EvaluationReason",{enumerable:!0,get:function(){return EvaluationReason_2.EvaluationReason}});var StatsigAsyncStorage_1=__webpack_require__("./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js");Object.defineProperty(exports,"StatsigAsyncStorage",{enumerable:!0,get:function(){return __importDefault(StatsigAsyncStorage_1).default}}),(0,Object_entries_1.default)(),(0,Object_fromEntries_1.default)(),(0,Promise_finally_1.default)();var Statsig=function(){function Statsig(){}return Object.defineProperty(Statsig,"encodeIntializeCall",{get:function(){return StatsigRuntime_1.default.encodeInitializeCall},set:function(value){StatsigRuntime_1.default.encodeInitializeCall=value},enumerable:!1,configurable:!0}),Statsig.initialize=function(sdkKey,user,options){var _a;return __awaiter(this,void 0,void 0,(function(){var inst;return __generator(this,(function(_b){return inst=null!==(_a=Statsig.instance)&&void 0!==_a?_a:new StatsigClient_1.default(sdkKey,user,options),Statsig.instance||(Statsig.instance=inst),[2,inst.initializeAsync()]}))}))},Statsig.prefetchUsers=function(users){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_a){switch(_a.label){case 0:return[4,Statsig.getClientX().prefetchUsers(users)];case 1:return[2,_a.sent()]}}))}))},Statsig.setInitializeValues=function(initializeValues){Statsig.getClientX().setInitializeValues(initializeValues)},Statsig.checkGate=function(gateName,ignoreOverrides){return void 0===ignoreOverrides&&(ignoreOverrides=!1),Statsig.getClientX().checkGate(gateName,ignoreOverrides)},Statsig.checkGateWithExposureLoggingDisabled=function(gateName,ignoreOverrides){return void 0===ignoreOverrides&&(ignoreOverrides=!1),Statsig.getClientX().checkGateWithExposureLoggingDisabled(gateName,ignoreOverrides)},Statsig.getFeatureGate=function(gateName,options){return void 0===options&&(options=null),Statsig.getClientX().getFeatureGate(gateName,options)},Statsig.manuallyLogGateExposure=function(gateName){Statsig.getClientX().logGateExposure(gateName)},Statsig.getConfig=function(configName,ignoreOverrides){return void 0===ignoreOverrides&&(ignoreOverrides=!1),Statsig.getClientX().getConfig(configName,ignoreOverrides)},Statsig.getConfigWithExposureLoggingDisabled=function(configName,ignoreOverrides){return void 0===ignoreOverrides&&(ignoreOverrides=!1),Statsig.getClientX().getConfigWithExposureLoggingDisabled(configName,ignoreOverrides)},Statsig.manuallyLogConfigExposure=function(configName){Statsig.getClientX().logConfigExposure(configName)},Statsig.getExperiment=function(experimentName,keepDeviceValue,ignoreOverrides){return void 0===keepDeviceValue&&(keepDeviceValue=!1),void 0===ignoreOverrides&&(ignoreOverrides=!1),Statsig.getClientX().getExperiment(experimentName,keepDeviceValue,ignoreOverrides)},Statsig.getExperimentWithExposureLoggingDisabled=function(experimentName,keepDeviceValue,ignoreOverrides){return void 0===keepDeviceValue&&(keepDeviceValue=!1),void 0===ignoreOverrides&&(ignoreOverrides=!1),Statsig.getClientX().getExperimentWithExposureLoggingDisabled(experimentName,keepDeviceValue,ignoreOverrides)},Statsig.manuallyLogExperimentExposure=function(configName,keepDeviceValue){void 0===keepDeviceValue&&(keepDeviceValue=!1),Statsig.getClientX().logExperimentExposure(configName,keepDeviceValue)},Statsig.getLayer=function(layerName,keepDeviceValue){return void 0===keepDeviceValue&&(keepDeviceValue=!1),Statsig.getClientX().getLayer(layerName,keepDeviceValue)},Statsig.getLayerWithExposureLoggingDisabled=function(layerName,keepDeviceValue){return void 0===keepDeviceValue&&(keepDeviceValue=!1),Statsig.getClientX().getLayerWithExposureLoggingDisabled(layerName,keepDeviceValue)},Statsig.manuallyLogLayerParameterExposure=function(layerName,parameterName,keepDeviceValue){void 0===keepDeviceValue&&(keepDeviceValue=!1),Statsig.getClientX().logLayerParameterExposure(layerName,parameterName,keepDeviceValue)},Statsig.logEvent=function(eventName,value,metadata){return void 0===value&&(value=null),void 0===metadata&&(metadata=null),Statsig.getClientX().logEvent(eventName,value,metadata)},Statsig.updateUser=function(user){return Statsig.getClientX().updateUser(user)},Statsig.updateUserWithValues=function(user,values){return Statsig.getClientX().updateUserWithValues(user,values)},Statsig.shutdown=function(){Statsig.getClientX().shutdown(),Statsig.instance=null},Statsig.overrideGate=function(gateName,value){Statsig.getClientX().overrideGate(gateName,value)},Statsig.overrideConfig=function(configName,value){Statsig.getClientX().overrideConfig(configName,value)},Statsig.overrideLayer=function(layerName,value){Statsig.getClientX().overrideLayer(layerName,value)},Statsig.removeGateOverride=function(name){Statsig.getClientX().removeGateOverride(name)},Statsig.removeConfigOverride=function(name){Statsig.getClientX().removeConfigOverride(name)},Statsig.removeLayerOverride=function(name){Statsig.getClientX().removeLayerOverride(name)},Statsig.getAllOverrides=function(){return Statsig.getClientX().getAllOverrides()},Statsig.getStableID=function(){return Statsig.getClientX().getStableID()},Statsig.getEvaluationDetails=function(){var _a,_b;return null!==(_b=null===(_a=Statsig.instance)||void 0===_a?void 0:_a.getEvaluationDetails())&&void 0!==_b?_b:{reason:EvaluationReason_1.EvaluationReason.Uninitialized,time:0}},Statsig.getInitializeResponseJson=function(){return Statsig.getClientX().getInitializeResponseJson()},Statsig.removeOverride=function(name){Statsig.getClientX().removeOverride(name)},Statsig.getOverrides=function(){return Statsig.getClientX().getOverrides()},Statsig.initializeCalled=function(){return null!=Statsig.instance&&Statsig.instance.initializeCalled()},Statsig.flushEvents=function(){Statsig.getClientX().flushEvents()},Statsig.setDebugInfo=function(debugInfo){Statsig.getClientX().setDebugInfo(debugInfo)},Statsig.reenableAllLogging=function(){Statsig.getClientX().reenableAllLogging()},Statsig.getClientX=function(){if(!Statsig.instance)throw new Errors_1.StatsigUninitializedError;return Statsig.instance},Statsig.instance=null,Statsig}();exports.default=Statsig},"./node_modules/statsig-js/dist/utils/Base64.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Base64=void 0,exports.Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",_encodeBinary:function(input){for(var chr1,chr2,chr3,enc1,enc2,enc3,enc4,output="",i=0;i<input.length;)enc1=(chr1=input.charCodeAt(i++))>>2,enc2=(3&chr1)<<4|(chr2=input.charCodeAt(i++))>>4,enc3=(15&chr2)<<2|(chr3=input.charCodeAt(i++))>>6,enc4=63&chr3,isNaN(chr2)?enc3=enc4=64:isNaN(chr3)&&(enc4=64),output=output+this._keyStr.charAt(enc1)+this._keyStr.charAt(enc2)+this._keyStr.charAt(enc3)+this._keyStr.charAt(enc4);return output},encodeArrayBuffer:function(buffer){for(var binary="",bytes=new Uint8Array(buffer),len=bytes.byteLength,i=0;i<len;i++)binary+=String.fromCharCode(bytes[i]);return exports.Base64._encodeBinary(binary)}}},"./node_modules/statsig-js/dist/utils/BootstrapValidator.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0});var StatsigUser_1=__webpack_require__("./node_modules/statsig-js/dist/StatsigUser.js"),EvaluationReason_1=__webpack_require__("./node_modules/statsig-js/dist/utils/EvaluationReason.js"),BootstrapValidator=function(){function BootstrapValidator(){}return BootstrapValidator.getEvaluationReasonForBootstrap=function(user,values,stableID){var isValid=!0,stableIDMistmatch=!1;try{var evaluatedKeys=values.evaluated_keys;if(evaluatedKeys&&"object"==typeof evaluatedKeys){var evaluatedKeysRecord=this.copyObject(evaluatedKeys),userToCompare=null==user?null:this.copyObject(user);isValid=isValid&&BootstrapValidator.validate(evaluatedKeysRecord,userToCompare)&&BootstrapValidator.validate(userToCompare,evaluatedKeysRecord);var customIDs=evaluatedKeys.customIDs;stableID!=(null==customIDs?void 0:customIDs.stableID)&&(stableIDMistmatch=!0)}var userHash=values.user_hash;userHash&&"string"==typeof userHash&&null!=user&&(isValid=isValid&&userHash===(0,StatsigUser_1.getUserHashWithoutStableID)(user))}catch(error){}return isValid?stableIDMistmatch?EvaluationReason_1.EvaluationReason.BootstrapStableIDMismatch:EvaluationReason_1.EvaluationReason.Bootstrap:EvaluationReason_1.EvaluationReason.InvalidBootstrap},BootstrapValidator.validate=function(one,two){if(null==one)return null==two;if(null==two)return!1;for(var _i=0,_a=Object.entries(one);_i<_a.length;_i++){var _b=_a[_i],key=_b[0],value=_b[1];if("stableID"!==key){if(typeof value!=typeof two[key])return!1;if("string"!=typeof value)return"object"==typeof value&&this.validate(value,two[key]);if(value!==two[key])return!1}}return!0},BootstrapValidator.copyObject=function(obj){if(null==obj)return null;var copy={};if((null==obj?void 0:obj.userID)&&(copy.userID=null==obj?void 0:obj.userID),null==obj?void 0:obj.customIDs){var customIDs=__assign({},obj.customIDs);delete customIDs.stableID,0!==Object.keys(customIDs).length&&(copy.customIDs=customIDs)}return copy},BootstrapValidator}();exports.default=BootstrapValidator},"./node_modules/statsig-js/dist/utils/ConsoleLogger.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var StatsigSDKOptions_1=__webpack_require__("./node_modules/statsig-js/dist/StatsigSDKOptions.js"),ConsoleLogger=function(){function ConsoleLogger(level){this.logLevel=level}return ConsoleLogger.prototype.info=function(message){this.logLevel!==StatsigSDKOptions_1.LogLevel.NONE&&console.log(message)},ConsoleLogger.prototype.error=function(message){this.logLevel===StatsigSDKOptions_1.LogLevel.DEBUG&&console.error(message)},ConsoleLogger}();exports.default=ConsoleLogger},"./node_modules/statsig-js/dist/utils/Constants.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.STORAGE_PREFIX=exports.LOCAL_STORAGE_KEYS=exports.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY=exports.STATSIG_STABLE_ID_KEY=exports.INTERNAL_STORE_KEY=exports.STICKY_DEVICE_EXPERIMENTS_KEY=exports.OVERRIDES_STORE_KEY=void 0,exports.OVERRIDES_STORE_KEY="STATSIG_LOCAL_STORAGE_INTERNAL_STORE_OVERRIDES_V3",exports.STICKY_DEVICE_EXPERIMENTS_KEY="STATSIG_LOCAL_STORAGE_STICKY_DEVICE_EXPERIMENTS",exports.INTERNAL_STORE_KEY="STATSIG_LOCAL_STORAGE_INTERNAL_STORE_V4",exports.STATSIG_STABLE_ID_KEY="STATSIG_LOCAL_STORAGE_STABLE_ID",exports.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY="STATSIG_LOCAL_STORAGE_LOGGING_REQUEST",exports.LOCAL_STORAGE_KEYS={STATSIG_LOCAL_STORAGE_STABLE_ID:!0,STATSIG_LOCAL_STORAGE_INTERNAL_STORE_V4:!0,STATSIG_LOCAL_STORAGE_STICKY_DEVICE_EXPERIMENTS:!0,STATSIG_LOCAL_STORAGE_INTERNAL_STORE_OVERRIDES_V3:!0,STATSIG_LOCAL_STORAGE_LOGGING_REQUEST:!0},exports.STORAGE_PREFIX="STATSIG_LOCAL_STORAGE"},"./node_modules/statsig-js/dist/utils/Diagnostics.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.DiagnosticsImpl=void 0;var Timing_1=__webpack_require__("./node_modules/statsig-js/dist/utils/Timing.js"),DiagnosticsImpl=function(){function DiagnosticsImpl(args){var _a,_b,_c,_this=this;this.mark={overall:this.selectAction("overall"),initialize:this.selectStep("initialize"),bootstrap:this.selectStep("bootstrap"),api_call:function(tag){switch(tag){case"getConfig":return _this.selectAction("get_config");case"getExperiment":return _this.selectAction("get_experiment");case"checkGate":return _this.selectAction("check_gate");case"getLayer":return _this.selectAction("get_layer")}return null}},this.context="initialize",this.defaultMaxMarkers=30,this.maxMarkers={initialize:this.defaultMaxMarkers,config_sync:this.defaultMaxMarkers,event_logging:this.defaultMaxMarkers,api_call:this.defaultMaxMarkers},this.markers=null!==(_a=args.markers)&&void 0!==_a?_a:{initialize:[],config_sync:[],event_logging:[],api_call:[]},this.disabled=null!==(_c=null===(_b=args.options)||void 0===_b?void 0:_b.getDisableDiagnosticsLogging())&&void 0!==_c&&_c}return DiagnosticsImpl.prototype.setContext=function(context){this.context=context},DiagnosticsImpl.prototype.selectAction=function(key,step){var _this=this;return{start:function(data,context){return _this.addMarker(__assign({key,step,action:"start",timestamp:(0,Timing_1.now)({withPrecision:!0})},null!=data?data:{}),context)},end:function(data,context){return _this.addMarker(__assign({key,step,action:"end",timestamp:(0,Timing_1.now)({withPrecision:!0})},null!=data?data:{}),context)}}},DiagnosticsImpl.prototype.selectStep=function(key){return{process:this.selectAction(key,"process"),networkRequest:this.selectAction(key,"network_request")}},DiagnosticsImpl.prototype.addMarker=function(marker,overrideContext){var _a,context=null!=overrideContext?overrideContext:this.context;return(!this.disabled||"api_call"!==context)&&(!(void 0!==this.maxMarkers[context]&&this.markers[context].length>=(null!==(_a=this.maxMarkers[context])&&void 0!==_a?_a:this.defaultMaxMarkers))&&(this.markers[context].push(marker),!0))},DiagnosticsImpl.prototype.getMarkers=function(context){return this.markers[context]},DiagnosticsImpl.prototype.setMaxMarkers=function(context,max){this.maxMarkers[context]=max},DiagnosticsImpl.prototype.getMarkerCount=function(context){return this.markers[context].length},DiagnosticsImpl.prototype.clearContext=function(context){this.markers[context]=[]},DiagnosticsImpl}();exports.DiagnosticsImpl=DiagnosticsImpl;var Diagnostics=function(){function Diagnostics(){}return Diagnostics.initialize=function(args){this.instance=new DiagnosticsImpl(args),this.mark=this.instance.mark,this.disabled=this.instance.disabled,this.getMarkers=this.instance.getMarkers.bind(this.instance),this.getMarkerCount=this.instance.getMarkerCount.bind(this.instance),this.setMaxMarkers=this.instance.setMaxMarkers.bind(this.instance),this.setContext=this.instance.setContext.bind(this.instance),this.clearContext=this.instance.clearContext.bind(this.instance)},Diagnostics.formatError=function(e){if(e&&"object"==typeof e)return{code:this.safeGetField(e,"code"),name:this.safeGetField(e,"name"),message:this.safeGetField(e,"message")}},Diagnostics.safeGetField=function(data,field){if(field in data)return data[field]},Diagnostics}();exports.default=Diagnostics},"./node_modules/statsig-js/dist/utils/EvaluationReason.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EvaluationReason=void 0,function(EvaluationReason){EvaluationReason.Network="Network",EvaluationReason.Bootstrap="Bootstrap",EvaluationReason.InvalidBootstrap="InvalidBootstrap",EvaluationReason.Cache="Cache",EvaluationReason.Prefetch="Prefetch",EvaluationReason.Sticky="Sticky",EvaluationReason.LocalOverride="LocalOverride",EvaluationReason.Unrecognized="Unrecognized",EvaluationReason.Uninitialized="Uninitialized",EvaluationReason.Error="Error",EvaluationReason.NetworkNotModified="NetworkNotModified",EvaluationReason.BootstrapStableIDMismatch="BootstrapStableIDMismatch"}(exports.EvaluationReason||(exports.EvaluationReason={}))},"./node_modules/statsig-js/dist/utils/Hashing.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getUserCacheKey=exports.getSortedObject=exports.djb2HashForObject=exports.sha256Hash=exports.djb2Hash=exports.memoizedUserCacheKeyHash=exports.fasthash=void 0;var Base64_1=__webpack_require__("./node_modules/statsig-js/dist/utils/Base64.js"),js_sha256_1=__webpack_require__("./node_modules/js-sha256/src/sha256.js"),hashLookupTable={};function fasthash(value){for(var hash=0,i=0;i<value.length;i++){hash=(hash<<5)-hash+value.charCodeAt(i),hash|=0}return hash}function memoizedUserCacheKeyHash(value){var seen=hashLookupTable[value];if(seen)return seen;var hash=String(fasthash(value));return hashLookupTable[value]=hash,hash}function djb2Hash(value){return String(fasthash(value)>>>0)}function getSortedObject(object){if(null==object)return null;var keys=Object.keys(object).sort(),sortedObject={};return keys.forEach((function(key){var value=object[key];value instanceof Object&&(value=getSortedObject(value)),sortedObject[key]=value})),sortedObject}exports.fasthash=fasthash,exports.memoizedUserCacheKeyHash=memoizedUserCacheKeyHash,exports.djb2Hash=djb2Hash,exports.sha256Hash=function sha256Hash(value){var seen=hashLookupTable[value];if(seen)return seen;var buffer=js_sha256_1.sha256.create().update(value).arrayBuffer(),hash=Base64_1.Base64.encodeArrayBuffer(buffer);return hashLookupTable[value]=hash,hash},exports.djb2HashForObject=function djb2HashForObject(object){return djb2Hash(JSON.stringify(getSortedObject(object)))},exports.getSortedObject=getSortedObject,exports.getUserCacheKey=function getUserCacheKey(stableID,user,sdkKey){var _a,parts=["userID:"+String(null!==(_a=null==user?void 0:user.userID)&&void 0!==_a?_a:"")],customIDs=null==user?void 0:user.customIDs;if(null!=customIDs)for(var _i=0,_b=Object.entries(customIDs);_i<_b.length;_i++){var _c=_b[_i],type=_c[0],value=_c[1];parts.push(type+":"+value)}var v2=memoizedUserCacheKeyHash(parts.join(";")),v3=memoizedUserCacheKeyHash(parts.join(";")+";sdkKey:"+sdkKey);return parts.splice(1,0,"stableID:"+stableID),{v1:memoizedUserCacheKeyHash(parts.join(";")),v2,v3}}},"./node_modules/statsig-js/dist/utils/Object.entries.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function Polyfill(){Object.entries||(Object.entries=function(obj){for(var ownProps=Object.keys(obj),i=ownProps.length,resArray=new Array(i);i--;)resArray[i]=[ownProps[i],obj[ownProps[i]]];return resArray})}},"./node_modules/statsig-js/dist/utils/Object.fromEntries.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function Polyfill(){Object.fromEntries||(Object.fromEntries=function(iter){for(var obj={},_i=0,iter_1=iter;_i<iter_1.length;_i++){var pair=iter_1[_i];if(Object(pair)!==pair)throw new TypeError("iterable for fromEntries should yield objects");var key=pair[0],val=pair[1];Object.defineProperty(obj,key,{configurable:!0,enumerable:!0,writable:!0,value:val})}return obj})}},"./node_modules/statsig-js/dist/utils/Promise.finally.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function Polyfill(){Promise.prototype.finally=Promise.prototype.finally||{finally:function(fn){var onFinally=function(callback){return Promise.resolve(fn()).then(callback)};return this.then((function(result){return onFinally((function(){return result}))}),(function(reason){return onFinally((function(){return Promise.reject(reason)}))}))}}.finally}},"./node_modules/statsig-js/dist/utils/ResponseVerification.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.verifySDKKeyUsed=void 0;var Errors_1=__webpack_require__("./node_modules/statsig-js/dist/Errors.js"),Hashing_1=__webpack_require__("./node_modules/statsig-js/dist/utils/Hashing.js");exports.verifySDKKeyUsed=function verifySDKKeyUsed(json,sdkKey,errorBoundary){var hashedSDKKeyUsed=null==json?void 0:json.hashed_sdk_key_used;return null==hashedSDKKeyUsed||hashedSDKKeyUsed===(0,Hashing_1.djb2Hash)(null!=sdkKey?sdkKey:"")||(errorBoundary.logError("verifySDKKeyUsed",new Errors_1.StatsigSDKKeyMismatchError("The SDK key provided does not match the one used to generate values.")),!1)}},"./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var StatsigAsyncStorage=function(){function StatsigAsyncStorage(){}return StatsigAsyncStorage.getItemAsync=function(key){var _a;return StatsigAsyncStorage.asyncStorage?null!==(_a=StatsigAsyncStorage.asyncStorage.getItem(key))&&void 0!==_a?_a:null:Promise.resolve(null)},StatsigAsyncStorage.setItemAsync=function(key,value){return StatsigAsyncStorage.asyncStorage?StatsigAsyncStorage.asyncStorage.setItem(key,value):Promise.resolve()},StatsigAsyncStorage.removeItemAsync=function(key){return StatsigAsyncStorage.asyncStorage?StatsigAsyncStorage.asyncStorage.removeItem(key):Promise.resolve()},StatsigAsyncStorage}();exports.default=StatsigAsyncStorage},"./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var Constants_1=__webpack_require__("./node_modules/statsig-js/dist/utils/Constants.js"),StatsigLocalStorage=function(){function StatsigLocalStorage(){}return StatsigLocalStorage.getItem=function(key){var _a;try{if(this.isStorageAccessible())return window.localStorage.getItem(key)}catch(e){}return null!==(_a=this.fallbackSessionCache[key])&&void 0!==_a?_a:null},StatsigLocalStorage.setItem=function(key,value){try{if(this.isStorageAccessible())return void window.localStorage.setItem(key,value)}catch(e){}this.fallbackSessionCache[key]=value},StatsigLocalStorage.removeItem=function(key){try{if(this.isStorageAccessible())return void window.localStorage.removeItem(key)}catch(e){}delete this.fallbackSessionCache[key]},StatsigLocalStorage.cleanup=function(){try{if(this.isStorageAccessible(!0))for(var key in window.localStorage)"string"==typeof window.localStorage[key]&&null!=key&&(!this.disabled&&key in Constants_1.LOCAL_STORAGE_KEYS||(this.disabled||key.substring(0,Constants_1.STORAGE_PREFIX.length)===Constants_1.STORAGE_PREFIX)&&window.localStorage.removeItem(key))}catch(e){}},StatsigLocalStorage.isStorageAccessible=function(ignoreDisabledOption){void 0===ignoreDisabledOption&&(ignoreDisabledOption=!1),null==this.canAccessStorageAccessible&&(this.canAccessStorageAccessible="undefined"!=typeof Storage&&"undefined"!=typeof window&&null!=window&&null!=window.localStorage);var canAccess=this.canAccessStorageAccessible;return(ignoreDisabledOption||!this.disabled)&&canAccess},StatsigLocalStorage.disabled=!1,StatsigLocalStorage.fallbackSessionCache={},StatsigLocalStorage.canAccessStorageAccessible=null,StatsigLocalStorage}();exports.default=StatsigLocalStorage},"./node_modules/statsig-js/dist/utils/Timing.js":(__unused_webpack_module,exports)=>{"use strict";function now(opts){return void 0===opts&&(opts={withPrecision:!1}),"undefined"!=typeof performance&&performance?opts.withPrecision?performance.now():0|performance.now():Date.now()}Object.defineProperty(exports,"__esModule",{value:!0}),exports.difference=exports.now=void 0,exports.now=now,exports.difference=function difference(time){return now()-time}},"./node_modules/statsig-js/dist/utils/parseError.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function parseError(error){var unwrapped=null!=error?error:Error("[Statsig] Error was empty"),isError=unwrapped instanceof Error;return{name:isError?unwrapped.name:"No Name",message:isError?unwrapped.message:void 0,trace:isError?unwrapped.stack:function getDescription(obj){try{return JSON.stringify(obj)}catch(_a){return"[Statsig] Failed to get string for error."}}(unwrapped)}}},"./node_modules/uuid/dist/esm-browser/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var getRandomValues;__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{NIL:()=>nil,parse:()=>esm_browser_parse,stringify:()=>esm_browser_stringify,v1:()=>esm_browser_v1,v3:()=>esm_browser_v3,v4:()=>esm_browser_v4,v5:()=>esm_browser_v5,validate:()=>esm_browser_validate,version:()=>esm_browser_version});var rnds8=new Uint8Array(16);function rng(){if(!getRandomValues&&!(getRandomValues="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}const regex=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const esm_browser_validate=function validate(uuid){return"string"==typeof uuid&&regex.test(uuid)};for(var byteToHex=[],i=0;i<256;++i)byteToHex.push((i+256).toString(16).substr(1));const esm_browser_stringify=function stringify(arr){var offset=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,uuid=(byteToHex[arr[offset+0]]+byteToHex[arr[offset+1]]+byteToHex[arr[offset+2]]+byteToHex[arr[offset+3]]+"-"+byteToHex[arr[offset+4]]+byteToHex[arr[offset+5]]+"-"+byteToHex[arr[offset+6]]+byteToHex[arr[offset+7]]+"-"+byteToHex[arr[offset+8]]+byteToHex[arr[offset+9]]+"-"+byteToHex[arr[offset+10]]+byteToHex[arr[offset+11]]+byteToHex[arr[offset+12]]+byteToHex[arr[offset+13]]+byteToHex[arr[offset+14]]+byteToHex[arr[offset+15]]).toLowerCase();if(!esm_browser_validate(uuid))throw TypeError("Stringified UUID is invalid");return uuid};var _nodeId,_clockseq,_lastMSecs=0,_lastNSecs=0;const esm_browser_v1=function v1(options,buf,offset){var i=buf&&offset||0,b=buf||new Array(16),node=(options=options||{}).node||_nodeId,clockseq=void 0!==options.clockseq?options.clockseq:_clockseq;if(null==node||null==clockseq){var seedBytes=options.random||(options.rng||rng)();null==node&&(node=_nodeId=[1|seedBytes[0],seedBytes[1],seedBytes[2],seedBytes[3],seedBytes[4],seedBytes[5]]),null==clockseq&&(clockseq=_clockseq=16383&(seedBytes[6]<<8|seedBytes[7]))}var msecs=void 0!==options.msecs?options.msecs:Date.now(),nsecs=void 0!==options.nsecs?options.nsecs:_lastNSecs+1,dt=msecs-_lastMSecs+(nsecs-_lastNSecs)/1e4;if(dt<0&&void 0===options.clockseq&&(clockseq=clockseq+1&16383),(dt<0||msecs>_lastMSecs)&&void 0===options.nsecs&&(nsecs=0),nsecs>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");_lastMSecs=msecs,_lastNSecs=nsecs,_clockseq=clockseq;var tl=(1e4*(268435455&(msecs+=122192928e5))+nsecs)%4294967296;b[i++]=tl>>>24&255,b[i++]=tl>>>16&255,b[i++]=tl>>>8&255,b[i++]=255&tl;var tmh=msecs/4294967296*1e4&268435455;b[i++]=tmh>>>8&255,b[i++]=255&tmh,b[i++]=tmh>>>24&15|16,b[i++]=tmh>>>16&255,b[i++]=clockseq>>>8|128,b[i++]=255&clockseq;for(var n=0;n<6;++n)b[i+n]=node[n];return buf||esm_browser_stringify(b)};const esm_browser_parse=function parse(uuid){if(!esm_browser_validate(uuid))throw TypeError("Invalid UUID");var v,arr=new Uint8Array(16);return arr[0]=(v=parseInt(uuid.slice(0,8),16))>>>24,arr[1]=v>>>16&255,arr[2]=v>>>8&255,arr[3]=255&v,arr[4]=(v=parseInt(uuid.slice(9,13),16))>>>8,arr[5]=255&v,arr[6]=(v=parseInt(uuid.slice(14,18),16))>>>8,arr[7]=255&v,arr[8]=(v=parseInt(uuid.slice(19,23),16))>>>8,arr[9]=255&v,arr[10]=(v=parseInt(uuid.slice(24,36),16))/1099511627776&255,arr[11]=v/4294967296&255,arr[12]=v>>>24&255,arr[13]=v>>>16&255,arr[14]=v>>>8&255,arr[15]=255&v,arr};function v35(name,version,hashfunc){function generateUUID(value,namespace,buf,offset){if("string"==typeof value&&(value=function stringToBytes(str){str=unescape(encodeURIComponent(str));for(var bytes=[],i=0;i<str.length;++i)bytes.push(str.charCodeAt(i));return bytes}(value)),"string"==typeof namespace&&(namespace=esm_browser_parse(namespace)),16!==namespace.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var bytes=new Uint8Array(16+value.length);if(bytes.set(namespace),bytes.set(value,namespace.length),(bytes=hashfunc(bytes))[6]=15&bytes[6]|version,bytes[8]=63&bytes[8]|128,buf){offset=offset||0;for(var i=0;i<16;++i)buf[offset+i]=bytes[i];return buf}return esm_browser_stringify(bytes)}try{generateUUID.name=name}catch(err){}return generateUUID.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",generateUUID.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",generateUUID}function getOutputLength(inputLength8){return 14+(inputLength8+64>>>9<<4)+1}function safeAdd(x,y){var lsw=(65535&x)+(65535&y);return(x>>16)+(y>>16)+(lsw>>16)<<16|65535&lsw}function md5cmn(q,a,b,x,s,t){return safeAdd(function bitRotateLeft(num,cnt){return num<<cnt|num>>>32-cnt}(safeAdd(safeAdd(a,q),safeAdd(x,t)),s),b)}function md5ff(a,b,c,d,x,s,t){return md5cmn(b&c|~b&d,a,b,x,s,t)}function md5gg(a,b,c,d,x,s,t){return md5cmn(b&d|c&~d,a,b,x,s,t)}function md5hh(a,b,c,d,x,s,t){return md5cmn(b^c^d,a,b,x,s,t)}function md5ii(a,b,c,d,x,s,t){return md5cmn(c^(b|~d),a,b,x,s,t)}const esm_browser_md5=function md5(bytes){if("string"==typeof bytes){var msg=unescape(encodeURIComponent(bytes));bytes=new Uint8Array(msg.length);for(var i=0;i<msg.length;++i)bytes[i]=msg.charCodeAt(i)}return function md5ToHexEncodedArray(input){for(var output=[],length32=32*input.length,hexTab="0123456789abcdef",i=0;i<length32;i+=8){var x=input[i>>5]>>>i%32&255,hex=parseInt(hexTab.charAt(x>>>4&15)+hexTab.charAt(15&x),16);output.push(hex)}return output}(function wordsToMd5(x,len){x[len>>5]|=128<<len%32,x[getOutputLength(len)-1]=len;for(var a=1732584193,b=-271733879,c=-1732584194,d=271733878,i=0;i<x.length;i+=16){var olda=a,oldb=b,oldc=c,oldd=d;a=md5ff(a,b,c,d,x[i],7,-680876936),d=md5ff(d,a,b,c,x[i+1],12,-389564586),c=md5ff(c,d,a,b,x[i+2],17,606105819),b=md5ff(b,c,d,a,x[i+3],22,-1044525330),a=md5ff(a,b,c,d,x[i+4],7,-176418897),d=md5ff(d,a,b,c,x[i+5],12,1200080426),c=md5ff(c,d,a,b,x[i+6],17,-1473231341),b=md5ff(b,c,d,a,x[i+7],22,-45705983),a=md5ff(a,b,c,d,x[i+8],7,1770035416),d=md5ff(d,a,b,c,x[i+9],12,-1958414417),c=md5ff(c,d,a,b,x[i+10],17,-42063),b=md5ff(b,c,d,a,x[i+11],22,-1990404162),a=md5ff(a,b,c,d,x[i+12],7,1804603682),d=md5ff(d,a,b,c,x[i+13],12,-40341101),c=md5ff(c,d,a,b,x[i+14],17,-1502002290),a=md5gg(a,b=md5ff(b,c,d,a,x[i+15],22,1236535329),c,d,x[i+1],5,-165796510),d=md5gg(d,a,b,c,x[i+6],9,-1069501632),c=md5gg(c,d,a,b,x[i+11],14,643717713),b=md5gg(b,c,d,a,x[i],20,-373897302),a=md5gg(a,b,c,d,x[i+5],5,-701558691),d=md5gg(d,a,b,c,x[i+10],9,38016083),c=md5gg(c,d,a,b,x[i+15],14,-660478335),b=md5gg(b,c,d,a,x[i+4],20,-405537848),a=md5gg(a,b,c,d,x[i+9],5,568446438),d=md5gg(d,a,b,c,x[i+14],9,-1019803690),c=md5gg(c,d,a,b,x[i+3],14,-187363961),b=md5gg(b,c,d,a,x[i+8],20,1163531501),a=md5gg(a,b,c,d,x[i+13],5,-1444681467),d=md5gg(d,a,b,c,x[i+2],9,-51403784),c=md5gg(c,d,a,b,x[i+7],14,1735328473),a=md5hh(a,b=md5gg(b,c,d,a,x[i+12],20,-1926607734),c,d,x[i+5],4,-378558),d=md5hh(d,a,b,c,x[i+8],11,-2022574463),c=md5hh(c,d,a,b,x[i+11],16,1839030562),b=md5hh(b,c,d,a,x[i+14],23,-35309556),a=md5hh(a,b,c,d,x[i+1],4,-1530992060),d=md5hh(d,a,b,c,x[i+4],11,1272893353),c=md5hh(c,d,a,b,x[i+7],16,-155497632),b=md5hh(b,c,d,a,x[i+10],23,-1094730640),a=md5hh(a,b,c,d,x[i+13],4,681279174),d=md5hh(d,a,b,c,x[i],11,-358537222),c=md5hh(c,d,a,b,x[i+3],16,-722521979),b=md5hh(b,c,d,a,x[i+6],23,76029189),a=md5hh(a,b,c,d,x[i+9],4,-640364487),d=md5hh(d,a,b,c,x[i+12],11,-421815835),c=md5hh(c,d,a,b,x[i+15],16,530742520),a=md5ii(a,b=md5hh(b,c,d,a,x[i+2],23,-995338651),c,d,x[i],6,-198630844),d=md5ii(d,a,b,c,x[i+7],10,1126891415),c=md5ii(c,d,a,b,x[i+14],15,-1416354905),b=md5ii(b,c,d,a,x[i+5],21,-57434055),a=md5ii(a,b,c,d,x[i+12],6,1700485571),d=md5ii(d,a,b,c,x[i+3],10,-1894986606),c=md5ii(c,d,a,b,x[i+10],15,-1051523),b=md5ii(b,c,d,a,x[i+1],21,-2054922799),a=md5ii(a,b,c,d,x[i+8],6,1873313359),d=md5ii(d,a,b,c,x[i+15],10,-30611744),c=md5ii(c,d,a,b,x[i+6],15,-1560198380),b=md5ii(b,c,d,a,x[i+13],21,1309151649),a=md5ii(a,b,c,d,x[i+4],6,-145523070),d=md5ii(d,a,b,c,x[i+11],10,-1120210379),c=md5ii(c,d,a,b,x[i+2],15,718787259),b=md5ii(b,c,d,a,x[i+9],21,-343485551),a=safeAdd(a,olda),b=safeAdd(b,oldb),c=safeAdd(c,oldc),d=safeAdd(d,oldd)}return[a,b,c,d]}(function bytesToWords(input){if(0===input.length)return[];for(var length8=8*input.length,output=new Uint32Array(getOutputLength(length8)),i=0;i<length8;i+=8)output[i>>5]|=(255&input[i/8])<<i%32;return output}(bytes),8*bytes.length))};const esm_browser_v3=v35("v3",48,esm_browser_md5);const esm_browser_v4=function v4(options,buf,offset){var rnds=(options=options||{}).random||(options.rng||rng)();if(rnds[6]=15&rnds[6]|64,rnds[8]=63&rnds[8]|128,buf){offset=offset||0;for(var i=0;i<16;++i)buf[offset+i]=rnds[i];return buf}return esm_browser_stringify(rnds)};function f(s,x,y,z){switch(s){case 0:return x&y^~x&z;case 1:case 3:return x^y^z;case 2:return x&y^x&z^y&z}}function ROTL(x,n){return x<<n|x>>>32-n}const esm_browser_sha1=function sha1(bytes){var K=[1518500249,1859775393,2400959708,3395469782],H=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof bytes){var msg=unescape(encodeURIComponent(bytes));bytes=[];for(var i=0;i<msg.length;++i)bytes.push(msg.charCodeAt(i))}else Array.isArray(bytes)||(bytes=Array.prototype.slice.call(bytes));bytes.push(128);for(var l=bytes.length/4+2,N=Math.ceil(l/16),M=new Array(N),_i=0;_i<N;++_i){for(var arr=new Uint32Array(16),j=0;j<16;++j)arr[j]=bytes[64*_i+4*j]<<24|bytes[64*_i+4*j+1]<<16|bytes[64*_i+4*j+2]<<8|bytes[64*_i+4*j+3];M[_i]=arr}M[N-1][14]=8*(bytes.length-1)/Math.pow(2,32),M[N-1][14]=Math.floor(M[N-1][14]),M[N-1][15]=8*(bytes.length-1)&4294967295;for(var _i2=0;_i2<N;++_i2){for(var W=new Uint32Array(80),t=0;t<16;++t)W[t]=M[_i2][t];for(var _t=16;_t<80;++_t)W[_t]=ROTL(W[_t-3]^W[_t-8]^W[_t-14]^W[_t-16],1);for(var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],_t2=0;_t2<80;++_t2){var s=Math.floor(_t2/20),T=ROTL(a,5)+f(s,b,c,d)+e+K[s]+W[_t2]>>>0;e=d,d=c,c=ROTL(b,30)>>>0,b=a,a=T}H[0]=H[0]+a>>>0,H[1]=H[1]+b>>>0,H[2]=H[2]+c>>>0,H[3]=H[3]+d>>>0,H[4]=H[4]+e>>>0}return[H[0]>>24&255,H[0]>>16&255,H[0]>>8&255,255&H[0],H[1]>>24&255,H[1]>>16&255,H[1]>>8&255,255&H[1],H[2]>>24&255,H[2]>>16&255,H[2]>>8&255,255&H[2],H[3]>>24&255,H[3]>>16&255,H[3]>>8&255,255&H[3],H[4]>>24&255,H[4]>>16&255,H[4]>>8&255,255&H[4]]};const esm_browser_v5=v35("v5",80,esm_browser_sha1),nil="00000000-0000-0000-0000-000000000000";const esm_browser_version=function version(uuid){if(!esm_browser_validate(uuid))throw TypeError("Invalid UUID");return parseInt(uuid.substr(14,1),16)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,