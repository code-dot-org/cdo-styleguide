/*! For license information please see 6139.3ed29168.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[6139],{"./node_modules/unified/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}var bail=__webpack_require__("./node_modules/bail/index.js"),buffer=__webpack_require__("./node_modules/is-buffer/index.js"),extend=__webpack_require__("./node_modules/extend/index.js"),plain=__webpack_require__("./node_modules/unified/node_modules/is-plain-obj/index.js"),trough=__webpack_require__("./node_modules/trough/index.js"),vfile=__webpack_require__("./node_modules/unified/node_modules/vfile/index.js");module.exports=function unified(){var frozen,attachers=[],transformers=trough(),namespace={},freezeIndex=-1;return processor.data=function data(key,value){if("string"==typeof key)return 2===arguments.length?(assertUnfrozen("data",frozen),namespace[key]=value,processor):own.call(namespace,key)&&namespace[key]||null;if(key)return assertUnfrozen("data",frozen),namespace=key,processor;return namespace},processor.freeze=freeze,processor.attachers=attachers,processor.use=function use(value){var settings;if(assertUnfrozen("use",frozen),null==value);else if("function"==typeof value)addPlugin.apply(null,arguments);else{if("object"!==_typeof(value))throw new Error("Expected usable value, not `"+value+"`");"length"in value?addList(value):addPreset(value)}settings&&(namespace.settings=extend(namespace.settings||{},settings));return processor;function addPreset(result){addList(result.plugins),result.settings&&(settings=extend(settings||{},result.settings))}function add(value){if("function"==typeof value)addPlugin(value);else{if("object"!==_typeof(value))throw new Error("Expected usable value, not `"+value+"`");"length"in value?addPlugin.apply(null,value):addPreset(value)}}function addList(plugins){var index=-1;if(null==plugins);else{if("object"!==_typeof(plugins)||!("length"in plugins))throw new Error("Expected a list of plugins, not `"+plugins+"`");for(;++index<plugins.length;)add(plugins[index])}}function addPlugin(plugin,value){var entry=find(plugin);entry?(plain(entry[1])&&plain(value)&&(value=extend(!0,entry[1],value)),entry[1]=value):attachers.push(slice.call(arguments))}},processor.parse=function parse(doc){var Parser,file=vfile(doc);if(freeze(),assertParser("parse",Parser=processor.Parser),newable(Parser,"parse"))return new Parser(String(file),file).parse();return Parser(String(file),file)},processor.stringify=function stringify(node,doc){var Compiler,file=vfile(doc);if(freeze(),assertCompiler("stringify",Compiler=processor.Compiler),assertNode(node),newable(Compiler,"compile"))return new Compiler(node,file).compile();return Compiler(node,file)},processor.run=run,processor.runSync=function runSync(node,file){var result,complete;return run(node,file,done),assertDone("runSync","run",complete),result;function done(error,tree){complete=!0,result=tree,bail(error)}},processor.process=process,processor.processSync=function processSync(doc){var file,complete;return freeze(),assertParser("processSync",processor.Parser),assertCompiler("processSync",processor.Compiler),process(file=vfile(doc),done),assertDone("processSync","process",complete),file;function done(error){complete=!0,bail(error)}},processor;function processor(){for(var destination=unified(),index=-1;++index<attachers.length;)destination.use.apply(null,attachers[index]);return destination.data(extend(!0,{},namespace)),destination}function freeze(){var values,transformer;if(frozen)return processor;for(;++freezeIndex<attachers.length;)!1!==(values=attachers[freezeIndex])[1]&&(!0===values[1]&&(values[1]=void 0),"function"==typeof(transformer=values[0].apply(processor,values.slice(1)))&&transformers.use(transformer));return frozen=!0,freezeIndex=1/0,processor}function find(plugin){for(var index=-1;++index<attachers.length;)if(attachers[index][0]===plugin)return attachers[index]}function run(node,file,cb){if(assertNode(node),freeze(),cb||"function"!=typeof file||(cb=file,file=null),!cb)return new Promise(executor);function executor(resolve,reject){transformers.run(node,vfile(file),(function done(error,tree,file){tree=tree||node,error?reject(error):resolve?resolve(tree):cb(null,tree,file)}))}executor(null,cb)}function process(doc,cb){if(freeze(),assertParser("process",processor.Parser),assertCompiler("process",processor.Compiler),!cb)return new Promise(executor);function executor(resolve,reject){var file=vfile(doc);pipeline.run(processor,{file},(function done(error){error?reject(error):resolve?resolve(file):cb(null,file)}))}executor(null,cb)}}().freeze();var slice=[].slice,own={}.hasOwnProperty,pipeline=trough().use((function pipelineParse(p,ctx){ctx.tree=p.parse(ctx.file)})).use((function pipelineRun(p,ctx,next){p.run(ctx.tree,ctx.file,(function done(error,tree,file){error?next(error):(ctx.tree=tree,ctx.file=file,next())}))})).use((function pipelineStringify(p,ctx){var result=p.stringify(ctx.tree,ctx.file);null==result||("string"==typeof result||buffer(result)?("value"in ctx.file&&(ctx.file.value=result),ctx.file.contents=result):ctx.file.result=result)}));function newable(value,name){return"function"==typeof value&&value.prototype&&(function keys(value){var key;for(key in value)return!0;return!1}(value.prototype)||name in value.prototype)}function assertParser(name,Parser){if("function"!=typeof Parser)throw new Error("Cannot `"+name+"` without `Parser`")}function assertCompiler(name,Compiler){if("function"!=typeof Compiler)throw new Error("Cannot `"+name+"` without `Compiler`")}function assertUnfrozen(name,frozen){if(frozen)throw new Error("Cannot invoke `"+name+"` on a frozen processor.\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.")}function assertNode(node){if(!node||"string"!=typeof node.type)throw new Error("Expected node, got `"+node+"`")}function assertDone(name,asyncName,complete){if(!complete)throw new Error("`"+name+"` finished async. Use `"+asyncName+"` instead")}},"./node_modules/unified/node_modules/is-plain-obj/index.js":module=>{"use strict";module.exports=function(value){if("[object Object]"!==Object.prototype.toString.call(value))return!1;var prototype=Object.getPrototypeOf(value);return null===prototype||prototype===Object.prototype}},"./node_modules/unified/node_modules/unist-util-stringify-position/index.js":module=>{"use strict";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}var own={}.hasOwnProperty;function point(point){return point&&"object"===_typeof(point)||(point={}),index(point.line)+":"+index(point.column)}function position(pos){return pos&&"object"===_typeof(pos)||(pos={}),point(pos.start)+"-"+point(pos.end)}function index(value){return value&&"number"==typeof value?value:1}module.exports=function stringify(value){if(!value||"object"!==_typeof(value))return"";if(own.call(value,"position")||own.call(value,"type"))return position(value.position);if(own.call(value,"start")||own.call(value,"end"))return position(value);if(own.call(value,"line")||own.call(value,"column"))return point(value);return""}},"./node_modules/unified/node_modules/vfile-message/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var stringify=__webpack_require__("./node_modules/unified/node_modules/unist-util-stringify-position/index.js");function VMessagePrototype(){}module.exports=VMessage,VMessagePrototype.prototype=Error.prototype,VMessage.prototype=new VMessagePrototype;var proto=VMessage.prototype;function VMessage(reason,position,origin){var parts,range,location;"string"==typeof position&&(origin=position,position=null),parts=function parseOrigin(origin){var index,result=[null,null];"string"==typeof origin&&(-1===(index=origin.indexOf(":"))?result[1]=origin:(result[0]=origin.slice(0,index),result[1]=origin.slice(index+1)));return result}(origin),range=stringify(position)||"1:1",location={start:{line:null,column:null},end:{line:null,column:null}},position&&position.position&&(position=position.position),position&&(position.start?(location=position,position=position.start):location.start=position),reason.stack&&(this.stack=reason.stack,reason=reason.message),this.message=reason,this.name=range,this.reason=reason,this.line=position?position.line:null,this.column=position?position.column:null,this.location=location,this.source=parts[0],this.ruleId=parts[1]}proto.file="",proto.name="",proto.reason="",proto.message="",proto.stack="",proto.fatal=null,proto.column=null,proto.line=null},"./node_modules/unified/node_modules/vfile/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/unified/node_modules/vfile/lib/index.js")},"./node_modules/unified/node_modules/vfile/lib/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var p=__webpack_require__("./node_modules/unified/node_modules/vfile/lib/minpath.browser.js"),proc=__webpack_require__("./node_modules/unified/node_modules/vfile/lib/minproc.browser.js"),buffer=__webpack_require__("./node_modules/is-buffer/index.js");module.exports=VFile;var own={}.hasOwnProperty,order=["history","path","basename","stem","extname","dirname"];function VFile(options){var prop,index;if(options){if("string"==typeof options||buffer(options))options={contents:options};else if("message"in options&&"messages"in options)return options}else options={};if(!(this instanceof VFile))return new VFile(options);for(this.data={},this.messages=[],this.history=[],this.cwd=proc.cwd(),index=-1;++index<order.length;)prop=order[index],own.call(options,prop)&&(this[prop]=options[prop]);for(prop in options)order.indexOf(prop)<0&&(this[prop]=options[prop])}function assertPart(part,name){if(part&&part.indexOf(p.sep)>-1)throw new Error("`"+name+"` cannot be a path: did not expect `"+p.sep+"`")}function assertNonEmpty(part,name){if(!part)throw new Error("`"+name+"` cannot be empty")}function assertPath(path,name){if(!path)throw new Error("Setting `"+name+"` requires `path` to be set too")}VFile.prototype.toString=function toString(encoding){return(this.contents||"").toString(encoding)},Object.defineProperty(VFile.prototype,"path",{get:function getPath(){return this.history[this.history.length-1]},set:function setPath(path){assertNonEmpty(path,"path"),this.path!==path&&this.history.push(path)}}),Object.defineProperty(VFile.prototype,"dirname",{get:function getDirname(){return"string"==typeof this.path?p.dirname(this.path):void 0},set:function setDirname(dirname){assertPath(this.path,"dirname"),this.path=p.join(dirname||"",this.basename)}}),Object.defineProperty(VFile.prototype,"basename",{get:function getBasename(){return"string"==typeof this.path?p.basename(this.path):void 0},set:function setBasename(basename){assertNonEmpty(basename,"basename"),assertPart(basename,"basename"),this.path=p.join(this.dirname||"",basename)}}),Object.defineProperty(VFile.prototype,"extname",{get:function getExtname(){return"string"==typeof this.path?p.extname(this.path):void 0},set:function setExtname(extname){if(assertPart(extname,"extname"),assertPath(this.path,"extname"),extname){if(46!==extname.charCodeAt(0))throw new Error("`extname` must start with `.`");if(extname.indexOf(".",1)>-1)throw new Error("`extname` cannot contain multiple dots")}this.path=p.join(this.dirname,this.stem+(extname||""))}}),Object.defineProperty(VFile.prototype,"stem",{get:function getStem(){return"string"==typeof this.path?p.basename(this.path,this.extname):void 0},set:function setStem(stem){assertNonEmpty(stem,"stem"),assertPart(stem,"stem"),this.path=p.join(this.dirname||"",stem+(this.extname||""))}})},"./node_modules/unified/node_modules/vfile/lib/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var VMessage=__webpack_require__("./node_modules/unified/node_modules/vfile-message/index.js"),VFile=__webpack_require__("./node_modules/unified/node_modules/vfile/lib/core.js");module.exports=VFile,VFile.prototype.message=function message(reason,position,origin){var message=new VMessage(reason,position,origin);this.path&&(message.name=this.path+":"+message.name,message.file=this.path);return message.fatal=!1,this.messages.push(message),message},VFile.prototype.info=function info(){var message=this.message.apply(this,arguments);return message.fatal=null,message},VFile.prototype.fail=function fail(){var message=this.message.apply(this,arguments);throw message.fatal=!0,message}},"./node_modules/unified/node_modules/vfile/lib/minpath.browser.js":(__unused_webpack_module,exports)=>{"use strict";function assertPath(path){if("string"!=typeof path)throw new TypeError("Path must be a string. Received "+JSON.stringify(path))}exports.basename=function basename(path,ext){var index,firstNonSlashEnd,seenNonSlash,extIndex,start=0,end=-1;if(void 0!==ext&&"string"!=typeof ext)throw new TypeError('"ext" argument must be a string');if(assertPath(path),index=path.length,void 0===ext||!ext.length||ext.length>path.length){for(;index--;)if(47===path.charCodeAt(index)){if(seenNonSlash){start=index+1;break}}else end<0&&(seenNonSlash=!0,end=index+1);return end<0?"":path.slice(start,end)}if(ext===path)return"";firstNonSlashEnd=-1,extIndex=ext.length-1;for(;index--;)if(47===path.charCodeAt(index)){if(seenNonSlash){start=index+1;break}}else firstNonSlashEnd<0&&(seenNonSlash=!0,firstNonSlashEnd=index+1),extIndex>-1&&(path.charCodeAt(index)===ext.charCodeAt(extIndex--)?extIndex<0&&(end=index):(extIndex=-1,end=firstNonSlashEnd));start===end?end=firstNonSlashEnd:end<0&&(end=path.length);return path.slice(start,end)},exports.dirname=function dirname(path){var end,unmatchedSlash,index;if(assertPath(path),!path.length)return".";end=-1,index=path.length;for(;--index;)if(47===path.charCodeAt(index)){if(unmatchedSlash){end=index;break}}else unmatchedSlash||(unmatchedSlash=!0);return end<0?47===path.charCodeAt(0)?"/":".":1===end&&47===path.charCodeAt(0)?"//":path.slice(0,end)},exports.extname=function extname(path){var unmatchedSlash,code,index,startDot=-1,startPart=0,end=-1,preDotState=0;assertPath(path),index=path.length;for(;index--;)if(47!==(code=path.charCodeAt(index)))end<0&&(unmatchedSlash=!0,end=index+1),46===code?startDot<0?startDot=index:1!==preDotState&&(preDotState=1):startDot>-1&&(preDotState=-1);else if(unmatchedSlash){startPart=index+1;break}if(startDot<0||end<0||0===preDotState||1===preDotState&&startDot===end-1&&startDot===startPart+1)return"";return path.slice(startDot,end)},exports.join=function join(){var joined,index=-1;for(;++index<arguments.length;)assertPath(arguments[index]),arguments[index]&&(joined=void 0===joined?arguments[index]:joined+"/"+arguments[index]);return void 0===joined?".":function normalize(path){var absolute,value;assertPath(path),absolute=47===path.charCodeAt(0),value=function normalizeString(path,allowAboveRoot){var code,lastSlashIndex,result="",lastSegmentLength=0,lastSlash=-1,dots=0,index=-1;for(;++index<=path.length;){if(index<path.length)code=path.charCodeAt(index);else{if(47===code)break;code=47}if(47===code){if(lastSlash===index-1||1===dots);else if(lastSlash!==index-1&&2===dots){if(result.length<2||2!==lastSegmentLength||46!==result.charCodeAt(result.length-1)||46!==result.charCodeAt(result.length-2))if(result.length>2){if((lastSlashIndex=result.lastIndexOf("/"))!==result.length-1){lastSlashIndex<0?(result="",lastSegmentLength=0):lastSegmentLength=(result=result.slice(0,lastSlashIndex)).length-1-result.lastIndexOf("/"),lastSlash=index,dots=0;continue}}else if(result.length){result="",lastSegmentLength=0,lastSlash=index,dots=0;continue}allowAboveRoot&&(result=result.length?result+"/..":"..",lastSegmentLength=2)}else result.length?result+="/"+path.slice(lastSlash+1,index):result=path.slice(lastSlash+1,index),lastSegmentLength=index-lastSlash-1;lastSlash=index,dots=0}else 46===code&&dots>-1?dots++:dots=-1}return result}(path,!absolute),value.length||absolute||(value=".");value.length&&47===path.charCodeAt(path.length-1)&&(value+="/");return absolute?"/"+value:value}(joined)},exports.sep="/"},"./node_modules/unified/node_modules/vfile/lib/minproc.browser.js":(__unused_webpack_module,exports)=>{"use strict";exports.cwd=function cwd(){return"/"}},"./node_modules/bail/index.js":module=>{"use strict";module.exports=function bail(err){if(err)throw err}},"./node_modules/collapse-white-space/index.js":module=>{"use strict";module.exports=function collapse(value){return String(value).replace(/\s+/g," ")}},"./node_modules/extend/index.js":module=>{"use strict";var hasOwn=Object.prototype.hasOwnProperty,toStr=Object.prototype.toString,isArray=function isArray(arr){return"function"==typeof Array.isArray?Array.isArray(arr):"[object Array]"===toStr.call(arr)},isPlainObject=function isPlainObject(obj){if(!obj||"[object Object]"!==toStr.call(obj))return!1;var key,hasOwnConstructor=hasOwn.call(obj,"constructor"),hasIsPrototypeOf=obj.constructor&&obj.constructor.prototype&&hasOwn.call(obj.constructor.prototype,"isPrototypeOf");if(obj.constructor&&!hasOwnConstructor&&!hasIsPrototypeOf)return!1;for(key in obj);return void 0===key||hasOwn.call(obj,key)};module.exports=function extend(){var options,name,src,copy,copyIsArray,clone,target=arguments[0],i=1,length=arguments.length,deep=!1;for("boolean"==typeof target&&(deep=target,target=arguments[1]||{},i=2),(null==target||"object"!=typeof target&&"function"!=typeof target)&&(target={});i<length;++i)if(null!=(options=arguments[i]))for(name in options)src=target[name],target!==(copy=options[name])&&(deep&&copy&&(isPlainObject(copy)||(copyIsArray=isArray(copy)))?(copyIsArray?(copyIsArray=!1,clone=src&&isArray(src)?src:[]):clone=src&&isPlainObject(src)?src:{},target[name]=extend(deep,clone,copy)):void 0!==copy&&(target[name]=copy));return target}},"./node_modules/is-alphabetical/index.js":module=>{"use strict";module.exports=function alphabetical(character){var code="string"==typeof character?character.charCodeAt(0):character;return code>=97&&code<=122||code>=65&&code<=90}},"./node_modules/is-alphanumerical/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var alphabetical=__webpack_require__("./node_modules/is-alphabetical/index.js"),decimal=__webpack_require__("./node_modules/is-decimal/index.js");module.exports=function alphanumerical(character){return alphabetical(character)||decimal(character)}},"./node_modules/is-buffer/index.js":module=>{module.exports=function isBuffer(obj){return null!=obj&&null!=obj.constructor&&"function"==typeof obj.constructor.isBuffer&&obj.constructor.isBuffer(obj)}},"./node_modules/is-decimal/index.js":module=>{"use strict";module.exports=function decimal(character){var code="string"==typeof character?character.charCodeAt(0):character;return code>=48&&code<=57}},"./node_modules/is-hexadecimal/index.js":module=>{"use strict";module.exports=function hexadecimal(character){var code="string"==typeof character?character.charCodeAt(0):character;return code>=97&&code<=102||code>=65&&code<=70||code>=48&&code<=57}},"./node_modules/is-whitespace-character/index.js":module=>{"use strict";module.exports=function whitespace(character){return re.test("number"==typeof character?fromCode(character):character.charAt(0))};var fromCode=String.fromCharCode,re=/\s/},"./node_modules/is-word-character/index.js":module=>{"use strict";module.exports=function wordCharacter(character){return re.test("number"==typeof character?fromCode(character):character.charAt(0))};var fromCode=String.fromCharCode,re=/\w/},"./node_modules/markdown-escapes/index.js":module=>{"use strict";module.exports=escapes;var defaults=["\\","`","*","{","}","[","]","(",")","#","+","-",".","!","_",">"],gfm=defaults.concat(["~","|"]),commonmark=gfm.concat(["\n",'"',"$","%","&","'",",","/",":",";","<","=","?","@","^"]);function escapes(options){var settings=options||{};return settings.commonmark?commonmark:settings.gfm?gfm:defaults}escapes.default=defaults,escapes.gfm=gfm,escapes.commonmark=commonmark},"./node_modules/remark-parse/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var unherit=__webpack_require__("./node_modules/unherit/index.js"),xtend=__webpack_require__("./node_modules/xtend/immutable.js"),Parser=__webpack_require__("./node_modules/remark-parse/lib/parser.js");function parse(options){var settings=this.data("settings"),Local=unherit(Parser);Local.prototype.options=xtend(Local.prototype.options,settings,options),this.Parser=Local}module.exports=parse,parse.Parser=Parser},"./node_modules/remark-parse/lib/block-elements.js":module=>{"use strict";module.exports=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","pre","section","source","title","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"]},"./node_modules/remark-parse/lib/decode.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var xtend=__webpack_require__("./node_modules/xtend/immutable.js"),entities=__webpack_require__("./node_modules/remark-parse/node_modules/parse-entities/index.js");module.exports=function factory(ctx){return decoder.raw=function decodeRaw(value,position,options){return entities(value,xtend(options,{position:normalize(position),warning:handleWarning}))},decoder;function normalize(position){for(var offsets=ctx.offset,line=position.line,result=[];++line&&line in offsets;)result.push((offsets[line]||0)+1);return{start:position,indent:result}}function decoder(value,position,handler){entities(value,{position:normalize(position),warning:handleWarning,text:handler,reference:handler,textContext:ctx,referenceContext:ctx})}function handleWarning(reason,position,code){3!==code&&ctx.file.message(reason,position)}}},"./node_modules/remark-parse/lib/defaults.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports={position:!0,gfm:!0,commonmark:!1,pedantic:!1,blocks:__webpack_require__("./node_modules/remark-parse/lib/block-elements.js")}},"./node_modules/remark-parse/lib/locate/break.js":module=>{"use strict";module.exports=function locate(value,fromIndex){var index=value.indexOf("\n",fromIndex);for(;index>fromIndex&&" "===value.charAt(index-1);)index--;return index}},"./node_modules/remark-parse/lib/locate/code-inline.js":module=>{"use strict";module.exports=function locate(value,fromIndex){return value.indexOf("`",fromIndex)}},"./node_modules/remark-parse/lib/locate/delete.js":module=>{"use strict";module.exports=function locate(value,fromIndex){return value.indexOf("~~",fromIndex)}},"./node_modules/remark-parse/lib/locate/email.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var decimal=__webpack_require__("./node_modules/is-decimal/index.js"),alphabetical=__webpack_require__("./node_modules/is-alphabetical/index.js"),plusSign=43,dash=45,dot=46,underscore=95;function isGfmAtext(code){return decimal(code)||alphabetical(code)||code===plusSign||code===dash||code===dot||code===underscore}module.exports=function locate(value,fromIndex){var at,position;if(!this.options.gfm)return-1;if(-1===(at=value.indexOf("@",fromIndex)))return-1;if((position=at)===fromIndex||!isGfmAtext(value.charCodeAt(position-1)))return locate.call(this,value,at+1);for(;position>fromIndex&&isGfmAtext(value.charCodeAt(position-1));)position--;return position}},"./node_modules/remark-parse/lib/locate/emphasis.js":module=>{"use strict";module.exports=function locate(value,fromIndex){var asterisk=value.indexOf("*",fromIndex),underscore=value.indexOf("_",fromIndex);if(-1===underscore)return asterisk;if(-1===asterisk)return underscore;return underscore<asterisk?underscore:asterisk}},"./node_modules/remark-parse/lib/locate/escape.js":module=>{"use strict";module.exports=function locate(value,fromIndex){return value.indexOf("\\",fromIndex)}},"./node_modules/remark-parse/lib/locate/link.js":module=>{"use strict";module.exports=function locate(value,fromIndex){var link=value.indexOf("[",fromIndex),image=value.indexOf("![",fromIndex);if(-1===image)return link;return link<image?link:image}},"./node_modules/remark-parse/lib/locate/strong.js":module=>{"use strict";module.exports=function locate(value,fromIndex){var asterisk=value.indexOf("**",fromIndex),underscore=value.indexOf("__",fromIndex);if(-1===underscore)return asterisk;if(-1===asterisk)return underscore;return underscore<asterisk?underscore:asterisk}},"./node_modules/remark-parse/lib/locate/tag.js":module=>{"use strict";module.exports=function locate(value,fromIndex){return value.indexOf("<",fromIndex)}},"./node_modules/remark-parse/lib/locate/url.js":module=>{"use strict";module.exports=function locate(value,fromIndex){var index,length,position,min=-1;if(!this.options.gfm)return min;length=values.length,index=-1;for(;++index<length;)-1!==(position=value.indexOf(values[index],fromIndex))&&(-1===min||position<min)&&(min=position);return min};var values=["www.","http://","https://"]},"./node_modules/remark-parse/lib/parse.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var xtend=__webpack_require__("./node_modules/xtend/immutable.js"),removePosition=__webpack_require__("./node_modules/remark-parse/node_modules/unist-util-remove-position/index.js");module.exports=function parse(){var node,value=String(this.file),start={line:1,column:1,offset:0},content=xtend(start);65279===(value=value.replace(lineBreaksExpression,lineFeed)).charCodeAt(0)&&(value=value.slice(1),content.column++,content.offset++);node={type:"root",children:this.tokenizeBlock(value,content),position:{start,end:this.eof||xtend(start)}},this.options.position||removePosition(node,!0);return node};var lineFeed="\n",lineBreaksExpression=/\r\n|\r/g},"./node_modules/remark-parse/lib/parser.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var xtend=__webpack_require__("./node_modules/xtend/immutable.js"),toggle=__webpack_require__("./node_modules/state-toggle/index.js"),vfileLocation=__webpack_require__("./node_modules/remark-parse/node_modules/vfile-location/index.js"),unescape=__webpack_require__("./node_modules/remark-parse/lib/unescape.js"),decode=__webpack_require__("./node_modules/remark-parse/lib/decode.js"),tokenizer=__webpack_require__("./node_modules/remark-parse/lib/tokenizer.js");function Parser(doc,file){this.file=file,this.offset={},this.options=xtend(this.options),this.setOptions({}),this.inList=!1,this.inBlock=!1,this.inLink=!1,this.atStart=!0,this.toOffset=vfileLocation(file).toOffset,this.unescape=unescape(this,"escape"),this.decode=decode(this)}module.exports=Parser;var proto=Parser.prototype;function keys(value){var key,result=[];for(key in value)result.push(key);return result}proto.setOptions=__webpack_require__("./node_modules/remark-parse/lib/set-options.js"),proto.parse=__webpack_require__("./node_modules/remark-parse/lib/parse.js"),proto.options=__webpack_require__("./node_modules/remark-parse/lib/defaults.js"),proto.exitStart=toggle("atStart",!0),proto.enterList=toggle("inList",!1),proto.enterLink=toggle("inLink",!1),proto.enterBlock=toggle("inBlock",!1),proto.interruptParagraph=[["thematicBreak"],["list"],["atxHeading"],["fencedCode"],["blockquote"],["html"],["setextHeading",{commonmark:!1}],["definition",{commonmark:!1}]],proto.interruptList=[["atxHeading",{pedantic:!1}],["fencedCode",{pedantic:!1}],["thematicBreak",{pedantic:!1}],["definition",{commonmark:!1}]],proto.interruptBlockquote=[["indentedCode",{commonmark:!0}],["fencedCode",{commonmark:!0}],["atxHeading",{commonmark:!0}],["setextHeading",{commonmark:!0}],["thematicBreak",{commonmark:!0}],["html",{commonmark:!0}],["list",{commonmark:!0}],["definition",{commonmark:!1}]],proto.blockTokenizers={blankLine:__webpack_require__("./node_modules/remark-parse/lib/tokenize/blank-line.js"),indentedCode:__webpack_require__("./node_modules/remark-parse/lib/tokenize/code-indented.js"),fencedCode:__webpack_require__("./node_modules/remark-parse/lib/tokenize/code-fenced.js"),blockquote:__webpack_require__("./node_modules/remark-parse/lib/tokenize/blockquote.js"),atxHeading:__webpack_require__("./node_modules/remark-parse/lib/tokenize/heading-atx.js"),thematicBreak:__webpack_require__("./node_modules/remark-parse/lib/tokenize/thematic-break.js"),list:__webpack_require__("./node_modules/remark-parse/lib/tokenize/list.js"),setextHeading:__webpack_require__("./node_modules/remark-parse/lib/tokenize/heading-setext.js"),html:__webpack_require__("./node_modules/remark-parse/lib/tokenize/html-block.js"),definition:__webpack_require__("./node_modules/remark-parse/lib/tokenize/definition.js"),table:__webpack_require__("./node_modules/remark-parse/lib/tokenize/table.js"),paragraph:__webpack_require__("./node_modules/remark-parse/lib/tokenize/paragraph.js")},proto.inlineTokenizers={escape:__webpack_require__("./node_modules/remark-parse/lib/tokenize/escape.js"),autoLink:__webpack_require__("./node_modules/remark-parse/lib/tokenize/auto-link.js"),url:__webpack_require__("./node_modules/remark-parse/lib/tokenize/url.js"),email:__webpack_require__("./node_modules/remark-parse/lib/tokenize/email.js"),html:__webpack_require__("./node_modules/remark-parse/lib/tokenize/html-inline.js"),link:__webpack_require__("./node_modules/remark-parse/lib/tokenize/link.js"),reference:__webpack_require__("./node_modules/remark-parse/lib/tokenize/reference.js"),strong:__webpack_require__("./node_modules/remark-parse/lib/tokenize/strong.js"),emphasis:__webpack_require__("./node_modules/remark-parse/lib/tokenize/emphasis.js"),deletion:__webpack_require__("./node_modules/remark-parse/lib/tokenize/delete.js"),code:__webpack_require__("./node_modules/remark-parse/lib/tokenize/code-inline.js"),break:__webpack_require__("./node_modules/remark-parse/lib/tokenize/break.js"),text:__webpack_require__("./node_modules/remark-parse/lib/tokenize/text.js")},proto.blockMethods=keys(proto.blockTokenizers),proto.inlineMethods=keys(proto.inlineTokenizers),proto.tokenizeBlock=tokenizer("block"),proto.tokenizeInline=tokenizer("inline"),proto.tokenizeFactory=tokenizer},"./node_modules/remark-parse/lib/set-options.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var xtend=__webpack_require__("./node_modules/xtend/immutable.js"),escapes=__webpack_require__("./node_modules/markdown-escapes/index.js"),defaults=__webpack_require__("./node_modules/remark-parse/lib/defaults.js");module.exports=function setOptions(options){var key,value,current=this.options;if(null==options)options={};else{if("object"!=typeof options)throw new Error("Invalid value `"+options+"` for setting `options`");options=xtend(options)}for(key in defaults){if(null==(value=options[key])&&(value=current[key]),"blocks"!==key&&"boolean"!=typeof value||"blocks"===key&&"object"!=typeof value)throw new Error("Invalid value `"+value+"` for setting `options."+key+"`");options[key]=value}return this.options=options,this.escape=escapes(options),this}},"./node_modules/remark-parse/lib/tokenize/auto-link.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var whitespace=__webpack_require__("./node_modules/is-whitespace-character/index.js"),decode=__webpack_require__("./node_modules/remark-parse/node_modules/parse-entities/index.js"),locate=__webpack_require__("./node_modules/remark-parse/lib/locate/tag.js");module.exports=autoLink,autoLink.locator=locate,autoLink.notInLink=!0;var lessThan="<",greaterThan=">",atSign="@",slash="/",mailto="mailto:",mailtoLength=mailto.length;function autoLink(eat,value,silent){var character,now,content,tokenizers,exit,subvalue="",length=value.length,index=0,queue="",hasAtCharacter=!1,link="";if(value.charAt(0)===lessThan){for(index++,subvalue=lessThan;index<length&&(character=value.charAt(index),!(whitespace(character)||character===greaterThan||character===atSign||":"===character&&value.charAt(index+1)===slash));)queue+=character,index++;if(queue){if(link+=queue,queue="",link+=character=value.charAt(index),index++,character===atSign)hasAtCharacter=!0;else{if(":"!==character||value.charAt(index+1)!==slash)return;link+=slash,index++}for(;index<length&&(character=value.charAt(index),!whitespace(character)&&character!==greaterThan);)queue+=character,index++;if(character=value.charAt(index),queue&&character===greaterThan)return!!silent||(content=link+=queue,subvalue+=link+character,(now=eat.now()).column++,now.offset++,hasAtCharacter&&(link.slice(0,mailtoLength).toLowerCase()===mailto?(content=content.slice(mailtoLength),now.column+=mailtoLength,now.offset+=mailtoLength):link=mailto+link),tokenizers=this.inlineTokenizers,this.inlineTokenizers={text:tokenizers.text},exit=this.enterLink(),content=this.tokenizeInline(content,now),this.inlineTokenizers=tokenizers,exit(),eat(subvalue)({type:"link",title:null,url:decode(link,{nonTerminated:!1}),children:content}))}}}},"./node_modules/remark-parse/lib/tokenize/blank-line.js":module=>{"use strict";var reBlankLine=/^[ \t]*(\n|$)/;module.exports=function blankLine(eat,value,silent){var match,subvalue="",index=0,length=value.length;for(;index<length&&null!=(match=reBlankLine.exec(value.slice(index)));)index+=match[0].length,subvalue+=match[0];if(""===subvalue)return;if(silent)return!0;eat(subvalue)}},"./node_modules/remark-parse/lib/tokenize/blockquote.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var trim=__webpack_require__("./node_modules/trim/index.js"),interrupt=__webpack_require__("./node_modules/remark-parse/lib/util/interrupt.js");module.exports=function blockquote(eat,value,silent){var add,character,rest,nextIndex,content,line,startIndex,prefixed,exit,offsets=this.offset,tokenizers=this.blockTokenizers,interruptors=this.interruptBlockquote,now=eat.now(),currentLine=now.line,length=value.length,values=[],contents=[],indents=[],index=0;for(;index<length&&((character=value.charAt(index))===space||character===tab);)index++;if(value.charAt(index)!==greaterThan)return;if(silent)return!0;index=0;for(;index<length;){for(startIndex=index,prefixed=!1,-1===(nextIndex=value.indexOf(lineFeed,index))&&(nextIndex=length);index<length&&((character=value.charAt(index))===space||character===tab);)index++;if(value.charAt(index)===greaterThan?(index++,prefixed=!0,value.charAt(index)===space&&index++):index=startIndex,content=value.slice(index,nextIndex),!prefixed&&!trim(content)){index=startIndex;break}if(!prefixed&&(rest=value.slice(index),interrupt(interruptors,tokenizers,this,[eat,rest,!0])))break;line=startIndex===index?content:value.slice(startIndex,nextIndex),indents.push(index-startIndex),values.push(line),contents.push(content),index=nextIndex+1}index=-1,length=indents.length,add=eat(values.join(lineFeed));for(;++index<length;)offsets[currentLine]=(offsets[currentLine]||0)+indents[index],currentLine++;return exit=this.enterBlock(),contents=this.tokenizeBlock(contents.join(lineFeed),now),exit(),add({type:"blockquote",children:contents})};var lineFeed="\n",tab="\t",space=" ",greaterThan=">"},"./node_modules/remark-parse/lib/tokenize/break.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var locate=__webpack_require__("./node_modules/remark-parse/lib/locate/break.js");module.exports=hardBreak,hardBreak.locator=locate;var space=" ",lineFeed="\n",minBreakLength=2;function hardBreak(eat,value,silent){for(var character,length=value.length,index=-1,queue="";++index<length;){if((character=value.charAt(index))===lineFeed){if(index<minBreakLength)return;return!!silent||eat(queue+=character)({type:"break"})}if(character!==space)return;queue+=character}}},"./node_modules/remark-parse/lib/tokenize/code-fenced.js":module=>{"use strict";module.exports=function fencedCode(eat,value,silent){var fenceCount,marker,character,flag,lang,meta,queue,content,exdentedContent,closing,exdentedClosing,indent,now,gfm=this.options.gfm,length=value.length+1,index=0,subvalue="";if(!gfm)return;for(;index<length&&((character=value.charAt(index))===space||character===tab);)subvalue+=character,index++;if(indent=index,(character=value.charAt(index))!==tilde&&character!==graveAccent)return;index++,marker=character,fenceCount=1,subvalue+=character;for(;index<length&&(character=value.charAt(index))===marker;)subvalue+=character,fenceCount++,index++;if(fenceCount<minFenceCount)return;for(;index<length&&((character=value.charAt(index))===space||character===tab);)subvalue+=character,index++;flag="",queue="";for(;index<length&&(character=value.charAt(index))!==lineFeed&&(marker!==graveAccent||character!==marker);)character===space||character===tab?queue+=character:(flag+=queue+character,queue=""),index++;if((character=value.charAt(index))&&character!==lineFeed)return;if(silent)return!0;(now=eat.now()).column+=subvalue.length,now.offset+=subvalue.length,subvalue+=flag,flag=this.decode.raw(this.unescape(flag),now),queue&&(subvalue+=queue);queue="",closing="",exdentedClosing="",content="",exdentedContent="";var skip=!0;for(;index<length;)if(content+=closing,exdentedContent+=exdentedClosing,closing="",exdentedClosing="",(character=value.charAt(index))===lineFeed){for(skip?(subvalue+=character,skip=!1):(closing+=character,exdentedClosing+=character),queue="",index++;index<length&&(character=value.charAt(index))===space;)queue+=character,index++;if(closing+=queue,exdentedClosing+=queue.slice(indent),!(queue.length>=tabSize)){for(queue="";index<length&&(character=value.charAt(index))===marker;)queue+=character,index++;if(closing+=queue,exdentedClosing+=queue,!(queue.length<fenceCount)){for(queue="";index<length&&((character=value.charAt(index))===space||character===tab);)closing+=character,exdentedClosing+=character,index++;if(!character||character===lineFeed)break}}}else content+=character,exdentedClosing+=character,index++;subvalue+=content+closing,index=-1,length=flag.length;for(;++index<length;)if((character=flag.charAt(index))===space||character===tab)lang||(lang=flag.slice(0,index));else if(lang){meta=flag.slice(index);break}return eat(subvalue)({type:"code",lang:lang||flag||null,meta:meta||null,value:exdentedContent})};var lineFeed="\n",tab="\t",space=" ",tilde="~",graveAccent="`",minFenceCount=3,tabSize=4},"./node_modules/remark-parse/lib/tokenize/code-indented.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var repeat=__webpack_require__("./node_modules/repeat-string/index.js"),trim=__webpack_require__("./node_modules/trim-trailing-lines/index.js");module.exports=function indentedCode(eat,value,silent){var character,blankQueue,indent,index=-1,length=value.length,subvalue="",content="",subvalueQueue="",contentQueue="";for(;++index<length;)if(character=value.charAt(index),indent)if(indent=!1,subvalue+=subvalueQueue,content+=contentQueue,subvalueQueue="",contentQueue="",character===lineFeed)subvalueQueue=character,contentQueue=character;else for(subvalue+=character,content+=character;++index<length;){if(!(character=value.charAt(index))||character===lineFeed){contentQueue=character,subvalueQueue=character;break}subvalue+=character,content+=character}else if(character===space&&value.charAt(index+1)===character&&value.charAt(index+2)===character&&value.charAt(index+3)===character)subvalueQueue+=codeIndent,index+=3,indent=!0;else if(character===tab)subvalueQueue+=character,indent=!0;else{for(blankQueue="";character===tab||character===space;)blankQueue+=character,character=value.charAt(++index);if(character!==lineFeed)break;subvalueQueue+=blankQueue+character,contentQueue+=character}if(content)return!!silent||eat(subvalue)({type:"code",lang:null,meta:null,value:trim(content)})};var lineFeed="\n",tab="\t",space=" ",codeIndent=repeat(space,4)},"./node_modules/remark-parse/lib/tokenize/code-inline.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var locate=__webpack_require__("./node_modules/remark-parse/lib/locate/code-inline.js");module.exports=inlineCode,inlineCode.locator=locate;var lineFeed=10,space=32,graveAccent=96;function inlineCode(eat,value,silent){for(var openingFenceEnd,closingFenceStart,closingFenceEnd,code,next,found,length=value.length,index=0;index<length&&value.charCodeAt(index)===graveAccent;)index++;if(0!==index&&index!==length){for(openingFenceEnd=index,next=value.charCodeAt(index);index<length;){if(code=next,next=value.charCodeAt(index+1),code===graveAccent){if(void 0===closingFenceStart&&(closingFenceStart=index),closingFenceEnd=index+1,next!==graveAccent&&closingFenceEnd-closingFenceStart===openingFenceEnd){found=!0;break}}else void 0!==closingFenceStart&&(closingFenceStart=void 0,closingFenceEnd=void 0);index++}if(found){if(silent)return!0;if(index=openingFenceEnd,length=closingFenceStart,code=value.charCodeAt(index),next=value.charCodeAt(length-1),found=!1,length-index>2&&(code===space||code===lineFeed)&&(next===space||next===lineFeed)){for(index++,length--;index<length;){if((code=value.charCodeAt(index))!==space&&code!==lineFeed){found=!0;break}index++}!0===found&&(openingFenceEnd++,closingFenceStart--)}return eat(value.slice(0,closingFenceEnd))({type:"inlineCode",value:value.slice(openingFenceEnd,closingFenceStart)})}}}},"./node_modules/remark-parse/lib/tokenize/definition.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var whitespace=__webpack_require__("./node_modules/is-whitespace-character/index.js"),normalize=__webpack_require__("./node_modules/remark-parse/lib/util/normalize.js");module.exports=function definition(eat,value,silent){var beforeURL,beforeTitle,queue,character,test,identifier,url,title,commonmark=this.options.commonmark,index=0,length=value.length,subvalue="";for(;index<length&&((character=value.charAt(index))===space||character===tab);)subvalue+=character,index++;if((character=value.charAt(index))!==leftSquareBracket)return;index++,subvalue+=character,queue="";for(;index<length&&(character=value.charAt(index))!==rightSquareBracket;)character===backslash&&(queue+=character,index++,character=value.charAt(index)),queue+=character,index++;if(!queue||value.charAt(index)!==rightSquareBracket||value.charAt(index+1)!==colon)return;identifier=queue,index=(subvalue+=queue+rightSquareBracket+colon).length,queue="";for(;index<length&&((character=value.charAt(index))===tab||character===space||character===lineFeed);)subvalue+=character,index++;if(character=value.charAt(index),queue="",beforeURL=subvalue,character===lessThan){for(index++;index<length&&isEnclosedURLCharacter(character=value.charAt(index));)queue+=character,index++;if((character=value.charAt(index))===isEnclosedURLCharacter.delimiter)subvalue+=lessThan+queue+character,index++;else{if(commonmark)return;index-=queue.length+1,queue=""}}if(!queue){for(;index<length&&isUnclosedURLCharacter(character=value.charAt(index));)queue+=character,index++;subvalue+=queue}if(!queue)return;url=queue,queue="";for(;index<length&&((character=value.charAt(index))===tab||character===space||character===lineFeed);)queue+=character,index++;character=value.charAt(index),test=null,character===quotationMark?test=quotationMark:character===apostrophe?test=apostrophe:character===leftParenthesis&&(test=rightParenthesis);if(test){if(!queue)return;for(index=(subvalue+=queue+character).length,queue="";index<length&&(character=value.charAt(index))!==test;){if(character===lineFeed){if(index++,(character=value.charAt(index))===lineFeed||character===test)return;queue+=lineFeed}queue+=character,index++}if((character=value.charAt(index))!==test)return;beforeTitle=subvalue,subvalue+=queue+character,index++,title=queue,queue=""}else queue="",index=subvalue.length;for(;index<length&&((character=value.charAt(index))===tab||character===space);)subvalue+=character,index++;if(!(character=value.charAt(index))||character===lineFeed)return!!silent||(beforeURL=eat(beforeURL).test().end,url=this.decode.raw(this.unescape(url),beforeURL,{nonTerminated:!1}),title&&(beforeTitle=eat(beforeTitle).test().end,title=this.decode.raw(this.unescape(title),beforeTitle)),eat(subvalue)({type:"definition",identifier:normalize(identifier),label:identifier,title:title||null,url}))};var quotationMark='"',apostrophe="'",backslash="\\",lineFeed="\n",tab="\t",space=" ",leftSquareBracket="[",rightSquareBracket="]",leftParenthesis="(",rightParenthesis=")",colon=":",lessThan="<",greaterThan=">";function isEnclosedURLCharacter(character){return character!==greaterThan&&character!==leftSquareBracket&&character!==rightSquareBracket}function isUnclosedURLCharacter(character){return character!==leftSquareBracket&&character!==rightSquareBracket&&!whitespace(character)}isEnclosedURLCharacter.delimiter=greaterThan},"./node_modules/remark-parse/lib/tokenize/delete.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var whitespace=__webpack_require__("./node_modules/is-whitespace-character/index.js"),locate=__webpack_require__("./node_modules/remark-parse/lib/locate/delete.js");module.exports=strikethrough,strikethrough.locator=locate;var tilde="~",fence="~~";function strikethrough(eat,value,silent){var index,length,now,character="",previous="",preceding="",subvalue="";if(this.options.gfm&&value.charAt(0)===tilde&&value.charAt(1)===tilde&&!whitespace(value.charAt(2)))for(index=1,length=value.length,(now=eat.now()).column+=2,now.offset+=2;++index<length;){if(!((character=value.charAt(index))!==tilde||previous!==tilde||preceding&&whitespace(preceding)))return!!silent||eat(fence+subvalue+fence)({type:"delete",children:this.tokenizeInline(subvalue,now)});subvalue+=previous,preceding=previous,previous=character}}},"./node_modules/remark-parse/lib/tokenize/email.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var decode=__webpack_require__("./node_modules/remark-parse/node_modules/parse-entities/index.js"),decimal=__webpack_require__("./node_modules/is-decimal/index.js"),alphabetical=__webpack_require__("./node_modules/is-alphabetical/index.js"),locate=__webpack_require__("./node_modules/remark-parse/lib/locate/email.js");module.exports=email,email.locator=locate,email.notInLink=!0;var plusSign=43,dash=45,dot=46,atSign=64,underscore=95;function email(eat,value,silent){var code,content,children,exit,gfm=this.options.gfm,tokenizers=this.inlineTokenizers,index=0,length=value.length,firstDot=-1;if(gfm){for(code=value.charCodeAt(index);decimal(code)||alphabetical(code)||code===plusSign||code===dash||code===dot||code===underscore;)code=value.charCodeAt(++index);if(0!==index&&code===atSign){for(index++;index<length&&(code=value.charCodeAt(index),decimal(code)||alphabetical(code)||code===dash||code===dot||code===underscore);)index++,-1===firstDot&&code===dot&&(firstDot=index);if(-1!==firstDot&&firstDot!==index&&code!==dash&&code!==underscore)return code===dot&&index--,content=value.slice(0,index),!!silent||(exit=this.enterLink(),this.inlineTokenizers={text:tokenizers.text},children=this.tokenizeInline(content,eat.now()),this.inlineTokenizers=tokenizers,exit(),eat(content)({type:"link",title:null,url:"mailto:"+decode(content,{nonTerminated:!1}),children}))}}}},"./node_modules/remark-parse/lib/tokenize/emphasis.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var trim=__webpack_require__("./node_modules/trim/index.js"),word=__webpack_require__("./node_modules/is-word-character/index.js"),whitespace=__webpack_require__("./node_modules/is-whitespace-character/index.js"),locate=__webpack_require__("./node_modules/remark-parse/lib/locate/emphasis.js");module.exports=emphasis,emphasis.locator=locate;var asterisk="*",underscore="_",backslash="\\";function emphasis(eat,value,silent){var now,pedantic,marker,queue,subvalue,length,previous,index=0,character=value.charAt(index);if(!(character!==asterisk&&character!==underscore||(pedantic=this.options.pedantic,subvalue=character,marker=character,length=value.length,index++,queue="",character="",pedantic&&whitespace(value.charAt(index)))))for(;index<length;){if(previous=character,!((character=value.charAt(index))!==marker||pedantic&&whitespace(previous))){if((character=value.charAt(++index))!==marker){if(!trim(queue)||previous===marker)return;if(!pedantic&&marker===underscore&&word(character)){queue+=marker;continue}return!!silent||((now=eat.now()).column++,now.offset++,eat(subvalue+queue+marker)({type:"emphasis",children:this.tokenizeInline(queue,now)}))}queue+=marker}pedantic||character!==backslash||(queue+=character,character=value.charAt(++index)),queue+=character,index++}}},"./node_modules/remark-parse/lib/tokenize/escape.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var locate=__webpack_require__("./node_modules/remark-parse/lib/locate/escape.js");module.exports=escape,escape.locator=locate;var lineFeed="\n",backslash="\\";function escape(eat,value,silent){var character,node;if(value.charAt(0)===backslash&&(character=value.charAt(1),-1!==this.escape.indexOf(character)))return!!silent||(node=character===lineFeed?{type:"break"}:{type:"text",value:character},eat(backslash+character)(node))}},"./node_modules/remark-parse/lib/tokenize/heading-atx.js":module=>{"use strict";module.exports=function atxHeading(eat,value,silent){var character,queue,depth,pedantic=this.options.pedantic,length=value.length+1,index=-1,now=eat.now(),subvalue="",content="";for(;++index<length;){if((character=value.charAt(index))!==space&&character!==tab){index--;break}subvalue+=character}depth=0;for(;++index<=length;){if((character=value.charAt(index))!==numberSign){index--;break}subvalue+=character,depth++}if(depth>maxFenceCount)return;if(!depth||!pedantic&&value.charAt(index+1)===numberSign)return;length=value.length+1,queue="";for(;++index<length;){if((character=value.charAt(index))!==space&&character!==tab){index--;break}queue+=character}if(!pedantic&&0===queue.length&&character&&character!==lineFeed)return;if(silent)return!0;subvalue+=queue,queue="",content="";for(;++index<length&&(character=value.charAt(index))&&character!==lineFeed;)if(character===space||character===tab||character===numberSign){for(;character===space||character===tab;)queue+=character,character=value.charAt(++index);if(pedantic||!content||queue||character!==numberSign){for(;character===numberSign;)queue+=character,character=value.charAt(++index);for(;character===space||character===tab;)queue+=character,character=value.charAt(++index);index--}else content+=character}else content+=queue+character,queue="";return now.column+=subvalue.length,now.offset+=subvalue.length,eat(subvalue+=content+queue)({type:"heading",depth,children:this.tokenizeInline(content,now)})};var lineFeed="\n",tab="\t",space=" ",numberSign="#",maxFenceCount=6},"./node_modules/remark-parse/lib/tokenize/heading-setext.js":module=>{"use strict";module.exports=function setextHeading(eat,value,silent){var content,queue,character,marker,depth,now=eat.now(),length=value.length,index=-1,subvalue="";for(;++index<length;){if((character=value.charAt(index))!==space||index>=maxIndent){index--;break}subvalue+=character}content="",queue="";for(;++index<length;){if((character=value.charAt(index))===lineFeed){index--;break}character===space||character===tab?queue+=character:(content+=queue+character,queue="")}if(now.column+=subvalue.length,now.offset+=subvalue.length,subvalue+=content+queue,character=value.charAt(++index),marker=value.charAt(++index),character!==lineFeed||marker!==equalsTo&&marker!==dash)return;subvalue+=character,queue=marker,depth=marker===equalsTo?equalsToDepth:dashDepth;for(;++index<length;){if((character=value.charAt(index))!==marker){if(character!==lineFeed)return;index--;break}queue+=character}if(silent)return!0;return eat(subvalue+queue)({type:"heading",depth,children:this.tokenizeInline(content,now)})};var lineFeed="\n",tab="\t",space=" ",equalsTo="=",dash="-",maxIndent=3,equalsToDepth=1,dashDepth=2},"./node_modules/remark-parse/lib/tokenize/html-block.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var openCloseTag=__webpack_require__("./node_modules/remark-parse/lib/util/html.js").X;module.exports=function blockHtml(eat,value,silent){var next,line,offset,character,count,sequence,subvalue,blocks=this.options.blocks.join("|"),elementOpenExpression=new RegExp("^</?("+blocks+")(?=(\\s|/?>|$))","i"),length=value.length,index=0,sequences=[[rawOpenExpression,rawCloseExpression,!0],[commentOpenExpression,commentCloseExpression,!0],[instructionOpenExpression,instructionCloseExpression,!0],[directiveOpenExpression,directiveCloseExpression,!0],[cdataOpenExpression,cdataCloseExpression,!0],[elementOpenExpression,elementCloseExpression,!0],[otherElementOpenExpression,elementCloseExpression,!1]];for(;index<length&&((character=value.charAt(index))===tab||character===space);)index++;if(value.charAt(index)!==lessThan)return;next=-1===(next=value.indexOf(lineFeed,index+1))?length:next,line=value.slice(index,next),offset=-1,count=sequences.length;for(;++offset<count;)if(sequences[offset][0].test(line)){sequence=sequences[offset];break}if(!sequence)return;if(silent)return sequence[2];if(index=next,!sequence[1].test(line))for(;index<length;){if(next=-1===(next=value.indexOf(lineFeed,index+1))?length:next,line=value.slice(index+1,next),sequence[1].test(line)){line&&(index=next);break}index=next}return subvalue=value.slice(0,index),eat(subvalue)({type:"html",value:subvalue})};var tab="\t",space=" ",lineFeed="\n",lessThan="<",rawOpenExpression=/^<(script|pre|style)(?=(\s|>|$))/i,rawCloseExpression=/<\/(script|pre|style)>/i,commentOpenExpression=/^<!--/,commentCloseExpression=/-->/,instructionOpenExpression=/^<\?/,instructionCloseExpression=/\?>/,directiveOpenExpression=/^<![A-Za-z]/,directiveCloseExpression=/>/,cdataOpenExpression=/^<!\[CDATA\[/,cdataCloseExpression=/]]>/,elementCloseExpression=/^$/,otherElementOpenExpression=new RegExp(openCloseTag.source+"\\s*$")},"./node_modules/remark-parse/lib/tokenize/html-inline.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var alphabetical=__webpack_require__("./node_modules/is-alphabetical/index.js"),locate=__webpack_require__("./node_modules/remark-parse/lib/locate/tag.js"),tag=__webpack_require__("./node_modules/remark-parse/lib/util/html.js").T;module.exports=inlineHTML,inlineHTML.locator=locate;var lessThan="<",questionMark="?",exclamationMark="!",slash="/",htmlLinkOpenExpression=/^<a /i,htmlLinkCloseExpression=/^<\/a>/i;function inlineHTML(eat,value,silent){var character,subvalue,length=value.length;if(!(value.charAt(0)!==lessThan||length<3)&&(character=value.charAt(1),(alphabetical(character)||character===questionMark||character===exclamationMark||character===slash)&&(subvalue=value.match(tag))))return!!silent||(subvalue=subvalue[0],!this.inLink&&htmlLinkOpenExpression.test(subvalue)?this.inLink=!0:this.inLink&&htmlLinkCloseExpression.test(subvalue)&&(this.inLink=!1),eat(subvalue)({type:"html",value:subvalue}))}},"./node_modules/remark-parse/lib/tokenize/link.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var whitespace=__webpack_require__("./node_modules/is-whitespace-character/index.js"),locate=__webpack_require__("./node_modules/remark-parse/lib/locate/link.js");module.exports=link,link.locator=locate;var lineFeed="\n",exclamationMark="!",quotationMark='"',apostrophe="'",leftParenthesis="(",rightParenthesis=")",lessThan="<",greaterThan=">",leftSquareBracket="[",backslash="\\",rightSquareBracket="]",graveAccent="`";function link(eat,value,silent){var closed,count,opening,beforeURL,beforeTitle,subqueue,hasMarker,isImage,content,marker,length,title,depth,queue,url,now,exit,node,subvalue="",index=0,character=value.charAt(0),pedantic=this.options.pedantic,commonmark=this.options.commonmark,gfm=this.options.gfm;if(character===exclamationMark&&(isImage=!0,subvalue=character,character=value.charAt(++index)),character===leftSquareBracket&&(isImage||!this.inLink)){for(subvalue+=character,queue="",index++,length=value.length,depth=0,(now=eat.now()).column+=index,now.offset+=index;index<length;){if(subqueue=character=value.charAt(index),character===graveAccent){for(count=1;value.charAt(index+1)===graveAccent;)subqueue+=character,index++,count++;opening?count>=opening&&(opening=0):opening=count}else if(character===backslash)index++,subqueue+=value.charAt(index);else if(opening&&!gfm||character!==leftSquareBracket){if((!opening||gfm)&&character===rightSquareBracket){if(!depth){if(value.charAt(index+1)!==leftParenthesis)return;subqueue+=leftParenthesis,closed=!0,index++;break}depth--}}else depth++;queue+=subqueue,subqueue="",index++}if(closed){for(content=queue,subvalue+=queue+subqueue,index++;index<length&&(character=value.charAt(index),whitespace(character));)subvalue+=character,index++;if(queue="",beforeURL=subvalue,(character=value.charAt(index))===lessThan){for(index++,beforeURL+=lessThan;index<length&&(character=value.charAt(index))!==greaterThan;){if(commonmark&&character===lineFeed)return;queue+=character,index++}if(value.charAt(index)!==greaterThan)return;subvalue+=lessThan+queue+greaterThan,url=queue,index++}else{for(character=null,subqueue="";index<length&&(character=value.charAt(index),!subqueue||!(character===quotationMark||character===apostrophe||commonmark&&character===leftParenthesis));){if(whitespace(character)){if(!pedantic)break;subqueue+=character}else{if(character===leftParenthesis)depth++;else if(character===rightParenthesis){if(0===depth)break;depth--}queue+=subqueue,subqueue="",character===backslash&&(queue+=backslash,character=value.charAt(++index)),queue+=character}index++}url=queue,index=(subvalue+=queue).length}for(queue="";index<length&&(character=value.charAt(index),whitespace(character));)queue+=character,index++;if(character=value.charAt(index),subvalue+=queue,queue&&(character===quotationMark||character===apostrophe||commonmark&&character===leftParenthesis))if(index++,queue="",marker=character===leftParenthesis?rightParenthesis:character,beforeTitle=subvalue+=character,commonmark){for(;index<length&&(character=value.charAt(index))!==marker;)character===backslash&&(queue+=backslash,character=value.charAt(++index)),index++,queue+=character;if((character=value.charAt(index))!==marker)return;for(title=queue,subvalue+=queue+character,index++;index<length&&(character=value.charAt(index),whitespace(character));)subvalue+=character,index++}else for(subqueue="";index<length;){if((character=value.charAt(index))===marker)hasMarker&&(queue+=marker+subqueue,subqueue=""),hasMarker=!0;else if(hasMarker){if(character===rightParenthesis){subvalue+=queue+marker+subqueue,title=queue;break}whitespace(character)?subqueue+=character:(queue+=marker+subqueue+character,subqueue="",hasMarker=!1)}else queue+=character;index++}if(value.charAt(index)===rightParenthesis)return!!silent||(subvalue+=rightParenthesis,url=this.decode.raw(this.unescape(url),eat(beforeURL).test().end,{nonTerminated:!1}),title&&(beforeTitle=eat(beforeTitle).test().end,title=this.decode.raw(this.unescape(title),beforeTitle)),node={type:isImage?"image":"link",title:title||null,url},isImage?node.alt=this.decode.raw(this.unescape(content),now)||null:(exit=this.enterLink(),node.children=this.tokenizeInline(content,now),exit()),eat(subvalue)(node))}}}},"./node_modules/remark-parse/lib/tokenize/list.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var trim=__webpack_require__("./node_modules/trim/index.js"),repeat=__webpack_require__("./node_modules/repeat-string/index.js"),decimal=__webpack_require__("./node_modules/is-decimal/index.js"),getIndent=__webpack_require__("./node_modules/remark-parse/lib/util/get-indentation.js"),removeIndent=__webpack_require__("./node_modules/remark-parse/lib/util/remove-indentation.js"),interrupt=__webpack_require__("./node_modules/remark-parse/lib/util/interrupt.js");module.exports=function list(eat,value,silent){var size,queue,ordered,character,marker,nextIndex,startIndex,prefixed,currentMarker,content,line,previousEmpty,empty,items,allLines,emptyLines,item,enterTop,exitBlockquote,node,now,end,indented,commonmark=this.options.commonmark,pedantic=this.options.pedantic,tokenizers=this.blockTokenizers,interuptors=this.interruptList,index=0,length=value.length,start=null,spread=!1;for(;index<length&&((character=value.charAt(index))===tab||character===space);)index++;if((character=value.charAt(index))===asterisk||character===plusSign||character===dash)marker=character,ordered=!1;else{for(ordered=!0,queue="";index<length&&(character=value.charAt(index),decimal(character));)queue+=character,index++;if(character=value.charAt(index),!queue||!(character===dot||commonmark&&character===rightParenthesis))return;if(silent&&"1"!==queue)return;start=parseInt(queue,10),marker=character}if((character=value.charAt(++index))!==space&&character!==tab&&(pedantic||character!==lineFeed&&""!==character))return;if(silent)return!0;index=0,items=[],allLines=[],emptyLines=[];for(;index<length;){for(startIndex=index,prefixed=!1,indented=!1,-1===(nextIndex=value.indexOf(lineFeed,index))&&(nextIndex=length),size=0;index<length;){if((character=value.charAt(index))===tab)size+=tabSize-size%tabSize;else{if(character!==space)break;size++}index++}if(item&&size>=item.indent&&(indented=!0),character=value.charAt(index),currentMarker=null,!indented){if(character===asterisk||character===plusSign||character===dash)currentMarker=character,index++,size++;else{for(queue="";index<length&&(character=value.charAt(index),decimal(character));)queue+=character,index++;character=value.charAt(index),index++,queue&&(character===dot||commonmark&&character===rightParenthesis)&&(currentMarker=character,size+=queue.length+1)}if(currentMarker)if((character=value.charAt(index))===tab)size+=tabSize-size%tabSize,index++;else if(character===space){for(end=index+tabSize;index<end&&value.charAt(index)===space;)index++,size++;index===end&&value.charAt(index)===space&&(index-=tabSize-1,size-=tabSize-1)}else character!==lineFeed&&""!==character&&(currentMarker=null)}if(currentMarker){if(!pedantic&&marker!==currentMarker)break;prefixed=!0}else commonmark||indented||value.charAt(startIndex)!==space?commonmark&&item&&(indented=size>=item.indent||size>tabSize):indented=!0,prefixed=!1,index=startIndex;if(line=value.slice(startIndex,nextIndex),content=startIndex===index?line:value.slice(index,nextIndex),(currentMarker===asterisk||currentMarker===underscore||currentMarker===dash)&&tokenizers.thematicBreak.call(this,eat,line,!0))break;if(previousEmpty=empty,empty=!prefixed&&!trim(content).length,indented&&item)item.value=item.value.concat(emptyLines,line),allLines=allLines.concat(emptyLines,line),emptyLines=[];else if(prefixed)0!==emptyLines.length&&(spread=!0,item.value.push(""),item.trail=emptyLines.concat()),item={value:[line],indent:size,trail:[]},items.push(item),allLines=allLines.concat(emptyLines,line),emptyLines=[];else if(empty){if(previousEmpty&&!commonmark)break;emptyLines.push(line)}else{if(previousEmpty)break;if(interrupt(interuptors,tokenizers,this,[eat,line,!0]))break;item.value=item.value.concat(emptyLines,line),allLines=allLines.concat(emptyLines,line),emptyLines=[]}index=nextIndex+1}node=eat(allLines.join(lineFeed)).reset({type:"list",ordered,start,spread,children:[]}),enterTop=this.enterList(),exitBlockquote=this.enterBlock(),index=-1,length=items.length;for(;++index<length;)item=items[index].value.join(lineFeed),now=eat.now(),eat(item)(listItem(this,item,now),node),item=items[index].trail.join(lineFeed),index!==length-1&&(item+=lineFeed),eat(item);return enterTop(),exitBlockquote(),node};var asterisk="*",underscore="_",plusSign="+",dash="-",dot=".",space=" ",lineFeed="\n",tab="\t",rightParenthesis=")",lowercaseX="x",tabSize=4,looseListItemExpression=/\n\n(?!\s*$)/,taskItemExpression=/^\[([ X\tx])][ \t]/,bulletExpression=/^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/,pedanticBulletExpression=/^([ \t]*)([*+-]|\d+[.)])([ \t]+)/,initialIndentExpression=/^( {1,4}|\t)?/gm;function listItem(ctx,value,position){var task,indent,offsets=ctx.offset,checked=null;return value=(ctx.options.pedantic?pedanticListItem:normalListItem).apply(null,arguments),ctx.options.gfm&&(task=value.match(taskItemExpression))&&(indent=task[0].length,checked=task[1].toLowerCase()===lowercaseX,offsets[position.line]+=indent,value=value.slice(indent)),{type:"listItem",spread:looseListItemExpression.test(value),checked,children:ctx.tokenizeBlock(value,position)}}function pedanticListItem(ctx,value,position){var offsets=ctx.offset,line=position.line;return value=value.replace(pedanticBulletExpression,replacer),line=position.line,value.replace(initialIndentExpression,replacer);function replacer($0){return offsets[line]=(offsets[line]||0)+$0.length,line++,""}}function normalListItem(ctx,value,position){var max,bullet,rest,lines,trimmedLines,index,length,offsets=ctx.offset,line=position.line;for(lines=(value=value.replace(bulletExpression,(function replacer($0,$1,$2,$3,$4){bullet=$1+$2+$3,rest=$4,Number($2)<10&&bullet.length%2==1&&($2=space+$2);return(max=$1+repeat(space,$2.length)+$3)+rest}))).split(lineFeed),(trimmedLines=removeIndent(value,getIndent(max).indent).split(lineFeed))[0]=rest,offsets[line]=(offsets[line]||0)+bullet.length,line++,index=0,length=lines.length;++index<length;)offsets[line]=(offsets[line]||0)+lines[index].length-trimmedLines[index].length,line++;return trimmedLines.join(lineFeed)}},"./node_modules/remark-parse/lib/tokenize/paragraph.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var trim=__webpack_require__("./node_modules/trim/index.js"),trimTrailingLines=__webpack_require__("./node_modules/trim-trailing-lines/index.js"),interrupt=__webpack_require__("./node_modules/remark-parse/lib/util/interrupt.js");module.exports=function paragraph(eat,value,silent){var position,subvalue,character,size,now,commonmark=this.options.commonmark,tokenizers=this.blockTokenizers,interruptors=this.interruptParagraph,index=value.indexOf(lineFeed),length=value.length;for(;index<length;){if(-1===index){index=length;break}if(value.charAt(index+1)===lineFeed)break;if(commonmark){for(size=0,position=index+1;position<length;){if((character=value.charAt(position))===tab){size=tabSize;break}if(character!==space)break;size++,position++}if(size>=tabSize&&character!==lineFeed){index=value.indexOf(lineFeed,index+1);continue}}if(subvalue=value.slice(index+1),interrupt(interruptors,tokenizers,this,[eat,subvalue,!0]))break;if(position=index,-1!==(index=value.indexOf(lineFeed,index+1))&&""===trim(value.slice(position,index))){index=position;break}}if(subvalue=value.slice(0,index),silent)return!0;return now=eat.now(),subvalue=trimTrailingLines(subvalue),eat(subvalue)({type:"paragraph",children:this.tokenizeInline(subvalue,now)})};var tab="\t",lineFeed="\n",space=" ",tabSize=4},"./node_modules/remark-parse/lib/tokenize/reference.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var whitespace=__webpack_require__("./node_modules/is-whitespace-character/index.js"),locate=__webpack_require__("./node_modules/remark-parse/lib/locate/link.js"),normalize=__webpack_require__("./node_modules/remark-parse/lib/util/normalize.js");module.exports=reference,reference.locator=locate;var link="link",image="image",shortcut="shortcut",collapsed="collapsed",full="full",exclamationMark="!",leftSquareBracket="[",backslash="\\",rightSquareBracket="]";function reference(eat,value,silent){var content,identifier,now,node,exit,queue,bracketed,depth,commonmark=this.options.commonmark,character=value.charAt(0),index=0,length=value.length,subvalue="",intro="",type=link,referenceType=shortcut;if(character===exclamationMark&&(type=image,intro=character,character=value.charAt(++index)),character===leftSquareBracket){for(index++,intro+=character,queue="",depth=0;index<length;){if((character=value.charAt(index))===leftSquareBracket)bracketed=!0,depth++;else if(character===rightSquareBracket){if(!depth)break;depth--}character===backslash&&(queue+=backslash,character=value.charAt(++index)),queue+=character,index++}if(subvalue=queue,content=queue,(character=value.charAt(index))===rightSquareBracket){if(index++,subvalue+=character,queue="",!commonmark)for(;index<length&&(character=value.charAt(index),whitespace(character));)queue+=character,index++;if((character=value.charAt(index))===leftSquareBracket){for(identifier="",queue+=character,index++;index<length&&(character=value.charAt(index))!==leftSquareBracket&&character!==rightSquareBracket;)character===backslash&&(identifier+=backslash,character=value.charAt(++index)),identifier+=character,index++;(character=value.charAt(index))===rightSquareBracket?(referenceType=identifier?full:collapsed,queue+=identifier+character,index++):identifier="",subvalue+=queue,queue=""}else{if(!content)return;identifier=content}if(referenceType===full||!bracketed)return subvalue=intro+subvalue,type===link&&this.inLink?null:!!silent||((now=eat.now()).column+=intro.length,now.offset+=intro.length,node={type:type+"Reference",identifier:normalize(identifier=referenceType===full?identifier:content),label:identifier,referenceType},type===link?(exit=this.enterLink(),node.children=this.tokenizeInline(content,now),exit()):node.alt=this.decode.raw(this.unescape(content),now)||null,eat(subvalue)(node))}}}},"./node_modules/remark-parse/lib/tokenize/strong.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var trim=__webpack_require__("./node_modules/trim/index.js"),whitespace=__webpack_require__("./node_modules/is-whitespace-character/index.js"),locate=__webpack_require__("./node_modules/remark-parse/lib/locate/strong.js");module.exports=strong,strong.locator=locate;var backslash="\\",asterisk="*",underscore="_";function strong(eat,value,silent){var now,pedantic,marker,queue,subvalue,length,previous,index=0,character=value.charAt(index);if(!(character!==asterisk&&character!==underscore||value.charAt(++index)!==character||(pedantic=this.options.pedantic,subvalue=(marker=character)+marker,length=value.length,index++,queue="",character="",pedantic&&whitespace(value.charAt(index)))))for(;index<length;){if(previous=character,!((character=value.charAt(index))!==marker||value.charAt(index+1)!==marker||pedantic&&whitespace(previous))&&(character=value.charAt(index+2))!==marker){if(!trim(queue))return;return!!silent||((now=eat.now()).column+=2,now.offset+=2,eat(subvalue+queue+subvalue)({type:"strong",children:this.tokenizeInline(queue,now)}))}pedantic||character!==backslash||(queue+=character,character=value.charAt(++index)),queue+=character,index++}}},"./node_modules/remark-parse/lib/tokenize/table.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var whitespace=__webpack_require__("./node_modules/is-whitespace-character/index.js");module.exports=function table(eat,value,silent){var index,alignments,alignment,subvalue,row,length,lines,queue,character,hasDash,align,cell,preamble,now,position,lineCount,line,rows,table,lineIndex,pipeIndex,first;if(!this.options.gfm)return;index=0,lineCount=0,length=value.length+1,lines=[];for(;index<length;){if(lineIndex=value.indexOf(lineFeed,index),pipeIndex=value.indexOf(verticalBar,index+1),-1===lineIndex&&(lineIndex=value.length),-1===pipeIndex||pipeIndex>lineIndex){if(lineCount<minRows)return;break}lines.push(value.slice(index,lineIndex)),lineCount++,index=lineIndex+1}subvalue=lines.join(lineFeed),alignments=lines.splice(1,1)[0]||[],index=0,length=alignments.length,lineCount--,alignment=!1,align=[];for(;index<length;){if((character=alignments.charAt(index))===verticalBar){if(hasDash=null,!1===alignment){if(!1===first)return}else align.push(alignment),alignment=!1;first=!1}else if(character===dash)hasDash=!0,alignment=alignment||null;else if(character===colon)alignment=alignment===left?center:hasDash&&null===alignment?right:left;else if(!whitespace(character))return;index++}!1!==alignment&&align.push(alignment);if(align.length<minColumns)return;if(silent)return!0;position=-1,rows=[],table=eat(subvalue).reset({type:"table",align,children:rows});for(;++position<lineCount;){for(line=lines[position],row={type:"tableRow",children:[]},position&&eat(lineFeed),eat(line).reset(row,table),length=line.length+1,index=0,queue="",cell="",preamble=!0;index<length;)(character=line.charAt(index))!==tab&&character!==space?(""===character||character===verticalBar?preamble?eat(character):(!cell&&!character||preamble||(subvalue=cell,queue.length>1&&(character?(subvalue+=queue.slice(0,-1),queue=queue.charAt(queue.length-1)):(subvalue+=queue,queue="")),now=eat.now(),eat(subvalue)({type:"tableCell",children:this.tokenizeInline(cell,now)},row)),eat(queue+character),queue="",cell=""):(queue&&(cell+=queue,queue=""),cell+=character,character===backslash&&index!==length-2&&(cell+=line.charAt(index+1),index++)),preamble=!1,index++):(cell?queue+=character:eat(character),index++);position||eat(lineFeed+alignments)}return table};var tab="\t",lineFeed="\n",space=" ",dash="-",colon=":",backslash="\\",verticalBar="|",minColumns=1,minRows=2,left="left",center="center",right="right"},"./node_modules/remark-parse/lib/tokenize/text.js":module=>{"use strict";module.exports=function text(eat,value,silent){var methods,tokenizers,index,length,subvalue,position,tokenizer,name,min,now;if(silent)return!0;methods=this.inlineMethods,length=methods.length,tokenizers=this.inlineTokenizers,index=-1,min=value.length;for(;++index<length;)"text"!==(name=methods[index])&&tokenizers[name]&&((tokenizer=tokenizers[name].locator)||eat.file.fail("Missing locator: `"+name+"`"),-1!==(position=tokenizer.call(this,value,1))&&position<min&&(min=position));subvalue=value.slice(0,min),now=eat.now(),this.decode(subvalue,now,(function handler(content,position,source){eat(source||content)({type:"text",value:content})}))}},"./node_modules/remark-parse/lib/tokenize/thematic-break.js":module=>{"use strict";module.exports=function thematicBreak(eat,value,silent){var character,marker,markerCount,queue,index=-1,length=value.length+1,subvalue="";for(;++index<length&&((character=value.charAt(index))===tab||character===space);)subvalue+=character;if(character!==asterisk&&character!==dash&&character!==underscore)return;marker=character,subvalue+=character,markerCount=1,queue="";for(;++index<length;)if((character=value.charAt(index))===marker)markerCount++,subvalue+=queue+marker,queue="";else{if(character!==space)return markerCount>=maxCount&&(!character||character===lineFeed)?(subvalue+=queue,!!silent||eat(subvalue)({type:"thematicBreak"})):void 0;queue+=character}};var tab="\t",lineFeed="\n",space=" ",asterisk="*",dash="-",underscore="_",maxCount=3},"./node_modules/remark-parse/lib/tokenize/url.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ccount=__webpack_require__("./node_modules/ccount/index.js"),decode=__webpack_require__("./node_modules/remark-parse/node_modules/parse-entities/index.js"),decimal=__webpack_require__("./node_modules/is-decimal/index.js"),alphabetical=__webpack_require__("./node_modules/is-alphabetical/index.js"),whitespace=__webpack_require__("./node_modules/is-whitespace-character/index.js"),locate=__webpack_require__("./node_modules/remark-parse/lib/locate/url.js");module.exports=url,url.locator=locate,url.notInLink=!0;var exclamationMark=33,ampersand=38,rightParenthesis=41,asterisk=42,comma=44,dash=45,dot=46,colon=58,semicolon=59,questionMark=63,lessThan=60,underscore=95,tilde=126,leftParenthesisCharacter="(",rightParenthesisCharacter=")";function url(eat,value,silent){var dots,lastTwoPartsStart,start,index,pathStart,path,code,end,leftCount,rightCount,content,children,url,exit,gfm=this.options.gfm,tokenizers=this.inlineTokenizers,length=value.length,previousDot=-1,protocolless=!1;if(gfm){if("www."===value.slice(0,4))protocolless=!0,index=4;else if("http://"===value.slice(0,7).toLowerCase())index=7;else{if("https://"!==value.slice(0,8).toLowerCase())return;index=8}for(previousDot=index-1,start=index,dots=[];index<length;)if((code=value.charCodeAt(index))!==dot){if(!decimal(code)&&!alphabetical(code)&&code!==dash&&code!==underscore)break;index++}else{if(previousDot===index-1)break;dots.push(index),previousDot=index,index++}if(code===dot&&(dots.pop(),index--),void 0!==dots[0]&&(lastTwoPartsStart=dots.length<2?start:dots[dots.length-2]+1,-1===value.slice(lastTwoPartsStart,index).indexOf("_"))){if(silent)return!0;for(end=index,pathStart=index;index<length&&(code=value.charCodeAt(index),!whitespace(code)&&code!==lessThan);)index++,code===exclamationMark||code===asterisk||code===comma||code===dot||code===colon||code===questionMark||code===underscore||code===tilde||(end=index);if(index=end,value.charCodeAt(index-1)===rightParenthesis)for(path=value.slice(pathStart,index),leftCount=ccount(path,leftParenthesisCharacter),rightCount=ccount(path,rightParenthesisCharacter);rightCount>leftCount;)index=pathStart+path.lastIndexOf(rightParenthesisCharacter),path=value.slice(pathStart,index),rightCount--;if(value.charCodeAt(index-1)===semicolon&&(index--,alphabetical(value.charCodeAt(index-1)))){for(end=index-2;alphabetical(value.charCodeAt(end));)end--;value.charCodeAt(end)===ampersand&&(index=end)}return content=value.slice(0,index),url=decode(content,{nonTerminated:!1}),protocolless&&(url="http://"+url),exit=this.enterLink(),this.inlineTokenizers={text:tokenizers.text},children=this.tokenizeInline(content,eat.now()),this.inlineTokenizers=tokenizers,exit(),eat(content)({type:"link",title:null,url,children})}}}},"./node_modules/remark-parse/lib/tokenizer.js":module=>{"use strict";function mergeable(node){var start,end;return"text"!==node.type||!node.position||(start=node.position.start,end=node.position.end,start.line!==end.line||end.column-start.column===node.value.length)}function mergeText(previous,node){return previous.value+=node.value,previous}function mergeBlockquote(previous,node){return this.options.commonmark||this.options.gfm?node:(previous.children=previous.children.concat(node.children),previous)}module.exports=function factory(type){return function tokenize(value,location){var index,length,method,matched,valueLength,self=this,offset=self.offset,tokens=[],methods=self[type+"Methods"],tokenizers=self[type+"Tokenizers"],line=location.line,column=location.column;if(!value)return tokens;eat.now=now,eat.file=self.file,updatePosition("");for(;value;){for(index=-1,length=methods.length,matched=!1;++index<length&&(!(method=tokenizers[methods[index]])||method.onlyAtStart&&!self.atStart||method.notInList&&self.inList||method.notInBlock&&self.inBlock||method.notInLink&&self.inLink||(valueLength=value.length,method.apply(self,[eat,value]),!(matched=valueLength!==value.length))););matched||self.file.fail(new Error("Infinite loop"),eat.now())}return self.eof=now(),tokens;function updatePosition(subvalue){for(var lastIndex=-1,index=subvalue.indexOf("\n");-1!==index;)line++,lastIndex=index,index=subvalue.indexOf("\n",index+1);-1===lastIndex?column+=subvalue.length:column=subvalue.length-lastIndex,line in offset&&(-1!==lastIndex?column+=offset[line]:column<=offset[line]&&(column=offset[line]+1))}function getOffset(){var indentation=[],pos=line+1;return function(){for(var last=line+1;pos<last;)indentation.push((offset[pos]||0)+1),pos++;return indentation}}function now(){var pos={line,column};return pos.offset=self.toOffset(pos),pos}function Position(start){this.start=start,this.end=now()}function validateEat(subvalue){value.slice(0,subvalue.length)!==subvalue&&self.file.fail(new Error("Incorrectly eaten value: please report this warning on https://git.io/vg5Ft"),now())}function position(){var before=now();return update;function update(node,indent){var previous=node.position,start=previous?previous.start:before,combined=[],n=previous&&previous.end.line,l=before.line;if(node.position=new Position(start),previous&&indent&&previous.indent){if(combined=previous.indent,n<l){for(;++n<l;)combined.push((offset[n]||0)+1);combined.push(before.column)}indent=combined.concat(indent)}return node.position.indent=indent||[],node}}function add(node,parent){var children=parent?parent.children:tokens,previous=children[children.length-1];return previous&&node.type===previous.type&&("text"===node.type||"blockquote"===node.type)&&mergeable(previous)&&mergeable(node)&&(node=("text"===node.type?mergeText:mergeBlockquote).call(self,previous,node)),node!==previous&&children.push(node),self.atStart&&0!==tokens.length&&self.exitStart(),node}function eat(subvalue){var indent=getOffset(),pos=position(),current=now();return validateEat(subvalue),apply.reset=reset,reset.test=test,apply.test=test,value=value.slice(subvalue.length),updatePosition(subvalue),indent=indent(),apply;function apply(node,parent){return pos(add(pos(node),parent),indent)}function reset(){var node=apply.apply(null,arguments);return line=current.line,column=current.column,value=subvalue+value,node}function test(){var result=pos({});return line=current.line,column=current.column,value=subvalue+value,result.position}}}}},"./node_modules/remark-parse/lib/unescape.js":module=>{"use strict";module.exports=function factory(ctx,key){return function unescape(value){var character,previous=0,index=value.indexOf(backslash),escape=ctx[key],queue=[];for(;-1!==index;)queue.push(value.slice(previous,index)),previous=index+1,(character=value.charAt(previous))&&-1!==escape.indexOf(character)||queue.push(backslash),index=value.indexOf(backslash,previous+1);return queue.push(value.slice(previous)),queue.join("")}};var backslash="\\"},"./node_modules/remark-parse/lib/util/html.js":(__unused_webpack_module,exports)=>{"use strict";var openTag="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\u0000-\\u0020]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",closeTag="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";exports.X=new RegExp("^(?:"+openTag+"|"+closeTag+")"),exports.T=new RegExp("^(?:"+openTag+"|"+closeTag+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Za-z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)")},"./node_modules/remark-parse/lib/util/interrupt.js":module=>{"use strict";module.exports=function interrupt(interruptors,tokenizers,ctx,parameters){var interruptor,config,length=interruptors.length,index=-1;for(;++index<length;)if((void 0===(config=(interruptor=interruptors[index])[1]||{}).pedantic||config.pedantic===ctx.options.pedantic)&&(void 0===config.commonmark||config.commonmark===ctx.options.commonmark)&&tokenizers[interruptor[0]].apply(ctx,parameters))return!0;return!1}},"./node_modules/remark-parse/lib/util/normalize.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var collapseWhiteSpace=__webpack_require__("./node_modules/collapse-white-space/index.js");module.exports=function normalize(value){return collapseWhiteSpace(value).toLowerCase()}},"./node_modules/remark-parse/node_modules/parse-entities/decode-entity.browser.js":module=>{"use strict";var el;module.exports=function decodeEntity(characters){var char,entity="&"+characters+";";if((el=el||document.createElement("i")).innerHTML=entity,59===(char=el.textContent).charCodeAt(char.length-1)&&"semi"!==characters)return!1;return char!==entity&&char}},"./node_modules/remark-parse/node_modules/parse-entities/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var legacy=__webpack_require__("./node_modules/character-entities-legacy/index.json"),invalid=__webpack_require__("./node_modules/character-reference-invalid/index.json"),decimal=__webpack_require__("./node_modules/is-decimal/index.js"),hexadecimal=__webpack_require__("./node_modules/is-hexadecimal/index.js"),alphanumerical=__webpack_require__("./node_modules/is-alphanumerical/index.js"),decodeEntity=__webpack_require__("./node_modules/remark-parse/node_modules/parse-entities/decode-entity.browser.js");module.exports=function parseEntities(value,options){var option,key,settings={};options||(options={});for(key in defaults)option=options[key],settings[key]=null==option?defaults[key]:option;(settings.position.indent||settings.position.start)&&(settings.indent=settings.position.indent||[],settings.position=settings.position.start);return function parse(value,settings){var entityCharacters,namedEntity,terminated,characters,character,reference,following,warning,reason,output,entity,begin,start,type,test,prev,next,diff,end,additional=settings.additional,nonTerminated=settings.nonTerminated,handleText=settings.text,handleReference=settings.reference,handleWarning=settings.warning,textContext=settings.textContext,referenceContext=settings.referenceContext,warningContext=settings.warningContext,pos=settings.position,indent=settings.indent||[],length=value.length,index=0,lines=-1,column=pos.column||1,line=pos.line||1,queue="",result=[];"string"==typeof additional&&(additional=additional.charCodeAt(0));prev=now(),warning=handleWarning?parseError:noop,index--,length++;for(;++index<length;)if(character===lineFeed&&(column=indent[lines]||1),(character=value.charCodeAt(index))===ampersand){if((following=value.charCodeAt(index+1))===tab||following===lineFeed||following===formFeed||following===space||following===ampersand||following===lessThan||following!=following||additional&&following===additional){queue+=fromCharCode(character),column++;continue}for(begin=start=index+1,end=start,following===numberSign?(end=++begin,(following=value.charCodeAt(end))===uppercaseX||following===lowercaseX?(type=hexa,end=++begin):type=deci):type=name,entityCharacters="",entity="",characters="",test=tests[type],end--;++end<length&&test(following=value.charCodeAt(end));)characters+=fromCharCode(following),type===name&&own.call(legacy,characters)&&(entityCharacters=characters,entity=legacy[characters]);(terminated=value.charCodeAt(end)===semicolon)&&(end++,(namedEntity=type===name&&decodeEntity(characters))&&(entityCharacters=characters,entity=namedEntity)),diff=1+end-start,(terminated||nonTerminated)&&(characters?type===name?(terminated&&!entity?warning(namedUnknown,1):(entityCharacters!==characters&&(diff=1+(end=begin+entityCharacters.length)-begin,terminated=!1),terminated||(reason=entityCharacters?namedNotTerminated:namedEmpty,settings.attribute?(following=value.charCodeAt(end))===equalsTo?(warning(reason,diff),entity=null):alphanumerical(following)?entity=null:warning(reason,diff):warning(reason,diff))),reference=entity):(terminated||warning(numericNotTerminated,diff),prohibited(reference=parseInt(characters,bases[type]))?(warning(numericProhibited,diff),reference=fromCharCode(replacementCharacter)):reference in invalid?(warning(numericDisallowed,diff),reference=invalid[reference]):(output="",disallowed(reference)&&warning(numericDisallowed,diff),reference>65535&&(output+=fromCharCode((reference-=65536)>>>10|55296),reference=56320|1023&reference),reference=output+fromCharCode(reference))):type!==name&&warning(numericEmpty,diff)),reference?(flush(),prev=now(),index=end-1,column+=end-start+1,result.push(reference),(next=now()).offset++,handleReference&&handleReference.call(referenceContext,reference,{start:prev,end:next},value.slice(start-1,end)),prev=next):(characters=value.slice(start-1,end),queue+=characters,column+=characters.length,index=end-1)}else 10===character&&(line++,lines++,column=0),character==character?(queue+=fromCharCode(character),column++):flush();return result.join("");function now(){return{line,column,offset:index+(pos.offset||0)}}function parseError(code,offset){var position=now();position.column+=offset,position.offset+=offset,handleWarning.call(warningContext,messages[code],position,code)}function flush(){queue&&(result.push(queue),handleText&&handleText.call(textContext,queue,{start:prev,end:now()}),queue="")}}(value,settings)};var own={}.hasOwnProperty,fromCharCode=String.fromCharCode,noop=Function.prototype,defaults={warning:null,reference:null,text:null,warningContext:null,referenceContext:null,textContext:null,position:{},additional:null,attribute:!1,nonTerminated:!0},tab=9,lineFeed=10,formFeed=12,space=32,ampersand=38,semicolon=59,lessThan=60,equalsTo=61,numberSign=35,uppercaseX=88,lowercaseX=120,replacementCharacter=65533,name="named",hexa="hexadecimal",deci="decimal",bases={};bases[hexa]=16,bases[deci]=10;var tests={};tests[name]=alphanumerical,tests[deci]=decimal,tests[hexa]=hexadecimal;var namedNotTerminated=1,numericNotTerminated=2,namedEmpty=3,numericEmpty=4,namedUnknown=5,numericDisallowed=6,numericProhibited=7,messages={};function prohibited(code){return code>=55296&&code<=57343||code>1114111}function disallowed(code){return code>=1&&code<=8||11===code||code>=13&&code<=31||code>=127&&code<=159||code>=64976&&code<=65007||!(65535&~code)||65534==(65535&code)}messages[namedNotTerminated]="Named character references must be terminated by a semicolon",messages[numericNotTerminated]="Numeric character references must be terminated by a semicolon",messages[namedEmpty]="Named character references cannot be empty",messages[numericEmpty]="Numeric character references cannot be empty",messages[namedUnknown]="Named character references must be known",messages[numericDisallowed]="Numeric character references cannot be disallowed",messages[numericProhibited]="Numeric character references cannot be outside the permissible Unicode range"},"./node_modules/remark-parse/node_modules/unist-util-is/convert.js":module=>{"use strict";function convert(test){if("string"==typeof test)return function typeFactory(test){return type;function type(node){return Boolean(node&&node.type===test)}}(test);if(null==test)return ok;if("object"==typeof test)return("length"in test?anyFactory:matchesFactory)(test);if("function"==typeof test)return test;throw new Error("Expected function, string, or object as test")}function matchesFactory(test){return function matches(node){var key;for(key in test)if(node[key]!==test[key])return!1;return!0}}function anyFactory(tests){var checks=function convertAll(tests){for(var results=[],length=tests.length,index=-1;++index<length;)results[index]=convert(tests[index]);return results}(tests),length=checks.length;return function matches(){var index=-1;for(;++index<length;)if(checks[index].apply(this,arguments))return!0;return!1}}function ok(){return!0}module.exports=convert},"./node_modules/remark-parse/node_modules/unist-util-remove-position/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var visit=__webpack_require__("./node_modules/remark-parse/node_modules/unist-util-visit/index.js");function hard(node){delete node.position}function soft(node){node.position=void 0}module.exports=function removePosition(node,force){return visit(node,force?hard:soft),node}},"./node_modules/remark-parse/node_modules/unist-util-visit-parents/color.browser.js":module=>{module.exports=function identity(d){return d}},"./node_modules/remark-parse/node_modules/unist-util-visit-parents/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=visitParents;var convert=__webpack_require__("./node_modules/remark-parse/node_modules/unist-util-is/convert.js"),color=__webpack_require__("./node_modules/remark-parse/node_modules/unist-util-visit-parents/color.browser.js"),CONTINUE=!0,SKIP="skip",EXIT=!1;function visitParents(tree,test,visitor,reverse){var step,is;"function"==typeof test&&"function"!=typeof visitor&&(reverse=visitor,visitor=test,test=null),is=convert(test),step=reverse?-1:1,function factory(node,index,parents){var name,value="object"==typeof node&&null!==node?node:{};"string"==typeof value.type&&(name="string"==typeof value.tagName?value.tagName:"string"==typeof value.name?value.name:void 0,visit.displayName="node ("+color(value.type+(name?"<"+name+">":""))+")");return visit;function visit(){var subresult,offset,grandparents=parents.concat(node),result=[];if((!test||is(node,index,parents[parents.length-1]||null))&&(result=function toResult(value){if(null!==value&&"object"==typeof value&&"length"in value)return value;if("number"==typeof value)return[CONTINUE,value];return[value]}(visitor(node,parents)),result[0]===EXIT))return result;if(node.children&&result[0]!==SKIP)for(offset=(reverse?node.children.length:-1)+step;offset>-1&&offset<node.children.length;){if((subresult=factory(node.children[offset],offset,grandparents)())[0]===EXIT)return subresult;offset="number"==typeof subresult[1]?subresult[1]:offset+step}return result}}(tree,null,[])()}visitParents.CONTINUE=CONTINUE,visitParents.SKIP=SKIP,visitParents.EXIT=EXIT},"./node_modules/remark-parse/node_modules/unist-util-visit/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=visit;var visitParents=__webpack_require__("./node_modules/remark-parse/node_modules/unist-util-visit-parents/index.js"),CONTINUE=visitParents.CONTINUE,SKIP=visitParents.SKIP,EXIT=visitParents.EXIT;function visit(tree,test,visitor,reverse){"function"==typeof test&&"function"!=typeof visitor&&(reverse=visitor,visitor=test,test=null),visitParents(tree,test,(function overload(node,parents){var parent=parents[parents.length-1],index=parent?parent.children.indexOf(node):null;return visitor(node,index,parent)}),reverse)}visit.CONTINUE=CONTINUE,visit.SKIP=SKIP,visit.EXIT=EXIT},"./node_modules/remark-parse/node_modules/vfile-location/index.js":module=>{"use strict";module.exports=function factory(file){var value=String(file),indices=[],search=/\r?\n|\r/g;for(;search.exec(value);)indices.push(search.lastIndex);return indices.push(value.length+1),{toPoint:offsetToPoint,toPosition:offsetToPoint,toOffset:function pointToOffset(point){var offset,line=point&&point.line,column=point&&point.column;isNaN(line)||isNaN(column)||!(line-1 in indices)||(offset=(indices[line-2]||0)+column-1||0);return offset>-1&&offset<indices[indices.length-1]?offset:-1}};function offsetToPoint(offset){var index=-1;if(offset>-1&&offset<indices[indices.length-1])for(;++index<indices.length;)if(indices[index]>offset)return{line:index+1,column:offset-(indices[index-1]||0)+1,offset};return{}}}},"./node_modules/state-toggle/index.js":module=>{"use strict";module.exports=function factory(key,state,ctx){return function enter(){var context=ctx||this,current=context[key];return context[key]=!state,exit;function exit(){context[key]=current}}}},"./node_modules/trim-trailing-lines/index.js":module=>{"use strict";module.exports=function trimTrailingLines(value){var val=String(value),index=val.length;for(;val.charAt(--index)===line;);return val.slice(0,index+1)};var line="\n"},"./node_modules/trough/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var wrap=__webpack_require__("./node_modules/trough/wrap.js");module.exports=trough,trough.wrap=wrap;var slice=[].slice;function trough(){var fns=[],middleware={run:function run(){var index=-1,input=slice.call(arguments,0,-1),done=arguments[arguments.length-1];if("function"!=typeof done)throw new Error("Expected function as last argument, not "+done);(function next(err){var fn=fns[++index],values=slice.call(arguments,0).slice(1),length=input.length,pos=-1;if(err)done(err);else{for(;++pos<length;)null!==values[pos]&&void 0!==values[pos]||(values[pos]=input[pos]);input=values,fn?wrap(fn,next).apply(null,input):done.apply(null,[null].concat(input))}}).apply(null,[null].concat(input))},use:function use(fn){if("function"!=typeof fn)throw new Error("Expected `fn` to be a function, not "+fn);return fns.push(fn),middleware}};return middleware}},"./node_modules/trough/wrap.js":module=>{"use strict";var slice=[].slice;module.exports=function wrap(fn,callback){var invoked;return function wrapped(){var result,params=slice.call(arguments,0),callback=fn.length>params.length;callback&&params.push(done);try{result=fn.apply(null,params)}catch(err){if(callback&&invoked)throw err;return done(err)}callback||(result&&"function"==typeof result.then?result.then(then,done):result instanceof Error?done(result):then(result))};function done(){invoked||(invoked=!0,callback.apply(null,arguments))}function then(value){done(null,value)}}},"./node_modules/unherit/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var xtend=__webpack_require__("./node_modules/xtend/immutable.js"),inherits=__webpack_require__("./node_modules/inherits/inherits_browser.js");module.exports=function unherit(Super){var result,key,value;for(key in inherits(Of,Super),inherits(From,Of),result=Of.prototype)(value=result[key])&&"object"==typeof value&&(result[key]="concat"in value?value.concat():xtend(value));return Of;function From(parameters){return Super.apply(this,parameters)}function Of(){return this instanceof Of?Super.apply(this,arguments):new From(arguments)}}},"./node_modules/character-entities-legacy/index.json":module=>{"use strict";module.exports=JSON.parse('{"AElig":"Æ","AMP":"&","Aacute":"Á","Acirc":"Â","Agrave":"À","Aring":"Å","Atilde":"Ã","Auml":"Ä","COPY":"©","Ccedil":"Ç","ETH":"Ð","Eacute":"É","Ecirc":"Ê","Egrave":"È","Euml":"Ë","GT":">","Iacute":"Í","Icirc":"Î","Igrave":"Ì","Iuml":"Ï","LT":"<","Ntilde":"Ñ","Oacute":"Ó","Ocirc":"Ô","Ograve":"Ò","Oslash":"Ø","Otilde":"Õ","Ouml":"Ö","QUOT":"\\"","REG":"®","THORN":"Þ","Uacute":"Ú","Ucirc":"Û","Ugrave":"Ù","Uuml":"Ü","Yacute":"Ý","aacute":"á","acirc":"â","acute":"´","aelig":"æ","agrave":"à","amp":"&","aring":"å","atilde":"ã","auml":"ä","brvbar":"¦","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","curren":"¤","deg":"°","divide":"÷","eacute":"é","ecirc":"ê","egrave":"è","eth":"ð","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","iacute":"í","icirc":"î","iexcl":"¡","igrave":"ì","iquest":"¿","iuml":"ï","laquo":"«","lt":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","ntilde":"ñ","oacute":"ó","ocirc":"ô","ograve":"ò","ordf":"ª","ordm":"º","oslash":"ø","otilde":"õ","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","raquo":"»","reg":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","thorn":"þ","times":"×","uacute":"ú","ucirc":"û","ugrave":"ù","uml":"¨","uuml":"ü","yacute":"ý","yen":"¥","yuml":"ÿ"}')},"./node_modules/character-reference-invalid/index.json":module=>{"use strict";module.exports=JSON.parse('{"0":"�","128":"€","130":"‚","131":"ƒ","132":"„","133":"…","134":"†","135":"‡","136":"ˆ","137":"‰","138":"Š","139":"‹","140":"Œ","142":"Ž","145":"‘","146":"’","147":"“","148":"”","149":"•","150":"–","151":"—","152":"˜","153":"™","154":"š","155":"›","156":"œ","158":"ž","159":"Ÿ"}')}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,