(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[1590],{"./src/code-studio/activityUtils.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.resultFromStatus=exports.mergeActivityResult=exports.activityCssClass=void 0;var _constants=__webpack_require__("./src/constants.js"),_sharedConstants=__webpack_require__("./src/util/sharedConstants.js");exports.activityCssClass=function activityCssClass(result){return result&&result!==_constants.TestResults.NO_TESTS_RUN?result===_constants.TestResults.REVIEW_ACCEPTED_RESULT?_sharedConstants.LevelStatus.review_accepted:result===_constants.TestResults.REVIEW_REJECTED_RESULT?_sharedConstants.LevelStatus.review_rejected:result===_constants.TestResults.SUBMITTED_RESULT?_sharedConstants.LevelStatus.submitted:result>=_constants.TestResults.MINIMUM_OPTIMAL_RESULT?_sharedConstants.LevelStatus.perfect:result>=_constants.TestResults.MINIMUM_PASS_RESULT?_sharedConstants.LevelStatus.passed:_sharedConstants.LevelStatus.attempted:_sharedConstants.LevelStatus.not_tried};exports.resultFromStatus=function resultFromStatus(status){return status===_sharedConstants.LevelStatus.review_accepted?_constants.TestResults.REVIEW_ACCEPTED_RESULT:status===_sharedConstants.LevelStatus.review_rejected?_constants.TestResults.REVIEW_REJECTED_RESULT:status===_sharedConstants.LevelStatus.submitted?_constants.TestResults.SUBMITTED_RESULT:status===_sharedConstants.LevelStatus.free_play_complete?_constants.TestResults.FREE_PLAY:status===_sharedConstants.LevelStatus.perfect?_constants.TestResults.ALL_PASS:status===_sharedConstants.LevelStatus.passed?_constants.TestResults.MINIMUM_PASS_RESULT:_constants.TestResults.NO_TESTS_RUN};exports.mergeActivityResult=function mergeActivityResult(a,b){return b=b||0,0===(a=a||0)?b:0===b?a:Math.max(a,b)}},"./src/code-studio/hiddenLessonRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.STUDENT_SECTION_ID=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new HiddenState,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_HIDDEN_LESSONS){var hiddenLessonsPerSection=action.hiddenLessonsPerSection,hideableLessonsAllowed=action.hideableLessonsAllowed,sectionIds=Object.keys(hiddenLessonsPerSection),nextState=state;return sectionIds.forEach((function(sectionId){hiddenLessonsPerSection[sectionId].forEach((function(lessonId){nextState=nextState.setIn(["lessonsBySection",sectionId,lessonId.toString()],!0)}))})),validateSectionIds(nextState),nextState.merge({hiddenLessonsInitialized:!0,hideableLessonsAllowed})}if(action.type===UPDATE_HIDDEN_LESSON){var sectionId=action.sectionId,lessonId=action.lessonId,hidden=action.hidden,_nextState=state.setIn(["lessonsBySection",sectionId,lessonId.toString()],hidden);return validateSectionIds(_nextState),_nextState}if(action.type===UPDATE_HIDDEN_SCRIPT){var _sectionId=action.sectionId,scriptId=action.scriptId,_hidden=action.hidden,_nextState2=state.setIn(["scriptsBySection",_sectionId.toString(),scriptId.toString()],_hidden);return validateSectionIds(_nextState2),_nextState2}return state},exports.getHiddenLessons=function getHiddenLessons(scriptName,canHideLessons){return function(dispatch){_jquery.default.ajax({type:"GET",url:"/s/".concat(scriptName,"/hidden_lessons"),dataType:"json",contentType:"application/json"}).done((function(response){return dispatch(function initializeHiddenLessons(data,canHideLessons){return function(dispatch){Array.isArray(data)&&(data=_defineProperty({},STUDENT_SECTION_ID,data)),dispatch(setHiddenLessons(data,!!canHideLessons))}}(response,canHideLessons))})).fail((function(err){return console.error(err)}))}},exports.initializeHiddenScripts=function initializeHiddenScripts(data){return function(dispatch){data&&(Array.isArray(data)&&(data=_defineProperty({},STUDENT_SECTION_ID,data)),Object.keys(data).forEach((function(sectionId){data[sectionId].forEach((function(scriptId){dispatch(updateHiddenScript(sectionId,scriptId,!0))}))})))}},exports.isLessonHiddenForSection=function isLessonHiddenForSection(state,sectionId,lessonId){return isHiddenForSection(state,sectionId,lessonId,"lessonsBySection")},exports.isScriptHiddenForSection=function isScriptHiddenForSection(state,sectionId,scriptId){return isHiddenForSection(state,sectionId,scriptId,"scriptsBySection")},exports.setHiddenLessons=setHiddenLessons,exports.toggleHiddenLesson=function toggleHiddenLesson(scriptName,sectionId,lessonId,hidden){return function(dispatch){dispatch(updateHiddenLesson(sectionId,lessonId,hidden)),postToggleHidden(scriptName,sectionId,lessonId,hidden)}},exports.toggleHiddenScript=function toggleHiddenScript(scriptName,sectionId,scriptId,hidden){return function(dispatch){dispatch(updateHiddenScript(sectionId,scriptId,hidden)),postToggleHidden(scriptName,sectionId,null,hidden)}},exports.updateHiddenLesson=updateHiddenLesson,exports.updateHiddenScript=updateHiddenScript;var _jquery=_interopRequireDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),_immutable=_interopRequireDefault(__webpack_require__("./node_modules/immutable/dist/immutable.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var SET_HIDDEN_LESSONS="hiddenLesson/SET_HIDDEN_LESSONS",UPDATE_HIDDEN_LESSON="hiddenLesson/UPDATE_HIDDEN_LESSON",UPDATE_HIDDEN_SCRIPT="hiddenLesson/UPDATE_HIDDEN_SCRIPT",STUDENT_SECTION_ID="STUDENT";exports.STUDENT_SECTION_ID=STUDENT_SECTION_ID;var HiddenState=_immutable.default.Record({hiddenLessonsInitialized:!1,hideableLessonsAllowed:!1,lessonsBySection:_immutable.default.Map({}),scriptsBySection:_immutable.default.Map({})});function validateSectionIds(state){if(state.getIn(["lessonsBySection",STUDENT_SECTION_ID])&&state.get("lessonsBySection").size>1)throw new Error("Should never have STUDENT_SECTION_ID alongside other sectionIds")}function setHiddenLessons(hiddenLessonsPerSection,hideableLessonsAllowed){return{type:SET_HIDDEN_LESSONS,hiddenLessonsPerSection,hideableLessonsAllowed}}function updateHiddenLesson(sectionId,lessonId,hidden){return{type:UPDATE_HIDDEN_LESSON,sectionId,lessonId,hidden}}function updateHiddenScript(sectionId,scriptId,hidden){return{type:UPDATE_HIDDEN_SCRIPT,sectionId,scriptId,hidden}}function postToggleHidden(scriptName,sectionId,lessonId,hidden){var data={section_id:sectionId,hidden};lessonId&&(data.stage_id=lessonId),_jquery.default.ajax({type:"POST",url:"/s/".concat(scriptName,"/toggle_hidden"),dataType:"json",contentType:"application/json",data:JSON.stringify(data)}).success((function(){window.__TestInterface=window.__TestInterface||{},window.__TestInterface.toggleHiddenUnitComplete=!0}))}function isHiddenForSection(state,sectionId,itemId,bySectionKey){return!!itemId&&(sectionId||(sectionId=STUDENT_SECTION_ID),!!state.get(bySectionKey).getIn([sectionId.toString(),itemId.toString()]))}},"./src/code-studio/lessonLockRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.closeLockDialog=exports.beginSave=exports.authorizeLockable=exports.LockStatus=exports.FINISH_SAVE=exports.CLOSE_LOCK_DIALOG=exports.BEGIN_SAVE=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initialState,action=arguments.length>1?arguments[1]:void 0;if(action.type===AUTHORIZE_LOCKABLE)return Object.assign({},state,{lockableAuthorized:action.isAuthorized,lockableAuthorizedLoaded:!0});if(action.type===SET_SECTION_LOCK_STATUS)return _objectSpread(_objectSpread({},state),{},{lessonsBySectionId:_lodash.default.mapValues(action.sections,(function(section){return section.lessons})),lessonsBySectionIdLoaded:!0});if(action.type===REFRESH_SECTION_LOCK_STATUS){var lessonsBySectionId=_lodash.default.mapValues(action.sections,(function(section){return section.lessons})),lockDialogLessonId=state.lockDialogLessonId;if(lockDialogLessonId){var lockStatus=lockStatusForLesson(lessonsBySectionId[action.sectionId],lockDialogLessonId);return _objectSpread(_objectSpread({},state),{},{lessonsBySectionId,lockStatus})}return _objectSpread(_objectSpread({},state),{},{lessonsBySectionId})}if(action.type===_teacherSectionsRedux.SELECT_SECTION){if(0===Object.keys(state.lessonsBySectionId).length)return state;var sectionId=action.sectionId;if(sectionId===_teacherSectionsRedux.NO_SECTION)return _objectSpread(_objectSpread({},state),{},{lockStatus:initialState.lockStatus});if(!state.lessonsBySectionId[sectionId])throw new Error("Unknown sectionId ".concat(sectionId));var _lockDialogLessonId=state.lockDialogLessonId;if(_lockDialogLessonId)return _objectSpread(_objectSpread({},state),{},{lockStatus:lockStatusForLesson(state.lessonsBySectionId[sectionId],_lockDialogLessonId)})}if(action.type===OPEN_LOCK_DIALOG){var _sectionId=action.sectionId,lessonId=action.lessonId;return Object.assign({},state,{lockDialogLessonId:lessonId,lockStatus:lockStatusForLesson(state.lessonsBySectionId[_sectionId],lessonId)})}if(action.type===CLOSE_LOCK_DIALOG)return Object.assign({},state,{lockDialogLessonId:null,lockStatus:initialState.lockStatus});if(action.type===BEGIN_SAVE)return Object.assign({},state,{saving:!0});if(action.type===FINISH_SAVE){var _lessonsBySectionId=state.lessonsBySectionId,nextLockStatus=action.lockStatus,_sectionId2=action.sectionId,_lessonId=action.lessonId,nextLesson=_lodash.default.cloneDeep(_lessonsBySectionId[_sectionId2][_lessonId]);nextLesson.forEach((function(item,index){var update=nextLockStatus[index];if(item.user_level_id!==update.userLevelId)throw new Error("Expect user ids be the same");item.locked=update.lockStatus===LockStatus.Locked,item.readonly_answers=update.lockStatus===LockStatus.ReadonlyAnswers}));var nextState=_lodash.default.cloneDeep(state);return nextState.lessonsBySectionId[_sectionId2][_lessonId]=nextLesson,Object.assign(nextState,{lockStatus:nextLockStatus,saving:!1})}return state},exports.setSectionLockStatus=exports.saveLockDialog=exports.refetchSectionLockStatus=exports.openLockDialog=exports.lockLesson=exports.fullyLockedLessonMapping=exports.finishSave=void 0;var _jquery=_interopRequireDefault(__webpack_require__("./node_modules/jquery/dist/jquery.js")),_lodash=_interopRequireDefault(__webpack_require__("./node_modules/lodash/lodash.js")),_utils=__webpack_require__("./src/utils.js"),_teacherSectionsRedux=__webpack_require__("./src/templates/teacherDashboard/teacherSectionsRedux.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var LockStatus=(0,_utils.makeEnum)("Locked","Editable","ReadonlyAnswers");exports.LockStatus=LockStatus;var OPEN_LOCK_DIALOG="lessonLock/OPEN_LOCK_DIALOG",CLOSE_LOCK_DIALOG="lessonLock/CLOSE_LOCK_DIALOG";exports.CLOSE_LOCK_DIALOG=CLOSE_LOCK_DIALOG;var BEGIN_SAVE="lessonLock/BEGIN_SAVE";exports.BEGIN_SAVE=BEGIN_SAVE;var FINISH_SAVE="lessonLock/FINISH_SAVE";exports.FINISH_SAVE=FINISH_SAVE;var AUTHORIZE_LOCKABLE="lessonLock/AUTHORIZE_LOCKABLE",SET_SECTION_LOCK_STATUS="lessonLock/SET_SECTION_LOCK_STATUS",REFRESH_SECTION_LOCK_STATUS="lessonLock/REFRESH_SECTION_LOCK_STATUS",initialState={lessonsBySectionId:{},lessonsBySectionIdLoaded:!1,lockDialogLessonId:null,lockStatus:[],saving:!1,lockableAuthorized:null,lockableAuthorizedLoaded:!1};exports.authorizeLockable=function authorizeLockable(isAuthorized){return{type:AUTHORIZE_LOCKABLE,isAuthorized}};exports.openLockDialog=function openLockDialog(sectionId,lessonId){return{type:OPEN_LOCK_DIALOG,sectionId,lessonId}};var beginSave=function beginSave(){return{type:BEGIN_SAVE}};exports.beginSave=beginSave;var finishSave=function finishSave(sectionId,lessonId,newLockStatus){return{type:FINISH_SAVE,sectionId,lessonId,lockStatus:newLockStatus}};exports.finishSave=finishSave;var performSave=function performSave(sectionId,lessonId,newLockStatus,onComplete){return function(dispatch,getState){var oldLockStatus=getState().lessonLock.lockStatus,saveData=newLockStatus.filter((function(item,index){return!_lodash.default.isEqual(item,oldLockStatus[index])})).map((function(item){return{user_level_data:item.userLevelData,locked:item.lockStatus===LockStatus.Locked,readonly_answers:item.lockStatus===LockStatus.ReadonlyAnswers}}));0!==saveData.length?(dispatch(beginSave()),_jquery.default.ajax({type:"POST",url:"/api/lock_status",dataType:"json",contentType:"application/json",data:JSON.stringify({updates:saveData})}).done((function(){dispatch(finishSave(sectionId,lessonId,newLockStatus)),onComplete()})).fail((function(err){console.error(err),onComplete()}))):onComplete()}};exports.saveLockDialog=function saveLockDialog(sectionId,newLockStatus){return function(dispatch,getState){var lessonId=getState().lessonLock.lockDialogLessonId;dispatch(performSave(sectionId,lessonId,newLockStatus,(function(){dispatch(closeLockDialog())})))}};exports.lockLesson=function lockLesson(sectionId,lessonId){return function(dispatch,getState){var section=getState().lessonLock.lessonsBySectionId[sectionId],newLockStatus=lockStatusForLesson(section,lessonId).map((function(student){return _objectSpread(_objectSpread({},student),{},{lockStatus:LockStatus.Locked})}));dispatch(performSave(sectionId,lessonId,newLockStatus,(function(){})))}};var closeLockDialog=function closeLockDialog(){return{type:CLOSE_LOCK_DIALOG}};exports.closeLockDialog=closeLockDialog;var lockStatusForLesson=function lockStatusForLesson(section,lessonId){return void 0===section?[]:section[lessonId].map((function(student){return{userLevelData:student.user_level_data,name:student.name,lockStatus:student.locked?LockStatus.Locked:student.readonly_answers?LockStatus.ReadonlyAnswers:LockStatus.Editable}}))};exports.fullyLockedLessonMapping=function fullyLockedLessonMapping(section){return section?Object.keys(section).reduce((function(obj,lessonId){var fullyLocked=!section[lessonId].some((function(student){return!student.locked}));return _objectSpread(_objectSpread({},obj),{},_defineProperty({},lessonId,fullyLocked))}),{}):{}};exports.setSectionLockStatus=function setSectionLockStatus(sections){return{type:SET_SECTION_LOCK_STATUS,sections}};exports.refetchSectionLockStatus=function refetchSectionLockStatus(sectionId,scriptId){return function(dispatch){_jquery.default.ajax("/api/lock_status",{data:{script_id:scriptId}}).done((function(data){dispatch(function refreshSectionLockStatus(sections,sectionId){return{type:REFRESH_SECTION_LOCK_STATUS,sections,sectionId}}(data,sectionId))})).fail((function(err){console.log(err)}))}}},"./src/code-studio/utils.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.environmentSpecificCookieName=function environmentSpecificCookieName(name){var rack_env=window.dashboard.rack_env;if("production"===rack_env)return name;return"".concat(name,"_").concat(rack_env)},exports.getRootDomainFromHostname=function getRootDomainFromHostname(hostname){return hostname.split(".").slice(-2).join(".")},exports.hasQueryParam=function hasQueryParam(name){var parsedParams=queryParams();return Object.prototype.hasOwnProperty.call(parsedParams,name)},exports.queryParams=queryParams,exports.resetWindowLocation=function resetWindowLocation(){windowLocation=window.location},exports.setWindowLocation=function setWindowLocation(fakeLocation){windowLocation=fakeLocation},exports.updateQueryParam=function updateQueryParam(param,value){var useReplaceState=arguments.length>2&&void 0!==arguments[2]&&arguments[2],newString=_queryString.default.stringify(_objectSpread(_objectSpread({},_queryString.default.parse(windowLocation.search)),{},_defineProperty({},param,value))),newLocation=windowLocation.pathname;newString&&(newLocation+="?"+newString);var method=useReplaceState?"replaceState":"pushState";window.history[method](null,document.title,newLocation)};var _queryString=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/query-string/index.js"));function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var windowLocation=window.location;function queryParams(name){var parsed=_queryString.default.parse(windowLocation.search);return name?parsed[name]:parsed}},"./src/code-studio/viewAsRedux.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.changeViewType=exports.ViewType=exports.SET_VIEW_TYPE=void 0,exports.default=function reducer(){var state=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ViewType.Participant,action=arguments.length>1?arguments[1]:void 0;if(action.type===SET_VIEW_TYPE){var viewType=action.viewType;if("Teacher"===viewType)viewType="Instructor",(0,_utils2.updateQueryParam)("viewAs","Instructor");else if("Student"===viewType)viewType="Participant",(0,_utils2.updateQueryParam)("viewAs","Participant");else if(!ViewType[viewType])throw new Error("unknown ViewType: "+viewType);return viewType}return state},exports.setViewType=void 0;var _utils=__webpack_require__("./src/utils.js"),_utils2=__webpack_require__("./src/code-studio/utils.js"),ViewType=(0,_utils.makeEnum)("Participant","Instructor");exports.ViewType=ViewType;var SET_VIEW_TYPE="viewAs/SET_VIEW_TYPE";exports.SET_VIEW_TYPE=SET_VIEW_TYPE;var setViewType=function setViewType(viewType){return{type:SET_VIEW_TYPE,viewType}};exports.setViewType=setViewType;exports.changeViewType=function changeViewType(viewType){return function(dispatch){if(viewType===ViewType.Participant&&(0,_utils2.queryParams)("user_id"))return(0,_utils2.updateQueryParam)("user_id",void 0),void(0,_utils.reload)();dispatch(setViewType(viewType))}}},"./src/fontConstants.js":module=>{module.exports={"metropolis-font":"'Metropolis', sans-serif","main-font":"'Metropolis', sans-serif","thin-font-weight":"100","extra-light-font-weight":"200","light-font-weight":"300","regular-font-weight":"400","medium-font-weight":"500","semi-bold-font-weight":"600","bold-font-weight":"700","extra-bold-font-weight":"800","black-font-weight":"900","main-font-thin":{fontFamily:"'Metropolis', sans-serif",fontWeight:"100",fontStyle:"normal"},"main-font-thin-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"100",fontStyle:"italic"},"main-font-extra-light":{fontFamily:"'Metropolis', sans-serif",fontWeight:"200",fontStyle:"normal"},"main-font-extra-light-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"200",fontStyle:"italic"},"main-font-light":{fontFamily:"'Metropolis', sans-serif",fontWeight:"300",fontStyle:"normal"},"main-font-light-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"300",fontStyle:"italic"},"main-font-regular":{fontFamily:"'Metropolis', sans-serif",fontWeight:"400",fontStyle:"normal"},"main-font-regular-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"400",fontStyle:"italic"},"main-font-medium":{fontFamily:"'Metropolis', sans-serif",fontWeight:"500",fontStyle:"normal"},"main-font-medium-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"500",fontStyle:"italic"},"main-font-semi-bold":{fontFamily:"'Metropolis', sans-serif",fontWeight:"600",fontStyle:"normal"},"main-font-semi-bold-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"600",fontStyle:"italic"},"main-font-bold":{fontFamily:"'Metropolis', sans-serif",fontWeight:"700",fontStyle:"normal"},"main-font-bold-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"700",fontStyle:"italic"},"main-font-extra-bold":{fontFamily:"'Metropolis', sans-serif",fontWeight:"800",fontStyle:"normal"},"main-font-extra-bold-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"800",fontStyle:"italic"},"main-font-black":{fontFamily:"'Metropolis', sans-serif",fontWeight:"900",fontStyle:"normal"},"main-font-black-italic":{fontFamily:"'Metropolis', sans-serif",fontWeight:"900",fontStyle:"italic"},"barlowSemiCondensed-semibold":"'Barlow Semi Condensed Semibold', sans-serif","barlowSemiCondensed-medium":"'Barlow Semi Condensed Medium', sans-serif","code-font":"'Source Code Pro', Monaco, 'Bitstream Vera Sans Mono', 'Lucida Console', Terminal, monospace","font-awesome-core-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/fontawesome.min.css'","font-awesome-brands-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/brands.min.css'","font-awesome-solid-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/solid.min.css'","font-awesome-regular-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/regular.min.css'","font-awesome-v4-fonts-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/v4-font-face.min.css'","font-awesome-v4-shims-url":"'https://dsco.code.org/assets/font-awesome-pro/1684178876/css/v4-shims.min.css'"}},"./src/templates/feedback/types.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.levelFeedbackType=exports.levelFeedbackShape=exports.feedbackShape=exports.ReviewStates=void 0;var _propTypes=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/prop-types/index.js")),_utils=__webpack_require__("./src/utils.js");var feedbackShape=_propTypes.default.shape({id:_propTypes.default.number.isRequired,seen_on_feedback_page_at:_propTypes.default.string,student_first_visited_at:_propTypes.default.string,created_at:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.instanceOf(Date)]).isRequired,comment:_propTypes.default.string,performance:_propTypes.default.string,is_awaiting_teacher_review:_propTypes.default.bool,review_state:_propTypes.default.string});exports.feedbackShape=feedbackShape;var levelFeedbackShape=_propTypes.default.shape(levelFeedbackType);exports.levelFeedbackShape=levelFeedbackShape;var levelFeedbackType={lessonName:_propTypes.default.string.isRequired,lessonNum:_propTypes.default.number.isRequired,levelNum:_propTypes.default.number.isRequired,linkToLevel:_propTypes.default.string.isRequired,unitName:_propTypes.default.string,feedbacks:_propTypes.default.arrayOf(feedbackShape)};exports.levelFeedbackType=levelFeedbackType;var ReviewStates=(0,_utils.makeEnum)("completed","keepWorking","awaitingReview");exports.ReviewStates=ReviewStates},"./src/templates/progress/progressHelpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.defaultBubbleIcon=exports.commentLeft=void 0,exports.getIconForLevel=function getIconForLevel(level){if(arguments.length>1&&void 0!==arguments[1]&&arguments[1]&&isLevelAssessment(level))return"check-circle";if(level.isUnplugged)return"scissors";if(level.isLocked)return"lock";if(level.icon){var match=/fa-(.*)/.exec(level.icon);if(!match||!match[1])throw new Error("Unknown iconType: "+level.icon);return match[1]}if(level.bonus)return"flag-checkered";return defaultBubbleIcon},exports.getLevelResult=void 0,exports.isLevelAssessment=isLevelAssessment,exports.lessonHasLevels=function lessonHasLevels(lesson){var _lesson$levels;return!(null===(_lesson$levels=lesson.levels)||void 0===_lesson$levels||!_lesson$levels.length)},exports.lessonIsAllAssessment=function lessonIsAllAssessment(levels){return levels.every((function(level){return level.kind===_sharedConstants.LevelKind.assessment}))},exports.lessonIsLockedForAllStudents=function lessonIsLockedForAllStudents(lessonId,state){var currentSectionId=state.teacherSections.selectedSectionId,currentSection=state.lessonLock.lessonsBySectionId[currentSectionId];return!!(0,_lessonLockRedux.fullyLockedLessonMapping)(currentSection)[lessonId]},exports.lessonIsLockedForUser=function lessonIsLockedForUser(lesson,levels,state,viewAs){if(!lesson.lockable)return!1;if(!state.currentUser.userId)return!0;if(viewAs===_viewAsRedux.ViewType.Instructor)return!state.lessonLock.lockableAuthorized;if(viewAs===_viewAsRedux.ViewType.Participant)return lessonLocked(levels);return!0},exports.lessonIsVisible=function lessonIsVisible(lesson,state,viewAs){if(!viewAs)throw new Error("missing param viewAs in lessonIsVisible");var hiddenLessonState=state.hiddenLesson,sectionId=state.teacherSections.selectedSectionId;return!(0,_hiddenLessonRedux.isLessonHiddenForSection)(hiddenLessonState,sectionId,lesson.id)||viewAs===_viewAsRedux.ViewType.Instructor},exports.lessonLocked=lessonLocked,exports.lessonProgressForSection=function lessonProgressForSection(sectionLevelProgress,lessons){var sectionLessonProgress={};return Object.entries(sectionLevelProgress).forEach((function(_ref){var _ref2=function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(_ref,2),studentId=_ref2[0],studentLevelProgress=_ref2[1],studentLessonProgress={};lessons.forEach((function(lesson){studentLessonProgress[lesson.id]=function lessonProgressForStudent(studentLevelProgress,lessonLevels){var filteredLevels=lessonLevels.filter((function(level){return!level.bonus}));if(!filteredLevels.length)return null;var completedStatuses=[_sharedConstants.LevelStatus.perfect,_sharedConstants.LevelStatus.submitted,_sharedConstants.LevelStatus.free_play_complete,_sharedConstants.LevelStatus.completed_assessment],attempted=0,imperfect=0,completed=0,timeSpent=0,lastTimestamp=0;filteredLevels.forEach((function(level){var levelProgress=studentLevelProgress[level.id];levelProgress&&(attempted+=levelProgress.status===_sharedConstants.LevelStatus.attempted,imperfect+=levelProgress.status===_sharedConstants.LevelStatus.passed,completed+=completedStatuses.includes(levelProgress.status),timeSpent+=levelProgress.timeSpent||0,lastTimestamp=Math.max(lastTimestamp,levelProgress.lastTimestamp||0))}));var incomplete=filteredLevels.length-completed-imperfect;if(!(attempted+imperfect+completed>0))return null;var getPercent=function getPercent(count){return 100*count/filteredLevels.length};return{incompletePercent:getPercent(incomplete),imperfectPercent:getPercent(imperfect),completedPercent:getPercent(completed),timeSpent,lastTimestamp}}(studentLevelProgress,lesson.levels)})),sectionLessonProgress[studentId]=studentLessonProgress})),sectionLessonProgress},exports.processedLevel=exports.processServerStudentProgress=exports.processServerSectionProgress=exports.levelProgressFromStatus=exports.levelProgressFromServer=exports.levelProgressFromResult=void 0,exports.shouldShowReviewStates=function shouldShowReviewStates(unit){return unit.isCsd||unit.isCsp},exports.studentNeedsFeedback=void 0;var _lessonLockRedux=__webpack_require__("./src/code-studio/lessonLockRedux.js"),_viewAsRedux=__webpack_require__("./src/code-studio/viewAsRedux.js"),_hiddenLessonRedux=__webpack_require__("./src/code-studio/hiddenLessonRedux.js"),_sharedConstants=__webpack_require__("./src/util/sharedConstants.js"),_progressTypes=__webpack_require__("./src/templates/progress/progressTypes.js"),_activityUtils=__webpack_require__("./src/code-studio/activityUtils.js"),_lodash=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/lodash/lodash.js"));function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function lessonLocked(levels){return!!levels[levels.length-1].isLocked}var defaultBubbleIcon="desktop";function isLevelAssessment(level){return"assessment"===level.kind}exports.defaultBubbleIcon=defaultBubbleIcon;exports.commentLeft=function commentLeft(progress){return(null==progress?void 0:progress.teacherFeedbackCommented)&&(null==progress?void 0:progress.teacherFeedbackNew)};exports.studentNeedsFeedback=function studentNeedsFeedback(progress,level){return progress&&progress.status!==_sharedConstants.LevelStatus.not_tried&&!progress.teacherFeedbackNew&&"assessment"===level.kind&&level.canHaveFeedback};exports.processedLevel=function processedLevel(level){return{id:level.activeId||level.id,url:level.url,name:level.name,app:level.app,usesLab2:level.uses_lab2,progression:level.progression,progressionDisplayName:level.progression_display_name,kind:level.kind,icon:level.icon,isUnplugged:level.display_as_unplugged,levelNumber:level.kind===_sharedConstants.LevelKind.unplugged?void 0:level.title,bubbleText:level.kind===_sharedConstants.LevelKind.unplugged?void 0:level.letter||level.title.toString(),isConceptLevel:level.is_concept_level,isValidated:level.is_validated,canHaveFeedback:level.can_have_feedback,bonus:level.bonus,pageNumber:void 0!==level.page_number?level.page_number:_progressTypes.PUZZLE_PAGE_NONE,sublevels:level.sublevels&&level.sublevels.map((function(level){return processedLevel(level)})),path:level.path}};var getLevelResult=function getLevelResult(serverProgress){return serverProgress.result||(0,_activityUtils.resultFromStatus)(serverProgress.status)};exports.getLevelResult=getLevelResult;var getPagesProgress=function getPagesProgress(serverProgress){var _serverProgress$pages;return(null===(_serverProgress$pages=serverProgress.pages_completed)||void 0===_serverProgress$pages?void 0:_serverProgress$pages.length)>1?serverProgress.pages_completed.map((function(pageResult){var pageProgress=pageResult&&levelProgressFromResult(pageResult)||levelProgressFromStatus(_sharedConstants.LevelStatus.not_tried);return pageProgress.locked=serverProgress.locked||!1,pageProgress})):null},levelProgressFromServer=function levelProgressFromServer(serverProgress){return{status:serverProgress.status||_sharedConstants.LevelStatus.not_tried,result:getLevelResult(serverProgress),locked:serverProgress.locked||!1,paired:serverProgress.paired||!1,timeSpent:serverProgress.time_spent,teacherFeedbackReviewState:serverProgress.teacher_feedback_review_state,teacherFeedbackNew:serverProgress.teacher_feedback_new||!1,teacherFeedbackCommented:serverProgress.teacher_feedback_commented||!1,lastTimestamp:serverProgress.last_progress_at,pages:getPagesProgress(serverProgress)}};exports.levelProgressFromServer=levelProgressFromServer;var processServerStudentProgress=function processServerStudentProgress(serverStudentProgress){return _lodash.default.mapValues(serverStudentProgress,(function(progress){return levelProgressFromServer(progress)}))};exports.processServerStudentProgress=processServerStudentProgress;exports.processServerSectionProgress=function processServerSectionProgress(serverSectionProgress){return _lodash.default.mapValues(serverSectionProgress,(function(student){return processServerStudentProgress(student)}))};var levelProgressFromStatus=function levelProgressFromStatus(status){return levelProgressFromServer({status})};exports.levelProgressFromStatus=levelProgressFromStatus;var levelProgressFromResult=function levelProgressFromResult(result){return levelProgressFromStatus((0,_activityUtils.activityCssClass)(result))};exports.levelProgressFromResult=levelProgressFromResult},"./src/templates/progress/progressTypes.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.unitProgressType=exports.studentType=exports.studentLevelProgressType=exports.studentLessonProgressType=exports.levelWithProgressType=exports.levelType=exports.lessonType=exports.groupedLessonsType=exports.PUZZLE_PAGE_NONE=void 0;var _propTypes=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/prop-types/index.js")),_types=__webpack_require__("./src/templates/feedback/types.js");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}exports.PUZZLE_PAGE_NONE=-1;var studentType=_propTypes.default.shape({id:_propTypes.default.number.isRequired,name:_propTypes.default.string.isRequired});exports.studentType=studentType;var levelShape={id:_propTypes.default.string.isRequired,levelNumber:_propTypes.default.number,bubbleText:_propTypes.default.string,kind:_propTypes.default.string,url:_propTypes.default.string,name:_propTypes.default.string,icon:_propTypes.default.string,isUnplugged:_propTypes.default.bool,isConceptLevel:_propTypes.default.bool,pageNumber:_propTypes.default.number};levelShape.sublevels=_propTypes.default.arrayOf(_propTypes.default.shape(levelWithProgressType));var levelType=_propTypes.default.shape(levelShape);exports.levelType=levelType;var levelWithProgressType=_propTypes.default.shape(_objectSpread(_objectSpread({},levelShape),{},{status:_propTypes.default.string.isRequired,paired:_propTypes.default.bool,isLocked:_propTypes.default.bool,isCurrentLevel:_propTypes.default.bool}));exports.levelWithProgressType=levelWithProgressType;var studentLevelProgressShape={status:_propTypes.default.string.isRequired,result:_propTypes.default.number.isRequired,locked:_propTypes.default.bool.isRequired,paired:_propTypes.default.bool.isRequired,timeSpent:_propTypes.default.number,lastTimestamp:_propTypes.default.number,teacherFeedbackReviewState:_propTypes.default.oneOf(Object.keys(_types.ReviewStates)),teacherFeedbackNew:_propTypes.default.bool.isRequired};studentLevelProgressShape.pages=_propTypes.default.arrayOf(_propTypes.default.shape(studentLevelProgressShape));var studentLevelProgressType=_propTypes.default.shape(studentLevelProgressShape);exports.studentLevelProgressType=studentLevelProgressType;var unitProgressType=_propTypes.default.objectOf(studentLevelProgressType);exports.unitProgressType=unitProgressType;var lessonType=_propTypes.default.shape({name:_propTypes.default.string.isRequired,id:_propTypes.default.number.isRequired,lockable:_propTypes.default.bool.isRequired,lessonNumber:_propTypes.default.number,lesson_plan_html_url:_propTypes.default.string,lesson_feedback_url:_propTypes.default.string,isFocusArea:_propTypes.default.bool.isRequired,description_student:_propTypes.default.string,description_teacher:_propTypes.default.string});exports.lessonType=lessonType;var studentLessonProgressType=_propTypes.default.shape({incompletePercent:_propTypes.default.number.isRequired,imperfectPercent:_propTypes.default.number.isRequired,completedPercent:_propTypes.default.number.isRequired,timeSpent:_propTypes.default.number.isRequired,lastTimestamp:_propTypes.default.number.isRequired});exports.studentLessonProgressType=studentLessonProgressType;var lessonGroupShape={id:_propTypes.default.number,displayName:_propTypes.default.string,bigQuestions:_propTypes.default.string,description:_propTypes.default.string},groupedLessonsType=_propTypes.default.shape({lessonGroup:_propTypes.default.shape(lessonGroupShape),lessons:_propTypes.default.arrayOf(lessonType).isRequired,levelsByLesson:_propTypes.default.arrayOf(_propTypes.default.arrayOf(levelWithProgressType)).isRequired});exports.groupedLessonsType=groupedLessonsType},"./src/util/color.js":module=>{module.exports={black:"#000",background_black:"#121416",dark_gray:"#2D3139",darkest_gray:"#292F36",dark_slate_gray:"#282c34",darkest_slate_gray:"#25292d",dark_charcoal:"#4d575f",charcoal:"#5b6770",light_gray:"#949ca2",lighter_gray:"#c6cacd",lightest_gray:"#e7e8ea",background_gray:"#f2f2f2",dimgray:"#696969",white:"#fff",default_blue:"#3670b3",dark_teal:"#0094a3",teal:"#0093a4",applab_button_teal:"#1abc9c",light_teal:"#59cad3",lightish_teal:"#80d6de",lighter_teal:"#a6e3e8",lightest_teal:"#d9f3f5",ai_rubric_cyan:"#3cfff8",purple:"#8c52ba",light_purple:"#a69bc1",lighter_purple:"#cfc9de",lightest_purple:"#ebe8f1",cyan:"#0094ca",light_cyan:"#59b9dc",lighter_cyan:"#a6daed",lightest_cyan:"#d9eff7",almost_white_cyan:"#f5fcff",orange:"#ffa400",light_orange:"#ffc459",lighter_orange:"#ffe0a6",lightest_orange:"#fff2d9",dark_orange:"#ff8600",green:"#b9bf15",light_green:"#d1d567",lighter_green:"#e7e9ad",lightest_green:"#f5f5dc",highlight_green:"#8afc9b",yellow:"#ffb81d",light_yellow:"#ffdb74",lighter_yellow:"#ffebb5",lightest_yellow:"#fff7df",goldenrod:"#daa520",header_text:"#fff",bkgnd_color:"#0093a4",inset_color:"#c6cacd",dark_color:"#8c52ba",hdr_color:"#8c52ba",red:"#c00",lightest_red:"#fcc",dark_red:"#d62911",realgreen:"#008000",realyellow:"#ff0",mustardyellow:"#efcd1c",twitter_blue:"#00aced",facebook_blue:"#3b5998",linkedin_blue:"#0077B5",dark_blue:"#00647f",blockly_flyout_gray:"#ddd",default_text:"#333",border_gray:"#bbb",border_light_gray:"#d8d8d8",table_header:"#ececec",table_light_row:"#fcfcfc",table_dark_row:"#f4f4f4",level_submitted:"#8c52ba",level_perfect:"rgb(14, 190, 14)",level_passed:"rgb(159, 212, 159)",level_attempted:"#ff0",level_not_tried:"#fefefe",level_current:"#ffa400",level_review_rejected:"#c00",level_review_accepted:"rgb(11, 142, 11)",assessment:"#0094ca",workspace_running_background:"#e5e5e5",dark_purple:"#682A77",bright_green:"#0ebe0e",neon_pink:"#e9118f",link_color:"#0596ce",shadow:"rgba(0, 0, 0, 0.3)",bootstrap_button_blue:"#337ab7",bootstrap_button_red:"#d9534f",bootstrap_error_background:"#f2dede",bootstrap_error_text:"#b94a48",bootstrap_v3_error_text:"#a94442",bootstrap_error_border:"#ebccd1",bootstrap_warning_background:"#fcf8e3",bootstrap_warning_text:"#c09853",bootstrap_warning_border:"#faebcc",bootstrap_border_color:"#cccccc",bootstrap_success_background:"#dff0d8",bootstrap_success_text:"#468847",bootstrap_success_border:"#d6e9c6",droplet_light_green:"#d3e965",droplet_blue:"#64b5f6",droplet_bright_blue:"#19c3e1",droplet_yellow:"#fff176",droplet_orange:"#ffb74d",droplet_red:"#f78183",droplet_cyan:"#4dd0e1",droplet_pink:"#f57ac6",droplet_purple:"#bb77c7",droplet_green:"#68d995",droplet_white:"#fff",oceans_deep_blue:"rgb(2, 0, 28)",dark_black:"#121212",brand_primary_light:"#ABDFE5",brand_primary_default:"#009EB0",brand_primary_dark:"#008291",brand_secondary_light:"#E0D1EC",brand_secondary_default:"#8C52BA",brand_secondary_dark:"#6F488E",brand_accent_default:"#ED6060",brand_teal_5:"#DFF2F4",product_affirmative_default:"#3EA33E",product_negative_light:"#FDEBE9",product_negative_default:"#E5311A",product_negative_dark:"#AA2513",product_caution_default:"#F9CB28",product_information_default:"#007ACC",neutral_white:"#FFFFFF",neutral_light:"#F7F8FA",neutral_dark10:"#EAEBEB",neutral_dark20:"#D4D5D7",neutral_dark30:"#BFC1C3",neutral_dark40:"#A9ACAF",neutral_dark50:"#94979B",neutral_dark60:"#7F8286",neutral_dark70:"#6A6E73",neutral_dark80:"#54595E",neutral_dark90:"#3F444B",neutral_dark:"#292F36",google_brand_color:"#0F9D58",microsoft_brand_color:"#FFB900",facebook_brand_color:"#3B5998",light_primary_100:"#ABDFE5",light_primary_500:"#0093A4",light_primary_700:"#008291",light_secondary_100:"#E2D4EE",light_secondary_500:"#8C52BA",light_secondary_700:"#6F488E",light_gray_50:"#F7F8FA",light_gray_100:"#EAEBEB",light_gray_200:"#D4D5D7",light_gray_300:"#BFC1C3",light_gray_500:"#94979B",light_gray_700:"#6A6E73",light_gray_800:"#54595E",light_gray_900:"#3F444B",light_affirmative_100:"#E2F1E2",light_affirmative_500:"#3EA33E",light_negative_500:"#E5311A",light_caution_500:"#F9CB28",light_info_100:"#DCEFFB",light_info_500:"#1892E3",light_white:"#FFFFFF",light_black:"#292F36"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMxQix5QkFBNEIsVUFDNUIsc0JBQXlCLFVBQ3pCLHdCQUEyQixVQUMzQiw0QkFBK0IsVUFDL0IsY0FBaUIsVUFDakIsY0FBaUIsVUFDakIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsYUFBZ0IsVUFDaEIsbUJBQXNCLFVBQ3RCLHNCQUF5QixVQUN6QixxQkFBd0IsVUFDeEIsa0JBQXFCLFVBQ3JCLGtCQUFxQixVQUNyQixrQkFBcUIsVUFDckIsb0JBQXVCLFVBQ3ZCLG9CQUF1QixVQUN2QixvQkFBdUIsVUFDdkIsY0FBaUIsVUFDakIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsZUFBa0IsVUFDbEIsc0JBQXlCLFVBQ3pCLHNCQUF5QixVQUN6QixtQkFBc0IsVUFDdEIsa0JBQXFCLFVBQ3JCLGVBQWtCLFVBQ2xCLGVBQWtCLFVBQ2xCLFlBQWUsVUFDZixZQUFlLFUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvY29kZS1zdHVkaW8vYWN0aXZpdHlVdGlscy5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvY29kZS1zdHVkaW8vaGlkZGVuTGVzc29uUmVkdXguanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2NvZGUtc3R1ZGlvL2xlc3NvbkxvY2tSZWR1eC5qcyIsIndlYnBhY2s6Ly9ibG9ja2x5LW1vb2MvLi9zcmMvY29kZS1zdHVkaW8vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL2NvZGUtc3R1ZGlvL3ZpZXdBc1JlZHV4LmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy9mb250Q29uc3RhbnRzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy90ZW1wbGF0ZXMvZmVlZGJhY2svdHlwZXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9wcm9ncmVzcy9wcm9ncmVzc0hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tseS1tb29jLy4vc3JjL3RlbXBsYXRlcy9wcm9ncmVzcy9wcm9ncmVzc1R5cGVzLmpzIiwid2VicGFjazovL2Jsb2NrbHktbW9vYy8uL3NyYy91dGlsL2NvbG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBzZXQgb2YgdXRpbGl0eSBmdW5jdGlvbnMgbWFkZSBmb3IgZGVhbGluZyB3aXRoIGFjdGl2aXRpZXMgZWFzaWVyLlxuICovXG5cbmltcG9ydCB7VGVzdFJlc3VsdHN9IGZyb20gJ0BjZG8vYXBwcy9jb25zdGFudHMnO1xuaW1wb3J0IHtMZXZlbFN0YXR1c30gZnJvbSAnQGNkby9hcHBzL3V0aWwvc2hhcmVkQ29uc3RhbnRzJztcblxuLyoqXG4gKiBTZWUgQXBwbGljYXRpb25IZWxwZXIjYWN0aXZpdHlfY3NzX2NsYXNzLlxuICogQHBhcmFtIHJlc3VsdFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgYWN0aXZpdHlDc3NDbGFzcyA9IHJlc3VsdCA9PiB7XG4gIGlmICghcmVzdWx0IHx8IHJlc3VsdCA9PT0gVGVzdFJlc3VsdHMuTk9fVEVTVFNfUlVOKSB7XG4gICAgcmV0dXJuIExldmVsU3RhdHVzLm5vdF90cmllZDtcbiAgfVxuICBpZiAocmVzdWx0ID09PSBUZXN0UmVzdWx0cy5SRVZJRVdfQUNDRVBURURfUkVTVUxUKSB7XG4gICAgcmV0dXJuIExldmVsU3RhdHVzLnJldmlld19hY2NlcHRlZDtcbiAgfVxuICBpZiAocmVzdWx0ID09PSBUZXN0UmVzdWx0cy5SRVZJRVdfUkVKRUNURURfUkVTVUxUKSB7XG4gICAgcmV0dXJuIExldmVsU3RhdHVzLnJldmlld19yZWplY3RlZDtcbiAgfVxuICBpZiAocmVzdWx0ID09PSBUZXN0UmVzdWx0cy5TVUJNSVRURURfUkVTVUxUKSB7XG4gICAgcmV0dXJuIExldmVsU3RhdHVzLnN1Ym1pdHRlZDtcbiAgfVxuICBpZiAocmVzdWx0ID49IFRlc3RSZXN1bHRzLk1JTklNVU1fT1BUSU1BTF9SRVNVTFQpIHtcbiAgICByZXR1cm4gTGV2ZWxTdGF0dXMucGVyZmVjdDtcbiAgfVxuICBpZiAocmVzdWx0ID49IFRlc3RSZXN1bHRzLk1JTklNVU1fUEFTU19SRVNVTFQpIHtcbiAgICByZXR1cm4gTGV2ZWxTdGF0dXMucGFzc2VkO1xuICB9XG4gIHJldHVybiBMZXZlbFN0YXR1cy5hdHRlbXB0ZWQ7XG59O1xuXG4vKipcbiAqIEludmVyc2Ugb2YgdGhlIGFib3ZlIGZ1bmN0aW9uLlxuICogR2l2ZW4gYSBzdGF0dXMgc3RyaW5nLCByZXR1cm5zIGEgcmVzdWx0IHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1c1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgcmVzdWx0RnJvbVN0YXR1cyA9IHN0YXR1cyA9PiB7XG4gIGlmIChzdGF0dXMgPT09IExldmVsU3RhdHVzLnJldmlld19hY2NlcHRlZCkge1xuICAgIHJldHVybiBUZXN0UmVzdWx0cy5SRVZJRVdfQUNDRVBURURfUkVTVUxUO1xuICB9XG4gIGlmIChzdGF0dXMgPT09IExldmVsU3RhdHVzLnJldmlld19yZWplY3RlZCkge1xuICAgIHJldHVybiBUZXN0UmVzdWx0cy5SRVZJRVdfUkVKRUNURURfUkVTVUxUO1xuICB9XG4gIGlmIChzdGF0dXMgPT09IExldmVsU3RhdHVzLnN1Ym1pdHRlZCkge1xuICAgIHJldHVybiBUZXN0UmVzdWx0cy5TVUJNSVRURURfUkVTVUxUO1xuICB9XG4gIGlmIChzdGF0dXMgPT09IExldmVsU3RhdHVzLmZyZWVfcGxheV9jb21wbGV0ZSkge1xuICAgIHJldHVybiBUZXN0UmVzdWx0cy5GUkVFX1BMQVk7XG4gIH1cbiAgaWYgKHN0YXR1cyA9PT0gTGV2ZWxTdGF0dXMucGVyZmVjdCkge1xuICAgIHJldHVybiBUZXN0UmVzdWx0cy5BTExfUEFTUztcbiAgfVxuICBpZiAoc3RhdHVzID09PSBMZXZlbFN0YXR1cy5wYXNzZWQpIHtcbiAgICByZXR1cm4gVGVzdFJlc3VsdHMuTUlOSU1VTV9QQVNTX1JFU1VMVDtcbiAgfVxuICByZXR1cm4gVGVzdFJlc3VsdHMuTk9fVEVTVFNfUlVOO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBcImJlc3RcIiBvZiB0aGUgdHdvIHJlc3VsdHMsIGFzIGRlZmluZWQgaW4gYXBwcy9zcmMvY29uc3RhbnRzLmpzLlxuICogTm90ZSB0aGF0IHRoZXJlIGFyZSBuZWdhdGl2ZSByZXN1bHRzIHRoYXQgY291bnQgYXMgYW4gYXR0ZW1wdCwgc28gd2UgY2FuJ3RcbiAqIGp1c3QgdGFrZSB0aGUgbWF4aW11bS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBhXG4gKiBAcGFyYW0ge051bWJlcn0gYlxuICogQHJldHVybiB7TnVtYmVyfSBUaGUgYmV0dGVyIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGNvbnN0IG1lcmdlQWN0aXZpdHlSZXN1bHQgPSAoYSwgYikgPT4ge1xuICBhID0gYSB8fCAwO1xuICBiID0gYiB8fCAwO1xuICBpZiAoYSA9PT0gMCkge1xuICAgIHJldHVybiBiO1xuICB9XG4gIGlmIChiID09PSAwKSB7XG4gICAgcmV0dXJuIGE7XG4gIH1cbiAgcmV0dXJuIE1hdGgubWF4KGEsIGIpO1xufTtcbiIsIi8qKlxuICogUmVkdWNlciBhbmQgYWN0aW9ucyB1c2VkIHRvIHRyYWNrIHdoYXQgc2VjdGlvbnMvc2NyaXB0cyBhcmUgYXJlIGhpZGRlbiBvbiBhXG4gKiBwZXIgc2VjdGlvbiBiYXNpcy5cbiAqL1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBJbW11dGFibGUgZnJvbSAnaW1tdXRhYmxlJztcblxuY29uc3QgU0VUX0hJRERFTl9MRVNTT05TID0gJ2hpZGRlbkxlc3Nvbi9TRVRfSElEREVOX0xFU1NPTlMnO1xuY29uc3QgVVBEQVRFX0hJRERFTl9MRVNTT04gPSAnaGlkZGVuTGVzc29uL1VQREFURV9ISURERU5fTEVTU09OJztcbmNvbnN0IFVQREFURV9ISURERU5fU0NSSVBUID0gJ2hpZGRlbkxlc3Nvbi9VUERBVEVfSElEREVOX1NDUklQVCc7XG5cbmV4cG9ydCBjb25zdCBTVFVERU5UX1NFQ1RJT05fSUQgPSAnU1RVREVOVCc7XG5cbmNvbnN0IEhpZGRlblN0YXRlID0gSW1tdXRhYmxlLlJlY29yZCh7XG4gIGhpZGRlbkxlc3NvbnNJbml0aWFsaXplZDogZmFsc2UsXG4gIGhpZGVhYmxlTGVzc29uc0FsbG93ZWQ6IGZhbHNlLFxuICAvLyBBIG1hcHBpbmcsIHdoZXJlIHRoZSBrZXkgaXMgdGhlIHNlY3Rpb25JZCwgYW5kIHRoZSB2YWx1ZSBpcyBhIG1hcHBpbmcgZnJvbVxuICAvLyBsZXNzb25JZCB0byBhIGJvb2wgaW5kaWNhdGluZyB3aGV0aGVyIHRoYXQgbGVzc29uIGlzIGhpZGRlbiAodHJ1ZSkgb3Igbm90IChmYWxzZSlcbiAgLy8gVGVhY2hlcnMgd2lsbCBwb3RlbnRpYWxseSBoYXZlIGEgbnVtYmVyIG9mIHNlY3Rpb24gaWRzLiBGb3Igc3R1ZGVudHMgd2VcbiAgLy8gdXNlIGEgc2VjdGlvbklkIG9mIFNUVURFTlRfU0VDVElPTl9JRCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgaGlkZGVuIHN0YXRlXG4gIC8vIGZvciB0aGUgc3R1ZGVudCBiYXNlZCBvbiB0aGUgc2VjdGlvbnMgdGhleSBhcmUgaW4uXG4gIGxlc3NvbnNCeVNlY3Rpb246IEltbXV0YWJsZS5NYXAoe1xuICAgIC8vIFtzZWN0aW9uSWRdOiB7XG4gICAgLy8gICBbbGVzc29uSWRdOiB0cnVlXG4gICAgLy8gfVxuICB9KSxcbiAgLy8gU2FtZSBhcyBhYm92ZSBidXQgZm9yIGhpZGluZyBzY3JpcHRzIGluIGEgc2VjdGlvbiBpbnN0ZWFkIG9mIGxlc3NvbnNcbiAgc2NyaXB0c0J5U2VjdGlvbjogSW1tdXRhYmxlLk1hcCh7XG4gICAgLy8gW3NlY3Rpb25JZF06IHtcbiAgICAvLyAgIFtzY3JpcHRJZF06IHRydWVcbiAgICAvLyB9XG4gIH0pLFxufSk7XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgd2UgbmV2ZXIgaGF2ZSBtdWx0aXBsZSBsZXNzb25zQnlTZWN0aW9uIGlmIHdlIGhhdmUgU1RVREVOVF9TRUNUSU9OX0lEXG4gKiBAdGhyb3dzIElmIG5ldyBzdGF0ZSBpcyBpbnZhbGlkXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlU2VjdGlvbklkcyhzdGF0ZSkge1xuICBpZiAoXG4gICAgc3RhdGUuZ2V0SW4oWydsZXNzb25zQnlTZWN0aW9uJywgU1RVREVOVF9TRUNUSU9OX0lEXSkgJiZcbiAgICBzdGF0ZS5nZXQoJ2xlc3NvbnNCeVNlY3Rpb24nKS5zaXplID4gMVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnU2hvdWxkIG5ldmVyIGhhdmUgU1RVREVOVF9TRUNUSU9OX0lEIGFsb25nc2lkZSBvdGhlciBzZWN0aW9uSWRzJ1xuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBIaWRkZW4gbGVzc29uIHJlZHVjZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSA9IG5ldyBIaWRkZW5TdGF0ZSgpLCBhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi50eXBlID09PSBTRVRfSElEREVOX0xFU1NPTlMpIHtcbiAgICBjb25zdCB7aGlkZGVuTGVzc29uc1BlclNlY3Rpb24sIGhpZGVhYmxlTGVzc29uc0FsbG93ZWR9ID0gYWN0aW9uO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggc2VjdGlvblxuICAgIGNvbnN0IHNlY3Rpb25JZHMgPSBPYmplY3Qua2V5cyhoaWRkZW5MZXNzb25zUGVyU2VjdGlvbik7XG4gICAgbGV0IG5leHRTdGF0ZSA9IHN0YXRlO1xuICAgIHNlY3Rpb25JZHMuZm9yRWFjaChzZWN0aW9uSWQgPT4ge1xuICAgICAgLy8gQW5kIGl0ZXJhdGUgdGhyb3VnaCBlYWNoIGhpZGRlbiBsZXNzb24gd2l0aGluIHRoYXQgc2VjdGlvblxuICAgICAgY29uc3QgaGlkZGVuTGVzc29uSWRzID0gaGlkZGVuTGVzc29uc1BlclNlY3Rpb25bc2VjdGlvbklkXTtcbiAgICAgIGhpZGRlbkxlc3Nvbklkcy5mb3JFYWNoKGxlc3NvbklkID0+IHtcbiAgICAgICAgbmV4dFN0YXRlID0gbmV4dFN0YXRlLnNldEluKFxuICAgICAgICAgIFsnbGVzc29uc0J5U2VjdGlvbicsIHNlY3Rpb25JZCwgbGVzc29uSWQudG9TdHJpbmcoKV0sXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFsaWRhdGVTZWN0aW9uSWRzKG5leHRTdGF0ZSk7XG5cbiAgICByZXR1cm4gbmV4dFN0YXRlLm1lcmdlKHtcbiAgICAgIGhpZGRlbkxlc3NvbnNJbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIGhpZGVhYmxlTGVzc29uc0FsbG93ZWQsXG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09IFVQREFURV9ISURERU5fTEVTU09OKSB7XG4gICAgY29uc3Qge3NlY3Rpb25JZCwgbGVzc29uSWQsIGhpZGRlbn0gPSBhY3Rpb247XG4gICAgY29uc3QgbmV4dFN0YXRlID0gc3RhdGUuc2V0SW4oXG4gICAgICBbJ2xlc3NvbnNCeVNlY3Rpb24nLCBzZWN0aW9uSWQsIGxlc3NvbklkLnRvU3RyaW5nKCldLFxuICAgICAgaGlkZGVuXG4gICAgKTtcbiAgICB2YWxpZGF0ZVNlY3Rpb25JZHMobmV4dFN0YXRlKTtcbiAgICByZXR1cm4gbmV4dFN0YXRlO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSBVUERBVEVfSElEREVOX1NDUklQVCkge1xuICAgIGNvbnN0IHtzZWN0aW9uSWQsIHNjcmlwdElkLCBoaWRkZW59ID0gYWN0aW9uO1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IHN0YXRlLnNldEluKFxuICAgICAgWydzY3JpcHRzQnlTZWN0aW9uJywgc2VjdGlvbklkLnRvU3RyaW5nKCksIHNjcmlwdElkLnRvU3RyaW5nKCldLFxuICAgICAgaGlkZGVuXG4gICAgKTtcbiAgICB2YWxpZGF0ZVNlY3Rpb25JZHMobmV4dFN0YXRlKTtcbiAgICByZXR1cm4gbmV4dFN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vLyBhY3Rpb24gY3JlYXRvcnNcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gaGlkZGVuTGVzc29uc1BlclNlY3Rpb24gLSBNYXBwaW5nIGZyb20gc2VjdGlvbklkIHRvIGEgbGlzdCBvZiBsZXNzb25JZHNcbiAqICAgdGhhdCBhcmUgaGlkZGVuIGZvciB0aGF0IHNlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2x9IGhpZGVhYmxlTGVzc29uc0FsbG93ZWQgLSBUcnVlIGlmIHdlJ3JlIGFibGUgdG8gdG9nZ2xlIGhpZGRlbiBsZXNzb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRIaWRkZW5MZXNzb25zKFxuICBoaWRkZW5MZXNzb25zUGVyU2VjdGlvbixcbiAgaGlkZWFibGVMZXNzb25zQWxsb3dlZFxuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0VUX0hJRERFTl9MRVNTT05TLFxuICAgIGhpZGRlbkxlc3NvbnNQZXJTZWN0aW9uLFxuICAgIGhpZGVhYmxlTGVzc29uc0FsbG93ZWQsXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlSGlkZGVuTGVzc29uKHNlY3Rpb25JZCwgbGVzc29uSWQsIGhpZGRlbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFVQREFURV9ISURERU5fTEVTU09OLFxuICAgIHNlY3Rpb25JZCxcbiAgICBsZXNzb25JZCxcbiAgICBoaWRkZW4sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVIaWRkZW5TY3JpcHQoc2VjdGlvbklkLCBzY3JpcHRJZCwgaGlkZGVuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogVVBEQVRFX0hJRERFTl9TQ1JJUFQsXG4gICAgc2VjdGlvbklkLFxuICAgIHNjcmlwdElkLFxuICAgIGhpZGRlbixcbiAgfTtcbn1cblxuLyoqXG4gKiBUb2dnbGUgdGhlIGhpZGRlbiBzdGF0ZSBvZiBhIHBhcnRpY3VsYXIgbGVzc29uIGluIGEgc2VjdGlvbiwgdXBkYXRpbmcgb3VyIGxvY2FsXG4gKiBzdGF0ZSB0byByZWZsZWN0IHRoZSBjaGFuZ2UsIGFuZCBwb3N0aW5nIHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVIaWRkZW5MZXNzb24oc2NyaXB0TmFtZSwgc2VjdGlvbklkLCBsZXNzb25JZCwgaGlkZGVuKSB7XG4gIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgLy8gdXBkYXRlIGxvY2FsIHN0YXRlXG4gICAgZGlzcGF0Y2godXBkYXRlSGlkZGVuTGVzc29uKHNlY3Rpb25JZCwgbGVzc29uSWQsIGhpZGRlbikpO1xuICAgIHBvc3RUb2dnbGVIaWRkZW4oc2NyaXB0TmFtZSwgc2VjdGlvbklkLCBsZXNzb25JZCwgaGlkZGVuKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUb2dnbGUgdGhlIGhpZGRlbiBzdGF0ZSBvZiBhIHBhcnRpY3VsYXIgc2NyaXB0IGluIGEgc2VjdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZUhpZGRlblNjcmlwdChzY3JpcHROYW1lLCBzZWN0aW9uSWQsIHNjcmlwdElkLCBoaWRkZW4pIHtcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICBkaXNwYXRjaCh1cGRhdGVIaWRkZW5TY3JpcHQoc2VjdGlvbklkLCBzY3JpcHRJZCwgaGlkZGVuKSk7XG4gICAgcG9zdFRvZ2dsZUhpZGRlbihzY3JpcHROYW1lLCBzZWN0aW9uSWQsIG51bGwsIGhpZGRlbik7XG4gIH07XG59XG5cbi8qKlxuICogUG9zdCB0byB0aGUgc2VydmVyIHRvIHRvZ2dsZSB0aGUgaGlkZGVuIHN0YXRlIG9mIGEgbGVzc29uIG9yIHNjcmlwdC4gbGVzc29uSWRcbiAqIHNob3VsZCBiZSBudWxsIGlmIHdlJ3JlIGhpZGluZyB0aGUgc2NyaXB0IHJhdGhlciB0aGFuIGEgcGFydGljdWxhciBsZXNzb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBzY3JpcHROYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VjdGlvbklkXG4gKiBAcGFyYW0ge3N0cmluZ30gbGVzc29uSWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIHBvc3RUb2dnbGVIaWRkZW4oc2NyaXB0TmFtZSwgc2VjdGlvbklkLCBsZXNzb25JZCwgaGlkZGVuKSB7XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgc2VjdGlvbl9pZDogc2VjdGlvbklkLFxuICAgIGhpZGRlbixcbiAgfTtcbiAgaWYgKGxlc3NvbklkKSB7XG4gICAgZGF0YS5zdGFnZV9pZCA9IGxlc3NvbklkO1xuICB9XG5cbiAgJC5hamF4KHtcbiAgICB0eXBlOiAnUE9TVCcsXG4gICAgdXJsOiBgL3MvJHtzY3JpcHROYW1lfS90b2dnbGVfaGlkZGVuYCxcbiAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gIH0pLnN1Y2Nlc3MoKCkgPT4ge1xuICAgIHdpbmRvdy5fX1Rlc3RJbnRlcmZhY2UgPSB3aW5kb3cuX19UZXN0SW50ZXJmYWNlIHx8IHt9O1xuICAgIHdpbmRvdy5fX1Rlc3RJbnRlcmZhY2UudG9nZ2xlSGlkZGVuVW5pdENvbXBsZXRlID0gdHJ1ZTtcbiAgfSk7XG59XG5cbi8qKlxuICogUXVlcnkgc2VydmVyIGZvciBoaWRkZW4gbGVzc29uIGlkcywgYW5kIChwb3RlbnRpYWxseSkgdG9nZ2xlIHdoZXRoZXIgb3Igbm90IHdlXG4gKiBhcmUgYWJsZSB0byBtYXJrIGxlc3NvbnMgYXMgaGlkZWFibGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gc2NyaXB0TmFtZVxuICogQHBhcmFtIHtib29sZWFufSBjYW5IaWRlTGVzc29ucyBJZiB0cnVlLCBpbmZvcm0gcmVkdXggdGhhdCB3ZSdyZSBhYmxlIHRvIHRvZ2dsZVxuICogICB3aGV0aGVyIG9yIG5vdCBsZXNzb25zIGFyZSBoaWRkZW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRIaWRkZW5MZXNzb25zKHNjcmlwdE5hbWUsIGNhbkhpZGVMZXNzb25zKSB7XG4gIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgJC5hamF4KHtcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBgL3MvJHtzY3JpcHROYW1lfS9oaWRkZW5fbGVzc29uc2AsXG4gICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICB9KVxuICAgICAgLmRvbmUocmVzcG9uc2UgPT5cbiAgICAgICAgZGlzcGF0Y2goaW5pdGlhbGl6ZUhpZGRlbkxlc3NvbnMocmVzcG9uc2UsIGNhbkhpZGVMZXNzb25zKSlcbiAgICAgIClcbiAgICAgIC5mYWlsKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpO1xuICB9O1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgaGlkZGVuIGxlc3NvbnMgYmFzZWQgb24gc2VydmVyIGRhdGEuIEluIHRoZSBjYXNlIG9mIGEgc3R1ZGVudCwgdGhpc1xuICogd2lsbCBiZSBhIGxpc3Qgb2YgaGlkZGVuIGxlc3NvbiBpZHMuIEluIHRoZSBjYXNlIG9mIGEgdGVhY2hlciwgaXQgd2lsbCBiZVxuICogYSBtYXBwaW5nIGZyb20gc2VjdGlvbiBpZCB0byBhIGxpc3Qgb2YgaGlkZGVuIGxlc3NvbiBpZHMgZm9yIHRoYXQgc2VjdGlvblxuICogQHBhcmFtIHtzdHJpbmdbXXxPYmplY3Q8c3RyaW5nLCBzdHJpbmdbXT59IGRhdGFcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FuSGlkZUxlc3NvbnMgLSBUcnVlIGlmIHdlJ3JlIGFibGUgdG8gdG9nZ2xlIGhpZGRlbiBsZXNzb25zXG4gKi9cbmZ1bmN0aW9uIGluaXRpYWxpemVIaWRkZW5MZXNzb25zKGRhdGEsIGNhbkhpZGVMZXNzb25zKSB7XG4gIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgLy8gRm9yIGEgaW5zdHJ1Y3Rvciwgd2UgZ2V0IGJhY2sgYSBtYXAgb2Ygc2VjdGlvbiBpZCB0byBoaWRkZW4gbGVzc29uIGlkc1xuICAgIC8vIEZvciBhIHBhcnRpY2lwYW50LCB3ZSBqdXN0IGdldCBiYWNrIGEgbGlzdCBvZiBoaWRkZW4gbGVzc29uIGlkcy4gVHVybiB0aGF0XG4gICAgLy8gaW50byBhbiBvYmplY3QsIHVuZGVyIHRoZSAnc2VjdGlvbklkJyBvZiBTVFVERU5UX1NFQ1RJT05fSURcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgZGF0YSA9IHtbU1RVREVOVF9TRUNUSU9OX0lEXTogZGF0YX07XG4gICAgfVxuXG4gICAgZGlzcGF0Y2goc2V0SGlkZGVuTGVzc29ucyhkYXRhLCAhIWNhbkhpZGVMZXNzb25zKSk7XG4gIH07XG59XG5cbi8qKlxuICogR2l2ZW4gc2VydmVyIGRhdGEgZm9yIHRoZSBzZXQgb2Ygc2NyaXB0cyB0aGF0IGFyZSBoaWRkZW4gZm9yIHRoaXMgdXNlcixcbiAqIHBvcHVsYXRlIG91ciByZWR1eCBzdG9yZS5cbiAqIEBwYXJhbSB7c3RyaW5nW118T2JqZWN0PHN0cmluZywgc3RyaW5nW10+fSBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplSGlkZGVuU2NyaXB0cyhkYXRhKSB7XG4gIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRm9yIGEgdGVhY2hlciwgd2UgZ2V0IGJhY2sgYSBtYXAgb2Ygc2VjdGlvbiBpZCB0byBoaWRkZW4gc2NyaXB0IGlkc1xuICAgIC8vIEZvciBhIHN0dWRlbnQsIHdlIGp1c3QgZ2V0IGJhY2sgYSBsaXN0IG9mIGhpZGRlbiBzY3JpcHQgaWRzLiBUdXJuIHRoYXRcbiAgICAvLyBpbnRvIGFuIG9iamVjdCwgdW5kZXIgdGhlICdzZWN0aW9uSWQnIG9mIFNUVURFTlRfU0VDVElPTl9JRFxuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBkYXRhID0ge1tTVFVERU5UX1NFQ1RJT05fSURdOiBkYXRhfTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKHNlY3Rpb25JZCA9PiB7XG4gICAgICBjb25zdCBoaWRkZW5TY3JpcHRJZHMgPSBkYXRhW3NlY3Rpb25JZF07XG4gICAgICBoaWRkZW5TY3JpcHRJZHMuZm9yRWFjaChzY3JpcHRJZCA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHVwZGF0ZUhpZGRlblNjcmlwdChzZWN0aW9uSWQsIHNjcmlwdElkLCB0cnVlKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn1cblxuLy8gdXRpbHNcblxuLyoqXG4gKiBIZWxwZXIgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBsZXNzb24gaXMgaGlkZGVuIGZvciBhIGdpdmVuIHNlY3Rpb24uIElmIG5vXG4gKiBzZWN0aW9uIGlzIGdpdmVuLCB3ZSBhc3N1bWUgdGhpcyBpcyBhIHN0dWRlbnQgYW5kIHVzZSBTVFVERU5UX1NFQ1RJT05fSURcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGVzc29uSGlkZGVuRm9yU2VjdGlvbihzdGF0ZSwgc2VjdGlvbklkLCBsZXNzb25JZCkge1xuICByZXR1cm4gaXNIaWRkZW5Gb3JTZWN0aW9uKHN0YXRlLCBzZWN0aW9uSWQsIGxlc3NvbklkLCAnbGVzc29uc0J5U2VjdGlvbicpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBkZXRlcm1pbmUgd2hldGhlciBhIHNjcmlwdCBpcyBoaWRkZW4gZm9yIGEgZ2l2ZW4gc2VjdGlvbi4gSWYgbm9cbiAqIHNlY3Rpb24gaXMgZ2l2ZW4sIHdlIGFzc3VtZSB0aGlzIGlzIGEgc3R1ZGVudCBhbmQgdXNlIFNUVURFTlRfU0VDVElPTl9JRFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTY3JpcHRIaWRkZW5Gb3JTZWN0aW9uKHN0YXRlLCBzZWN0aW9uSWQsIHNjcmlwdElkKSB7XG4gIHJldHVybiBpc0hpZGRlbkZvclNlY3Rpb24oc3RhdGUsIHNlY3Rpb25JZCwgc2NyaXB0SWQsICdzY3JpcHRzQnlTZWN0aW9uJyk7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgYnkgdGhlIGFib3ZlIHR3byBtZXRob2RzIHNvIHRoYXQgd2UgYmVoYXZlIHRoZSBzYW1lIHdoZW4gbG9va2luZ1xuICogZm9yIGhpZGRlbiBsZXNzb25zL3NjcmlwdHNcbiAqL1xuZnVuY3Rpb24gaXNIaWRkZW5Gb3JTZWN0aW9uKHN0YXRlLCBzZWN0aW9uSWQsIGl0ZW1JZCwgYnlTZWN0aW9uS2V5KSB7XG4gIGlmICghaXRlbUlkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGlmIHdlIGRvbid0IGhhdmUgYSBzZWN0aW9uSWQsIHdlIG11c3QgYmUgYSBzdHVkZW50XG4gIGlmICghc2VjdGlvbklkKSB7XG4gICAgc2VjdGlvbklkID0gU1RVREVOVF9TRUNUSU9OX0lEO1xuICB9XG4gIGNvbnN0IGJ5U2VjdGlvbiA9IHN0YXRlLmdldChieVNlY3Rpb25LZXkpO1xuICByZXR1cm4gISFieVNlY3Rpb24uZ2V0SW4oW3NlY3Rpb25JZC50b1N0cmluZygpLCBpdGVtSWQudG9TdHJpbmcoKV0pO1xufVxuIiwiLyoqXG4gKiBSZWR1Y2VyIGFuZCBhY3Rpb25zIGZvciBsZXNzb24gbG9jayBpbmZvLiBUaGlzIGluY2x1ZGVzIHRoZSB0ZWFjaGVyIHBhbmVsIG9uXG4gKiB0aGUgY291cnNlIG92ZXJ2aWV3IHBhZ2UsIGFuZCB0aGUgbGVzc29uIGxvY2tpbmcgZGlhbG9nLlxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHttYWtlRW51bX0gZnJvbSAnQGNkby9hcHBzL3V0aWxzJztcblxuaW1wb3J0IHtcbiAgTk9fU0VDVElPTixcbiAgU0VMRUNUX1NFQ1RJT04sXG59IGZyb20gJ0BjZG8vYXBwcy90ZW1wbGF0ZXMvdGVhY2hlckRhc2hib2FyZC90ZWFjaGVyU2VjdGlvbnNSZWR1eCc7XG5cbmV4cG9ydCBjb25zdCBMb2NrU3RhdHVzID0gbWFrZUVudW0oJ0xvY2tlZCcsICdFZGl0YWJsZScsICdSZWFkb25seUFuc3dlcnMnKTtcblxuLy8gQWN0aW9uIHR5cGVzXG5jb25zdCBPUEVOX0xPQ0tfRElBTE9HID0gJ2xlc3NvbkxvY2svT1BFTl9MT0NLX0RJQUxPRyc7XG5leHBvcnQgY29uc3QgQ0xPU0VfTE9DS19ESUFMT0cgPSAnbGVzc29uTG9jay9DTE9TRV9MT0NLX0RJQUxPRyc7XG5leHBvcnQgY29uc3QgQkVHSU5fU0FWRSA9ICdsZXNzb25Mb2NrL0JFR0lOX1NBVkUnO1xuZXhwb3J0IGNvbnN0IEZJTklTSF9TQVZFID0gJ2xlc3NvbkxvY2svRklOSVNIX1NBVkUnO1xuY29uc3QgQVVUSE9SSVpFX0xPQ0tBQkxFID0gJ2xlc3NvbkxvY2svQVVUSE9SSVpFX0xPQ0tBQkxFJztcbmNvbnN0IFNFVF9TRUNUSU9OX0xPQ0tfU1RBVFVTID0gJ2xlc3NvbkxvY2svU0VUX1NFQ1RJT05fTE9DS19TVEFUVVMnO1xuY29uc3QgUkVGUkVTSF9TRUNUSU9OX0xPQ0tfU1RBVFVTID0gJ2xlc3NvbkxvY2svUkVGUkVTSF9TRUNUSU9OX0xPQ0tfU1RBVFVTJztcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICBsZXNzb25zQnlTZWN0aW9uSWQ6IHt9LFxuICBsZXNzb25zQnlTZWN0aW9uSWRMb2FkZWQ6IGZhbHNlLFxuICBsb2NrRGlhbG9nTGVzc29uSWQ6IG51bGwsXG4gIC8vIFRoZSBsb2NraW5nIGluZm8gZm9yIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgc2VjdGlvbi9sZXNzb25cbiAgbG9ja1N0YXR1czogW10sXG4gIHNhdmluZzogZmFsc2UsXG4gIC8vIHdoZXRoZXIgdXNlciBpcyBhbGxvd2VkIHRvIHNlZSBsb2NrYWJsZSBsZXNzb25zXG4gIGxvY2thYmxlQXV0aG9yaXplZDogbnVsbCxcbiAgbG9ja2FibGVBdXRob3JpemVkTG9hZGVkOiBmYWxzZSxcbn07XG5cbi8qKlxuICogTGVzc29uIGxvY2sgcmVkdWNlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi50eXBlID09PSBBVVRIT1JJWkVfTE9DS0FCTEUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgIGxvY2thYmxlQXV0aG9yaXplZDogYWN0aW9uLmlzQXV0aG9yaXplZCxcbiAgICAgIGxvY2thYmxlQXV0aG9yaXplZExvYWRlZDogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gU0VUX1NFQ1RJT05fTE9DS19TVEFUVVMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uc3RhdGUsXG4gICAgICBsZXNzb25zQnlTZWN0aW9uSWQ6IF8ubWFwVmFsdWVzKFxuICAgICAgICBhY3Rpb24uc2VjdGlvbnMsXG4gICAgICAgIHNlY3Rpb24gPT4gc2VjdGlvbi5sZXNzb25zXG4gICAgICApLFxuICAgICAgbGVzc29uc0J5U2VjdGlvbklkTG9hZGVkOiB0cnVlLFxuICAgIH07XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09IFJFRlJFU0hfU0VDVElPTl9MT0NLX1NUQVRVUykge1xuICAgIGNvbnN0IGxlc3NvbnNCeVNlY3Rpb25JZCA9IF8ubWFwVmFsdWVzKFxuICAgICAgYWN0aW9uLnNlY3Rpb25zLFxuICAgICAgc2VjdGlvbiA9PiBzZWN0aW9uLmxlc3NvbnNcbiAgICApO1xuXG4gICAgY29uc3Qge2xvY2tEaWFsb2dMZXNzb25JZH0gPSBzdGF0ZTtcbiAgICBpZiAobG9ja0RpYWxvZ0xlc3NvbklkKSB7XG4gICAgICBjb25zdCBsb2NrU3RhdHVzID0gbG9ja1N0YXR1c0Zvckxlc3NvbihcbiAgICAgICAgbGVzc29uc0J5U2VjdGlvbklkW2FjdGlvbi5zZWN0aW9uSWRdLFxuICAgICAgICBsb2NrRGlhbG9nTGVzc29uSWRcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsZXNzb25zQnlTZWN0aW9uSWQsXG4gICAgICAgIGxvY2tTdGF0dXMsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi5zdGF0ZSxcbiAgICAgIGxlc3NvbnNCeVNlY3Rpb25JZCxcbiAgICB9O1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSBTRUxFQ1RfU0VDVElPTikge1xuICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW55IHNlY3Rpb24gaW5mbywgaXQgcHJvYmFibHkgbWVhbnMgd2UgaGF2ZW4ndCBsb2FkZWRcbiAgICAvLyBhbnkgbGVzc29uIGxvY2sgZGF0YSBpbiB0aGlzIGNvbnRleHQsIGFuZCB0aHVzIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmdcbiAgICAvLyB3aGVuIGEgc2VjdGlvbiBnZXRzIHNlbGVjdGVkXG4gICAgaWYgKE9iamVjdC5rZXlzKHN0YXRlLmxlc3NvbnNCeVNlY3Rpb25JZCkubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VjdGlvbklkID0gYWN0aW9uLnNlY3Rpb25JZDtcbiAgICBpZiAoc2VjdGlvbklkID09PSBOT19TRUNUSU9OKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9ja1N0YXR1czogaW5pdGlhbFN0YXRlLmxvY2tTdGF0dXMsXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoIXN0YXRlLmxlc3NvbnNCeVNlY3Rpb25JZFtzZWN0aW9uSWRdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gc2VjdGlvbklkICR7c2VjdGlvbklkfWApO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBoYXZlIGEgbG9ja1N0YXR1cyAoaS5lLiBmcm9tIGFuIG9wZW4gZGlhbG9nKSB3ZSBuZWVkIHRvIHVwZGF0ZVxuICAgIC8vIGl0IHdpdGggdGhlIG5ldyBzZWN0aW9uXG4gICAgY29uc3Qge2xvY2tEaWFsb2dMZXNzb25JZH0gPSBzdGF0ZTtcbiAgICBpZiAobG9ja0RpYWxvZ0xlc3NvbklkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9ja1N0YXR1czogbG9ja1N0YXR1c0Zvckxlc3NvbihcbiAgICAgICAgICBzdGF0ZS5sZXNzb25zQnlTZWN0aW9uSWRbc2VjdGlvbklkXSxcbiAgICAgICAgICBsb2NrRGlhbG9nTGVzc29uSWRcbiAgICAgICAgKSxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSBPUEVOX0xPQ0tfRElBTE9HKSB7XG4gICAgY29uc3Qge3NlY3Rpb25JZCwgbGVzc29uSWR9ID0gYWN0aW9uO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgbG9ja0RpYWxvZ0xlc3NvbklkOiBsZXNzb25JZCxcbiAgICAgIGxvY2tTdGF0dXM6IGxvY2tTdGF0dXNGb3JMZXNzb24oXG4gICAgICAgIHN0YXRlLmxlc3NvbnNCeVNlY3Rpb25JZFtzZWN0aW9uSWRdLFxuICAgICAgICBsZXNzb25JZFxuICAgICAgKSxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gQ0xPU0VfTE9DS19ESUFMT0cpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgIGxvY2tEaWFsb2dMZXNzb25JZDogbnVsbCxcbiAgICAgIGxvY2tTdGF0dXM6IGluaXRpYWxTdGF0ZS5sb2NrU3RhdHVzLFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSBCRUdJTl9TQVZFKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICBzYXZpbmc6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09IEZJTklTSF9TQVZFKSB7XG4gICAgY29uc3Qge2xlc3NvbnNCeVNlY3Rpb25JZH0gPSBzdGF0ZTtcbiAgICBjb25zdCB7bG9ja1N0YXR1czogbmV4dExvY2tTdGF0dXMsIHNlY3Rpb25JZCwgbGVzc29uSWR9ID0gYWN0aW9uO1xuICAgIGNvbnN0IG5leHRMZXNzb24gPSBfLmNsb25lRGVlcChsZXNzb25zQnlTZWN0aW9uSWRbc2VjdGlvbklkXVtsZXNzb25JZF0pO1xuXG4gICAgLy8gVXBkYXRlIGxvY2tlZC9yZWFkb25seV9hbnN3ZXJzIGluIGxlc3NvbnMgYmFzZWQgb24gdGhlIG5ldyBsb2NrU3RhdHVzIHByb3ZpZGVkXG4gICAgLy8gYnkgb3VyIGRpYWxvZy5cbiAgICBuZXh0TGVzc29uLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCB1cGRhdGUgPSBuZXh0TG9ja1N0YXR1c1tpbmRleF07XG4gICAgICAvLyBXZSBhc3N1bWUgbG9ja1N0YXR1cyBpcyBvcmRlcmVkIHRoZSBzYW1lIGFzIGxlc3NvblRvVXBkYXRlLiBMZXQnc1xuICAgICAgLy8gdmFsaWRhdGUgdGhhdC5cbiAgICAgIGlmIChpdGVtLnVzZXJfbGV2ZWxfaWQgIT09IHVwZGF0ZS51c2VyTGV2ZWxJZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdCB1c2VyIGlkcyBiZSB0aGUgc2FtZScpO1xuICAgICAgfVxuICAgICAgaXRlbS5sb2NrZWQgPSB1cGRhdGUubG9ja1N0YXR1cyA9PT0gTG9ja1N0YXR1cy5Mb2NrZWQ7XG4gICAgICBpdGVtLnJlYWRvbmx5X2Fuc3dlcnMgPSB1cGRhdGUubG9ja1N0YXR1cyA9PT0gTG9ja1N0YXR1cy5SZWFkb25seUFuc3dlcnM7XG4gICAgfSk7XG5cbiAgICBjb25zdCBuZXh0U3RhdGUgPSBfLmNsb25lRGVlcChzdGF0ZSk7XG4gICAgbmV4dFN0YXRlLmxlc3NvbnNCeVNlY3Rpb25JZFtzZWN0aW9uSWRdW2xlc3NvbklkXSA9IG5leHRMZXNzb247XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV4dFN0YXRlLCB7XG4gICAgICBsb2NrU3RhdHVzOiBuZXh0TG9ja1N0YXR1cyxcbiAgICAgIHNhdmluZzogZmFsc2UsXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8vIEFjdGlvbiBjcmVhdG9yc1xuXG4vKipcbiAqIEF1dGhvcml6ZXMgdGhlIHVzZXIgdG8gYmUgYWJsZSB0byBzZWUgbG9ja2FibGUgbGVzc29uc1xuICovXG5leHBvcnQgY29uc3QgYXV0aG9yaXplTG9ja2FibGUgPSBpc0F1dGhvcml6ZWQgPT4gKHtcbiAgdHlwZTogQVVUSE9SSVpFX0xPQ0tBQkxFLFxuICBpc0F1dGhvcml6ZWQsXG59KTtcblxuZXhwb3J0IGNvbnN0IG9wZW5Mb2NrRGlhbG9nID0gKHNlY3Rpb25JZCwgbGVzc29uSWQpID0+ICh7XG4gIHR5cGU6IE9QRU5fTE9DS19ESUFMT0csXG4gIHNlY3Rpb25JZCxcbiAgbGVzc29uSWQsXG59KTtcblxuZXhwb3J0IGNvbnN0IGJlZ2luU2F2ZSA9ICgpID0+ICh7dHlwZTogQkVHSU5fU0FWRX0pO1xuZXhwb3J0IGNvbnN0IGZpbmlzaFNhdmUgPSAoc2VjdGlvbklkLCBsZXNzb25JZCwgbmV3TG9ja1N0YXR1cykgPT4gKHtcbiAgdHlwZTogRklOSVNIX1NBVkUsXG4gIHNlY3Rpb25JZCxcbiAgbGVzc29uSWQsXG4gIGxvY2tTdGF0dXM6IG5ld0xvY2tTdGF0dXMsXG59KTtcblxuLyoqXG4gKiBBY3Rpb24gYXN5bmNocm9ub3VzbHkgZGlzcGF0Y2hlcyBhIHNldCBvZiBhY3Rpb25zIGFyb3VuZCBzYXZpbmcgb3VyXG4gKiBsb2NrIHN0YXR1cy5cbiAqL1xuY29uc3QgcGVyZm9ybVNhdmUgPSAoc2VjdGlvbklkLCBsZXNzb25JZCwgbmV3TG9ja1N0YXR1cywgb25Db21wbGV0ZSkgPT4ge1xuICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuICAgIGNvbnN0IG9sZExvY2tTdGF0dXMgPSBnZXRTdGF0ZSgpLmxlc3NvbkxvY2subG9ja1N0YXR1cztcblxuICAgIGNvbnN0IHNhdmVEYXRhID0gbmV3TG9ja1N0YXR1c1xuICAgICAgLmZpbHRlcigoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgLy8gT25seSBuZWVkIHRvIHNhdmUgaXRlbXMgdGhhdCBjaGFuZ2VkXG4gICAgICAgIHJldHVybiAhXy5pc0VxdWFsKGl0ZW0sIG9sZExvY2tTdGF0dXNbaW5kZXhdKTtcbiAgICAgIH0pXG4gICAgICAubWFwKGl0ZW0gPT4gKHtcbiAgICAgICAgdXNlcl9sZXZlbF9kYXRhOiBpdGVtLnVzZXJMZXZlbERhdGEsXG4gICAgICAgIGxvY2tlZDogaXRlbS5sb2NrU3RhdHVzID09PSBMb2NrU3RhdHVzLkxvY2tlZCxcbiAgICAgICAgcmVhZG9ubHlfYW5zd2VyczogaXRlbS5sb2NrU3RhdHVzID09PSBMb2NrU3RhdHVzLlJlYWRvbmx5QW5zd2VycyxcbiAgICAgIH0pKTtcblxuICAgIGlmIChzYXZlRGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkaXNwYXRjaChiZWdpblNhdmUoKSk7XG4gICAgJC5hamF4KHtcbiAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgIHVybDogJy9hcGkvbG9ja19zdGF0dXMnLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7dXBkYXRlczogc2F2ZURhdGF9KSxcbiAgICB9KVxuICAgICAgLmRvbmUoKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaChmaW5pc2hTYXZlKHNlY3Rpb25JZCwgbGVzc29uSWQsIG5ld0xvY2tTdGF0dXMpKTtcbiAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgfSlcbiAgICAgIC5mYWlsKGVyciA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgfSk7XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2F2ZUxvY2tEaWFsb2cgPSAoc2VjdGlvbklkLCBuZXdMb2NrU3RhdHVzKSA9PiB7XG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG4gICAgY29uc3QgbGVzc29uSWQgPSBnZXRTdGF0ZSgpLmxlc3NvbkxvY2subG9ja0RpYWxvZ0xlc3NvbklkO1xuICAgIGRpc3BhdGNoKFxuICAgICAgcGVyZm9ybVNhdmUoc2VjdGlvbklkLCBsZXNzb25JZCwgbmV3TG9ja1N0YXR1cywgKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaChjbG9zZUxvY2tEaWFsb2coKSk7XG4gICAgICB9KVxuICAgICk7XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgbG9ja0xlc3NvbiA9IChzZWN0aW9uSWQsIGxlc3NvbklkKSA9PiB7XG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG4gICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHNlY3Rpb24gPSBzdGF0ZS5sZXNzb25Mb2NrLmxlc3NvbnNCeVNlY3Rpb25JZFtzZWN0aW9uSWRdO1xuICAgIGNvbnN0IG9sZExvY2tTdGF0dXMgPSBsb2NrU3RhdHVzRm9yTGVzc29uKHNlY3Rpb24sIGxlc3NvbklkKTtcbiAgICBjb25zdCBuZXdMb2NrU3RhdHVzID0gb2xkTG9ja1N0YXR1cy5tYXAoc3R1ZGVudCA9PiAoe1xuICAgICAgLi4uc3R1ZGVudCxcbiAgICAgIGxvY2tTdGF0dXM6IExvY2tTdGF0dXMuTG9ja2VkLFxuICAgIH0pKTtcbiAgICBkaXNwYXRjaChwZXJmb3JtU2F2ZShzZWN0aW9uSWQsIGxlc3NvbklkLCBuZXdMb2NrU3RhdHVzLCAoKSA9PiB7fSkpO1xuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGNsb3NlTG9ja0RpYWxvZyA9ICgpID0+ICh7XG4gIHR5cGU6IENMT1NFX0xPQ0tfRElBTE9HLFxufSk7XG5cbi8vIEhlbHBlcnNcbi8qKlxuICogR2VuZXJhdGUgYW4gYXJyYXkgb2YgbG9jayBzdGF0dXMgaW5mbyBmb3IgZWFjaCBzdHVkZW50IGluIHRoIHByb3ZpZGVkIHNlY3Rpb25cbiAqIG9yIGFuIGVtcHR5IGFycmF5IGlmIG5vIHNlY3Rpb24vc3R1ZGVudHMuXG4gKiBAcGFyYW0ge29iamVjdH0gc2VjdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IGxlc3NvbklkXG4gKiBAcmV0dXJucyB7b2JqZWN0W119XG4gKi9cbmNvbnN0IGxvY2tTdGF0dXNGb3JMZXNzb24gPSAoc2VjdGlvbiwgbGVzc29uSWQpID0+IHtcbiAgaWYgKHNlY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBzdHVkZW50cyA9IHNlY3Rpb25bbGVzc29uSWRdO1xuICByZXR1cm4gc3R1ZGVudHMubWFwKHN0dWRlbnQgPT4gKHtcbiAgICB1c2VyTGV2ZWxEYXRhOiBzdHVkZW50LnVzZXJfbGV2ZWxfZGF0YSxcbiAgICBuYW1lOiBzdHVkZW50Lm5hbWUsXG4gICAgbG9ja1N0YXR1czogc3R1ZGVudC5sb2NrZWRcbiAgICAgID8gTG9ja1N0YXR1cy5Mb2NrZWRcbiAgICAgIDogc3R1ZGVudC5yZWFkb25seV9hbnN3ZXJzXG4gICAgICA/IExvY2tTdGF0dXMuUmVhZG9ubHlBbnN3ZXJzXG4gICAgICA6IExvY2tTdGF0dXMuRWRpdGFibGUsXG4gIH0pKTtcbn07XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmV0dXJucyBhIG1hcHBpbmcgb2YgbGVzc29uSWQgdG8gd2hldGhlciBvciBub3QgaXQgaXMgZnVsbHkgbG9ja2VkXG4gKiBpbiB0aGUgY3VycmVudCBzZWN0aW9uLiBBIGxlc3NvbiBpcyBmdWxseSBsb2NrZWQgaWYgYW5kIG9ubHkgaWYgaXQgaXMgbG9ja2VkXG4gKiBmb3IgYWxsIG9mIHRoZSBzdHVkZW50cyBpbiB0aGUgc2VjdGlvblxuICovXG5leHBvcnQgY29uc3QgZnVsbHlMb2NrZWRMZXNzb25NYXBwaW5nID0gc2VjdGlvbiA9PiB7XG4gIGlmICghc2VjdGlvbikge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3Qua2V5cyhzZWN0aW9uKS5yZWR1Y2UoKG9iaiwgbGVzc29uSWQpID0+IHtcbiAgICBjb25zdCBzdHVkZW50cyA9IHNlY3Rpb25bbGVzc29uSWRdO1xuICAgIGNvbnN0IGZ1bGx5TG9ja2VkID0gIXN0dWRlbnRzLnNvbWUoc3R1ZGVudCA9PiAhc3R1ZGVudC5sb2NrZWQpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5vYmosXG4gICAgICBbbGVzc29uSWRdOiBmdWxseUxvY2tlZCxcbiAgICB9O1xuICB9LCB7fSk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbG9jayBzdGF0dXMgZm9yIHN0dWRlbnRzIGluIHNlY3Rpb25zIGJhc2VkIG9uIGRhdGEgZnJvbSBzZXJ2ZXJcbiAqL1xuZXhwb3J0IGNvbnN0IHNldFNlY3Rpb25Mb2NrU3RhdHVzID0gc2VjdGlvbnMgPT4gKHtcbiAgdHlwZTogU0VUX1NFQ1RJT05fTE9DS19TVEFUVVMsXG4gIHNlY3Rpb25zLFxufSk7XG5cbi8qKlxuICogU2V0IHRoZSBsb2NrIHN0YXR1cyBmb3Igc3R1ZGVudHMgaW4gc2VjdGlvbnMgYmFzZWQgb24gZGF0YSBmcm9tIHNlcnZlclxuICovXG5jb25zdCByZWZyZXNoU2VjdGlvbkxvY2tTdGF0dXMgPSAoc2VjdGlvbnMsIHNlY3Rpb25JZCkgPT4gKHtcbiAgdHlwZTogUkVGUkVTSF9TRUNUSU9OX0xPQ0tfU1RBVFVTLFxuICBzZWN0aW9ucyxcbiAgc2VjdGlvbklkLFxufSk7XG5cbmV4cG9ydCBjb25zdCByZWZldGNoU2VjdGlvbkxvY2tTdGF0dXMgPSAoc2VjdGlvbklkLCBzY3JpcHRJZCkgPT4ge1xuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgICQuYWpheCgnL2FwaS9sb2NrX3N0YXR1cycsIHtcbiAgICAgIGRhdGE6IHtzY3JpcHRfaWQ6IHNjcmlwdElkfSxcbiAgICB9KVxuICAgICAgLmRvbmUoZGF0YSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHJlZnJlc2hTZWN0aW9uTG9ja1N0YXR1cyhkYXRhLCBzZWN0aW9uSWQpKTtcbiAgICAgIH0pXG4gICAgICAuZmFpbChlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfSk7XG4gIH07XG59O1xuIiwiaW1wb3J0IHF1ZXJ5U3RyaW5nIGZyb20gJ3F1ZXJ5LXN0cmluZyc7XG5cbi8vIFByb3ZpZGUgbWV0aG9kcyB0aGF0IGFsbG93IHRlc3RzIHRvIG1vY2sgd2luZG93LmxvY2F0aW9uXG5sZXQgd2luZG93TG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5leHBvcnQgZnVuY3Rpb24gc2V0V2luZG93TG9jYXRpb24oZmFrZUxvY2F0aW9uKSB7XG4gIHdpbmRvd0xvY2F0aW9uID0gZmFrZUxvY2F0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRXaW5kb3dMb2NhdGlvbigpIHtcbiAgd2luZG93TG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNRdWVyeVBhcmFtKG5hbWUpIHtcbiAgY29uc3QgcGFyc2VkUGFyYW1zID0gcXVlcnlQYXJhbXMoKTtcblxuICAvLyBjYW4ndCBjYWxsIGhhc093blByb3BlcnR5IGRpcmVjdGx5IGR1ZSB0byBidWcgaW4gcXVlcnktc3RyaW5nOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3F1ZXJ5LXN0cmluZy9pc3N1ZXMvNTBcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJzZWRQYXJhbXMsIG5hbWUpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIFVSTCBxdWVyeXN0cmluZyBwYXJhbXMuXG4gKiBAcGFyYW0gbmFtZSB7c3RyaW5nPX0gT3B0aW9uYWxseSBwdWxsIGEgc3BlY2lmaWMgcGFyYW0uXG4gKiBAcmV0dXJuIHtvYmplY3R8c3RyaW5nfSBIYXNoIG9mIHBhcmFtcywgb3IgcGFyYW0gc3RyaW5nIGlmIGBuYW1lYCBpcyBzcGVjaWZpZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeVBhcmFtcyhuYW1lKSB7XG4gIGNvbnN0IHBhcnNlZCA9IHF1ZXJ5U3RyaW5nLnBhcnNlKHdpbmRvd0xvY2F0aW9uLnNlYXJjaCk7XG4gIGlmIChuYW1lKSB7XG4gICAgcmV0dXJuIHBhcnNlZFtuYW1lXTtcbiAgfVxuICByZXR1cm4gcGFyc2VkO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgYSBxdWVyeSBwYXJhbWV0ZXIgaW4gdGhlIFVSTCB2aWEgcHVzaFN0YXRlIChpLmUuIGRvZXNuJ3QgZm9yY2UgYVxuICogcmVsb2FkKS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbSAtIE5hbWUgb2YgdGhlIHF1ZXJ5IHBhcmFtZXRlciB0byBtb2RpZnlcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIE5ldyB2YWx1ZSAob3IgdW5kZWZpbmVkIHRvIHJlbW92ZSlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlUmVwbGFjZVN0YXRlIC0gb3B0aW9uYWwgcGFyYW0gaWYgeW91IHdpc2ggdG8gdXNlIHJlcGxhY2VTdGF0ZVxuICogICBpbnN0ZWFkIG9mIHB1c2hTdGF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUXVlcnlQYXJhbShwYXJhbSwgdmFsdWUsIHVzZVJlcGxhY2VTdGF0ZSA9IGZhbHNlKSB7XG4gIGNvbnN0IG5ld1N0cmluZyA9IHF1ZXJ5U3RyaW5nLnN0cmluZ2lmeSh7XG4gICAgLi4ucXVlcnlTdHJpbmcucGFyc2Uod2luZG93TG9jYXRpb24uc2VhcmNoKSxcbiAgICBbcGFyYW1dOiB2YWx1ZSxcbiAgfSk7XG5cbiAgbGV0IG5ld0xvY2F0aW9uID0gd2luZG93TG9jYXRpb24ucGF0aG5hbWU7XG4gIC8vIERvbid0IGFwcGVuZCA/IHVubGVzcyB3ZSBhY3R1YWxseSBoYXZlIGEgdmFsdWVcbiAgaWYgKG5ld1N0cmluZykge1xuICAgIG5ld0xvY2F0aW9uICs9ICc/JyArIG5ld1N0cmluZztcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IHVzZVJlcGxhY2VTdGF0ZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSc7XG4gIHdpbmRvdy5oaXN0b3J5W21ldGhvZF0obnVsbCwgZG9jdW1lbnQudGl0bGUsIG5ld0xvY2F0aW9uKTtcbn1cblxuLyoqXG4gKiBXZSBoYXZlIHZhcmlvdXMgY29va2llcyB0aGF0IHdlIHdhbnQgdG8gYmUgZW52aXJvbm1lbnQgc3BlY2lmaWMuIFdlIGFjY29tcGxpc2hcbiAqIHRoaXMgYnkgdGFja2luZyBvbiB0aGUgcmFja19lbnYgKHVubGVzcyB3ZSdyZSBpbiBwcm9kKS4gVGhpcyBoZWxwZXIgZ2V0cyB0aGVcbiAqIGFwcHJvcHJpYXRlIGNvb2tpZSBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIEJhc2UgY29va2llIG5hbWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEFjdHVhbCBjb29raWUgbmFtZSwgd2l0aCB0aGUgcmFja19lbnYgYXBwZW5kZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVudmlyb25tZW50U3BlY2lmaWNDb29raWVOYW1lKG5hbWUpIHtcbiAgY29uc3QgcmFja19lbnYgPSB3aW5kb3cuZGFzaGJvYXJkLnJhY2tfZW52O1xuICBpZiAocmFja19lbnYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBuYW1lO1xuICB9XG5cbiAgcmV0dXJuIGAke25hbWV9XyR7cmFja19lbnZ9YDtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIGhvc3QgbmFtZSAoZS5nLiBzdHVkaW8uY29kZS5vcmcpIHJldHVybiB0aGUgc2l0ZSdzIHJvb3QgZG9tYWluXG4gKiAoZS5nLiBjb2RlLm9yZykuICBVc2VmdWwgZm9yIGdldHRpbmcgdGhlIGRvbWFpbiBvbiB3aGljaCB3ZSB3aWxsIHNldCBhIGNvb2tpZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBob3N0bmFtZSAtIEEgaG9zdCBuYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcm9vdCBkb21haW4gbmFtZSBmb3IgdGhlIGhvc3QgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um9vdERvbWFpbkZyb21Ib3N0bmFtZShob3N0bmFtZSkge1xuICByZXR1cm4gaG9zdG5hbWUuc3BsaXQoJy4nKS5zbGljZSgtMikuam9pbignLicpO1xufVxuIiwiLyoqXG4gKiBSZWR1Y2VyIGZvciB0cmFja2luZyB3aGV0aGVyIHdlJ3JlIGN1cnJlbnRseSB2aWV3aW5nIHRoZSBwYWdlIGFzIGEgcGFydGljaXBhbnRcbiAqIG9yIGFzIGEgaW5zdHJ1Y3RvclxuICovXG5cbmltcG9ydCB7bWFrZUVudW0sIHJlbG9hZH0gZnJvbSAnQGNkby9hcHBzL3V0aWxzJztcbmltcG9ydCB7cXVlcnlQYXJhbXMsIHVwZGF0ZVF1ZXJ5UGFyYW19IGZyb20gJ0BjZG8vYXBwcy9jb2RlLXN0dWRpby91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBWaWV3VHlwZSA9IG1ha2VFbnVtKCdQYXJ0aWNpcGFudCcsICdJbnN0cnVjdG9yJyk7XG5cbi8vIEFjdGlvbiB0eXBlc1xuZXhwb3J0IGNvbnN0IFNFVF9WSUVXX1RZUEUgPSAndmlld0FzL1NFVF9WSUVXX1RZUEUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlID0gVmlld1R5cGUuUGFydGljaXBhbnQsIGFjdGlvbikge1xuICBpZiAoYWN0aW9uLnR5cGUgPT09IFNFVF9WSUVXX1RZUEUpIHtcbiAgICBsZXQgdmlld1R5cGUgPSBhY3Rpb24udmlld1R5cGU7XG4gICAgLyogVGhlIFZpZXdUeXBlcyB1c2VkIHRvIGJlIFRlYWNoZXIgYW5kIFN0dWRlbnQuIFdlIHJlZGlyZWN0IHRoZW0gdG8gdGhlIG5ld1xuICAgICAqIFZpZXdUeXBlcyBoZXJlIGluIG9yZGVyIHRvIG1ha2Ugc3VyZSBiZSBjb250aW51ZSB0byBzdXBwb3J0IG9sZCBsaW5rcy5cbiAgICAgKi9cbiAgICBpZiAodmlld1R5cGUgPT09ICdUZWFjaGVyJykge1xuICAgICAgdmlld1R5cGUgPSAnSW5zdHJ1Y3Rvcic7XG4gICAgICB1cGRhdGVRdWVyeVBhcmFtKCd2aWV3QXMnLCAnSW5zdHJ1Y3RvcicpO1xuICAgIH0gZWxzZSBpZiAodmlld1R5cGUgPT09ICdTdHVkZW50Jykge1xuICAgICAgdmlld1R5cGUgPSAnUGFydGljaXBhbnQnO1xuICAgICAgdXBkYXRlUXVlcnlQYXJhbSgndmlld0FzJywgJ1BhcnRpY2lwYW50Jyk7XG4gICAgfSBlbHNlIGlmICghVmlld1R5cGVbdmlld1R5cGVdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gVmlld1R5cGU6ICcgKyB2aWV3VHlwZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZpZXdUeXBlO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vLyBBY3Rpb24gY3JlYXRvcnNcblxuLy8gVE9ETzogV2hlbiB0aGlzIGlzIGNvbnZlcnRlZCB0byByZWR1eC10b29sa2l0LCB1cGRhdGUgcHJvZ3Jlc3NSZWR1eCBhY2NvcmRpbmdseSwgYXMgaXQgaGFzXG4vLyBhIGRlcGVuZGVuY3kgb24gdGhpcyBhY3Rpb24uXG5leHBvcnQgY29uc3Qgc2V0Vmlld1R5cGUgPSB2aWV3VHlwZSA9PiAoe1xuICB0eXBlOiBTRVRfVklFV19UWVBFLFxuICB2aWV3VHlwZSxcbn0pO1xuXG5leHBvcnQgY29uc3QgY2hhbmdlVmlld1R5cGUgPSB2aWV3VHlwZSA9PiB7XG4gIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgLy8gSWYgY2hhbmdpbmcgdG8gdmlld0FzIHBhcnRpY2lwYW50IHdoaWxlIHdlIGFyZSBhIHBhcnRpY3VsYXIgcGFydGljaXBhbnQsIHJlbW92ZVxuICAgIC8vIHRoZSB1c2VyX2lkIGFuZCBkbyBhIHJlbG9hZCBzbyB0aGF0IHdlJ3JlIGluc3RlYWQgdmlld2luZyBhcyBhIGdlbmVyaWNcbiAgICAvLyBwYXJ0aWNpcGFudFxuICAgIGlmICh2aWV3VHlwZSA9PT0gVmlld1R5cGUuUGFydGljaXBhbnQgJiYgcXVlcnlQYXJhbXMoJ3VzZXJfaWQnKSkge1xuICAgICAgdXBkYXRlUXVlcnlQYXJhbSgndXNlcl9pZCcsIHVuZGVmaW5lZCk7XG4gICAgICAvLyBNYWtlIGEgc3R1YmJhYmxlIGNhbGwgdG8gd2luZG93LmxvY2F0aW9uLnJlbG9hZFxuICAgICAgcmVsb2FkKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGlzcGF0Y2goc2V0Vmlld1R5cGUodmlld1R5cGUpKTtcbiAgfTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vLyBhcHBzL3NyYy9mb250Q29uc3RhbnRzLmpzXG4vLyBHRU5FUkFURUQgRklMRTogRE8gTk9UIE1PRElGWSBESVJFQ1RMWVxuLy8gVGhpcyBnZW5lcmF0ZWQgZmlsZSBleHBvcnRzIGFsbCB2YXJpYWJsZXMgZGVmaW5lZCBpbiBzaGFyZWQvY3NzL2ZvbnQuc2Nzc1xuLy8gZm9yIHVzZSBpbiBKYXZhU2NyaXB0LiBUaGUgZ2VuZXJhdG9yIHNjcmlwdCBpcyBjb252ZXJ0LXNjc3MtdmFyaWFibGVzLmpzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJtZXRyb3BvbGlzLWZvbnRcIjogXCInTWV0cm9wb2xpcycsIHNhbnMtc2VyaWZcIixcbiAgXCJtYWluLWZvbnRcIjogXCInTWV0cm9wb2xpcycsIHNhbnMtc2VyaWZcIixcbiAgXCJ0aGluLWZvbnQtd2VpZ2h0XCI6IFwiMTAwXCIsXG4gIFwiZXh0cmEtbGlnaHQtZm9udC13ZWlnaHRcIjogXCIyMDBcIixcbiAgXCJsaWdodC1mb250LXdlaWdodFwiOiBcIjMwMFwiLFxuICBcInJlZ3VsYXItZm9udC13ZWlnaHRcIjogXCI0MDBcIixcbiAgXCJtZWRpdW0tZm9udC13ZWlnaHRcIjogXCI1MDBcIixcbiAgXCJzZW1pLWJvbGQtZm9udC13ZWlnaHRcIjogXCI2MDBcIixcbiAgXCJib2xkLWZvbnQtd2VpZ2h0XCI6IFwiNzAwXCIsXG4gIFwiZXh0cmEtYm9sZC1mb250LXdlaWdodFwiOiBcIjgwMFwiLFxuICBcImJsYWNrLWZvbnQtd2VpZ2h0XCI6IFwiOTAwXCIsXG4gIFwibWFpbi1mb250LXRoaW5cIjoge1xuICBcImZvbnRGYW1pbHlcIjogXCInTWV0cm9wb2xpcycsIHNhbnMtc2VyaWZcIixcbiAgXCJmb250V2VpZ2h0XCI6IFwiMTAwXCIsXG4gIFwiZm9udFN0eWxlXCI6IFwibm9ybWFsXCIsXG4gIH0sXG4gIFwibWFpbi1mb250LXRoaW4taXRhbGljXCI6IHtcbiAgXCJmb250RmFtaWx5XCI6IFwiJ01ldHJvcG9saXMnLCBzYW5zLXNlcmlmXCIsXG4gIFwiZm9udFdlaWdodFwiOiBcIjEwMFwiLFxuICBcImZvbnRTdHlsZVwiOiBcIml0YWxpY1wiLFxuICB9LFxuICBcIm1haW4tZm9udC1leHRyYS1saWdodFwiOiB7XG4gIFwiZm9udEZhbWlseVwiOiBcIidNZXRyb3BvbGlzJywgc2Fucy1zZXJpZlwiLFxuICBcImZvbnRXZWlnaHRcIjogXCIyMDBcIixcbiAgXCJmb250U3R5bGVcIjogXCJub3JtYWxcIixcbiAgfSxcbiAgXCJtYWluLWZvbnQtZXh0cmEtbGlnaHQtaXRhbGljXCI6IHtcbiAgXCJmb250RmFtaWx5XCI6IFwiJ01ldHJvcG9saXMnLCBzYW5zLXNlcmlmXCIsXG4gIFwiZm9udFdlaWdodFwiOiBcIjIwMFwiLFxuICBcImZvbnRTdHlsZVwiOiBcIml0YWxpY1wiLFxuICB9LFxuICBcIm1haW4tZm9udC1saWdodFwiOiB7XG4gIFwiZm9udEZhbWlseVwiOiBcIidNZXRyb3BvbGlzJywgc2Fucy1zZXJpZlwiLFxuICBcImZvbnRXZWlnaHRcIjogXCIzMDBcIixcbiAgXCJmb250U3R5bGVcIjogXCJub3JtYWxcIixcbiAgfSxcbiAgXCJtYWluLWZvbnQtbGlnaHQtaXRhbGljXCI6IHtcbiAgXCJmb250RmFtaWx5XCI6IFwiJ01ldHJvcG9saXMnLCBzYW5zLXNlcmlmXCIsXG4gIFwiZm9udFdlaWdodFwiOiBcIjMwMFwiLFxuICBcImZvbnRTdHlsZVwiOiBcIml0YWxpY1wiLFxuICB9LFxuICBcIm1haW4tZm9udC1yZWd1bGFyXCI6IHtcbiAgXCJmb250RmFtaWx5XCI6IFwiJ01ldHJvcG9saXMnLCBzYW5zLXNlcmlmXCIsXG4gIFwiZm9udFdlaWdodFwiOiBcIjQwMFwiLFxuICBcImZvbnRTdHlsZVwiOiBcIm5vcm1hbFwiLFxuICB9LFxuICBcIm1haW4tZm9udC1yZWd1bGFyLWl0YWxpY1wiOiB7XG4gIFwiZm9udEZhbWlseVwiOiBcIidNZXRyb3BvbGlzJywgc2Fucy1zZXJpZlwiLFxuICBcImZvbnRXZWlnaHRcIjogXCI0MDBcIixcbiAgXCJmb250U3R5bGVcIjogXCJpdGFsaWNcIixcbiAgfSxcbiAgXCJtYWluLWZvbnQtbWVkaXVtXCI6IHtcbiAgXCJmb250RmFtaWx5XCI6IFwiJ01ldHJvcG9saXMnLCBzYW5zLXNlcmlmXCIsXG4gIFwiZm9udFdlaWdodFwiOiBcIjUwMFwiLFxuICBcImZvbnRTdHlsZVwiOiBcIm5vcm1hbFwiLFxuICB9LFxuICBcIm1haW4tZm9udC1tZWRpdW0taXRhbGljXCI6IHtcbiAgXCJmb250RmFtaWx5XCI6IFwiJ01ldHJvcG9saXMnLCBzYW5zLXNlcmlmXCIsXG4gIFwiZm9udFdlaWdodFwiOiBcIjUwMFwiLFxuICBcImZvbnRTdHlsZVwiOiBcIml0YWxpY1wiLFxuICB9LFxuICBcIm1haW4tZm9udC1zZW1pLWJvbGRcIjoge1xuICBcImZvbnRGYW1pbHlcIjogXCInTWV0cm9wb2xpcycsIHNhbnMtc2VyaWZcIixcbiAgXCJmb250V2VpZ2h0XCI6IFwiNjAwXCIsXG4gIFwiZm9udFN0eWxlXCI6IFwibm9ybWFsXCIsXG4gIH0sXG4gIFwibWFpbi1mb250LXNlbWktYm9sZC1pdGFsaWNcIjoge1xuICBcImZvbnRGYW1pbHlcIjogXCInTWV0cm9wb2xpcycsIHNhbnMtc2VyaWZcIixcbiAgXCJmb250V2VpZ2h0XCI6IFwiNjAwXCIsXG4gIFwiZm9udFN0eWxlXCI6IFwiaXRhbGljXCIsXG4gIH0sXG4gIFwibWFpbi1mb250LWJvbGRcIjoge1xuICBcImZvbnRGYW1pbHlcIjogXCInTWV0cm9wb2xpcycsIHNhbnMtc2VyaWZcIixcbiAgXCJmb250V2VpZ2h0XCI6IFwiNzAwXCIsXG4gIFwiZm9udFN0eWxlXCI6IFwibm9ybWFsXCIsXG4gIH0sXG4gIFwibWFpbi1mb250LWJvbGQtaXRhbGljXCI6IHtcbiAgXCJmb250RmFtaWx5XCI6IFwiJ01ldHJvcG9saXMnLCBzYW5zLXNlcmlmXCIsXG4gIFwiZm9udFdlaWdodFwiOiBcIjcwMFwiLFxuICBcImZvbnRTdHlsZVwiOiBcIml0YWxpY1wiLFxuICB9LFxuICBcIm1haW4tZm9udC1leHRyYS1ib2xkXCI6IHtcbiAgXCJmb250RmFtaWx5XCI6IFwiJ01ldHJvcG9saXMnLCBzYW5zLXNlcmlmXCIsXG4gIFwiZm9udFdlaWdodFwiOiBcIjgwMFwiLFxuICBcImZvbnRTdHlsZVwiOiBcIm5vcm1hbFwiLFxuICB9LFxuICBcIm1haW4tZm9udC1leHRyYS1ib2xkLWl0YWxpY1wiOiB7XG4gIFwiZm9udEZhbWlseVwiOiBcIidNZXRyb3BvbGlzJywgc2Fucy1zZXJpZlwiLFxuICBcImZvbnRXZWlnaHRcIjogXCI4MDBcIixcbiAgXCJmb250U3R5bGVcIjogXCJpdGFsaWNcIixcbiAgfSxcbiAgXCJtYWluLWZvbnQtYmxhY2tcIjoge1xuICBcImZvbnRGYW1pbHlcIjogXCInTWV0cm9wb2xpcycsIHNhbnMtc2VyaWZcIixcbiAgXCJmb250V2VpZ2h0XCI6IFwiOTAwXCIsXG4gIFwiZm9udFN0eWxlXCI6IFwibm9ybWFsXCIsXG4gIH0sXG4gIFwibWFpbi1mb250LWJsYWNrLWl0YWxpY1wiOiB7XG4gIFwiZm9udEZhbWlseVwiOiBcIidNZXRyb3BvbGlzJywgc2Fucy1zZXJpZlwiLFxuICBcImZvbnRXZWlnaHRcIjogXCI5MDBcIixcbiAgXCJmb250U3R5bGVcIjogXCJpdGFsaWNcIixcbiAgfSxcbiAgXCJiYXJsb3dTZW1pQ29uZGVuc2VkLXNlbWlib2xkXCI6IFwiJ0JhcmxvdyBTZW1pIENvbmRlbnNlZCBTZW1pYm9sZCcsIHNhbnMtc2VyaWZcIixcbiAgXCJiYXJsb3dTZW1pQ29uZGVuc2VkLW1lZGl1bVwiOiBcIidCYXJsb3cgU2VtaSBDb25kZW5zZWQgTWVkaXVtJywgc2Fucy1zZXJpZlwiLFxuICBcImNvZGUtZm9udFwiOiBcIidTb3VyY2UgQ29kZSBQcm8nLCBNb25hY28sICdCaXRzdHJlYW0gVmVyYSBTYW5zIE1vbm8nLCAnTHVjaWRhIENvbnNvbGUnLCBUZXJtaW5hbCwgbW9ub3NwYWNlXCIsXG4gIFwiZm9udC1hd2Vzb21lLWNvcmUtdXJsXCI6IFwiJ2h0dHBzOi8vZHNjby5jb2RlLm9yZy9hc3NldHMvZm9udC1hd2Vzb21lLXByby8xNjg0MTc4ODc2L2Nzcy9mb250YXdlc29tZS5taW4uY3NzJ1wiLFxuICBcImZvbnQtYXdlc29tZS1icmFuZHMtdXJsXCI6IFwiJ2h0dHBzOi8vZHNjby5jb2RlLm9yZy9hc3NldHMvZm9udC1hd2Vzb21lLXByby8xNjg0MTc4ODc2L2Nzcy9icmFuZHMubWluLmNzcydcIixcbiAgXCJmb250LWF3ZXNvbWUtc29saWQtdXJsXCI6IFwiJ2h0dHBzOi8vZHNjby5jb2RlLm9yZy9hc3NldHMvZm9udC1hd2Vzb21lLXByby8xNjg0MTc4ODc2L2Nzcy9zb2xpZC5taW4uY3NzJ1wiLFxuICBcImZvbnQtYXdlc29tZS1yZWd1bGFyLXVybFwiOiBcIidodHRwczovL2RzY28uY29kZS5vcmcvYXNzZXRzL2ZvbnQtYXdlc29tZS1wcm8vMTY4NDE3ODg3Ni9jc3MvcmVndWxhci5taW4uY3NzJ1wiLFxuICBcImZvbnQtYXdlc29tZS12NC1mb250cy11cmxcIjogXCInaHR0cHM6Ly9kc2NvLmNvZGUub3JnL2Fzc2V0cy9mb250LWF3ZXNvbWUtcHJvLzE2ODQxNzg4NzYvY3NzL3Y0LWZvbnQtZmFjZS5taW4uY3NzJ1wiLFxuICBcImZvbnQtYXdlc29tZS12NC1zaGltcy11cmxcIjogXCInaHR0cHM6Ly9kc2NvLmNvZGUub3JnL2Fzc2V0cy9mb250LWF3ZXNvbWUtcHJvLzE2ODQxNzg4NzYvY3NzL3Y0LXNoaW1zLm1pbi5jc3MnXCIsXG59O1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7bWFrZUVudW19IGZyb20gJ0BjZG8vYXBwcy91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBmZWVkYmFja1NoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgaWQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgc2Vlbl9vbl9mZWVkYmFja19wYWdlX2F0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdHVkZW50X2ZpcnN0X3Zpc2l0ZWRfYXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNyZWF0ZWRfYXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gIF0pLmlzUmVxdWlyZWQsXG4gIGNvbW1lbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHBlcmZvcm1hbmNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpc19hd2FpdGluZ190ZWFjaGVyX3JldmlldzogUHJvcFR5cGVzLmJvb2wsXG4gIHJldmlld19zdGF0ZTogUHJvcFR5cGVzLnN0cmluZyxcbn0pO1xuXG5leHBvcnQgY29uc3QgbGV2ZWxGZWVkYmFja1NoYXBlID0gUHJvcFR5cGVzLnNoYXBlKGxldmVsRmVlZGJhY2tUeXBlKTtcblxuZXhwb3J0IGNvbnN0IGxldmVsRmVlZGJhY2tUeXBlID0ge1xuICBsZXNzb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGxlc3Nvbk51bTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBsZXZlbE51bTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBsaW5rVG9MZXZlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB1bml0TmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZmVlZGJhY2tzOiBQcm9wVHlwZXMuYXJyYXlPZihmZWVkYmFja1NoYXBlKSxcbn07XG5cbmV4cG9ydCBjb25zdCBSZXZpZXdTdGF0ZXMgPSBtYWtlRW51bShcbiAgJ2NvbXBsZXRlZCcsXG4gICdrZWVwV29ya2luZycsXG4gICdhd2FpdGluZ1Jldmlldydcbik7XG4iLCJpbXBvcnQge2Z1bGx5TG9ja2VkTGVzc29uTWFwcGluZ30gZnJvbSAnQGNkby9hcHBzL2NvZGUtc3R1ZGlvL2xlc3NvbkxvY2tSZWR1eCc7XG5pbXBvcnQge1ZpZXdUeXBlfSBmcm9tICdAY2RvL2FwcHMvY29kZS1zdHVkaW8vdmlld0FzUmVkdXgnO1xuaW1wb3J0IHtpc0xlc3NvbkhpZGRlbkZvclNlY3Rpb259IGZyb20gJ0BjZG8vYXBwcy9jb2RlLXN0dWRpby9oaWRkZW5MZXNzb25SZWR1eCc7XG5pbXBvcnQge0xldmVsU3RhdHVzLCBMZXZlbEtpbmR9IGZyb20gJ0BjZG8vYXBwcy91dGlsL3NoYXJlZENvbnN0YW50cyc7XG5pbXBvcnQge1BVWlpMRV9QQUdFX05PTkV9IGZyb20gJy4vcHJvZ3Jlc3NUeXBlcyc7XG5pbXBvcnQge1xuICBhY3Rpdml0eUNzc0NsYXNzLFxuICByZXN1bHRGcm9tU3RhdHVzLFxufSBmcm9tICdAY2RvL2FwcHMvY29kZS1zdHVkaW8vYWN0aXZpdHlVdGlscyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG4vKipcbiAqIFRoaXMgaXMgY29uY2VwdHVhbGx5IHNpbWlsYXIgdG8gYmVpbmcgYSBzZWxlY3RvciwgZXhjZXB0IHRoYXQgaXQgb3BlcmF0ZXMgb25cbiAqIHRoZSBlbnRpcmUgc3RvcmUgc3RhdGUuIEl0IGlzIHVzZWQgYnkgY29tcG9uZW50cyB0byBkZXRlcm1pbmUgd2hldGhlciBhXG4gKiBwYXJ0aWN1bGFyIGxlc3NvbiBpcyB2aXNpYmxlLCBvciBoaWRkZW4gZW50aXJlbHkuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVzc29uIC0gdGhlIGxlc3NvbiB3ZSdyZSBxdWVyeWluZ1xuICogQHBhcmFtIHtvYmplY3R9IHN0YXRlIC0gU3RhdGUgb2Ygb3VyIGVudGlyZSByZWR1eCBzdG9yZVxuICogQHBhcmFtIHtWaWV3VHlwZX0gdmlld0FzIC0gQXJlIHdlIGludGVyZXN0ZWQgaW4gd2hldGhlciB0aGUgbGVzc29uIGlzIHZpZXdhYmxlXG4gKiAgIGZvciBwYXJ0aWNpcGFudHMgb3IgaW5zdHJ1Y3RvcnNcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwcm92aWRlZCBsZXNzb24gaXMgdmlzaWJsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVzc29uSXNWaXNpYmxlKGxlc3Nvbiwgc3RhdGUsIHZpZXdBcykge1xuICBpZiAoIXZpZXdBcykge1xuICAgIHRocm93IG5ldyBFcnJvcignbWlzc2luZyBwYXJhbSB2aWV3QXMgaW4gbGVzc29uSXNWaXNpYmxlJyk7XG4gIH1cblxuICBjb25zdCBoaWRkZW5MZXNzb25TdGF0ZSA9IHN0YXRlLmhpZGRlbkxlc3NvbjtcbiAgY29uc3Qgc2VjdGlvbklkID0gc3RhdGUudGVhY2hlclNlY3Rpb25zLnNlbGVjdGVkU2VjdGlvbklkO1xuXG4gIGNvbnN0IGlzSGlkZGVuID0gaXNMZXNzb25IaWRkZW5Gb3JTZWN0aW9uKFxuICAgIGhpZGRlbkxlc3NvblN0YXRlLFxuICAgIHNlY3Rpb25JZCxcbiAgICBsZXNzb24uaWRcbiAgKTtcbiAgcmV0dXJuICFpc0hpZGRlbiB8fCB2aWV3QXMgPT09IFZpZXdUeXBlLkluc3RydWN0b3I7XG59XG5cbi8qKlxuICogVHJlYXQgdGhlIGxlc3NvbiBhcyBsb2NrZWQgaWYgZWl0aGVyXG4gKiAoYSkgaXQgaXMgbG9ja2VkIGZvciB0aGlzIHVzZXIgKGluIHRoZSBjYXNlIG9mIGEgc3R1ZGVudClcbiAqIChiKSBub24tdmVyaWZpZWQgaW5zdHJ1Y3RvclxuICogKGMpIHNpZ25lZCBvdXQgdXNlclxuICogQHBhcmFtIHtudW1iZXJ9IGxlc3NvbiAtIHRoZSBsZXNzb24gd2UncmUgcXVlcnlpbmdcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIFN0YXRlIG9mIG91ciBlbnRpcmUgcmVkdXggc3RvcmVcbiAqIEBwYXJhbSB7Vmlld1R5cGV9IHZpZXdBcyAtIEFyZSB3ZSBpbnRlcmVzdGVkIGluIHdoZXRoZXIgdGhlIGxlc3NvbiBpcyB2aWV3YWJsZVxuICogICBmb3IgcGFydGljaXBhbnRzIG9yIGluc3RydWN0b3JzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdmlkZWQgbGVzc29uIGlzIHZpc2libGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlc3NvbklzTG9ja2VkRm9yVXNlcihsZXNzb24sIGxldmVscywgc3RhdGUsIHZpZXdBcykge1xuICBpZiAoIWxlc3Nvbi5sb2NrYWJsZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghc3RhdGUuY3VycmVudFVzZXIudXNlcklkKSB7XG4gICAgLy8gU2lnbmVkIG91dCB1c2VyXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAodmlld0FzID09PSBWaWV3VHlwZS5JbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuICFzdGF0ZS5sZXNzb25Mb2NrLmxvY2thYmxlQXV0aG9yaXplZDtcbiAgfSBlbHNlIGlmICh2aWV3QXMgPT09IFZpZXdUeXBlLlBhcnRpY2lwYW50KSB7XG4gICAgcmV0dXJuIGxlc3NvbkxvY2tlZChsZXZlbHMpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiBhIGxlc3NvbiBpcyBsb2NrZWQgZm9yIGFsbCBzdHVkZW50cyBpbiB0aGUgY3VycmVudCBzZWN0aW9uXG4gKiBvciBub3QuIElmIGNhbGxlZCBhcyBhIHN0dWRlbnQsIHRoaXMgc2hvdWxkIGFsd2F5cyByZXR1cm4gZmFsc2Ugc2luY2UgdGhleVxuICogZG9uJ3QgaGF2ZSBhIHNlbGVjdGVkIHNlY3Rpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gbGVzc29uSWQgLSBJZCByZXByZXNlbnRpbmcgdGhlIGxlc3NvbiB3ZSdyZSBjdXJpb3VzIGFib3V0XG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgLSBTdGF0ZSBvZiBvdXIgZW50aXJlIHJlZHV4IHN0b3JlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gbGVzc29uIGlzIGxvY2tlZCBmb3IgYWxsIHN0dWRlbnRzIGluIHRoZVxuICogICBjdXJyZW50bHkgc2VsZWN0ZWQgc2VjdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlc3NvbklzTG9ja2VkRm9yQWxsU3R1ZGVudHMobGVzc29uSWQsIHN0YXRlKSB7XG4gIGNvbnN0IGN1cnJlbnRTZWN0aW9uSWQgPSBzdGF0ZS50ZWFjaGVyU2VjdGlvbnMuc2VsZWN0ZWRTZWN0aW9uSWQ7XG4gIGNvbnN0IGN1cnJlbnRTZWN0aW9uID0gc3RhdGUubGVzc29uTG9jay5sZXNzb25zQnlTZWN0aW9uSWRbY3VycmVudFNlY3Rpb25JZF07XG4gIGNvbnN0IGZ1bGx5TG9ja2VkTGVzc29ucyA9IGZ1bGx5TG9ja2VkTGVzc29uTWFwcGluZyhjdXJyZW50U2VjdGlvbik7XG4gIHJldHVybiAhIWZ1bGx5TG9ja2VkTGVzc29uc1tsZXNzb25JZF07XG59XG5cbi8qKlxuICogQHBhcmFtIHtsZXZlbFtdfSBsZXZlbHMgLSBBIHNldCBvZiBsZXZlbHMgZm9yIGEgZ2l2ZW4gbGVzc29uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB3ZSBzaG91bGQgY29uc2lkZXIgdGhlIGxlc3NvbiB0byBiZSBsb2NrZWQgZm9yIHRoZVxuICogICBjdXJyZW50IHVzZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXNzb25Mb2NrZWQobGV2ZWxzKSB7XG4gIC8vIEZvciBsb2NrYWJsZSBsZXNzb25zLCB0aGVyZSBpcyBhIHJlcXVpcmVtZW50IHRoYXQgdGhleSBoYXZlIGV4YWN0bHkgb25lIExldmVsR3JvdXAsXG4gIC8vIGFuZCB0aGF0IGl0IGJlIHRoZSBsYXN0IGxldmVsIGluIHRoZSBsZXNzb24uIEJlY2F1c2UgTGV2ZWxHcm91cCdzIGNhbiBoYXZlXG4gIC8vIG11bHRpcGxlIFwicGFnZXNcIiwgYW5kIHNpbmdsZSBMZXZlbEdyb3VwIG1pZ2h0IGFwcGVhciBhcyBtdWx0aXBsZSBsZXZlbHMvYnViYmxlc1xuICAvLyBvbiB0aGUgY2xpZW50LiBIb3dldmVyLCBpdCBpcyB0aGUgY2FzZSB0aGF0IGVhY2ggcGFnZSBpbiB0aGUgTEcgc2hvdWxkIGhhdmVcbiAgLy8gYW4gaWRlbnRpY2FsIGxvY2tlZC91bmxvY2tlZCBzdGF0ZS5cbiAgLy8gR2l2ZW4gdGhpcywgd2Ugc2hvdWxkIGJlIGFibGUgdG8gbG9vayBhdCB0aGUgbGFzdCBsZXZlbCBpbiBvdXIgY29sbGVjdGlvblxuICAvLyB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgTEcgKGFuZCB0aHVzIHRoZSBsZXNzb24pIHNob3VsZCBiZSBjb25zaWRlcmVkIGxvY2tlZC5cbiAgcmV0dXJuICEhbGV2ZWxzW2xldmVscy5sZW5ndGggLSAxXS5pc0xvY2tlZDtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyBBIGZyaWVuZGx5IG5hbWUgZm9yIHRoZSBpY29uIG5hbWUgKHRoYXQgY2FuIGJlIHBhc3NlZCB0byBGb250QXdlc29tZSlcbiAqICAgZm9yIHRoZSBnaXZlbiBsZXZlbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEljb25Gb3JMZXZlbChsZXZlbCwgaW5Qcm9ncmVzc1ZpZXcgPSBmYWxzZSkge1xuICBpZiAoaW5Qcm9ncmVzc1ZpZXcgJiYgaXNMZXZlbEFzc2Vzc21lbnQobGV2ZWwpKSB7XG4gICAgcmV0dXJuICdjaGVjay1jaXJjbGUnO1xuICB9XG5cbiAgaWYgKGxldmVsLmlzVW5wbHVnZ2VkKSB7XG4gICAgcmV0dXJuICdzY2lzc29ycyc7XG4gIH1cblxuICBpZiAobGV2ZWwuaXNMb2NrZWQpIHtcbiAgICByZXR1cm4gJ2xvY2snO1xuICB9XG5cbiAgaWYgKGxldmVsLmljb24pIHtcbiAgICAvLyBFdmVudHVhbGx5IEknZCBsaWtlIHRvIGhhdmUgZGFzaGJvYXJkIHJldHVybiBhbiBpY29uIHR5cGUuIEZvciBub3csIEknbSBqdXN0XG4gICAgLy8gZ29pbmcgdG8gdHJlYXQgdGhlIGNzcyBjbGFzcyBpdCBzZW5kcyBhcyBhIHR5cGUsIGFuZCBtYXAgaXQgdG8gYW4gaWNvbiBuYW1lLlxuICAgIGNvbnN0IG1hdGNoID0gL2ZhLSguKikvLmV4ZWMobGV2ZWwuaWNvbik7XG4gICAgaWYgKCFtYXRjaCB8fCAhbWF0Y2hbMV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBpY29uVHlwZTogJyArIGxldmVsLmljb24pO1xuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hbMV07XG4gIH1cblxuICBpZiAobGV2ZWwuYm9udXMpIHtcbiAgICByZXR1cm4gJ2ZsYWctY2hlY2tlcmVkJztcbiAgfVxuXG4gIC8vIGRlZmF1bHQgdG8gZGVza3RvcFxuICByZXR1cm4gZGVmYXVsdEJ1YmJsZUljb247XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0QnViYmxlSWNvbiA9ICdkZXNrdG9wJztcblxuLyoqXG4gKiBAcmV0dXJucyBXaGV0aGVyIGEgbGV2ZWwgaXMgYW4gYXNzZXNzbWVudCBsZXZlbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGV2ZWxBc3Nlc3NtZW50KGxldmVsKSB7XG4gIHJldHVybiBsZXZlbC5raW5kID09PSAnYXNzZXNzbWVudCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgd2hvbGUgbGVzc29uIGlzIGFzc2Vzc21lbnQgbGV2ZWxzXG4gKiBAcGFyYW0ge1tdfSBsZXZlbHMgQW4gYXJyYXkgb2YgbGV2ZWxzXG4gKiBAcmV0dXJucyB7Ym9vbH0gSWYgYWxsIHRoZSBsZXZlbHMgaW4gYSBsZXNzb24gYXJlIGFzc2Vzc21lbnQgbGV2ZWxzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXNzb25Jc0FsbEFzc2Vzc21lbnQobGV2ZWxzKSB7XG4gIHJldHVybiBsZXZlbHMuZXZlcnkobGV2ZWwgPT4gbGV2ZWwua2luZCA9PT0gTGV2ZWxLaW5kLmFzc2Vzc21lbnQpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGVyZSBhcmUgYW55IGxldmVscyBpbiBhIGxlc3Nvbi5cbiAqIEBwYXJhbSB7b2JqZWN0fSBsZXNzb24gdGhlIGxlc3NvbiB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2x9IElmIHRoZSBsZXNzb24gaGFzIGFueSBsZXZlbHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlc3Nvbkhhc0xldmVscyhsZXNzb24pIHtcbiAgcmV0dXJuICEhbGVzc29uLmxldmVscz8ubGVuZ3RoO1xufVxuXG5leHBvcnQgY29uc3QgY29tbWVudExlZnQgPSBwcm9ncmVzcyA9PlxuICBwcm9ncmVzcz8udGVhY2hlckZlZWRiYWNrQ29tbWVudGVkICYmIHByb2dyZXNzPy50ZWFjaGVyRmVlZGJhY2tOZXc7XG5cbmV4cG9ydCBjb25zdCBzdHVkZW50TmVlZHNGZWVkYmFjayA9IChwcm9ncmVzcywgbGV2ZWwpID0+XG4gIHByb2dyZXNzICYmXG4gIHByb2dyZXNzLnN0YXR1cyAhPT0gTGV2ZWxTdGF0dXMubm90X3RyaWVkICYmXG4gICFwcm9ncmVzcy50ZWFjaGVyRmVlZGJhY2tOZXcgJiZcbiAgbGV2ZWwua2luZCA9PT0gJ2Fzc2Vzc21lbnQnICYmXG4gIGxldmVsLmNhbkhhdmVGZWVkYmFjaztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHdlIHNob3VsZCBzaG93IFwiS2VlcCB3b3JraW5nXCIgYW5kIFwiTmVlZHMgcmV2aWV3XCIgc3RhdGVzIGZvclxuICogcHJvZ3Jlc3MgaW4gYSB1bml0LiBVbml0IG11c3QgYmUgZWl0aGVyIENTRCBvciBDU1AuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRTaG93UmV2aWV3U3RhdGVzKHVuaXQpIHtcbiAgcmV0dXJuIHVuaXQuaXNDc2QgfHwgdW5pdC5pc0NzcDtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyBzdW1tYXJ5IG9mIGEgc3R1ZGVudCdzIHByb2dyZXNzIGluIGEgbGVzc29uJ3MgbGV2ZWxzLlxuICogQHBhcmFtIHt7aWQ6IHN0dWRlbnRMZXZlbFByb2dyZXNzVHlwZX19IHN0dWRlbnRMZXZlbFByb2dyZXNzXG4gKiBBbiBvYmplY3Qga2V5ZWQgYnkgbGV2ZWwgaWQgY29udGFpbmluZyBvYmplY3RzIHJlcHJlc2VudGluZyB0aGUgc3R1ZGVudCdzXG4gKiBwcm9ncmVzcyBpbiB0aGF0IGxldmVsXG4gKiBAcGFyYW0ge2xldmVsVHlwZVtdfSBsZXZlbHMgQW4gYXJyYXkgb2YgbGV2ZWxzXG4gKiBAcmV0dXJucyB7c3R1ZGVudExlc3NvblByb2dyZXNzVHlwZX1cbiAqIEFuIG9iamVjdCByZXByZXNlbnRpbmcgc3R1ZGVudCdzIHByb2dyZXNzIGluIHRoZSBsZXNzb25cbiAqL1xuZnVuY3Rpb24gbGVzc29uUHJvZ3Jlc3NGb3JTdHVkZW50KHN0dWRlbnRMZXZlbFByb2dyZXNzLCBsZXNzb25MZXZlbHMpIHtcbiAgLy8gRmlsdGVyIGFueSBib251cyBsZXZlbHMgYXMgdGhleSBkbyBub3QgY291bnQgdG93YXJkIHByb2dyZXNzLlxuICBjb25zdCBmaWx0ZXJlZExldmVscyA9IGxlc3NvbkxldmVscy5maWx0ZXIobGV2ZWwgPT4gIWxldmVsLmJvbnVzKTtcbiAgaWYgKCFmaWx0ZXJlZExldmVscy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGNvbXBsZXRlZFN0YXR1c2VzID0gW1xuICAgIExldmVsU3RhdHVzLnBlcmZlY3QsXG4gICAgTGV2ZWxTdGF0dXMuc3VibWl0dGVkLFxuICAgIExldmVsU3RhdHVzLmZyZWVfcGxheV9jb21wbGV0ZSxcbiAgICBMZXZlbFN0YXR1cy5jb21wbGV0ZWRfYXNzZXNzbWVudCxcbiAgXTtcblxuICBsZXQgYXR0ZW1wdGVkID0gMDtcbiAgbGV0IGltcGVyZmVjdCA9IDA7XG4gIGxldCBjb21wbGV0ZWQgPSAwO1xuICBsZXQgdGltZVNwZW50ID0gMDtcbiAgbGV0IGxhc3RUaW1lc3RhbXAgPSAwO1xuXG4gIGZpbHRlcmVkTGV2ZWxzLmZvckVhY2gobGV2ZWwgPT4ge1xuICAgIGNvbnN0IGxldmVsUHJvZ3Jlc3MgPSBzdHVkZW50TGV2ZWxQcm9ncmVzc1tsZXZlbC5pZF07XG4gICAgaWYgKGxldmVsUHJvZ3Jlc3MpIHtcbiAgICAgIGF0dGVtcHRlZCArPSBsZXZlbFByb2dyZXNzLnN0YXR1cyA9PT0gTGV2ZWxTdGF0dXMuYXR0ZW1wdGVkO1xuICAgICAgaW1wZXJmZWN0ICs9IGxldmVsUHJvZ3Jlc3Muc3RhdHVzID09PSBMZXZlbFN0YXR1cy5wYXNzZWQ7XG4gICAgICBjb21wbGV0ZWQgKz0gY29tcGxldGVkU3RhdHVzZXMuaW5jbHVkZXMobGV2ZWxQcm9ncmVzcy5zdGF0dXMpO1xuICAgICAgdGltZVNwZW50ICs9IGxldmVsUHJvZ3Jlc3MudGltZVNwZW50IHx8IDA7XG4gICAgICBsYXN0VGltZXN0YW1wID0gTWF0aC5tYXgobGFzdFRpbWVzdGFtcCwgbGV2ZWxQcm9ncmVzcy5sYXN0VGltZXN0YW1wIHx8IDApO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgaW5jb21wbGV0ZSA9IGZpbHRlcmVkTGV2ZWxzLmxlbmd0aCAtIGNvbXBsZXRlZCAtIGltcGVyZmVjdDtcbiAgY29uc3QgaXNMZXNzb25TdGFydGVkID0gYXR0ZW1wdGVkICsgaW1wZXJmZWN0ICsgY29tcGxldGVkID4gMDtcblxuICBpZiAoIWlzTGVzc29uU3RhcnRlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgZ2V0UGVyY2VudCA9IGNvdW50ID0+ICgxMDAgKiBjb3VudCkgLyBmaWx0ZXJlZExldmVscy5sZW5ndGg7XG4gIHJldHVybiB7XG4gICAgaW5jb21wbGV0ZVBlcmNlbnQ6IGdldFBlcmNlbnQoaW5jb21wbGV0ZSksXG4gICAgaW1wZXJmZWN0UGVyY2VudDogZ2V0UGVyY2VudChpbXBlcmZlY3QpLFxuICAgIGNvbXBsZXRlZFBlcmNlbnQ6IGdldFBlcmNlbnQoY29tcGxldGVkKSxcbiAgICB0aW1lU3BlbnQ6IHRpbWVTcGVudCxcbiAgICBsYXN0VGltZXN0YW1wOiBsYXN0VGltZXN0YW1wLFxuICB9O1xufVxuXG4vKipcbiAqIENvbXB1dGVzIHN0dWRlbnRMZXNzb25Qcm9ncmVzc1R5cGUgb2JqZWN0cyBmb3IgZWFjaCBsZXNzb24gZnJvbSB0aGUgcHJvdmlkZWRcbiAqIGxldmVsIHByb2dyZXNzIGRhdGEgZm9yIGVhY2ggc3R1ZGVudC5cbiAqIEBwYXJhbSB7c3R1ZGVudElkOiB7bGV2ZWxJZDogc3R1ZGVudExldmVsUHJvZ3Jlc3NUeXBlfX0gc2VjdGlvbkxldmVsUHJvZ3Jlc3NcbiAqIEFuIG9iamVjdCBrZXllZCBieSBzdHVkZW50IGlkIGFsbCB0aGUgc3R1ZGVudCdzIGxldmVsIHByb2dyZXNzIGRhdGFcbiAqIEBwYXJhbSB7bGVzc29uVHlwZVtdfSBsZXNzb25zIEFuIGFycmF5IG9mIGxlc3NvbnNcbiAqIEByZXR1cm5zIHtzdHVkZW50SWQ6IHtsZXNzb25JZDogc3R1ZGVudExlc3NvblByb2dyZXNzVHlwZX19XG4gKiBBbiBvYmplY3QgY29udGFpbmluZyBsZXNzb24gcHJvZ3Jlc3MgZGF0YSBmb3IgZWFjaCBzdHVkZW50IGluIGEgc2VjdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVzc29uUHJvZ3Jlc3NGb3JTZWN0aW9uKHNlY3Rpb25MZXZlbFByb2dyZXNzLCBsZXNzb25zKSB7XG4gIC8vIGNyZWF0ZSBlbXB0eSBcImRpY3Rpb25hcnlcIiB0byBzdG9yZSBsZXNzb24gcHJvZ3Jlc3MgZm9yIGVhY2ggc3R1ZGVudFxuICBjb25zdCBzZWN0aW9uTGVzc29uUHJvZ3Jlc3MgPSB7fTtcbiAgT2JqZWN0LmVudHJpZXMoc2VjdGlvbkxldmVsUHJvZ3Jlc3MpLmZvckVhY2goXG4gICAgLy8ga2V5OiBzdHVkZW50SWQsIHZhbHVlOiBcImRpY3Rpb25hcnlcIiBvZiBsZXZlbCBwcm9ncmVzcyBmb3IgdGhhdCBzdHVkZW50XG4gICAgKFtzdHVkZW50SWQsIHN0dWRlbnRMZXZlbFByb2dyZXNzXSkgPT4ge1xuICAgICAgLy8gY3JlYXRlIGVtcHR5IFwiZGljdGlvbmFyeVwiIHRvIHN0b3JlIHBlci1sZXNzb24gcHJvZ3Jlc3MgZm9yIHN0dWRlbnRcbiAgICAgIGNvbnN0IHN0dWRlbnRMZXNzb25Qcm9ncmVzcyA9IHt9O1xuICAgICAgLy8gZm9yIGVhY2ggbGVzc29uLCBzdW1tYXJpemUgc3R1ZGVudCdzIHByb2dyZXNzIGJhc2VkIG9uIGxldmVsIHByb2dyZXNzXG4gICAgICBsZXNzb25zLmZvckVhY2gobGVzc29uID0+IHtcbiAgICAgICAgc3R1ZGVudExlc3NvblByb2dyZXNzW2xlc3Nvbi5pZF0gPSBsZXNzb25Qcm9ncmVzc0ZvclN0dWRlbnQoXG4gICAgICAgICAgc3R1ZGVudExldmVsUHJvZ3Jlc3MsXG4gICAgICAgICAgbGVzc29uLmxldmVsc1xuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgICAvLyBhZGQgc3R1ZGVudCBwcm9ncmVzcyB0byBzZWN0aW9uIHByb2dyZXNzXG4gICAgICBzZWN0aW9uTGVzc29uUHJvZ3Jlc3Nbc3R1ZGVudElkXSA9IHN0dWRlbnRMZXNzb25Qcm9ncmVzcztcbiAgICB9XG4gICk7XG4gIHJldHVybiBzZWN0aW9uTGVzc29uUHJvZ3Jlc3M7XG59XG5cbi8qKlxuICogVGhlIGxldmVsIG9iamVjdCBwYXNzZWQgZG93biB0byB1cyB2aWEgdGhlIHNlcnZlciAoYW5kIHN0b3JlZCBpblxuICogc2NyaXB0Lmxlc3NvbnMubGV2ZWxzKSBjb250YWlucyBtb3JlIGRhdGEgdGhhbiB3ZSBuZWVkLiBUaGlzIHBhcnNlcyB0aGUgcGFydHNcbiAqIHdlIGNhcmUgYWJvdXQgdG8gY29uZm9ybSB0byBvdXIgYGxldmVsVHlwZWAgb2JqZWN0LlxuICovXG5leHBvcnQgY29uc3QgcHJvY2Vzc2VkTGV2ZWwgPSBsZXZlbCA9PiB7XG4gIHJldHVybiB7XG4gICAgaWQ6IGxldmVsLmFjdGl2ZUlkIHx8IGxldmVsLmlkLFxuICAgIHVybDogbGV2ZWwudXJsLFxuICAgIG5hbWU6IGxldmVsLm5hbWUsXG4gICAgYXBwOiBsZXZlbC5hcHAsXG4gICAgdXNlc0xhYjI6IGxldmVsLnVzZXNfbGFiMixcbiAgICBwcm9ncmVzc2lvbjogbGV2ZWwucHJvZ3Jlc3Npb24sXG4gICAgcHJvZ3Jlc3Npb25EaXNwbGF5TmFtZTogbGV2ZWwucHJvZ3Jlc3Npb25fZGlzcGxheV9uYW1lLFxuICAgIGtpbmQ6IGxldmVsLmtpbmQsXG4gICAgaWNvbjogbGV2ZWwuaWNvbixcbiAgICBpc1VucGx1Z2dlZDogbGV2ZWwuZGlzcGxheV9hc191bnBsdWdnZWQsXG4gICAgbGV2ZWxOdW1iZXI6IGxldmVsLmtpbmQgPT09IExldmVsS2luZC51bnBsdWdnZWQgPyB1bmRlZmluZWQgOiBsZXZlbC50aXRsZSxcbiAgICBidWJibGVUZXh0OlxuICAgICAgbGV2ZWwua2luZCA9PT0gTGV2ZWxLaW5kLnVucGx1Z2dlZFxuICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICA6IGxldmVsLmxldHRlciB8fCBsZXZlbC50aXRsZS50b1N0cmluZygpLFxuICAgIGlzQ29uY2VwdExldmVsOiBsZXZlbC5pc19jb25jZXB0X2xldmVsLFxuICAgIGlzVmFsaWRhdGVkOiBsZXZlbC5pc192YWxpZGF0ZWQsXG4gICAgY2FuSGF2ZUZlZWRiYWNrOiBsZXZlbC5jYW5faGF2ZV9mZWVkYmFjayxcbiAgICBib251czogbGV2ZWwuYm9udXMsXG4gICAgcGFnZU51bWJlcjpcbiAgICAgIHR5cGVvZiBsZXZlbC5wYWdlX251bWJlciAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBsZXZlbC5wYWdlX251bWJlclxuICAgICAgICA6IFBVWlpMRV9QQUdFX05PTkUsXG4gICAgc3VibGV2ZWxzOlxuICAgICAgbGV2ZWwuc3VibGV2ZWxzICYmIGxldmVsLnN1YmxldmVscy5tYXAobGV2ZWwgPT4gcHJvY2Vzc2VkTGV2ZWwobGV2ZWwpKSxcbiAgICBwYXRoOiBsZXZlbC5wYXRoLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldExldmVsUmVzdWx0ID0gc2VydmVyUHJvZ3Jlc3MgPT4ge1xuICByZXR1cm4gc2VydmVyUHJvZ3Jlc3MucmVzdWx0IHx8IHJlc3VsdEZyb21TdGF0dXMoc2VydmVyUHJvZ3Jlc3Muc3RhdHVzKTtcbn07XG5cbi8qKlxuICogYHN0dWRlbnRMZXZlbFByb2dyZXNzVHlwZS5wYWdlc2AgaXMgdXNlZCBieSBtdWx0aS1wYWdlIGFzc2Vzc21lbnRzLFxuICogYW5kIGl0cyBwcmVzZW5jZSAob3IgYWJzZW5jZSkgaXMgaG93IHdlIGRpc3Rpbmd1aXNoIHRob3NlIGZyb20gc2luZ2xlLXBhZ2VcbiAqIGFzc2Vzc21lbnRzLiBgcGFnZXNfY29tcGxldGVkYCBpcyBhbiBvcHRpb25hbCBhcnJheSBvZiBpbmRpdmlkdWFsIHJlc3VsdHNcbiAqIGZvciBlYWNoIHBhZ2UgKG9yIG51bGwpLiBTaW5jZSB3ZSBvbmx5IGhhdmUgdGhlIHJlc3VsdHMgZm9yIHRoZSBwYWdlcywgd2VcbiAqIG5lZWQgdG8gY3JlYXRlIGEgYHN0dWRlbnRMZXZlbFByb2dyZXNzVHlwZWAgb2JqZWN0IGZyb20gdGhlIHJlc3VsdHMgdGhlblxuICogc2V0IHRoZSBgbG9ja2VkYCB2YWx1ZSBmcm9tIHRoZSBwYXJlbnQgcHJvZ3Jlc3MuXG4gKi9cbmNvbnN0IGdldFBhZ2VzUHJvZ3Jlc3MgPSBzZXJ2ZXJQcm9ncmVzcyA9PiB7XG4gIGlmIChzZXJ2ZXJQcm9ncmVzcy5wYWdlc19jb21wbGV0ZWQ/Lmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gc2VydmVyUHJvZ3Jlc3MucGFnZXNfY29tcGxldGVkLm1hcChwYWdlUmVzdWx0ID0+IHtcbiAgICAgIGNvbnN0IHBhZ2VQcm9ncmVzcyA9XG4gICAgICAgIChwYWdlUmVzdWx0ICYmIGxldmVsUHJvZ3Jlc3NGcm9tUmVzdWx0KHBhZ2VSZXN1bHQpKSB8fFxuICAgICAgICBsZXZlbFByb2dyZXNzRnJvbVN0YXR1cyhMZXZlbFN0YXR1cy5ub3RfdHJpZWQpO1xuICAgICAgcGFnZVByb2dyZXNzLmxvY2tlZCA9IHNlcnZlclByb2dyZXNzLmxvY2tlZCB8fCBmYWxzZTtcbiAgICAgIHJldHVybiBwYWdlUHJvZ3Jlc3M7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgbGV2ZWwgcHJvZ3Jlc3Mgb2JqZWN0IHRoYXQgd2UgZ2V0IGZyb20gdGhlIHNlcnZlciB1c2luZyBlaXRoZXJcbiAqIC9hcGkvdXNlcl9wcm9ncmVzcyBvciAvZGFzaGJvYXJkYXBpL3NlY3Rpb25fbGV2ZWxfcHJvZ3Jlc3MgaW50byBvdXJcbiAqIGNhbm9uaWNhbCBzdHVkZW50TGV2ZWxQcm9ncmVzc1R5cGUgc2hhcGUuXG4gKiBAcGFyYW0ge29iamVjdH0gc2VydmVyUHJvZ3Jlc3MgQSBwcm9ncmVzcyBvYmplY3QgZnJvbSB0aGUgc2VydmVyXG4gKiBAcmV0dXJucyB7c3R1ZGVudExldmVsUHJvZ3Jlc3NUeXBlfSBPdXIgY2Fub25pY2FsIHByb2dyZXNzIHNoYXBlXG4gKi9cbmV4cG9ydCBjb25zdCBsZXZlbFByb2dyZXNzRnJvbVNlcnZlciA9IHNlcnZlclByb2dyZXNzID0+IHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0dXM6IHNlcnZlclByb2dyZXNzLnN0YXR1cyB8fCBMZXZlbFN0YXR1cy5ub3RfdHJpZWQsXG4gICAgcmVzdWx0OiBnZXRMZXZlbFJlc3VsdChzZXJ2ZXJQcm9ncmVzcyksXG4gICAgbG9ja2VkOiBzZXJ2ZXJQcm9ncmVzcy5sb2NrZWQgfHwgZmFsc2UsXG4gICAgcGFpcmVkOiBzZXJ2ZXJQcm9ncmVzcy5wYWlyZWQgfHwgZmFsc2UsXG4gICAgdGltZVNwZW50OiBzZXJ2ZXJQcm9ncmVzcy50aW1lX3NwZW50LFxuICAgIHRlYWNoZXJGZWVkYmFja1Jldmlld1N0YXRlOiBzZXJ2ZXJQcm9ncmVzcy50ZWFjaGVyX2ZlZWRiYWNrX3Jldmlld19zdGF0ZSxcbiAgICB0ZWFjaGVyRmVlZGJhY2tOZXc6IHNlcnZlclByb2dyZXNzLnRlYWNoZXJfZmVlZGJhY2tfbmV3IHx8IGZhbHNlLFxuICAgIHRlYWNoZXJGZWVkYmFja0NvbW1lbnRlZDpcbiAgICAgIHNlcnZlclByb2dyZXNzLnRlYWNoZXJfZmVlZGJhY2tfY29tbWVudGVkIHx8IGZhbHNlLFxuICAgIGxhc3RUaW1lc3RhbXA6IHNlcnZlclByb2dyZXNzLmxhc3RfcHJvZ3Jlc3NfYXQsXG4gICAgcGFnZXM6IGdldFBhZ2VzUHJvZ3Jlc3Moc2VydmVyUHJvZ3Jlc3MpLFxuICB9O1xufTtcblxuLyoqXG4gKiBHaXZlbiBhbiBvYmplY3QgZnJvbSB0aGUgc2VydmVyIHdpdGggc3R1ZGVudCBwcm9ncmVzcyBkYXRhIGtleWVkIGJ5IGxldmVsIElELFxuICogcGFyc2UgdGhlIHByb2dyZXNzIGRhdGEgaW50byBvdXIgY2Fub25pY2FsIHN0dWRlbnRMZXZlbFByb2dyZXNzVHlwZVxuICogQHBhcmFtIHt7W2xldmVsSWQ6IG51bWJlcl06c2VydmVyUHJvZ3Jlc3N9fSBzZXJ2ZXJTdHVkZW50UHJvZ3Jlc3NcbiAqIEByZXR1cm5zIHt7W2xldmVsSWQ6IG51bWJlcl06c3R1ZGVudExldmVsUHJvZ3Jlc3NUeXBlfX1cbiAqL1xuZXhwb3J0IGNvbnN0IHByb2Nlc3NTZXJ2ZXJTdHVkZW50UHJvZ3Jlc3MgPSBzZXJ2ZXJTdHVkZW50UHJvZ3Jlc3MgPT4ge1xuICByZXR1cm4gXy5tYXBWYWx1ZXMoc2VydmVyU3R1ZGVudFByb2dyZXNzLCBwcm9ncmVzcyA9PlxuICAgIGxldmVsUHJvZ3Jlc3NGcm9tU2VydmVyKHByb2dyZXNzKVxuICApO1xufTtcblxuLyoqXG4gKiBHaXZlbiBhbiBvYmplY3QgZnJvbSB0aGUgc2VydmVyIHdpdGggc2VjdGlvbiBwcm9ncmVzcyBkYXRhIGtleWVkIGJ5IHN0dWRlbnRcbiAqIElEIGFuZCBsZXZlbCBJRCwgcGFyc2UgdGhlIHByb2dyZXNzIGRhdGEgaW50byBvdXIgY2Fub25pY2FsXG4gKiBzdHVkZW50TGV2ZWxQcm9ncmVzc1R5cGVcbiAqIEBwYXJhbSB7e3N0dWRlbklkOntsZXZlbElkOnNlcnZlclByb2dyZXNzfX19IHNlcnZlclNlY3Rpb25Qcm9ncmVzc1xuICogQHJldHVybnMge3tzdHVkZW5JZDp7bGV2ZWxJZDpzdHVkZW50TGV2ZWxQcm9ncmVzc1R5cGV9fX1cbiAqL1xuZXhwb3J0IGNvbnN0IHByb2Nlc3NTZXJ2ZXJTZWN0aW9uUHJvZ3Jlc3MgPSBzZXJ2ZXJTZWN0aW9uUHJvZ3Jlc3MgPT4ge1xuICByZXR1cm4gXy5tYXBWYWx1ZXMoc2VydmVyU2VjdGlvblByb2dyZXNzLCBzdHVkZW50ID0+XG4gICAgcHJvY2Vzc1NlcnZlclN0dWRlbnRQcm9ncmVzcyhzdHVkZW50KVxuICApO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBzdHVkZW50TGV2ZWxQcm9ncmVzc1R5cGUgb2JqZWN0IHdpdGggdGhlIHByb3ZpZGVkIHN0YXR1cyBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXNcbiAqIEByZXR1cm5zIHtzdHVkZW50TGV2ZWxQcm9ncmVzc1R5cGV9XG4gKi9cbmV4cG9ydCBjb25zdCBsZXZlbFByb2dyZXNzRnJvbVN0YXR1cyA9IHN0YXR1cyA9PiB7XG4gIHJldHVybiBsZXZlbFByb2dyZXNzRnJvbVNlcnZlcih7c3RhdHVzOiBzdGF0dXN9KTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgc3R1ZGVudExldmVsUHJvZ3Jlc3NUeXBlIG9iamVjdCBmcm9tIHRoZSBwcm92aWRlZCByZXN1bHQgdmFsdWUuXG4gKiBUaGlzIGlzIHVzZWQgdG8gbWVyZ2UgcHJvZ3Jlc3MgZGF0YSBmcm9tIHNlc3Npb24gc3RvcmFnZSB3aGljaCBvbmx5IGluY2x1ZGVzXG4gKiBhIHJlc3VsdCB2YWx1ZSBpbnRvIG91ciBkYXRhIG1vZGVsIHRoYXQgdXNlcyBzdHVkZW50TGV2ZWxQcm9ncmVzc1R5cGUgb2JqZWN0cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSByZXN1bHRcbiAqIEByZXR1cm5zIHtzdHVkZW50TGV2ZWxQcm9ncmVzc1R5cGV9XG4gKi9cbmV4cG9ydCBjb25zdCBsZXZlbFByb2dyZXNzRnJvbVJlc3VsdCA9IHJlc3VsdCA9PiB7XG4gIHJldHVybiBsZXZlbFByb2dyZXNzRnJvbVN0YXR1cyhhY3Rpdml0eUNzc0NsYXNzKHJlc3VsdCkpO1xufTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge1Jldmlld1N0YXRlc30gZnJvbSAnQGNkby9hcHBzL3RlbXBsYXRlcy9mZWVkYmFjay90eXBlcyc7XG5cbi8qKlxuICogU2VlIEFwcGxpY2F0aW9uSGVscGVyOjpQVVpaTEVfUEFHRV9OT05FLlxuICovXG5leHBvcnQgY29uc3QgUFVaWkxFX1BBR0VfTk9ORSA9IC0xO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0dWRlbnRcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gaWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lXG4gKi9cbmV4cG9ydCBjb25zdCBzdHVkZW50VHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGlkOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn0pO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExldmVsXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgbGV2ZWwuIEl0IGlzIGludGVudGlvbmFsbHlcbiAqICAgYSBzdHJpbmcgKGRlc3BpdGUgYWx3YXlzIGJlaW5nIG51bWVyaWNhbCkgYmVjYXVzZSBpdCBnZXRzXG4gKiAgIHVzZWQgYXMgYSBrZXkgaW4gSlMgb2JqZWN0cyBhbmQgaXMgdXNlZCBpbiB0aGUgdXJsLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHVybFxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpY29uXG4gKiBAcHJvcGVydHkge2Jvb2x9IGlzVW5wbHVnZ2VkXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGV2ZWxOdW1iZXJcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gaXNDb25jZXB0TGV2ZWxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBraW5kXG4gKiBAcHJvcGVydHkge251bWJlcn0gcGFnZU51bWJlciBUaGUgcGFnZSBudW1iZXIgb2YgdGhlIGxldmVsIGlmXG4gKiAgIHRoaXMgaXMgYSBtdWx0aS1wYWdlIGxldmVsLCBvciBQVVpaTEVfUEFHRV9OT05FXG4gKiBAcHJvcGVydHkge2FycmF5fSBzdWJsZXZlbHMgQW4gb3B0aW9uYWwgYXJyYXkgb2YgcmVjdXJzaXZlIHN1YmxldmVsIG9iamVjdHNcbiAqL1xuY29uc3QgbGV2ZWxTaGFwZSA9IHtcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbGV2ZWxOdW1iZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gIGJ1YmJsZVRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGtpbmQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaWNvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgaXNVbnBsdWdnZWQ6IFByb3BUeXBlcy5ib29sLFxuICBpc0NvbmNlcHRMZXZlbDogUHJvcFR5cGVzLmJvb2wsXG4gIHBhZ2VOdW1iZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKiBzdWJsZXZlbHM6IFByb3BUeXBlcy5hcnJheSAqLyAvLyBTZWUgYmVsb3dcbn07XG4vLyBBdm9pZCByZWN1cnNpdmUgZGVmaW5pdGlvblxubGV2ZWxTaGFwZS5zdWJsZXZlbHMgPSBQcm9wVHlwZXMuYXJyYXlPZihcbiAgUHJvcFR5cGVzLnNoYXBlKGxldmVsV2l0aFByb2dyZXNzVHlwZSlcbik7XG5cbmV4cG9ydCBjb25zdCBsZXZlbFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUobGV2ZWxTaGFwZSk7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTGV2ZWxXaXRoUHJvZ3Jlc3NcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3RhdHVzXG4gKiBAcHJvcGVydHkge2Jvb2x9IGlzTG9ja2VkXG4gKiBAcHJvcGVydHkge2Jvb2x9IGlzQ3VycmVudExldmVsXG4gKlxuICogTm90ZTogZ29pbmcgZm9yd2FyZCwgd2UgYXJlIG1vdmluZyBhbGwgdXNlci1zcGVjaWZpYyBkYXRhIGFib3V0IGEgbGV2ZWwgaW50b1xuICogYHN0dWRlbnRMZXZlbFByb2dyZXNzVHlwZWAsIHNvIG91ciBgbGV2ZWxUeXBlYCBvbmx5IGluY2x1ZGVzIGRhdGEgdGhhdCBpc1xuICogbm90IHVzZXItc3BlY2lmaWMuIEhvd2V2ZXIsIGZvciBub3cgd2Ugc3RpbGwgbmVlZCB0byBzdXBwb3J0IHRoaXMgbGVnYWN5XG4gKiB0eXBlIHdoaWNoIGRvZXMgaW5jbHVkZSB1c2VyLXNwZWNpZmljIGRhdGEsIGFuZCBidWlsZHMgb24gYGxldmVsVHlwZWAuXG4gKi9cbmV4cG9ydCBjb25zdCBsZXZlbFdpdGhQcm9ncmVzc1R5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICAuLi5sZXZlbFNoYXBlLFxuICBzdGF0dXM6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcGFpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNMb2NrZWQ6IFByb3BUeXBlcy5ib29sLFxuICBpc0N1cnJlbnRMZXZlbDogUHJvcFR5cGVzLmJvb2wsXG59KTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdHVkZW50TGV2ZWxQcm9ncmVzc1xuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdGF0dXNcbiAqIEEgc3RyaW5nIGVudW0gcmVwcmVzZW50aW5nIHN0dWRlbnQgcHJvZ3Jlc3Mgc3RhdHVzIG9uIGEgbGV2ZWwuXG4gKiBTZWUgc3JjL3V0aWwvc2hhcmVkQ29uc3RhbnRzLkxldmVsU3RhdHVzLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHJlc3VsdFxuICogQSBudW1lcmljYWwgZW51bSBvZiB0aGUgVGVzdFJlc3VsdCBhIHN0dWRlbnQgcmVjZWl2ZWQgZm9yIGEgbGV2ZWwuXG4gKiBTZWUgc3JjL2NvbnN0YW50cy5UZXN0UmVzdWx0LlxuICogU2VlIHNyYy9jb2RlLXN0dWRpby9hY3Rpdml0eVV0aWxzLmFjdGl2aXR5Q3NzQ2xhc3MgZm9yIGEgbWFwcGluZyB0byBzdGF0dXMuXG4gKiBAcHJvcGVydHkge2Jvb2x9IGxvY2tlZFxuICogQSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGxldmVsIGlzIGxvY2tlZCBmb3IgdGhlIHN0dWRlbnQuXG4gKiBAcHJvcGVydHkge2Jvb2x9IHBhaXJlZFxuICogQSBib29sZWFuIGluZGljYXRpbmcgaWYgYSBzdHVkZW50IHdhcyBwYWlyZWQgb24gYSBsZXZlbC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0aW1lU3BlbnRcbiAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBhIHN0dWRlbnQgc3BlbnQgb24gYSBsZXZlbC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsYXN0VGltZXN0YW1wXG4gKiBBIHRpbWVzdGFtcCBvZiB0aGUgbGFzdCB0aW1lIGEgc3R1ZGVudCBtYWRlIHByb2dyZXNzIG9uIGEgbGV2ZWwuXG4gKiBAcHJvcGVydHkge1Jldmlld1N0YXRlc30gdGVhY2hlckZlZWRiYWNrUmV2aWV3U3RhdGVcbiAqIEFuIG9wdGlvbmFsIGVudW0gaW5kaWNhdGluZyBhIHRlYWNoZXIgZmVlZGJhY2sgcmV2aWV3IHN0YXRlLlxuICogQHByb3BlcnR5IHthcnJheX0gcGFnZXNcbiAqIEFuIG9wdGlvbmFsIGFycmF5IG9mIHJlY3Vyc2l2ZSBwcm9ncmVzcyBvYmplY3RzIHJlcHJlc2VudGluZyBwcm9ncmVzcyBvblxuICogaW5kaXZpZHVhbCBwYWdlcyBvZiBhIG11bHRpLXBhZ2UgYXNzZXNzbWVudFxuICovXG5jb25zdCBzdHVkZW50TGV2ZWxQcm9ncmVzc1NoYXBlID0ge1xuICBzdGF0dXM6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcmVzdWx0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGxvY2tlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgcGFpcmVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICB0aW1lU3BlbnQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIGxhc3RUaW1lc3RhbXA6IFByb3BUeXBlcy5udW1iZXIsXG4gIHRlYWNoZXJGZWVkYmFja1Jldmlld1N0YXRlOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoUmV2aWV3U3RhdGVzKSksXG4gIHRlYWNoZXJGZWVkYmFja05ldzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLyoqIHBhZ2VzOiBQcm9wVHlwZXMuYXJyYXkgKi8gLy8gU2VlIGJlbG93XG59O1xuLy8gQXZvaWQgcmVjdXJzaXZlIGRlZmluaXRpb25cbnN0dWRlbnRMZXZlbFByb2dyZXNzU2hhcGUucGFnZXMgPSBQcm9wVHlwZXMuYXJyYXlPZihcbiAgUHJvcFR5cGVzLnNoYXBlKHN0dWRlbnRMZXZlbFByb2dyZXNzU2hhcGUpXG4pO1xuZXhwb3J0IGNvbnN0IHN0dWRlbnRMZXZlbFByb2dyZXNzVHlwZSA9IFByb3BUeXBlcy5zaGFwZShcbiAgc3R1ZGVudExldmVsUHJvZ3Jlc3NTaGFwZVxuKTtcblxuLypcbiAqIEB0eXBlZGVmIHtPYmplY3R9IHVuaXRQcm9ncmVzc1R5cGVcbiAqXG4gKiB1bml0UHJvZ3Jlc3NUeXBlIHJlcHJlc2VudHMgYSB1c2VyJ3MgcHJvZ3Jlc3MgaW4gYSBzY3JpcHQuICBJdCBpcyBhIG1hcCBvZlxuICogbGV2ZWxJZCAtPiBzdHVkZW50TGV2ZWxQcm9ncmVzc1R5cGUgb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGNvbnN0IHVuaXRQcm9ncmVzc1R5cGUgPSBQcm9wVHlwZXMub2JqZWN0T2Yoc3R1ZGVudExldmVsUHJvZ3Jlc3NUeXBlKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMZXNzb25cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGlkXG4gKiBAcHJvcGVydHkge2Jvb2x9IGxvY2thYmxlXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGVzc29uTnVtYmVyXG4gKi9cbmV4cG9ydCBjb25zdCBsZXNzb25UeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBpZDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBsb2NrYWJsZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgbGVzc29uTnVtYmVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICBsZXNzb25fcGxhbl9odG1sX3VybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgbGVzc29uX2ZlZWRiYWNrX3VybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgaXNGb2N1c0FyZWE6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIGRlc2NyaXB0aW9uX3N0dWRlbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGRlc2NyaXB0aW9uX3RlYWNoZXI6IFByb3BUeXBlcy5zdHJpbmcsXG59KTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdHVkZW50TGVzc29uUHJvZ3Jlc3NcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW5jb21wbGV0ZVBlcmNlbnRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbXBlcmZlY3RQZXJjZW50XG4gKiBAcHJvcGVydHkge251bWJlcn0gY29tcGxldGVkUGVyY2VudFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVTcGVudFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxhc3RUaW1lc3RhbXBcbiAqL1xuZXhwb3J0IGNvbnN0IHN0dWRlbnRMZXNzb25Qcm9ncmVzc1R5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBpbmNvbXBsZXRlUGVyY2VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBpbXBlcmZlY3RQZXJjZW50OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGNvbXBsZXRlZFBlcmNlbnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgdGltZVNwZW50OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGxhc3RUaW1lc3RhbXA6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbn0pO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExlc3Nvbkdyb3VwXG4gKiBTdW1tYXJ5IG9mIGEgTGVzc29uR3JvdXAgcnVieSBtb2RlbC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGlzcGxheU5hbWVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpZ1F1ZXN0aW9uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGVzY3JpcHRpb25cbiAqL1xuY29uc3QgbGVzc29uR3JvdXBTaGFwZSA9IHtcbiAgaWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIGRpc3BsYXlOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBiaWdRdWVzdGlvbnM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGRlc2NyaXB0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBHcm91cGVkTGVzc29uc1xuICogVHlwZSBvZiBvYmplY3QgcmV0dXJuZWQgYnkgYHByb2dyZXNzUmVkdXguZ3JvdXBlZExlc3NvbnMoKWAuXG4gKlxuICogQHByb3BlcnR5IHtsZXNzb25Hcm91cFNoYXBlfSBsZXNzb25Hcm91cFxuICogU3VtbWFyeSBvZiB0aGUgTGVzc29uR3JvdXAgcnVieSBtb2RlbCBkZXNjcmliaW5nIHRoaXMgZ3JvdXAgb2YgbGVzc29ucy5cbiAqIEBwcm9wZXJ0eSB7W2xlc3NvblR5cGVdfSBsZXNzb25zXG4gKiBPcmRlcmVkIGxpc3Qgb2YgbGVzc29ucyBpbiB0aGlzIGdyb3VwLlxuICogQHByb3BlcnR5IHtbW2xldmVsV2l0aFByb2dyZXNzVHlwZV1dfSBsZXZlbHNCeUxlc3NvblxuICogT3JkZXJlZCBsaXN0IG9mIGxldmVscyBmb3IgZWFjaCBvZiB0aGUgbGVzc29ucyBpbiB0aGlzIGdyb3VwLlxuICovXG5leHBvcnQgY29uc3QgZ3JvdXBlZExlc3NvbnNUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgbGVzc29uR3JvdXA6IFByb3BUeXBlcy5zaGFwZShsZXNzb25Hcm91cFNoYXBlKSxcbiAgbGVzc29uczogUHJvcFR5cGVzLmFycmF5T2YobGVzc29uVHlwZSkuaXNSZXF1aXJlZCxcbiAgbGV2ZWxzQnlMZXNzb246IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hcnJheU9mKGxldmVsV2l0aFByb2dyZXNzVHlwZSkpXG4gICAgLmlzUmVxdWlyZWQsXG59KTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5cbi8vIGFwcHMvc3JjL3V0aWwvY29sb3IuanNcbi8vIEdFTkVSQVRFRCBGSUxFOiBETyBOT1QgTU9ESUZZIERJUkVDVExZXG4vLyBUaGlzIGdlbmVyYXRlZCBmaWxlIGV4cG9ydHMgYWxsIHZhcmlhYmxlcyBkZWZpbmVkIGluIHNoYXJlZC9jc3MvY29sb3Iuc2Nzc1xuLy8gZm9yIHVzZSBpbiBKYXZhU2NyaXB0LiBUaGUgZ2VuZXJhdG9yIHNjcmlwdCBpcyBjb252ZXJ0LXNjc3MtdmFyaWFibGVzLmpzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJibGFja1wiOiBcIiMwMDBcIixcbiAgXCJiYWNrZ3JvdW5kX2JsYWNrXCI6IFwiIzEyMTQxNlwiLFxuICBcImRhcmtfZ3JheVwiOiBcIiMyRDMxMzlcIixcbiAgXCJkYXJrZXN0X2dyYXlcIjogXCIjMjkyRjM2XCIsXG4gIFwiZGFya19zbGF0ZV9ncmF5XCI6IFwiIzI4MmMzNFwiLFxuICBcImRhcmtlc3Rfc2xhdGVfZ3JheVwiOiBcIiMyNTI5MmRcIixcbiAgXCJkYXJrX2NoYXJjb2FsXCI6IFwiIzRkNTc1ZlwiLFxuICBcImNoYXJjb2FsXCI6IFwiIzViNjc3MFwiLFxuICBcImxpZ2h0X2dyYXlcIjogXCIjOTQ5Y2EyXCIsXG4gIFwibGlnaHRlcl9ncmF5XCI6IFwiI2M2Y2FjZFwiLFxuICBcImxpZ2h0ZXN0X2dyYXlcIjogXCIjZTdlOGVhXCIsXG4gIFwiYmFja2dyb3VuZF9ncmF5XCI6IFwiI2YyZjJmMlwiLFxuICBcImRpbWdyYXlcIjogXCIjNjk2OTY5XCIsXG4gIFwid2hpdGVcIjogXCIjZmZmXCIsXG4gIFwiZGVmYXVsdF9ibHVlXCI6IFwiIzM2NzBiM1wiLFxuICBcImRhcmtfdGVhbFwiOiBcIiMwMDk0YTNcIixcbiAgXCJ0ZWFsXCI6IFwiIzAwOTNhNFwiLFxuICBcImFwcGxhYl9idXR0b25fdGVhbFwiOiBcIiMxYWJjOWNcIixcbiAgXCJsaWdodF90ZWFsXCI6IFwiIzU5Y2FkM1wiLFxuICBcImxpZ2h0aXNoX3RlYWxcIjogXCIjODBkNmRlXCIsXG4gIFwibGlnaHRlcl90ZWFsXCI6IFwiI2E2ZTNlOFwiLFxuICBcImxpZ2h0ZXN0X3RlYWxcIjogXCIjZDlmM2Y1XCIsXG4gIFwiYWlfcnVicmljX2N5YW5cIjogXCIjM2NmZmY4XCIsXG4gIFwicHVycGxlXCI6IFwiIzhjNTJiYVwiLFxuICBcImxpZ2h0X3B1cnBsZVwiOiBcIiNhNjliYzFcIixcbiAgXCJsaWdodGVyX3B1cnBsZVwiOiBcIiNjZmM5ZGVcIixcbiAgXCJsaWdodGVzdF9wdXJwbGVcIjogXCIjZWJlOGYxXCIsXG4gIFwiY3lhblwiOiBcIiMwMDk0Y2FcIixcbiAgXCJsaWdodF9jeWFuXCI6IFwiIzU5YjlkY1wiLFxuICBcImxpZ2h0ZXJfY3lhblwiOiBcIiNhNmRhZWRcIixcbiAgXCJsaWdodGVzdF9jeWFuXCI6IFwiI2Q5ZWZmN1wiLFxuICBcImFsbW9zdF93aGl0ZV9jeWFuXCI6IFwiI2Y1ZmNmZlwiLFxuICBcIm9yYW5nZVwiOiBcIiNmZmE0MDBcIixcbiAgXCJsaWdodF9vcmFuZ2VcIjogXCIjZmZjNDU5XCIsXG4gIFwibGlnaHRlcl9vcmFuZ2VcIjogXCIjZmZlMGE2XCIsXG4gIFwibGlnaHRlc3Rfb3JhbmdlXCI6IFwiI2ZmZjJkOVwiLFxuICBcImRhcmtfb3JhbmdlXCI6IFwiI2ZmODYwMFwiLFxuICBcImdyZWVuXCI6IFwiI2I5YmYxNVwiLFxuICBcImxpZ2h0X2dyZWVuXCI6IFwiI2QxZDU2N1wiLFxuICBcImxpZ2h0ZXJfZ3JlZW5cIjogXCIjZTdlOWFkXCIsXG4gIFwibGlnaHRlc3RfZ3JlZW5cIjogXCIjZjVmNWRjXCIsXG4gIFwiaGlnaGxpZ2h0X2dyZWVuXCI6IFwiIzhhZmM5YlwiLFxuICBcInllbGxvd1wiOiBcIiNmZmI4MWRcIixcbiAgXCJsaWdodF95ZWxsb3dcIjogXCIjZmZkYjc0XCIsXG4gIFwibGlnaHRlcl95ZWxsb3dcIjogXCIjZmZlYmI1XCIsXG4gIFwibGlnaHRlc3RfeWVsbG93XCI6IFwiI2ZmZjdkZlwiLFxuICBcImdvbGRlbnJvZFwiOiBcIiNkYWE1MjBcIixcbiAgXCJoZWFkZXJfdGV4dFwiOiBcIiNmZmZcIixcbiAgXCJia2duZF9jb2xvclwiOiBcIiMwMDkzYTRcIixcbiAgXCJpbnNldF9jb2xvclwiOiBcIiNjNmNhY2RcIixcbiAgXCJkYXJrX2NvbG9yXCI6IFwiIzhjNTJiYVwiLFxuICBcImhkcl9jb2xvclwiOiBcIiM4YzUyYmFcIixcbiAgXCJyZWRcIjogXCIjYzAwXCIsXG4gIFwibGlnaHRlc3RfcmVkXCI6IFwiI2ZjY1wiLFxuICBcImRhcmtfcmVkXCI6IFwiI2Q2MjkxMVwiLFxuICBcInJlYWxncmVlblwiOiBcIiMwMDgwMDBcIixcbiAgXCJyZWFseWVsbG93XCI6IFwiI2ZmMFwiLFxuICBcIm11c3RhcmR5ZWxsb3dcIjogXCIjZWZjZDFjXCIsXG4gIFwidHdpdHRlcl9ibHVlXCI6IFwiIzAwYWNlZFwiLFxuICBcImZhY2Vib29rX2JsdWVcIjogXCIjM2I1OTk4XCIsXG4gIFwibGlua2VkaW5fYmx1ZVwiOiBcIiMwMDc3QjVcIixcbiAgXCJkYXJrX2JsdWVcIjogXCIjMDA2NDdmXCIsXG4gIFwiYmxvY2tseV9mbHlvdXRfZ3JheVwiOiBcIiNkZGRcIixcbiAgXCJkZWZhdWx0X3RleHRcIjogXCIjMzMzXCIsXG4gIFwiYm9yZGVyX2dyYXlcIjogXCIjYmJiXCIsXG4gIFwiYm9yZGVyX2xpZ2h0X2dyYXlcIjogXCIjZDhkOGQ4XCIsXG4gIFwidGFibGVfaGVhZGVyXCI6IFwiI2VjZWNlY1wiLFxuICBcInRhYmxlX2xpZ2h0X3Jvd1wiOiBcIiNmY2ZjZmNcIixcbiAgXCJ0YWJsZV9kYXJrX3Jvd1wiOiBcIiNmNGY0ZjRcIixcbiAgXCJsZXZlbF9zdWJtaXR0ZWRcIjogXCIjOGM1MmJhXCIsXG4gIFwibGV2ZWxfcGVyZmVjdFwiOiBcInJnYigxNCwgMTkwLCAxNClcIixcbiAgXCJsZXZlbF9wYXNzZWRcIjogXCJyZ2IoMTU5LCAyMTIsIDE1OSlcIixcbiAgXCJsZXZlbF9hdHRlbXB0ZWRcIjogXCIjZmYwXCIsXG4gIFwibGV2ZWxfbm90X3RyaWVkXCI6IFwiI2ZlZmVmZVwiLFxuICBcImxldmVsX2N1cnJlbnRcIjogXCIjZmZhNDAwXCIsXG4gIFwibGV2ZWxfcmV2aWV3X3JlamVjdGVkXCI6IFwiI2MwMFwiLFxuICBcImxldmVsX3Jldmlld19hY2NlcHRlZFwiOiBcInJnYigxMSwgMTQyLCAxMSlcIixcbiAgXCJhc3Nlc3NtZW50XCI6IFwiIzAwOTRjYVwiLFxuICBcIndvcmtzcGFjZV9ydW5uaW5nX2JhY2tncm91bmRcIjogXCIjZTVlNWU1XCIsXG4gIFwiZGFya19wdXJwbGVcIjogXCIjNjgyQTc3XCIsXG4gIFwiYnJpZ2h0X2dyZWVuXCI6IFwiIzBlYmUwZVwiLFxuICBcIm5lb25fcGlua1wiOiBcIiNlOTExOGZcIixcbiAgXCJsaW5rX2NvbG9yXCI6IFwiIzA1OTZjZVwiLFxuICBcInNoYWRvd1wiOiBcInJnYmEoMCwgMCwgMCwgMC4zKVwiLFxuICBcImJvb3RzdHJhcF9idXR0b25fYmx1ZVwiOiBcIiMzMzdhYjdcIixcbiAgXCJib290c3RyYXBfYnV0dG9uX3JlZFwiOiBcIiNkOTUzNGZcIixcbiAgXCJib290c3RyYXBfZXJyb3JfYmFja2dyb3VuZFwiOiBcIiNmMmRlZGVcIixcbiAgXCJib290c3RyYXBfZXJyb3JfdGV4dFwiOiBcIiNiOTRhNDhcIixcbiAgXCJib290c3RyYXBfdjNfZXJyb3JfdGV4dFwiOiBcIiNhOTQ0NDJcIixcbiAgXCJib290c3RyYXBfZXJyb3JfYm9yZGVyXCI6IFwiI2ViY2NkMVwiLFxuICBcImJvb3RzdHJhcF93YXJuaW5nX2JhY2tncm91bmRcIjogXCIjZmNmOGUzXCIsXG4gIFwiYm9vdHN0cmFwX3dhcm5pbmdfdGV4dFwiOiBcIiNjMDk4NTNcIixcbiAgXCJib290c3RyYXBfd2FybmluZ19ib3JkZXJcIjogXCIjZmFlYmNjXCIsXG4gIFwiYm9vdHN0cmFwX2JvcmRlcl9jb2xvclwiOiBcIiNjY2NjY2NcIixcbiAgXCJib290c3RyYXBfc3VjY2Vzc19iYWNrZ3JvdW5kXCI6IFwiI2RmZjBkOFwiLFxuICBcImJvb3RzdHJhcF9zdWNjZXNzX3RleHRcIjogXCIjNDY4ODQ3XCIsXG4gIFwiYm9vdHN0cmFwX3N1Y2Nlc3NfYm9yZGVyXCI6IFwiI2Q2ZTljNlwiLFxuICBcImRyb3BsZXRfbGlnaHRfZ3JlZW5cIjogXCIjZDNlOTY1XCIsXG4gIFwiZHJvcGxldF9ibHVlXCI6IFwiIzY0YjVmNlwiLFxuICBcImRyb3BsZXRfYnJpZ2h0X2JsdWVcIjogXCIjMTljM2UxXCIsXG4gIFwiZHJvcGxldF95ZWxsb3dcIjogXCIjZmZmMTc2XCIsXG4gIFwiZHJvcGxldF9vcmFuZ2VcIjogXCIjZmZiNzRkXCIsXG4gIFwiZHJvcGxldF9yZWRcIjogXCIjZjc4MTgzXCIsXG4gIFwiZHJvcGxldF9jeWFuXCI6IFwiIzRkZDBlMVwiLFxuICBcImRyb3BsZXRfcGlua1wiOiBcIiNmNTdhYzZcIixcbiAgXCJkcm9wbGV0X3B1cnBsZVwiOiBcIiNiYjc3YzdcIixcbiAgXCJkcm9wbGV0X2dyZWVuXCI6IFwiIzY4ZDk5NVwiLFxuICBcImRyb3BsZXRfd2hpdGVcIjogXCIjZmZmXCIsXG4gIFwib2NlYW5zX2RlZXBfYmx1ZVwiOiBcInJnYigyLCAwLCAyOClcIixcbiAgXCJkYXJrX2JsYWNrXCI6IFwiIzEyMTIxMlwiLFxuICBcImJyYW5kX3ByaW1hcnlfbGlnaHRcIjogXCIjQUJERkU1XCIsXG4gIFwiYnJhbmRfcHJpbWFyeV9kZWZhdWx0XCI6IFwiIzAwOUVCMFwiLFxuICBcImJyYW5kX3ByaW1hcnlfZGFya1wiOiBcIiMwMDgyOTFcIixcbiAgXCJicmFuZF9zZWNvbmRhcnlfbGlnaHRcIjogXCIjRTBEMUVDXCIsXG4gIFwiYnJhbmRfc2Vjb25kYXJ5X2RlZmF1bHRcIjogXCIjOEM1MkJBXCIsXG4gIFwiYnJhbmRfc2Vjb25kYXJ5X2RhcmtcIjogXCIjNkY0ODhFXCIsXG4gIFwiYnJhbmRfYWNjZW50X2RlZmF1bHRcIjogXCIjRUQ2MDYwXCIsXG4gIFwiYnJhbmRfdGVhbF81XCI6IFwiI0RGRjJGNFwiLFxuICBcInByb2R1Y3RfYWZmaXJtYXRpdmVfZGVmYXVsdFwiOiBcIiMzRUEzM0VcIixcbiAgXCJwcm9kdWN0X25lZ2F0aXZlX2xpZ2h0XCI6IFwiI0ZERUJFOVwiLFxuICBcInByb2R1Y3RfbmVnYXRpdmVfZGVmYXVsdFwiOiBcIiNFNTMxMUFcIixcbiAgXCJwcm9kdWN0X25lZ2F0aXZlX2RhcmtcIjogXCIjQUEyNTEzXCIsXG4gIFwicHJvZHVjdF9jYXV0aW9uX2RlZmF1bHRcIjogXCIjRjlDQjI4XCIsXG4gIFwicHJvZHVjdF9pbmZvcm1hdGlvbl9kZWZhdWx0XCI6IFwiIzAwN0FDQ1wiLFxuICBcIm5ldXRyYWxfd2hpdGVcIjogXCIjRkZGRkZGXCIsXG4gIFwibmV1dHJhbF9saWdodFwiOiBcIiNGN0Y4RkFcIixcbiAgXCJuZXV0cmFsX2RhcmsxMFwiOiBcIiNFQUVCRUJcIixcbiAgXCJuZXV0cmFsX2RhcmsyMFwiOiBcIiNENEQ1RDdcIixcbiAgXCJuZXV0cmFsX2RhcmszMFwiOiBcIiNCRkMxQzNcIixcbiAgXCJuZXV0cmFsX2Rhcms0MFwiOiBcIiNBOUFDQUZcIixcbiAgXCJuZXV0cmFsX2Rhcms1MFwiOiBcIiM5NDk3OUJcIixcbiAgXCJuZXV0cmFsX2Rhcms2MFwiOiBcIiM3RjgyODZcIixcbiAgXCJuZXV0cmFsX2Rhcms3MFwiOiBcIiM2QTZFNzNcIixcbiAgXCJuZXV0cmFsX2Rhcms4MFwiOiBcIiM1NDU5NUVcIixcbiAgXCJuZXV0cmFsX2Rhcms5MFwiOiBcIiMzRjQ0NEJcIixcbiAgXCJuZXV0cmFsX2RhcmtcIjogXCIjMjkyRjM2XCIsXG4gIFwiZ29vZ2xlX2JyYW5kX2NvbG9yXCI6IFwiIzBGOUQ1OFwiLFxuICBcIm1pY3Jvc29mdF9icmFuZF9jb2xvclwiOiBcIiNGRkI5MDBcIixcbiAgXCJmYWNlYm9va19icmFuZF9jb2xvclwiOiBcIiMzQjU5OThcIixcbiAgXCJsaWdodF9wcmltYXJ5XzEwMFwiOiBcIiNBQkRGRTVcIixcbiAgXCJsaWdodF9wcmltYXJ5XzUwMFwiOiBcIiMwMDkzQTRcIixcbiAgXCJsaWdodF9wcmltYXJ5XzcwMFwiOiBcIiMwMDgyOTFcIixcbiAgXCJsaWdodF9zZWNvbmRhcnlfMTAwXCI6IFwiI0UyRDRFRVwiLFxuICBcImxpZ2h0X3NlY29uZGFyeV81MDBcIjogXCIjOEM1MkJBXCIsXG4gIFwibGlnaHRfc2Vjb25kYXJ5XzcwMFwiOiBcIiM2RjQ4OEVcIixcbiAgXCJsaWdodF9ncmF5XzUwXCI6IFwiI0Y3RjhGQVwiLFxuICBcImxpZ2h0X2dyYXlfMTAwXCI6IFwiI0VBRUJFQlwiLFxuICBcImxpZ2h0X2dyYXlfMjAwXCI6IFwiI0Q0RDVEN1wiLFxuICBcImxpZ2h0X2dyYXlfMzAwXCI6IFwiI0JGQzFDM1wiLFxuICBcImxpZ2h0X2dyYXlfNTAwXCI6IFwiIzk0OTc5QlwiLFxuICBcImxpZ2h0X2dyYXlfNzAwXCI6IFwiIzZBNkU3M1wiLFxuICBcImxpZ2h0X2dyYXlfODAwXCI6IFwiIzU0NTk1RVwiLFxuICBcImxpZ2h0X2dyYXlfOTAwXCI6IFwiIzNGNDQ0QlwiLFxuICBcImxpZ2h0X2FmZmlybWF0aXZlXzEwMFwiOiBcIiNFMkYxRTJcIixcbiAgXCJsaWdodF9hZmZpcm1hdGl2ZV81MDBcIjogXCIjM0VBMzNFXCIsXG4gIFwibGlnaHRfbmVnYXRpdmVfNTAwXCI6IFwiI0U1MzExQVwiLFxuICBcImxpZ2h0X2NhdXRpb25fNTAwXCI6IFwiI0Y5Q0IyOFwiLFxuICBcImxpZ2h0X2luZm9fMTAwXCI6IFwiI0RDRUZGQlwiLFxuICBcImxpZ2h0X2luZm9fNTAwXCI6IFwiIzE4OTJFM1wiLFxuICBcImxpZ2h0X3doaXRlXCI6IFwiI0ZGRkZGRlwiLFxuICBcImxpZ2h0X2JsYWNrXCI6IFwiIzI5MkYzNlwiLFxufTtcbiJdLCJuYW1lcyI6WyJhY3Rpdml0eUNzc0NsYXNzIiwicmVzdWx0IiwiVGVzdFJlc3VsdHMiLCJOT19URVNUU19SVU4iLCJSRVZJRVdfQUNDRVBURURfUkVTVUxUIiwiTGV2ZWxTdGF0dXMiLCJyZXZpZXdfYWNjZXB0ZWQiLCJSRVZJRVdfUkVKRUNURURfUkVTVUxUIiwicmV2aWV3X3JlamVjdGVkIiwiU1VCTUlUVEVEX1JFU1VMVCIsInN1Ym1pdHRlZCIsIk1JTklNVU1fT1BUSU1BTF9SRVNVTFQiLCJwZXJmZWN0IiwiTUlOSU1VTV9QQVNTX1JFU1VMVCIsInBhc3NlZCIsImF0dGVtcHRlZCIsIm5vdF90cmllZCIsInJlc3VsdEZyb21TdGF0dXMiLCJzdGF0dXMiLCJmcmVlX3BsYXlfY29tcGxldGUiLCJGUkVFX1BMQVkiLCJBTExfUEFTUyIsIm1lcmdlQWN0aXZpdHlSZXN1bHQiLCJhIiwiYiIsIk1hdGgiLCJtYXgiLCJyZWR1Y2VyIiwic3RhdGUiLCJIaWRkZW5TdGF0ZSIsImFjdGlvbiIsInR5cGUiLCJTRVRfSElEREVOX0xFU1NPTlMiLCJoaWRkZW5MZXNzb25zUGVyU2VjdGlvbiIsImhpZGVhYmxlTGVzc29uc0FsbG93ZWQiLCJzZWN0aW9uSWRzIiwiT2JqZWN0Iiwia2V5cyIsIm5leHRTdGF0ZSIsImZvckVhY2giLCJzZWN0aW9uSWQiLCJsZXNzb25JZCIsInNldEluIiwidG9TdHJpbmciLCJ2YWxpZGF0ZVNlY3Rpb25JZHMiLCJtZXJnZSIsImhpZGRlbkxlc3NvbnNJbml0aWFsaXplZCIsIlVQREFURV9ISURERU5fTEVTU09OIiwiaGlkZGVuIiwiVVBEQVRFX0hJRERFTl9TQ1JJUFQiLCJzY3JpcHRJZCIsImdldEhpZGRlbkxlc3NvbnMiLCJzY3JpcHROYW1lIiwiY2FuSGlkZUxlc3NvbnMiLCJkaXNwYXRjaCIsIiQiLCJhamF4IiwidXJsIiwiZGF0YVR5cGUiLCJjb250ZW50VHlwZSIsImRvbmUiLCJyZXNwb25zZSIsImluaXRpYWxpemVIaWRkZW5MZXNzb25zIiwiZGF0YSIsIkFycmF5IiwiaXNBcnJheSIsIlNUVURFTlRfU0VDVElPTl9JRCIsInNldEhpZGRlbkxlc3NvbnMiLCJmYWlsIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiaW5pdGlhbGl6ZUhpZGRlblNjcmlwdHMiLCJ1cGRhdGVIaWRkZW5TY3JpcHQiLCJpc0xlc3NvbkhpZGRlbkZvclNlY3Rpb24iLCJpc0hpZGRlbkZvclNlY3Rpb24iLCJpc1NjcmlwdEhpZGRlbkZvclNlY3Rpb24iLCJ0b2dnbGVIaWRkZW5MZXNzb24iLCJ1cGRhdGVIaWRkZW5MZXNzb24iLCJwb3N0VG9nZ2xlSGlkZGVuIiwidG9nZ2xlSGlkZGVuU2NyaXB0IiwiSW1tdXRhYmxlIiwiUmVjb3JkIiwibGVzc29uc0J5U2VjdGlvbiIsIk1hcCIsInNjcmlwdHNCeVNlY3Rpb24iLCJnZXRJbiIsImdldCIsInNpemUiLCJFcnJvciIsInNlY3Rpb25faWQiLCJzdGFnZV9pZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdWNjZXNzIiwid2luZG93IiwiX19UZXN0SW50ZXJmYWNlIiwidG9nZ2xlSGlkZGVuVW5pdENvbXBsZXRlIiwiaXRlbUlkIiwiYnlTZWN0aW9uS2V5IiwiaW5pdGlhbFN0YXRlIiwiQVVUSE9SSVpFX0xPQ0tBQkxFIiwiYXNzaWduIiwibG9ja2FibGVBdXRob3JpemVkIiwiaXNBdXRob3JpemVkIiwibG9ja2FibGVBdXRob3JpemVkTG9hZGVkIiwiU0VUX1NFQ1RJT05fTE9DS19TVEFUVVMiLCJsZXNzb25zQnlTZWN0aW9uSWQiLCJfIiwibWFwVmFsdWVzIiwic2VjdGlvbnMiLCJzZWN0aW9uIiwibGVzc29ucyIsImxlc3NvbnNCeVNlY3Rpb25JZExvYWRlZCIsIlJFRlJFU0hfU0VDVElPTl9MT0NLX1NUQVRVUyIsImxvY2tEaWFsb2dMZXNzb25JZCIsImxvY2tTdGF0dXMiLCJsb2NrU3RhdHVzRm9yTGVzc29uIiwiU0VMRUNUX1NFQ1RJT04iLCJsZW5ndGgiLCJOT19TRUNUSU9OIiwiT1BFTl9MT0NLX0RJQUxPRyIsIkNMT1NFX0xPQ0tfRElBTE9HIiwiQkVHSU5fU0FWRSIsInNhdmluZyIsIkZJTklTSF9TQVZFIiwibmV4dExvY2tTdGF0dXMiLCJuZXh0TGVzc29uIiwiY2xvbmVEZWVwIiwiaXRlbSIsImluZGV4IiwidXBkYXRlIiwidXNlcl9sZXZlbF9pZCIsInVzZXJMZXZlbElkIiwibG9ja2VkIiwiTG9ja1N0YXR1cyIsIkxvY2tlZCIsInJlYWRvbmx5X2Fuc3dlcnMiLCJSZWFkb25seUFuc3dlcnMiLCJtYWtlRW51bSIsImF1dGhvcml6ZUxvY2thYmxlIiwib3BlbkxvY2tEaWFsb2ciLCJiZWdpblNhdmUiLCJmaW5pc2hTYXZlIiwibmV3TG9ja1N0YXR1cyIsInBlcmZvcm1TYXZlIiwib25Db21wbGV0ZSIsImdldFN0YXRlIiwib2xkTG9ja1N0YXR1cyIsImxlc3NvbkxvY2siLCJzYXZlRGF0YSIsImZpbHRlciIsImlzRXF1YWwiLCJtYXAiLCJ1c2VyX2xldmVsX2RhdGEiLCJ1c2VyTGV2ZWxEYXRhIiwidXBkYXRlcyIsInNhdmVMb2NrRGlhbG9nIiwiY2xvc2VMb2NrRGlhbG9nIiwibG9ja0xlc3NvbiIsInN0dWRlbnQiLCJ1bmRlZmluZWQiLCJuYW1lIiwiRWRpdGFibGUiLCJmdWxseUxvY2tlZExlc3Nvbk1hcHBpbmciLCJyZWR1Y2UiLCJvYmoiLCJmdWxseUxvY2tlZCIsInNvbWUiLCJzZXRTZWN0aW9uTG9ja1N0YXR1cyIsInJlZmV0Y2hTZWN0aW9uTG9ja1N0YXR1cyIsInNjcmlwdF9pZCIsInJlZnJlc2hTZWN0aW9uTG9ja1N0YXR1cyIsImxvZyIsImVudmlyb25tZW50U3BlY2lmaWNDb29raWVOYW1lIiwicmFja19lbnYiLCJkYXNoYm9hcmQiLCJnZXRSb290RG9tYWluRnJvbUhvc3RuYW1lIiwiaG9zdG5hbWUiLCJzcGxpdCIsInNsaWNlIiwiam9pbiIsImhhc1F1ZXJ5UGFyYW0iLCJwYXJzZWRQYXJhbXMiLCJxdWVyeVBhcmFtcyIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInJlc2V0V2luZG93TG9jYXRpb24iLCJ3aW5kb3dMb2NhdGlvbiIsImxvY2F0aW9uIiwic2V0V2luZG93TG9jYXRpb24iLCJmYWtlTG9jYXRpb24iLCJ1cGRhdGVRdWVyeVBhcmFtIiwicGFyYW0iLCJ2YWx1ZSIsInVzZVJlcGxhY2VTdGF0ZSIsIm5ld1N0cmluZyIsInF1ZXJ5U3RyaW5nIiwicGFyc2UiLCJzZWFyY2giLCJuZXdMb2NhdGlvbiIsInBhdGhuYW1lIiwibWV0aG9kIiwiaGlzdG9yeSIsImRvY3VtZW50IiwidGl0bGUiLCJwYXJzZWQiLCJWaWV3VHlwZSIsIlBhcnRpY2lwYW50IiwiU0VUX1ZJRVdfVFlQRSIsInZpZXdUeXBlIiwic2V0Vmlld1R5cGUiLCJjaGFuZ2VWaWV3VHlwZSIsInJlbG9hZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJmZWVkYmFja1NoYXBlIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJpZCIsIm51bWJlciIsImlzUmVxdWlyZWQiLCJzZWVuX29uX2ZlZWRiYWNrX3BhZ2VfYXQiLCJzdHJpbmciLCJzdHVkZW50X2ZpcnN0X3Zpc2l0ZWRfYXQiLCJjcmVhdGVkX2F0Iiwib25lT2ZUeXBlIiwiaW5zdGFuY2VPZiIsIkRhdGUiLCJjb21tZW50IiwicGVyZm9ybWFuY2UiLCJpc19hd2FpdGluZ190ZWFjaGVyX3JldmlldyIsImJvb2wiLCJyZXZpZXdfc3RhdGUiLCJsZXZlbEZlZWRiYWNrU2hhcGUiLCJsZXZlbEZlZWRiYWNrVHlwZSIsImxlc3Nvbk5hbWUiLCJsZXNzb25OdW0iLCJsZXZlbE51bSIsImxpbmtUb0xldmVsIiwidW5pdE5hbWUiLCJmZWVkYmFja3MiLCJhcnJheU9mIiwiUmV2aWV3U3RhdGVzIiwiZ2V0SWNvbkZvckxldmVsIiwibGV2ZWwiLCJpc0xldmVsQXNzZXNzbWVudCIsImlzVW5wbHVnZ2VkIiwiaXNMb2NrZWQiLCJpY29uIiwibWF0Y2giLCJleGVjIiwiYm9udXMiLCJkZWZhdWx0QnViYmxlSWNvbiIsImxlc3Nvbkhhc0xldmVscyIsImxlc3NvbiIsImxldmVscyIsImxlc3NvbklzQWxsQXNzZXNzbWVudCIsImV2ZXJ5Iiwia2luZCIsIkxldmVsS2luZCIsImFzc2Vzc21lbnQiLCJsZXNzb25Jc0xvY2tlZEZvckFsbFN0dWRlbnRzIiwiY3VycmVudFNlY3Rpb25JZCIsInRlYWNoZXJTZWN0aW9ucyIsInNlbGVjdGVkU2VjdGlvbklkIiwiY3VycmVudFNlY3Rpb24iLCJsZXNzb25Jc0xvY2tlZEZvclVzZXIiLCJ2aWV3QXMiLCJsb2NrYWJsZSIsImN1cnJlbnRVc2VyIiwidXNlcklkIiwiSW5zdHJ1Y3RvciIsImxlc3NvbkxvY2tlZCIsImxlc3NvbklzVmlzaWJsZSIsImhpZGRlbkxlc3NvblN0YXRlIiwiaGlkZGVuTGVzc29uIiwibGVzc29uUHJvZ3Jlc3NGb3JTZWN0aW9uIiwic2VjdGlvbkxldmVsUHJvZ3Jlc3MiLCJzZWN0aW9uTGVzc29uUHJvZ3Jlc3MiLCJlbnRyaWVzIiwic3R1ZGVudElkIiwic3R1ZGVudExldmVsUHJvZ3Jlc3MiLCJzdHVkZW50TGVzc29uUHJvZ3Jlc3MiLCJsZXNzb25Qcm9ncmVzc0ZvclN0dWRlbnQiLCJsZXNzb25MZXZlbHMiLCJmaWx0ZXJlZExldmVscyIsImNvbXBsZXRlZFN0YXR1c2VzIiwiY29tcGxldGVkX2Fzc2Vzc21lbnQiLCJpbXBlcmZlY3QiLCJjb21wbGV0ZWQiLCJ0aW1lU3BlbnQiLCJsYXN0VGltZXN0YW1wIiwibGV2ZWxQcm9ncmVzcyIsImluY2x1ZGVzIiwiaW5jb21wbGV0ZSIsImdldFBlcmNlbnQiLCJjb3VudCIsImluY29tcGxldGVQZXJjZW50IiwiaW1wZXJmZWN0UGVyY2VudCIsImNvbXBsZXRlZFBlcmNlbnQiLCJzaG91bGRTaG93UmV2aWV3U3RhdGVzIiwidW5pdCIsImlzQ3NkIiwiaXNDc3AiLCJjb21tZW50TGVmdCIsInByb2dyZXNzIiwidGVhY2hlckZlZWRiYWNrQ29tbWVudGVkIiwidGVhY2hlckZlZWRiYWNrTmV3Iiwic3R1ZGVudE5lZWRzRmVlZGJhY2siLCJjYW5IYXZlRmVlZGJhY2siLCJwcm9jZXNzZWRMZXZlbCIsImFjdGl2ZUlkIiwiYXBwIiwidXNlc0xhYjIiLCJ1c2VzX2xhYjIiLCJwcm9ncmVzc2lvbiIsInByb2dyZXNzaW9uRGlzcGxheU5hbWUiLCJwcm9ncmVzc2lvbl9kaXNwbGF5X25hbWUiLCJkaXNwbGF5X2FzX3VucGx1Z2dlZCIsImxldmVsTnVtYmVyIiwidW5wbHVnZ2VkIiwiYnViYmxlVGV4dCIsImxldHRlciIsImlzQ29uY2VwdExldmVsIiwiaXNfY29uY2VwdF9sZXZlbCIsImlzVmFsaWRhdGVkIiwiaXNfdmFsaWRhdGVkIiwiY2FuX2hhdmVfZmVlZGJhY2siLCJwYWdlTnVtYmVyIiwicGFnZV9udW1iZXIiLCJQVVpaTEVfUEFHRV9OT05FIiwic3VibGV2ZWxzIiwicGF0aCIsImdldExldmVsUmVzdWx0Iiwic2VydmVyUHJvZ3Jlc3MiLCJnZXRQYWdlc1Byb2dyZXNzIiwicGFnZXNfY29tcGxldGVkIiwicGFnZVJlc3VsdCIsInBhZ2VQcm9ncmVzcyIsImxldmVsUHJvZ3Jlc3NGcm9tUmVzdWx0IiwibGV2ZWxQcm9ncmVzc0Zyb21TdGF0dXMiLCJsZXZlbFByb2dyZXNzRnJvbVNlcnZlciIsInBhaXJlZCIsInRpbWVfc3BlbnQiLCJ0ZWFjaGVyRmVlZGJhY2tSZXZpZXdTdGF0ZSIsInRlYWNoZXJfZmVlZGJhY2tfcmV2aWV3X3N0YXRlIiwidGVhY2hlcl9mZWVkYmFja19uZXciLCJ0ZWFjaGVyX2ZlZWRiYWNrX2NvbW1lbnRlZCIsImxhc3RfcHJvZ3Jlc3NfYXQiLCJwYWdlcyIsInByb2Nlc3NTZXJ2ZXJTdHVkZW50UHJvZ3Jlc3MiLCJzZXJ2ZXJTdHVkZW50UHJvZ3Jlc3MiLCJwcm9jZXNzU2VydmVyU2VjdGlvblByb2dyZXNzIiwic2VydmVyU2VjdGlvblByb2dyZXNzIiwic3R1ZGVudFR5cGUiLCJsZXZlbFNoYXBlIiwibGV2ZWxXaXRoUHJvZ3Jlc3NUeXBlIiwibGV2ZWxUeXBlIiwiaXNDdXJyZW50TGV2ZWwiLCJzdHVkZW50TGV2ZWxQcm9ncmVzc1NoYXBlIiwib25lT2YiLCJzdHVkZW50TGV2ZWxQcm9ncmVzc1R5cGUiLCJ1bml0UHJvZ3Jlc3NUeXBlIiwib2JqZWN0T2YiLCJsZXNzb25UeXBlIiwibGVzc29uTnVtYmVyIiwibGVzc29uX3BsYW5faHRtbF91cmwiLCJsZXNzb25fZmVlZGJhY2tfdXJsIiwiaXNGb2N1c0FyZWEiLCJkZXNjcmlwdGlvbl9zdHVkZW50IiwiZGVzY3JpcHRpb25fdGVhY2hlciIsInN0dWRlbnRMZXNzb25Qcm9ncmVzc1R5cGUiLCJsZXNzb25Hcm91cFNoYXBlIiwiZGlzcGxheU5hbWUiLCJiaWdRdWVzdGlvbnMiLCJkZXNjcmlwdGlvbiIsImdyb3VwZWRMZXNzb25zVHlwZSIsImxlc3Nvbkdyb3VwIiwibGV2ZWxzQnlMZXNzb24iXSwic291cmNlUm9vdCI6IiJ9