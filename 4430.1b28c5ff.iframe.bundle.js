(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[4430],{"./node_modules/clsx/dist/clsx.m.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{clsx:()=>clsx,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=clsx},"./node_modules/react-csv/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react-csv/lib/index.js")},"./node_modules/react-csv/lib/components/Download.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_react2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_core=__webpack_require__("./node_modules/react-csv/lib/core.js"),_metaProps=__webpack_require__("./node_modules/react-csv/lib/metaProps.js");var CSVDownload=function(_React$Component){function CSVDownload(props){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,CSVDownload);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(CSVDownload.__proto__||Object.getPrototypeOf(CSVDownload)).call(this,props));return _this.state={},_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(CSVDownload,_React$Component),_createClass(CSVDownload,[{key:"buildURI",value:function buildURI(){return _core.buildURI.apply(void 0,arguments)}},{key:"componentDidMount",value:function componentDidMount(){var _props=this.props,data=_props.data,headers=_props.headers,separator=_props.separator,enclosingCharacter=_props.enclosingCharacter,uFEFF=_props.uFEFF,target=_props.target,specs=_props.specs,replace=_props.replace;this.state.page=window.open(this.buildURI(data,uFEFF,headers,separator,enclosingCharacter),target,specs,replace)}},{key:"getWindow",value:function getWindow(){return this.state.page}},{key:"render",value:function render(){return null}}]),CSVDownload}(_react2.default.Component);CSVDownload.defaultProps=Object.assign(_metaProps.defaultProps,{target:"_blank"}),CSVDownload.propTypes=_metaProps.propTypes,exports.default=CSVDownload},"./node_modules/react-csv/lib/components/Link.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_react2=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_core=__webpack_require__("./node_modules/react-csv/lib/core.js"),_metaProps=__webpack_require__("./node_modules/react-csv/lib/metaProps.js");var CSVLink=function(_React$Component){function CSVLink(props){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,CSVLink);var _this=function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}(this,(CSVLink.__proto__||Object.getPrototypeOf(CSVLink)).call(this,props));return _this.buildURI=_this.buildURI.bind(_this),_this.state={href:""},_this}return function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}(CSVLink,_React$Component),_createClass(CSVLink,[{key:"componentDidMount",value:function componentDidMount(){var _props=this.props,data=_props.data,headers=_props.headers,separator=_props.separator,uFEFF=_props.uFEFF,enclosingCharacter=_props.enclosingCharacter;this.setState({href:this.buildURI(data,uFEFF,headers,separator,enclosingCharacter)})}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){if(this.props!==prevProps){var _props2=this.props,data=_props2.data,headers=_props2.headers,separator=_props2.separator,uFEFF=_props2.uFEFF;this.setState({href:this.buildURI(data,uFEFF,headers,separator)})}}},{key:"buildURI",value:function buildURI(){return _core.buildURI.apply(void 0,arguments)}},{key:"handleLegacy",value:function handleLegacy(event){if(window.navigator.msSaveOrOpenBlob){event.preventDefault();var _props3=this.props,data=_props3.data,headers=_props3.headers,separator=_props3.separator,filename=_props3.filename,enclosingCharacter=_props3.enclosingCharacter,uFEFF=_props3.uFEFF,blob=new Blob([uFEFF?"\ufeff":"",(0,_core.toCSV)(data,headers,separator,enclosingCharacter)]);return window.navigator.msSaveBlob(blob,filename),!1}}},{key:"handleAsyncClick",value:function handleAsyncClick(event){var _this2=this;this.props.onClick(event,(function done(proceed){!1!==proceed?_this2.handleLegacy(event):event.preventDefault()}))}},{key:"handleSyncClick",value:function handleSyncClick(event){!1===this.props.onClick(event)?event.preventDefault():this.handleLegacy(event)}},{key:"handleClick",value:function handleClick(){var _this3=this;return function(event){if("function"==typeof _this3.props.onClick)return _this3.props.asyncOnClick?_this3.handleAsyncClick(event):_this3.handleSyncClick(event);_this3.handleLegacy(event)}}},{key:"render",value:function render(){var _this4=this,_props4=this.props,filename=(_props4.data,_props4.headers,_props4.separator,_props4.filename),children=(_props4.uFEFF,_props4.children),rest=(_props4.onClick,_props4.asyncOnClick,_props4.enclosingCharacter,function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}(_props4,["data","headers","separator","filename","uFEFF","children","onClick","asyncOnClick","enclosingCharacter"]));return _react2.default.createElement("a",_extends({download:filename},rest,{ref:function ref(link){return _this4.link=link},target:"_self",href:this.state.href,onClick:this.handleClick()}),children)}}]),CSVLink}(_react2.default.Component);CSVLink.defaultProps=_metaProps.defaultProps,CSVLink.propTypes=_metaProps.propTypes,exports.default=CSVLink},"./node_modules/react-csv/lib/core.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}return Array.from(arr)}var isSafari=exports.isSafari=function isSafari(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)},isJsons=exports.isJsons=function isJsons(array){return Array.isArray(array)&&array.every((function(row){return"object"===(void 0===row?"undefined":_typeof(row))&&!(row instanceof Array)}))},isArrays=exports.isArrays=function isArrays(array){return Array.isArray(array)&&array.every((function(row){return Array.isArray(row)}))},jsonsHeaders=exports.jsonsHeaders=function jsonsHeaders(array){return Array.from(array.map((function(json){return Object.keys(json)})).reduce((function(a,b){return new Set([].concat(_toConsumableArray(a),_toConsumableArray(b)))}),[]))},jsons2arrays=exports.jsons2arrays=function jsons2arrays(jsons,headers){var headerLabels=headers=headers||jsonsHeaders(jsons),headerKeys=headers;isJsons(headers)&&(headerLabels=headers.map((function(header){return header.label})),headerKeys=headers.map((function(header){return header.key})));var data=jsons.map((function(object){return headerKeys.map((function(header){return getHeaderValue(header,object)}))}));return[headerLabels].concat(_toConsumableArray(data))},getHeaderValue=exports.getHeaderValue=function getHeaderValue(property,obj){var foundValue=property.replace(/\[([^\]]+)]/g,".$1").split(".").reduce((function(o,p,i,arr){if(void 0!==o[p])return o[p];arr.splice(1)}),obj);return void 0===foundValue?property in obj?obj[property]:"":foundValue},elementOrEmpty=exports.elementOrEmpty=function elementOrEmpty(element){return element||0===element?element:""},joiner=exports.joiner=function joiner(data){var separator=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",",enclosingCharacter=arguments.length>2&&void 0!==arguments[2]?arguments[2]:'"';return data.filter((function(e){return e})).map((function(row){return row.map((function(element){return elementOrEmpty(element)})).map((function(column){return""+enclosingCharacter+column+enclosingCharacter})).join(separator)})).join("\n")},arrays2csv=exports.arrays2csv=function arrays2csv(data,headers,separator,enclosingCharacter){return joiner(headers?[headers].concat(_toConsumableArray(data)):data,separator,enclosingCharacter)},jsons2csv=exports.jsons2csv=function jsons2csv(data,headers,separator,enclosingCharacter){return joiner(jsons2arrays(data,headers),separator,enclosingCharacter)},string2csv=exports.string2csv=function string2csv(data,headers,separator,enclosingCharacter){return headers?headers.join(separator)+"\n"+data:data},toCSV=exports.toCSV=function toCSV(data,headers,separator,enclosingCharacter){if(isJsons(data))return jsons2csv(data,headers,separator,enclosingCharacter);if(isArrays(data))return arrays2csv(data,headers,separator,enclosingCharacter);if("string"==typeof data)return string2csv(data,headers,separator);throw new TypeError('Data should be a "String", "Array of arrays" OR "Array of objects" ')};exports.buildURI=function buildURI(data,uFEFF,headers,separator,enclosingCharacter){var csv=toCSV(data,headers,separator,enclosingCharacter),type=isSafari()?"application/csv":"text/csv",blob=new Blob([uFEFF?"\ufeff":"",csv],{type}),dataURI="data:"+type+";charset=utf-8,"+(uFEFF?"\ufeff":"")+csv,URL=window.URL||window.webkitURL;return void 0===URL.createObjectURL?dataURI:URL.createObjectURL(blob)}},"./node_modules/react-csv/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.CSVLink=exports.CSVDownload=void 0;var _Download2=_interopRequireDefault(__webpack_require__("./node_modules/react-csv/lib/components/Download.js")),_Link2=_interopRequireDefault(__webpack_require__("./node_modules/react-csv/lib/components/Link.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.CSVDownload=_Download2.default,exports.CSVLink=_Link2.default},"./node_modules/react-csv/lib/metaProps.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.PropsNotForwarded=exports.defaultProps=exports.propTypes=void 0;(function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}})(__webpack_require__("./node_modules/react/index.js"));var _propTypes=__webpack_require__("./node_modules/prop-types/index.js");exports.propTypes={data:(0,_propTypes.oneOfType)([_propTypes.string,_propTypes.array]).isRequired,headers:_propTypes.array,target:_propTypes.string,separator:_propTypes.string,filename:_propTypes.string,uFEFF:_propTypes.bool,onClick:_propTypes.func,asyncOnClick:_propTypes.bool},exports.defaultProps={separator:",",filename:"generatedBy_react-csv.csv",uFEFF:!0,asyncOnClick:!1},exports.PropsNotForwarded=["data","headers"]},"./node_modules/react-draggable/build/cjs/Draggable.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"DraggableCore",{enumerable:!0,get:function(){return _DraggableCore.default}}),exports.default=void 0;var React=function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/react-draggable/node_modules/prop-types/index.js")),_reactDom=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_clsx=_interopRequireDefault(__webpack_require__("./node_modules/clsx/dist/clsx.m.js")),_domFns=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/domFns.js"),_positionFns=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/positionFns.js"),_shims=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/shims.js"),_DraggableCore=_interopRequireDefault(__webpack_require__("./node_modules/react-draggable/build/cjs/DraggableCore.js")),_log=_interopRequireDefault(__webpack_require__("./node_modules/react-draggable/build/cjs/utils/log.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}class Draggable extends React.Component{static getDerivedStateFromProps(_ref,_ref2){let{position}=_ref,{prevPropsPosition}=_ref2;return!position||prevPropsPosition&&position.x===prevPropsPosition.x&&position.y===prevPropsPosition.y?null:((0,_log.default)("Draggable: getDerivedStateFromProps %j",{position,prevPropsPosition}),{x:position.x,y:position.y,prevPropsPosition:{...position}})}constructor(props){super(props),_defineProperty(this,"onDragStart",((e,coreData)=>{(0,_log.default)("Draggable: onDragStart: %j",coreData);if(!1===this.props.onStart(e,(0,_positionFns.createDraggableData)(this,coreData)))return!1;this.setState({dragging:!0,dragged:!0})})),_defineProperty(this,"onDrag",((e,coreData)=>{if(!this.state.dragging)return!1;(0,_log.default)("Draggable: onDrag: %j",coreData);const uiData=(0,_positionFns.createDraggableData)(this,coreData),newState={x:uiData.x,y:uiData.y,slackX:0,slackY:0};if(this.props.bounds){const{x,y}=newState;newState.x+=this.state.slackX,newState.y+=this.state.slackY;const[newStateX,newStateY]=(0,_positionFns.getBoundPosition)(this,newState.x,newState.y);newState.x=newStateX,newState.y=newStateY,newState.slackX=this.state.slackX+(x-newState.x),newState.slackY=this.state.slackY+(y-newState.y),uiData.x=newState.x,uiData.y=newState.y,uiData.deltaX=newState.x-this.state.x,uiData.deltaY=newState.y-this.state.y}if(!1===this.props.onDrag(e,uiData))return!1;this.setState(newState)})),_defineProperty(this,"onDragStop",((e,coreData)=>{if(!this.state.dragging)return!1;if(!1===this.props.onStop(e,(0,_positionFns.createDraggableData)(this,coreData)))return!1;(0,_log.default)("Draggable: onDragStop: %j",coreData);const newState={dragging:!1,slackX:0,slackY:0};if(Boolean(this.props.position)){const{x,y}=this.props.position;newState.x=x,newState.y=y}this.setState(newState)})),this.state={dragging:!1,dragged:!1,x:props.position?props.position.x:props.defaultPosition.x,y:props.position?props.position.y:props.defaultPosition.y,prevPropsPosition:{...props.position},slackX:0,slackY:0,isElementSVG:!1},!props.position||props.onDrag||props.onStop||console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element.")}componentDidMount(){void 0!==window.SVGElement&&this.findDOMNode()instanceof window.SVGElement&&this.setState({isElementSVG:!0})}componentWillUnmount(){this.setState({dragging:!1})}findDOMNode(){var _this$props$nodeRef$c,_this$props;return null!==(_this$props$nodeRef$c=null===(_this$props=this.props)||void 0===_this$props||null===(_this$props=_this$props.nodeRef)||void 0===_this$props?void 0:_this$props.current)&&void 0!==_this$props$nodeRef$c?_this$props$nodeRef$c:_reactDom.default.findDOMNode(this)}render(){const{axis,bounds,children,defaultPosition,defaultClassName,defaultClassNameDragging,defaultClassNameDragged,position,positionOffset,scale,...draggableCoreProps}=this.props;let style={},svgTransform=null;const draggable=!Boolean(position)||this.state.dragging,validPosition=position||defaultPosition,transformOpts={x:(0,_positionFns.canDragX)(this)&&draggable?this.state.x:validPosition.x,y:(0,_positionFns.canDragY)(this)&&draggable?this.state.y:validPosition.y};this.state.isElementSVG?svgTransform=(0,_domFns.createSVGTransform)(transformOpts,positionOffset):style=(0,_domFns.createCSSTransform)(transformOpts,positionOffset);const className=(0,_clsx.default)(children.props.className||"",defaultClassName,{[defaultClassNameDragging]:this.state.dragging,[defaultClassNameDragged]:this.state.dragged});return React.createElement(_DraggableCore.default,_extends({},draggableCoreProps,{onStart:this.onDragStart,onDrag:this.onDrag,onStop:this.onDragStop}),React.cloneElement(React.Children.only(children),{className,style:{...children.props.style,...style},transform:svgTransform}))}}exports.default=Draggable,_defineProperty(Draggable,"displayName","Draggable"),_defineProperty(Draggable,"propTypes",{..._DraggableCore.default.propTypes,axis:_propTypes.default.oneOf(["both","x","y","none"]),bounds:_propTypes.default.oneOfType([_propTypes.default.shape({left:_propTypes.default.number,right:_propTypes.default.number,top:_propTypes.default.number,bottom:_propTypes.default.number}),_propTypes.default.string,_propTypes.default.oneOf([!1])]),defaultClassName:_propTypes.default.string,defaultClassNameDragging:_propTypes.default.string,defaultClassNameDragged:_propTypes.default.string,defaultPosition:_propTypes.default.shape({x:_propTypes.default.number,y:_propTypes.default.number}),positionOffset:_propTypes.default.shape({x:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string]),y:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string])}),position:_propTypes.default.shape({x:_propTypes.default.number,y:_propTypes.default.number}),className:_shims.dontSetMe,style:_shims.dontSetMe,transform:_shims.dontSetMe}),_defineProperty(Draggable,"defaultProps",{..._DraggableCore.default.defaultProps,axis:"both",bounds:!1,defaultClassName:"react-draggable",defaultClassNameDragging:"react-draggable-dragging",defaultClassNameDragged:"react-draggable-dragged",defaultPosition:{x:0,y:0},scale:1})},"./node_modules/react-draggable/build/cjs/DraggableCore.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var React=function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(__webpack_require__("./node_modules/react/index.js")),_propTypes=_interopRequireDefault(__webpack_require__("./node_modules/react-draggable/node_modules/prop-types/index.js")),_reactDom=_interopRequireDefault(__webpack_require__("./node_modules/react-dom/index.js")),_domFns=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/domFns.js"),_positionFns=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/positionFns.js"),_shims=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/shims.js"),_log=_interopRequireDefault(__webpack_require__("./node_modules/react-draggable/build/cjs/utils/log.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}const eventsFor_touch={start:"touchstart",move:"touchmove",stop:"touchend"},eventsFor_mouse={start:"mousedown",move:"mousemove",stop:"mouseup"};let dragEventFor=eventsFor_mouse;class DraggableCore extends React.Component{constructor(){super(...arguments),_defineProperty(this,"dragging",!1),_defineProperty(this,"lastX",NaN),_defineProperty(this,"lastY",NaN),_defineProperty(this,"touchIdentifier",null),_defineProperty(this,"mounted",!1),_defineProperty(this,"handleDragStart",(e=>{if(this.props.onMouseDown(e),!this.props.allowAnyClick&&"number"==typeof e.button&&0!==e.button)return!1;const thisNode=this.findDOMNode();if(!thisNode||!thisNode.ownerDocument||!thisNode.ownerDocument.body)throw new Error("<DraggableCore> not mounted on DragStart!");const{ownerDocument}=thisNode;if(this.props.disabled||!(e.target instanceof ownerDocument.defaultView.Node)||this.props.handle&&!(0,_domFns.matchesSelectorAndParentsTo)(e.target,this.props.handle,thisNode)||this.props.cancel&&(0,_domFns.matchesSelectorAndParentsTo)(e.target,this.props.cancel,thisNode))return;"touchstart"===e.type&&e.preventDefault();const touchIdentifier=(0,_domFns.getTouchIdentifier)(e);this.touchIdentifier=touchIdentifier;const position=(0,_positionFns.getControlPosition)(e,touchIdentifier,this);if(null==position)return;const{x,y}=position,coreEvent=(0,_positionFns.createCoreData)(this,x,y);(0,_log.default)("DraggableCore: handleDragStart: %j",coreEvent),(0,_log.default)("calling",this.props.onStart);!1!==this.props.onStart(e,coreEvent)&&!1!==this.mounted&&(this.props.enableUserSelectHack&&(0,_domFns.addUserSelectStyles)(ownerDocument),this.dragging=!0,this.lastX=x,this.lastY=y,(0,_domFns.addEvent)(ownerDocument,dragEventFor.move,this.handleDrag),(0,_domFns.addEvent)(ownerDocument,dragEventFor.stop,this.handleDragStop))})),_defineProperty(this,"handleDrag",(e=>{const position=(0,_positionFns.getControlPosition)(e,this.touchIdentifier,this);if(null==position)return;let{x,y}=position;if(Array.isArray(this.props.grid)){let deltaX=x-this.lastX,deltaY=y-this.lastY;if([deltaX,deltaY]=(0,_positionFns.snapToGrid)(this.props.grid,deltaX,deltaY),!deltaX&&!deltaY)return;x=this.lastX+deltaX,y=this.lastY+deltaY}const coreEvent=(0,_positionFns.createCoreData)(this,x,y);(0,_log.default)("DraggableCore: handleDrag: %j",coreEvent);if(!1!==this.props.onDrag(e,coreEvent)&&!1!==this.mounted)this.lastX=x,this.lastY=y;else try{this.handleDragStop(new MouseEvent("mouseup"))}catch(err){const event=document.createEvent("MouseEvents");event.initMouseEvent("mouseup",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),this.handleDragStop(event)}})),_defineProperty(this,"handleDragStop",(e=>{if(!this.dragging)return;const position=(0,_positionFns.getControlPosition)(e,this.touchIdentifier,this);if(null==position)return;let{x,y}=position;if(Array.isArray(this.props.grid)){let deltaX=x-this.lastX||0,deltaY=y-this.lastY||0;[deltaX,deltaY]=(0,_positionFns.snapToGrid)(this.props.grid,deltaX,deltaY),x=this.lastX+deltaX,y=this.lastY+deltaY}const coreEvent=(0,_positionFns.createCoreData)(this,x,y);if(!1===this.props.onStop(e,coreEvent)||!1===this.mounted)return!1;const thisNode=this.findDOMNode();thisNode&&this.props.enableUserSelectHack&&(0,_domFns.removeUserSelectStyles)(thisNode.ownerDocument),(0,_log.default)("DraggableCore: handleDragStop: %j",coreEvent),this.dragging=!1,this.lastX=NaN,this.lastY=NaN,thisNode&&((0,_log.default)("DraggableCore: Removing handlers"),(0,_domFns.removeEvent)(thisNode.ownerDocument,dragEventFor.move,this.handleDrag),(0,_domFns.removeEvent)(thisNode.ownerDocument,dragEventFor.stop,this.handleDragStop))})),_defineProperty(this,"onMouseDown",(e=>(dragEventFor=eventsFor_mouse,this.handleDragStart(e)))),_defineProperty(this,"onMouseUp",(e=>(dragEventFor=eventsFor_mouse,this.handleDragStop(e)))),_defineProperty(this,"onTouchStart",(e=>(dragEventFor=eventsFor_touch,this.handleDragStart(e)))),_defineProperty(this,"onTouchEnd",(e=>(dragEventFor=eventsFor_touch,this.handleDragStop(e))))}componentDidMount(){this.mounted=!0;const thisNode=this.findDOMNode();thisNode&&(0,_domFns.addEvent)(thisNode,eventsFor_touch.start,this.onTouchStart,{passive:!1})}componentWillUnmount(){this.mounted=!1;const thisNode=this.findDOMNode();if(thisNode){const{ownerDocument}=thisNode;(0,_domFns.removeEvent)(ownerDocument,eventsFor_mouse.move,this.handleDrag),(0,_domFns.removeEvent)(ownerDocument,eventsFor_touch.move,this.handleDrag),(0,_domFns.removeEvent)(ownerDocument,eventsFor_mouse.stop,this.handleDragStop),(0,_domFns.removeEvent)(ownerDocument,eventsFor_touch.stop,this.handleDragStop),(0,_domFns.removeEvent)(thisNode,eventsFor_touch.start,this.onTouchStart,{passive:!1}),this.props.enableUserSelectHack&&(0,_domFns.removeUserSelectStyles)(ownerDocument)}}findDOMNode(){var _this$props,_this$props2;return null!==(_this$props=this.props)&&void 0!==_this$props&&_this$props.nodeRef?null===(_this$props2=this.props)||void 0===_this$props2||null===(_this$props2=_this$props2.nodeRef)||void 0===_this$props2?void 0:_this$props2.current:_reactDom.default.findDOMNode(this)}render(){return React.cloneElement(React.Children.only(this.props.children),{onMouseDown:this.onMouseDown,onMouseUp:this.onMouseUp,onTouchEnd:this.onTouchEnd})}}exports.default=DraggableCore,_defineProperty(DraggableCore,"displayName","DraggableCore"),_defineProperty(DraggableCore,"propTypes",{allowAnyClick:_propTypes.default.bool,children:_propTypes.default.node.isRequired,disabled:_propTypes.default.bool,enableUserSelectHack:_propTypes.default.bool,offsetParent:function(props,propName){if(props[propName]&&1!==props[propName].nodeType)throw new Error("Draggable's offsetParent must be a DOM Node.")},grid:_propTypes.default.arrayOf(_propTypes.default.number),handle:_propTypes.default.string,cancel:_propTypes.default.string,nodeRef:_propTypes.default.object,onStart:_propTypes.default.func,onDrag:_propTypes.default.func,onStop:_propTypes.default.func,onMouseDown:_propTypes.default.func,scale:_propTypes.default.number,className:_shims.dontSetMe,style:_shims.dontSetMe,transform:_shims.dontSetMe}),_defineProperty(DraggableCore,"defaultProps",{allowAnyClick:!1,disabled:!1,enableUserSelectHack:!0,onStart:function(){},onDrag:function(){},onStop:function(){},onMouseDown:function(){},scale:1})},"./node_modules/react-draggable/build/cjs/cjs.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";const{default:Draggable,DraggableCore}=__webpack_require__("./node_modules/react-draggable/build/cjs/Draggable.js");module.exports=Draggable,module.exports.default=Draggable,module.exports.DraggableCore=DraggableCore},"./node_modules/react-draggable/build/cjs/utils/domFns.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.addClassName=addClassName,exports.addEvent=function addEvent(el,event,handler,inputOptions){if(!el)return;const options={capture:!0,...inputOptions};el.addEventListener?el.addEventListener(event,handler,options):el.attachEvent?el.attachEvent("on"+event,handler):el["on"+event]=handler},exports.addUserSelectStyles=function addUserSelectStyles(doc){if(!doc)return;let styleEl=doc.getElementById("react-draggable-style-el");styleEl||(styleEl=doc.createElement("style"),styleEl.type="text/css",styleEl.id="react-draggable-style-el",styleEl.innerHTML=".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n",styleEl.innerHTML+=".react-draggable-transparent-selection *::selection {all: inherit;}\n",doc.getElementsByTagName("head")[0].appendChild(styleEl));doc.body&&addClassName(doc.body,"react-draggable-transparent-selection")},exports.createCSSTransform=function createCSSTransform(controlPos,positionOffset){const translation=getTranslation(controlPos,positionOffset,"px");return{[(0,_getPrefix.browserPrefixToKey)("transform",_getPrefix.default)]:translation}},exports.createSVGTransform=function createSVGTransform(controlPos,positionOffset){return getTranslation(controlPos,positionOffset,"")},exports.getTouch=function getTouch(e,identifier){return e.targetTouches&&(0,_shims.findInArray)(e.targetTouches,(t=>identifier===t.identifier))||e.changedTouches&&(0,_shims.findInArray)(e.changedTouches,(t=>identifier===t.identifier))},exports.getTouchIdentifier=function getTouchIdentifier(e){if(e.targetTouches&&e.targetTouches[0])return e.targetTouches[0].identifier;if(e.changedTouches&&e.changedTouches[0])return e.changedTouches[0].identifier},exports.getTranslation=getTranslation,exports.innerHeight=function innerHeight(node){let height=node.clientHeight;const computedStyle=node.ownerDocument.defaultView.getComputedStyle(node);return height-=(0,_shims.int)(computedStyle.paddingTop),height-=(0,_shims.int)(computedStyle.paddingBottom),height},exports.innerWidth=function innerWidth(node){let width=node.clientWidth;const computedStyle=node.ownerDocument.defaultView.getComputedStyle(node);return width-=(0,_shims.int)(computedStyle.paddingLeft),width-=(0,_shims.int)(computedStyle.paddingRight),width},exports.matchesSelector=matchesSelector,exports.matchesSelectorAndParentsTo=function matchesSelectorAndParentsTo(el,selector,baseNode){let node=el;do{if(matchesSelector(node,selector))return!0;if(node===baseNode)return!1;node=node.parentNode}while(node);return!1},exports.offsetXYFromParent=function offsetXYFromParent(evt,offsetParent,scale){const offsetParentRect=offsetParent===offsetParent.ownerDocument.body?{left:0,top:0}:offsetParent.getBoundingClientRect(),x=(evt.clientX+offsetParent.scrollLeft-offsetParentRect.left)/scale,y=(evt.clientY+offsetParent.scrollTop-offsetParentRect.top)/scale;return{x,y}},exports.outerHeight=function outerHeight(node){let height=node.clientHeight;const computedStyle=node.ownerDocument.defaultView.getComputedStyle(node);return height+=(0,_shims.int)(computedStyle.borderTopWidth),height+=(0,_shims.int)(computedStyle.borderBottomWidth),height},exports.outerWidth=function outerWidth(node){let width=node.clientWidth;const computedStyle=node.ownerDocument.defaultView.getComputedStyle(node);return width+=(0,_shims.int)(computedStyle.borderLeftWidth),width+=(0,_shims.int)(computedStyle.borderRightWidth),width},exports.removeClassName=removeClassName,exports.removeEvent=function removeEvent(el,event,handler,inputOptions){if(!el)return;const options={capture:!0,...inputOptions};el.removeEventListener?el.removeEventListener(event,handler,options):el.detachEvent?el.detachEvent("on"+event,handler):el["on"+event]=null},exports.removeUserSelectStyles=function removeUserSelectStyles(doc){if(!doc)return;try{if(doc.body&&removeClassName(doc.body,"react-draggable-transparent-selection"),doc.selection)doc.selection.empty();else{const selection=(doc.defaultView||window).getSelection();selection&&"Caret"!==selection.type&&selection.removeAllRanges()}}catch(e){}};var _shims=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/shims.js"),_getPrefix=function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(__webpack_require__("./node_modules/react-draggable/build/cjs/utils/getPrefix.js"));function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}let matchesSelectorFunc="";function matchesSelector(el,selector){return matchesSelectorFunc||(matchesSelectorFunc=(0,_shims.findInArray)(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],(function(method){return(0,_shims.isFunction)(el[method])}))),!!(0,_shims.isFunction)(el[matchesSelectorFunc])&&el[matchesSelectorFunc](selector)}function getTranslation(_ref,positionOffset,unitSuffix){let{x,y}=_ref,translation="translate(".concat(x).concat(unitSuffix,",").concat(y).concat(unitSuffix,")");if(positionOffset){const defaultX="".concat("string"==typeof positionOffset.x?positionOffset.x:positionOffset.x+unitSuffix),defaultY="".concat("string"==typeof positionOffset.y?positionOffset.y:positionOffset.y+unitSuffix);translation="translate(".concat(defaultX,", ").concat(defaultY,")")+translation}return translation}function addClassName(el,className){el.classList?el.classList.add(className):el.className.match(new RegExp("(?:^|\\s)".concat(className,"(?!\\S)")))||(el.className+=" ".concat(className))}function removeClassName(el,className){el.classList?el.classList.remove(className):el.className=el.className.replace(new RegExp("(?:^|\\s)".concat(className,"(?!\\S)"),"g"),"")}},"./node_modules/react-draggable/build/cjs/utils/getPrefix.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.browserPrefixToKey=browserPrefixToKey,exports.browserPrefixToStyle=function browserPrefixToStyle(prop,prefix){return prefix?"-".concat(prefix.toLowerCase(),"-").concat(prop):prop},exports.default=void 0,exports.getPrefix=getPrefix;const prefixes=["Moz","Webkit","O","ms"];function getPrefix(){var _window$document;let prop=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";if("undefined"==typeof window)return"";const style=null===(_window$document=window.document)||void 0===_window$document||null===(_window$document=_window$document.documentElement)||void 0===_window$document?void 0:_window$document.style;if(!style)return"";if(prop in style)return"";for(let i=0;i<prefixes.length;i++)if(browserPrefixToKey(prop,prefixes[i])in style)return prefixes[i];return""}function browserPrefixToKey(prop,prefix){return prefix?"".concat(prefix).concat(function kebabToTitleCase(str){let out="",shouldCapitalize=!0;for(let i=0;i<str.length;i++)shouldCapitalize?(out+=str[i].toUpperCase(),shouldCapitalize=!1):"-"===str[i]?shouldCapitalize=!0:out+=str[i];return out}(prop)):prop}exports.default=getPrefix()},"./node_modules/react-draggable/build/cjs/utils/log.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function log(){0}},"./node_modules/react-draggable/build/cjs/utils/positionFns.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.canDragX=function canDragX(draggable){return"both"===draggable.props.axis||"x"===draggable.props.axis},exports.canDragY=function canDragY(draggable){return"both"===draggable.props.axis||"y"===draggable.props.axis},exports.createCoreData=function createCoreData(draggable,x,y){const isStart=!(0,_shims.isNum)(draggable.lastX),node=findDOMNode(draggable);return isStart?{node,deltaX:0,deltaY:0,lastX:x,lastY:y,x,y}:{node,deltaX:x-draggable.lastX,deltaY:y-draggable.lastY,lastX:draggable.lastX,lastY:draggable.lastY,x,y}},exports.createDraggableData=function createDraggableData(draggable,coreData){const scale=draggable.props.scale;return{node:coreData.node,x:draggable.state.x+coreData.deltaX/scale,y:draggable.state.y+coreData.deltaY/scale,deltaX:coreData.deltaX/scale,deltaY:coreData.deltaY/scale,lastX:draggable.state.x,lastY:draggable.state.y}},exports.getBoundPosition=function getBoundPosition(draggable,x,y){if(!draggable.props.bounds)return[x,y];let{bounds}=draggable.props;bounds="string"==typeof bounds?bounds:function cloneBounds(bounds){return{left:bounds.left,top:bounds.top,right:bounds.right,bottom:bounds.bottom}}(bounds);const node=findDOMNode(draggable);if("string"==typeof bounds){const{ownerDocument}=node,ownerWindow=ownerDocument.defaultView;let boundNode;if(boundNode="parent"===bounds?node.parentNode:ownerDocument.querySelector(bounds),!(boundNode instanceof ownerWindow.HTMLElement))throw new Error('Bounds selector "'+bounds+'" could not find an element.');const boundNodeEl=boundNode,nodeStyle=ownerWindow.getComputedStyle(node),boundNodeStyle=ownerWindow.getComputedStyle(boundNodeEl);bounds={left:-node.offsetLeft+(0,_shims.int)(boundNodeStyle.paddingLeft)+(0,_shims.int)(nodeStyle.marginLeft),top:-node.offsetTop+(0,_shims.int)(boundNodeStyle.paddingTop)+(0,_shims.int)(nodeStyle.marginTop),right:(0,_domFns.innerWidth)(boundNodeEl)-(0,_domFns.outerWidth)(node)-node.offsetLeft+(0,_shims.int)(boundNodeStyle.paddingRight)-(0,_shims.int)(nodeStyle.marginRight),bottom:(0,_domFns.innerHeight)(boundNodeEl)-(0,_domFns.outerHeight)(node)-node.offsetTop+(0,_shims.int)(boundNodeStyle.paddingBottom)-(0,_shims.int)(nodeStyle.marginBottom)}}(0,_shims.isNum)(bounds.right)&&(x=Math.min(x,bounds.right));(0,_shims.isNum)(bounds.bottom)&&(y=Math.min(y,bounds.bottom));(0,_shims.isNum)(bounds.left)&&(x=Math.max(x,bounds.left));(0,_shims.isNum)(bounds.top)&&(y=Math.max(y,bounds.top));return[x,y]},exports.getControlPosition=function getControlPosition(e,touchIdentifier,draggableCore){const touchObj="number"==typeof touchIdentifier?(0,_domFns.getTouch)(e,touchIdentifier):null;if("number"==typeof touchIdentifier&&!touchObj)return null;const node=findDOMNode(draggableCore),offsetParent=draggableCore.props.offsetParent||node.offsetParent||node.ownerDocument.body;return(0,_domFns.offsetXYFromParent)(touchObj||e,offsetParent,draggableCore.props.scale)},exports.snapToGrid=function snapToGrid(grid,pendingX,pendingY){const x=Math.round(pendingX/grid[0])*grid[0],y=Math.round(pendingY/grid[1])*grid[1];return[x,y]};var _shims=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/shims.js"),_domFns=__webpack_require__("./node_modules/react-draggable/build/cjs/utils/domFns.js");function findDOMNode(draggable){const node=draggable.findDOMNode();if(!node)throw new Error("<DraggableCore>: Unmounted during event!");return node}},"./node_modules/react-draggable/build/cjs/utils/shims.js":(__unused_webpack_module,exports)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.dontSetMe=function dontSetMe(props,propName,componentName){if(props[propName])return new Error("Invalid prop ".concat(propName," passed to ").concat(componentName," - do not set this, set it on the child."))},exports.findInArray=function findInArray(array,callback){for(let i=0,length=array.length;i<length;i++)if(callback.apply(callback,[array[i],i,array]))return array[i]},exports.int=function int(a){return parseInt(a,10)},exports.isFunction=function isFunction(func){return"function"==typeof func||"[object Function]"===Object.prototype.toString.call(func)},exports.isNum=function isNum(num){return"number"==typeof num&&!isNaN(num)}},"./node_modules/react-draggable/node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/react-draggable/node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}function emptyFunctionWithReset(){}emptyFunctionWithReset.resetWarningCache=emptyFunction,module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bigint:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,elementType:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim,checkPropTypes:emptyFunctionWithReset,resetWarningCache:emptyFunction};return ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/react-draggable/node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react-draggable/node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/react-draggable/node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,