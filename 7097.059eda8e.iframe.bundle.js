(self.webpackChunkblockly_mooc=self.webpackChunkblockly_mooc||[]).push([[7097],{"./node_modules/create-react-class/factory.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var _assign=__webpack_require__("./node_modules/object-assign/index.js"),emptyObject=__webpack_require__("./node_modules/fbjs/lib/emptyObject.js"),_invariant=__webpack_require__("./node_modules/fbjs/lib/invariant.js");module.exports=function factory(ReactComponent,isValidElement,ReactNoopUpdateQueue){var injectedMixins=[],ReactClassInterface={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",UNSAFE_componentWillMount:"DEFINE_MANY",UNSAFE_componentWillReceiveProps:"DEFINE_MANY",UNSAFE_componentWillUpdate:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},ReactClassStaticInterface={getDerivedStateFromProps:"DEFINE_MANY_MERGED"},RESERVED_SPEC_KEYS={displayName:function(Constructor,displayName){Constructor.displayName=displayName},mixins:function(Constructor,mixins){if(mixins)for(var i=0;i<mixins.length;i++)mixSpecIntoComponent(Constructor,mixins[i])},childContextTypes:function(Constructor,childContextTypes){Constructor.childContextTypes=_assign({},Constructor.childContextTypes,childContextTypes)},contextTypes:function(Constructor,contextTypes){Constructor.contextTypes=_assign({},Constructor.contextTypes,contextTypes)},getDefaultProps:function(Constructor,getDefaultProps){Constructor.getDefaultProps?Constructor.getDefaultProps=createMergedResultFunction(Constructor.getDefaultProps,getDefaultProps):Constructor.getDefaultProps=getDefaultProps},propTypes:function(Constructor,propTypes){Constructor.propTypes=_assign({},Constructor.propTypes,propTypes)},statics:function(Constructor,statics){!function mixStaticSpecIntoComponent(Constructor,statics){if(!statics)return;for(var name in statics){var property=statics[name];if(statics.hasOwnProperty(name)){if(_invariant(!(name in RESERVED_SPEC_KEYS),'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',name),name in Constructor){var specPolicy=ReactClassStaticInterface.hasOwnProperty(name)?ReactClassStaticInterface[name]:null;return _invariant("DEFINE_MANY_MERGED"===specPolicy,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",name),void(Constructor[name]=createMergedResultFunction(Constructor[name],property))}Constructor[name]=property}}}(Constructor,statics)},autobind:function(){}};function validateMethodOverride(isAlreadyDefined,name){var specPolicy=ReactClassInterface.hasOwnProperty(name)?ReactClassInterface[name]:null;ReactClassMixin.hasOwnProperty(name)&&_invariant("OVERRIDE_BASE"===specPolicy,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",name),isAlreadyDefined&&_invariant("DEFINE_MANY"===specPolicy||"DEFINE_MANY_MERGED"===specPolicy,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",name)}function mixSpecIntoComponent(Constructor,spec){if(spec){_invariant("function"!=typeof spec,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),_invariant(!isValidElement(spec),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var proto=Constructor.prototype,autoBindPairs=proto.__reactAutoBindPairs;for(var name in spec.hasOwnProperty("mixins")&&RESERVED_SPEC_KEYS.mixins(Constructor,spec.mixins),spec)if(spec.hasOwnProperty(name)&&"mixins"!==name){var property=spec[name],isAlreadyDefined=proto.hasOwnProperty(name);if(validateMethodOverride(isAlreadyDefined,name),RESERVED_SPEC_KEYS.hasOwnProperty(name))RESERVED_SPEC_KEYS[name](Constructor,property);else{var isReactClassMethod=ReactClassInterface.hasOwnProperty(name);if("function"==typeof property&&!isReactClassMethod&&!isAlreadyDefined&&!1!==spec.autobind)autoBindPairs.push(name,property),proto[name]=property;else if(isAlreadyDefined){var specPolicy=ReactClassInterface[name];_invariant(isReactClassMethod&&("DEFINE_MANY_MERGED"===specPolicy||"DEFINE_MANY"===specPolicy),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",specPolicy,name),"DEFINE_MANY_MERGED"===specPolicy?proto[name]=createMergedResultFunction(proto[name],property):"DEFINE_MANY"===specPolicy&&(proto[name]=createChainedFunction(proto[name],property))}else proto[name]=property}}}else;}function mergeIntoWithNoDuplicateKeys(one,two){for(var key in _invariant(one&&two&&"object"==typeof one&&"object"==typeof two,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."),two)two.hasOwnProperty(key)&&(_invariant(void 0===one[key],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",key),one[key]=two[key]);return one}function createMergedResultFunction(one,two){return function mergedResult(){var a=one.apply(this,arguments),b=two.apply(this,arguments);if(null==a)return b;if(null==b)return a;var c={};return mergeIntoWithNoDuplicateKeys(c,a),mergeIntoWithNoDuplicateKeys(c,b),c}}function createChainedFunction(one,two){return function chainedFunction(){one.apply(this,arguments),two.apply(this,arguments)}}function bindAutoBindMethod(component,method){return method.bind(component)}var IsMountedPreMixin={componentDidMount:function(){this.__isMounted=!0}},IsMountedPostMixin={componentWillUnmount:function(){this.__isMounted=!1}},ReactClassMixin={replaceState:function(newState,callback){this.updater.enqueueReplaceState(this,newState,callback)},isMounted:function(){return!!this.__isMounted}},ReactClassComponent=function(){};return _assign(ReactClassComponent.prototype,ReactComponent.prototype,ReactClassMixin),function createClass(spec){var Constructor=function(props,context,updater){this.__reactAutoBindPairs.length&&function bindAutoBindMethods(component){for(var pairs=component.__reactAutoBindPairs,i=0;i<pairs.length;i+=2){var autoBindKey=pairs[i],method=pairs[i+1];component[autoBindKey]=bindAutoBindMethod(component,method)}}(this),this.props=props,this.context=context,this.refs=emptyObject,this.updater=updater||ReactNoopUpdateQueue,this.state=null;var initialState=this.getInitialState?this.getInitialState():null;_invariant("object"==typeof initialState&&!Array.isArray(initialState),"%s.getInitialState(): must return an object or null",Constructor.displayName||"ReactCompositeComponent"),this.state=initialState};for(var methodName in Constructor.prototype=new ReactClassComponent,Constructor.prototype.constructor=Constructor,Constructor.prototype.__reactAutoBindPairs=[],injectedMixins.forEach(mixSpecIntoComponent.bind(null,Constructor)),mixSpecIntoComponent(Constructor,IsMountedPreMixin),mixSpecIntoComponent(Constructor,spec),mixSpecIntoComponent(Constructor,IsMountedPostMixin),Constructor.getDefaultProps&&(Constructor.defaultProps=Constructor.getDefaultProps()),_invariant(Constructor.prototype.render,"createClass(...): Class specification must implement a `render` method."),ReactClassInterface)Constructor.prototype[methodName]||(Constructor.prototype[methodName]=null);return Constructor}}},"./node_modules/create-react-class/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var React=__webpack_require__("./node_modules/react/index.js"),factory=__webpack_require__("./node_modules/create-react-class/factory.js");if(void 0===React)throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");var ReactNoopUpdateQueue=(new React.Component).updater;module.exports=factory(React.Component,React.isValidElement,ReactNoopUpdateQueue)},"./node_modules/fbjs/lib/emptyObject.js":module=>{"use strict";module.exports={}},"./node_modules/fbjs/lib/invariant.js":module=>{"use strict";module.exports=function invariant(condition,format,a,b,c,d,e,f){if(!condition){var error;if(void 0===format)error=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var args=[a,b,c,d,e,f],argIndex=0;(error=new Error(format.replace(/%s/g,(function(){return args[argIndex++]})))).name="Invariant Violation"}throw error.framesToPop=1,error}}},"./node_modules/react-onclickoutside/index.js":function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,registeredComponents,handlers,DEFAULT_EVENTS,isNodeFound,generateOutsideCheck;registeredComponents=[],handlers=[],DEFAULT_EVENTS=["mousedown","touchstart"],isNodeFound=function(current,componentNode,ignoreClass){return current===componentNode||(current.correspondingElement?current.correspondingElement.classList.contains(ignoreClass):current.classList.contains(ignoreClass))},generateOutsideCheck=function(componentNode,componentInstance,eventHandler,ignoreClass,excludeScrollbar,preventDefault,stopPropagation){return function(evt){preventDefault&&evt.preventDefault(),stopPropagation&&evt.stopPropagation();var current=evt.target;excludeScrollbar&&function(evt){return document.documentElement.clientWidth<=evt.clientX||document.documentElement.clientHeight<=evt.clientY}(evt)||function(current,componentNode,ignoreClass){if(current===componentNode)return!0;for(;current.parentNode;){if(isNodeFound(current,componentNode,ignoreClass))return!0;current=current.parentNode}return current}(current,componentNode,ignoreClass)!==document||eventHandler(evt)}},function setupBinding(root,factory){__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__("./node_modules/react/index.js"),__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/create-react-class/index.js")],__WEBPACK_AMD_DEFINE_RESULT__=function(React,ReactDom,createReactClass){return createReactClass||(createReactClass=React.createClass),factory(root,React,ReactDom,createReactClass)}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}(this,(function setupHOC(root,React,ReactDOM,createReactClass){return function onClickOutsideHOC(Component,config){var wrapComponentWithOnClickOutsideHandling=createReactClass({statics:{getClass:function(){return Component.getClass?Component.getClass():Component}},getInstance:function(){return Component.prototype.isReactComponent?this.refs.instance:this},__outsideClickHandler:function(){},getDefaultProps:function(){return{excludeScrollbar:config&&config.excludeScrollbar}},componentDidMount:function(){if("undefined"!=typeof document&&document.createElement){var clickOutsideHandler,instance=this.getInstance();if(config&&"function"==typeof config.handleClickOutside){if("function"!=typeof(clickOutsideHandler=config.handleClickOutside(instance)))throw new Error("Component lacks a function for processing outside click events specified by the handleClickOutside config option.")}else if("function"==typeof instance.handleClickOutside)clickOutsideHandler=React.Component.prototype.isPrototypeOf(instance)?instance.handleClickOutside.bind(instance):instance.handleClickOutside;else{if("function"!=typeof instance.props.handleClickOutside)throw new Error("Component lacks a handleClickOutside(event) function for processing outside click events.");clickOutsideHandler=instance.props.handleClickOutside}var componentNode=ReactDOM.findDOMNode(instance);null===componentNode&&(console.warn("Antipattern warning: there was no DOM node associated with the component that is being wrapped by outsideClick."),console.warn(["This is typically caused by having a component that starts life with a render function that","returns `null` (due to a state or props value), so that the component 'exist' in the React","chain of components, but not in the DOM.\n\nInstead, you need to refactor your code so that the","decision of whether or not to show your component is handled by the parent, in their render()","function.\n\nIn code, rather than:\n\n  A{render(){return check? <.../> : null;}\n  B{render(){<A check=... />}\n\nmake sure that you","use:\n\n  A{render(){return <.../>}\n  B{render(){return <...>{ check ? <A/> : null }<...>}}\n\nThat is:","the parent is always responsible for deciding whether or not to render any of its children.","It is not the child's responsibility to decide whether a render instruction from above should","get ignored or not by returning `null`.\n\nWhen any component gets its render() function called,","that is the signal that it should be rendering its part of the UI. It may in turn decide not to","render all of *its* children, but it should never return `null` for itself. It is not responsible","for that decision."].join(" ")));var fn=this.__outsideClickHandler=generateOutsideCheck(componentNode,0,clickOutsideHandler,this.props.outsideClickIgnoreClass||"ignore-react-onclickoutside",this.props.excludeScrollbar,this.props.preventDefault||!1,this.props.stopPropagation||!1),pos=registeredComponents.length;registeredComponents.push(this),handlers[pos]=fn,this.props.disableOnClickOutside||this.enableOnClickOutside()}},componentWillReceiveProps:function(nextProps){this.props.disableOnClickOutside&&!nextProps.disableOnClickOutside?this.enableOnClickOutside():!this.props.disableOnClickOutside&&nextProps.disableOnClickOutside&&this.disableOnClickOutside()},componentWillUnmount:function(){this.disableOnClickOutside(),this.__outsideClickHandler=!1;var pos=registeredComponents.indexOf(this);pos>-1&&(handlers[pos]&&handlers.splice(pos,1),registeredComponents.splice(pos,1))},enableOnClickOutside:function(){var fn=this.__outsideClickHandler;if("undefined"!=typeof document){var events=this.props.eventTypes||DEFAULT_EVENTS;events.forEach||(events=[events]),events.forEach((function(eventName){document.addEventListener(eventName,fn)}))}},disableOnClickOutside:function(){var fn=this.__outsideClickHandler;if("undefined"!=typeof document){var events=this.props.eventTypes||DEFAULT_EVENTS;events.forEach||(events=[events]),events.forEach((function(eventName){document.removeEventListener(eventName,fn)}))}},render:function(){var passedProps=this.props,props={};return Object.keys(this.props).forEach((function(key){"excludeScrollbar"!==key&&(props[key]=passedProps[key])})),Component.prototype.isReactComponent&&(props.ref="instance"),props.disableOnClickOutside=this.disableOnClickOutside,props.enableOnClickOutside=this.enableOnClickOutside,React.createElement(Component,props)}});return function bindWrappedComponentName(c,wrapper){var componentName=c.displayName||c.name||"Component";wrapper.displayName="OnClickOutside("+componentName+")"}(Component,wrapComponentWithOnClickOutsideHandling),wrapComponentWithOnClickOutsideHandling}}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,